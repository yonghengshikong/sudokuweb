System.register("chunks:///_virtual/AItemRenderer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "f4f6fjvpG5IFaohhOQRvPRQ", "AItemRenderer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 单项渲染基类 T数据结构
       * @author slf
       *  */
      var AItemRenderer = exports('AItemRenderer', (_dec = ccclass('ItemRenderer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AItemRenderer, _Component);
        function AItemRenderer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**调用列表 回调函数  回调作用域*/
          _this.callback = void 0;
          _this.cbThis = void 0;
          _this.nowDataIdx = 0;
          _this._data = void 0;
          return _this;
        }
        var _proto = AItemRenderer.prototype;
        _proto.refreshData = function refreshData() {
          this.dataChanged();
        }

        /**数据发生变化子类重写 */;
        /**注册回调 */
        _proto.registerCallback = function registerCallback(cb, cbT) {
          this.callback = cb;
          this.cbThis = cbT;
        }
        /**派发回调 */;
        _proto.emitCallback = function emitCallback() {
          this.callback && this.callback.call(this.cbThis, this._data);
        };
        _createClass(AItemRenderer, [{
          key: "data",
          get: function get() {
            return this._data;
          },
          set: function set(value) {
            this._data = value;
            this.dataChanged();
          }
        }]);
        return AItemRenderer;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Ambilight.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCInteger, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "73c69GH9M9F2Ilsm0fvjTCX", "Ambilight", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Ambilight = exports('Ambilight', (_dec = ccclass('Ambilight'), _dec2 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Ambilight, _Component);
        function Ambilight() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_max", _descriptor, _assertThisInitialized(_this));
          _this._start = 0;
          _this._material = void 0;
          return _this;
        }
        var _proto = Ambilight.prototype;
        _proto.update = function update(dt) {
          this._material = this.node.getComponent(Sprite).getMaterial(0);
          if (this.node.active && this._material) {
            this._setShaderTime(dt);
          }
        };
        _proto._setShaderTime = function _setShaderTime(dt) {
          var start = this._start;
          if (start > this.max) start = 0;
          start += 0.015;
          this._material.setProperty('speed', start);
          this._start = start;
        };
        _createClass(Ambilight, [{
          key: "max",
          get: function get() {
            return this._max;
          },
          set: function set(value) {
            this._max = value;
          }
        }]);
        return Ambilight;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_max", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "max", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "max"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, AnimatorBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      AnimatorBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "64571Qy/TlCEZI/28RxIG+E", "AnimatorAnimation", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent,
        disallowMultiple = _decorator.disallowMultiple,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 
       * Cocos Animation状态机组件
       */
      var AnimatorAnimation = exports('default', (_dec = requireComponent(Animation), _dec2 = menu('OopsFramework/Animator/AnimatorAnimation （动画状态机）'), _dec3 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565'), ccclass(_class = disallowMultiple(_class = _dec(_class = _dec2(_class = _dec3(_class = /*#__PURE__*/function (_AnimatorBase) {
        _inheritsLoose(AnimatorAnimation, _AnimatorBase);
        function AnimatorAnimation() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AnimatorBase.call.apply(_AnimatorBase, [this].concat(args)) || this;
          /** Animation组件 */
          _this._animation = null;
          /** 当前的动画实例 */
          _this._animState = null;
          /** 记录初始的wrapmode */
          _this._wrapModeMap = new Map();
          return _this;
        }
        var _proto = AnimatorAnimation.prototype;
        _proto.start = function start() {
          if (!this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this._animation = this.getComponent(Animation);
          this._animation.on(Animation.EventType.FINISHED, this.onAnimFinished, this);
          this._animation.on(Animation.EventType.LASTFRAME, this.onAnimFinished, this);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 手动初始化状态机，可传入0-3个参数，类型如下
         * - onStateChangeCall 状态切换时的回调
         * - stateLogicMap 各个状态逻辑控制
         * - animationPlayer 自定义动画控制
         * @override
         */;
        _proto.onInit = function onInit() {
          if (this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this.initArgs.apply(this, arguments);
          this._animation = this.getComponent(Animation);
          this._animation.on(Animation.EventType.FINISHED, this.onAnimFinished, this);
          this._animation.on(Animation.EventType.LASTFRAME, this.onAnimFinished, this);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 播放动画
         * @override
         * @param animName 动画名
         * @param loop 是否循环播放
         */;
        _proto.playAnimation = function playAnimation(animName, loop) {
          if (!animName) {
            return;
          }
          this._animation.play(animName);
          this._animState = this._animation.getState(animName);
          if (!this._animState) {
            return;
          }
          if (!this._wrapModeMap.has(this._animState)) {
            this._wrapModeMap.set(this._animState, this._animState.wrapMode);
          }
          this._animState.wrapMode = loop ? 2 : this._wrapModeMap.get(this._animState);
        }

        /**
         * 缩放动画播放速率
         * @override
         * @param scale 缩放倍率
         */;
        _proto.scaleTime = function scaleTime(scale) {
          if (this._animState) {
            this._animState.speed = scale;
          }
        };
        return AnimatorAnimation;
      }(AnimatorBase)) || _class) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorController.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, JsonAsset, Component, AnimatorController;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Component = module.Component;
    }, function (module) {
      AnimatorController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "7ff14NOug1NAIB1XgQlC9Gc", "AnimatorBase", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executionOrder = _decorator.executionOrder,
        menu = _decorator.menu;

      /**
       * 自定义控制动画播放的接口
       */
      /**
       * 状态机组件基类 优先执行生命周期
       */
      var AnimatorBase = exports('default', (_dec = executionOrder(-1000), _dec2 = menu('animator/AnimatorBase'), _dec3 = property({
        type: JsonAsset,
        tooltip: '状态机json文件'
      }), _dec4 = property({
        tooltip: '是否在start中自动启动状态机'
      }), _dec5 = property({
        tooltip: '是否在update中自动触发状态机逻辑更新'
      }), ccclass(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimatorBase, _Component);
        function AnimatorBase() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** ---------- 后续扩展代码 结束 ---------- */
          _initializerDefineProperty(_this, "AssetRawUrl", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "PlayOnStart", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "AutoUpdate", _descriptor3, _assertThisInitialized(_this));
          /** 是否初始化 */
          _this._hasInit = false;
          /** 状态机控制 */
          _this._ac = null;
          /** 各个状态逻辑控制，key为状态名 */
          _this._stateLogicMap = null;
          /** 状态切换时的回调 */
          _this._onStateChangeCall = null;
          /** 自定义的动画播放控制器 */
          _this._animationPlayer = null;
          return _this;
        }
        var _proto = AnimatorBase.prototype;
        /** ---------- 后续扩展代码 开始 ---------- */
        /** 三维骨骼动画动画帧自定义事件 */
        _proto.onFrameEvent = function onFrameEvent(param) {
          var _this$_animationPlaye;
          (_this$_animationPlaye = this._animationPlayer) == null || _this$_animationPlaye.onFrameEventCallback(param, this);
        };
        /** 获取指定状态 */
        _proto.getState = function getState(name) {
          return this._ac.states.get(name);
        }

        /**
         * 手动初始化状态机，可传入0-3个参数，类型如下
         * - onStateChangeCall 状态切换时的回调
         * - stateLogicMap 各个状态逻辑控制
         * - animationPlayer 自定义动画控制
         * @virtual
         */;
        _proto.onInit = function onInit() {}

        /**
         * 处理初始化参数
         */;
        _proto.initArgs = function initArgs() {
          var _this2 = this;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          args.forEach(function (arg) {
            if (!arg) {
              return;
            }
            if (typeof arg === 'function') {
              _this2._onStateChangeCall = arg;
            } else if (typeof arg === 'object') {
              if (arg instanceof Map) {
                _this2._stateLogicMap = arg;
              } else {
                _this2._animationPlayer = arg;
              }
            }
          });
        };
        _proto.updateAnimator = function updateAnimator() {
          // 混合当前动画播放速度
          var playSpeed = this._ac.curState.speed;
          if (this._ac.curState.multi) {
            var _this$_ac$params$getN;
            playSpeed *= (_this$_ac$params$getN = this._ac.params.getNumber(this._ac.curState.multi)) != null ? _this$_ac$params$getN : 1;
          }
          this.scaleTime(playSpeed);

          // 更新动画状态逻辑
          if (this._stateLogicMap) {
            var curLogic = this._stateLogicMap.get(this._ac.curState.name);
            curLogic && curLogic.onUpdate();
          }

          // 更新状态机逻辑
          this._ac.updateAnimator();
        };
        _proto.update = function update() {
          if (this._hasInit && this.AutoUpdate) {
            this.updateAnimator();
          }
        }

        /**
         * 手动调用更新
         */;
        _proto.manualUpdate = function manualUpdate() {
          if (this._hasInit && !this.AutoUpdate) {
            this.updateAnimator();
          }
        }

        /**
         * 解析状态机json文件
         */;
        _proto.initJson = function initJson(json) {
          this._ac = new AnimatorController(this, json);
        }

        /**
         * 动画结束的回调
         */;
        _proto.onAnimFinished = function onAnimFinished() {
          var _this$_animationPlaye2;
          this._ac.onAnimationComplete();
          (_this$_animationPlaye2 = this._animationPlayer) == null || _this$_animationPlaye2.onFinishedCallback(this);
        }

        /**
         * 播放动画
         * @virtual
         * @param animName 动画名
         * @param loop 是否循环播放
         */;
        _proto.playAnimation = function playAnimation(animName, loop) {}

        /**
         * 缩放动画播放速率
         * @virtual
         * @param scale 缩放倍率
         */;
        _proto.scaleTime = function scaleTime(scale) {}

        /** 
         * 状态切换时的逻辑（状态机内部方法，不能由外部直接调用）
         */;
        _proto.onStateChange = function onStateChange(fromState, toState) {
          this.playAnimation(toState.motion, toState.loop);
          var fromStateName = fromState ? fromState.name : '';
          if (this._stateLogicMap) {
            var fromLogic = this._stateLogicMap.get(fromStateName);
            fromLogic && fromLogic.onExit();
            var toLogic = this._stateLogicMap.get(toState.name);
            toLogic && toLogic.onEntry();
          }
          this._onStateChangeCall && this._onStateChangeCall(fromStateName, toState.name);
        }

        /**
         * 设置boolean类型参数的值
         */;
        _proto.setBool = function setBool(key, value) {
          this._ac.params.setBool(key, value);
        }

        /**
         * 获取boolean类型参数的值
         */;
        _proto.getBool = function getBool(key) {
          return this._ac.params.getBool(key) !== 0;
        }

        /**
         * 设置number类型参数的值
         */;
        _proto.setNumber = function setNumber(key, value) {
          this._ac.params.setNumber(key, value);
        }

        /**
         * 获取number类型参数的值
         */;
        _proto.getNumber = function getNumber(key) {
          return this._ac.params.getNumber(key);
        }

        /**
         * 设置trigger类型参数的值
         */;
        _proto.setTrigger = function setTrigger(key) {
          this._ac.params.setTrigger(key);
        }

        /**
         * 重置trigger类型参数的值
         */;
        _proto.resetTrigger = function resetTrigger(key) {
          this._ac.params.resetTrigger(key);
        }

        /**
         * 设置autoTrigger类型参数的值（autoTrigger类型参数不需要主动reset，每次状态机更新结束后会自动reset）
         */;
        _proto.autoTrigger = function autoTrigger(key) {
          this._ac.params.autoTrigger(key);
        }

        /**
         * 无视条件直接跳转状态
         * @param 状态名
         */;
        _proto.play = function play(stateName) {
          if (!this._hasInit) {
            return;
          }
          this._ac.play(stateName);
        };
        _createClass(AnimatorBase, [{
          key: "curStateName",
          get: /** 当前状态名 */
          function get() {
            return this._ac.curState.name;
          }
          /** 当前动画名 */
        }, {
          key: "curStateMotion",
          get: function get() {
            return this._ac.curState.motion;
          }
        }]);
        return AnimatorBase;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "AssetRawUrl", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "PlayOnStart", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "AutoUpdate", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorCondition.ts", ['cc'], function (exports) {
  var cclegacy, error;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8ade2h2C/ZA86thhI0NNuqu", "AnimatorCondition", undefined);
      /** 参数类型 */
      var ParamType = exports('ParamType', /*#__PURE__*/function (ParamType) {
        ParamType[ParamType["COMPLETE"] = 0] = "COMPLETE";
        ParamType[ParamType["BOOLEAN"] = 1] = "BOOLEAN";
        ParamType[ParamType["NUMBER"] = 2] = "NUMBER";
        ParamType[ParamType["TRIGGER"] = 3] = "TRIGGER";
        ParamType[ParamType["AUTO_TRIGGER"] = 4] = "AUTO_TRIGGER";
        return ParamType;
      }({}));

      /** 逻辑类型 */
      var LogicType = exports('LogicType', /*#__PURE__*/function (LogicType) {
        LogicType[LogicType["EQUAL"] = 0] = "EQUAL";
        LogicType[LogicType["NOTEQUAL"] = 1] = "NOTEQUAL";
        LogicType[LogicType["GREATER"] = 2] = "GREATER";
        LogicType[LogicType["LESS"] = 3] = "LESS";
        LogicType[LogicType["GREATER_EQUAL"] = 4] = "GREATER_EQUAL";
        LogicType[LogicType["LESS_EQUAL"] = 5] = "LESS_EQUAL";
        return LogicType;
      }({}));

      /**
       * 单项条件
       */
      var AnimatorCondition = exports('default', /*#__PURE__*/function () {
        function AnimatorCondition(data, ac) {
          this._ac = void 0;
          /** 此条件对应的参数名 */
          this._param = "";
          /** 此条件对应的值 */
          this._value = 0;
          /** 此条件与值比较的逻辑 */
          this._logic = LogicType.EQUAL;
          this._ac = ac;
          this._param = data.param;
          this._value = data.value;
          this._logic = data.logic;
        }
        var _proto = AnimatorCondition.prototype;
        _proto.getParamName = function getParamName() {
          return this._param;
        };
        _proto.getParamType = function getParamType() {
          return this._ac.params.getParamType(this._param);
        }

        /** 判断此条件是否满足 */;
        _proto.check = function check() {
          var type = this.getParamType();
          if (type === ParamType.BOOLEAN) {
            return this._ac.params.getBool(this._param) === this._value;
          } else if (type === ParamType.NUMBER) {
            var value = this._ac.params.getNumber(this._param);
            switch (this._logic) {
              case LogicType.EQUAL:
                return value === this._value;
              case LogicType.NOTEQUAL:
                return value !== this._value;
              case LogicType.GREATER:
                return value > this._value;
              case LogicType.LESS:
                return value < this._value;
              case LogicType.GREATER_EQUAL:
                return value >= this._value;
              case LogicType.LESS_EQUAL:
                return value <= this._value;
              default:
                return false;
            }
          } else if (type === ParamType.AUTO_TRIGGER) {
            return this._ac.params.getAutoTrigger(this._param) !== 0;
          } else if (type === ParamType.TRIGGER) {
            return this._ac.params.getTrigger(this._param) !== 0;
          } else {
            error("[AnimatorCondition.check] \u9519\u8BEF\u7684type: " + type);
            return false;
          }
        };
        return AnimatorCondition;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorParams.ts', './AnimatorState.ts'], function (exports) {
  var _createClass, cclegacy, error, AnimatorParams, AnimatorState;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }, function (module) {
      AnimatorParams = module.default;
    }, function (module) {
      AnimatorState = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "01df9SMBjRCyYDE7SgbZxua", "AnimatorController", undefined);

      /**
       * 状态机控制类
       */
      var AnimatorController = exports('default', /*#__PURE__*/function () {
        function AnimatorController(player, json) {
          this._jsonData = null;
          this._animator = null;
          this._params = null;
          this._states = null;
          this._anyState = null;
          this._curState = null;
          /** 状态切换次数 */
          this._changeCount = 0;
          /** 对应animComplete的状态 */
          this.animCompleteState = null;
          /** 动画播放完毕的标记 */
          this.animComplete = false;
          this._animator = player;
          this._jsonData = json;
          this._states = new Map();
          this._params = new AnimatorParams(json.parameters);
          this.init(json);
        }

        /**
         * 初始化状态机所有动画状态
         */
        var _proto = AnimatorController.prototype;
        _proto.init = function init(json) {
          if (json.states.length <= 0) {
            error("[AnimatorController.init] \u72B6\u6001\u673Ajson\u9519\u8BEF");
            return;
          }
          var defaultState = json.defaultState;
          this._anyState = new AnimatorState(json.anyState, this);
          for (var i = 0; i < json.states.length; i++) {
            var state = new AnimatorState(json.states[i], this);
            this._states.set(state.name, state);
          }
          this.changeState(defaultState);
        };
        _proto.updateState = function updateState() {
          this._curState.checkAndTrans();
          if (this._curState !== this._anyState && this._anyState !== null) {
            this._anyState.checkAndTrans();
          }
        }

        /**
         * 更新状态机逻辑
         */;
        _proto.updateAnimator = function updateAnimator() {
          // 重置计数
          this._changeCount = 0;
          this.updateState();

          // 重置动画完成标记
          if (this.animComplete && this.animCompleteState.loop) {
            this.animComplete = false;
          }
          // 重置autoTrigger
          this.params.resetAllAutoTrigger();
        };
        _proto.onAnimationComplete = function onAnimationComplete() {
          this.animComplete = true;
          this.animCompleteState = this._curState;
          // cc.log(`animation complete: ${this._curState.name}`);
        }

        /**
         * 无视条件直接跳转状态
         * @param 状态名
         */;
        _proto.play = function play(stateName) {
          if (!this._states.has(stateName) || this._curState.name === stateName) {
            return;
          }

          // 重置动画完成标记
          this.animComplete = false;
          this.changeState(stateName);
        }

        /**
         * 切换动画状态
         */;
        _proto.changeState = function changeState(stateName) {
          this._changeCount++;
          if (this._changeCount > 1000) {
            error('[AnimatorController.changeState] error: 状态切换递归调用超过1000次，transition设置可能出错!');
            return;
          }
          if (this._states.has(stateName) && (this._curState === null || this._curState.name !== stateName)) {
            var oldState = this._curState;
            this._curState = this._states.get(stateName);
            this._animator.onStateChange(oldState, this._curState);
            this.updateState();
          } else {
            error("[AnimatorController.changeState] error state: " + stateName);
          }
        };
        _createClass(AnimatorController, [{
          key: "curState",
          get: /** 当前运行的状态 */
          function get() {
            return this._curState;
          }
        }, {
          key: "params",
          get: function get() {
            return this._params;
          }
        }, {
          key: "states",
          get: function get() {
            return this._states;
          }
        }]);
        return AnimatorController;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorCustomization.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AnimatorBase;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      AnimatorBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "fe7aemTdvFBeJlAmC+6XphU", "AnimatorCustomization", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        disallowMultiple = _decorator.disallowMultiple,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 
       * 自定义动画控制的状态机组件
       */
      var AnimatorCustomization = exports('default', (_dec = menu('OopsFramework/Animator/AnimatorCustomization （自定义状态机）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565'), _dec3 = property({
        override: true,
        visible: false
      }), ccclass(_class = disallowMultiple(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_AnimatorBase) {
        _inheritsLoose(AnimatorCustomization, _AnimatorBase);
        function AnimatorCustomization() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AnimatorBase.call.apply(_AnimatorBase, [this].concat(args)) || this;
          /** 此组件必须主动调用onInit初始化 */
          _initializerDefineProperty(_this, "PlayOnStart", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AnimatorCustomization.prototype;
        /**
         * 手动初始化状态机，可传入0-3个参数，类型如下
         * - onStateChangeCall 状态切换时的回调
         * - stateLogicMap 各个状态逻辑控制
         * - animationPlayer 自定义动画控制
         * @override
         */
        _proto.onInit = function onInit() {
          if (this._hasInit) {
            return;
          }
          this._hasInit = true;
          this.initArgs.apply(this, arguments);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 播放动画
         * @override
         * @param animName 动画名
         * @param loop 是否循环播放
         */;
        _proto.playAnimation = function playAnimation(animName, loop) {
          if (this._animationPlayer && animName) {
            this._animationPlayer.playAnimation(animName, loop);
          }
        }

        /**
         * 缩放动画播放速率
         * @override
         * @param scale 缩放倍率
         */;
        _proto.scaleTime = function scaleTime(scale) {
          if (this._animationPlayer) {
            this._animationPlayer.scaleTime(scale);
          }
        };
        return AnimatorCustomization;
      }(AnimatorBase), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "PlayOnStart", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorDragonBones.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, dragonBones, AnimatorBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
    }, function (module) {
      AnimatorBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "dc324J03ptB8b2JV9Ljduzh", "AnimatorDragonBones", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent,
        disallowMultiple = _decorator.disallowMultiple,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 
       * DragonBones状态机组件
       */
      var AnimatorDragonBones = exports('default', (_dec = requireComponent(dragonBones.ArmatureDisplay), _dec2 = menu('OopsFramework/Animator/AnimatorDragonBones （龙骨状态机）'), _dec3 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565'), ccclass(_class = disallowMultiple(_class = _dec(_class = _dec2(_class = _dec3(_class = /*#__PURE__*/function (_AnimatorBase) {
        _inheritsLoose(AnimatorDragonBones, _AnimatorBase);
        function AnimatorDragonBones() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AnimatorBase.call.apply(_AnimatorBase, [this].concat(args)) || this;
          /** DragonBones组件 */
          _this._dragonBones = null;
          return _this;
        }
        var _proto = AnimatorDragonBones.prototype;
        _proto.start = function start() {
          if (!this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this._dragonBones = this.getComponent(dragonBones.ArmatureDisplay);
          this._dragonBones.addEventListener('complete', this.onAnimFinished, this);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 手动初始化状态机，可传入0-3个参数，类型如下
         * - onStateChangeCall 状态切换时的回调
         * - stateLogicMap 各个状态逻辑控制
         * - animationPlayer 自定义动画控制
         * @override
         */;
        _proto.onInit = function onInit() {
          if (this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this.initArgs.apply(this, arguments);
          this._dragonBones = this.getComponent(dragonBones.ArmatureDisplay);
          this._dragonBones.addEventListener('complete', this.onAnimFinished, this);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 播放动画
         * @override
         * @param animName 动画名
         * @param loop 是否循环播放
         */;
        _proto.playAnimation = function playAnimation(animName, loop) {
          if (animName) this._dragonBones.playAnimation(animName, loop ? 0 : -1);
        }

        /**
         * 缩放动画播放速率
         * @override
         * @param scale 缩放倍率
         */;
        _proto.scaleTime = function scaleTime(scale) {
          if (scale > 0) this._dragonBones.timeScale = scale;
        };
        return AnimatorDragonBones;
      }(AnimatorBase)) || _class) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorParams.ts", ['cc', './AnimatorCondition.ts'], function (exports) {
  var cclegacy, ParamType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ParamType = module.ParamType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "13926xryDRPXJ50lCnLvy4J", "AnimatorParams", undefined);

      /**
       * 参数结构
       */
      /**
       * 状态机参数
       */
      var AnimatorParams = exports('default', /*#__PURE__*/function () {
        function AnimatorParams(dataArr) {
          var _this = this;
          this._paramMap = new Map();
          dataArr.forEach(function (data) {
            var param = {
              type: data.type,
              value: data.init
            };
            _this._paramMap.set(data.param, param);
          });
        }
        var _proto = AnimatorParams.prototype;
        _proto.getParamType = function getParamType(key) {
          var param = this._paramMap.get(key);
          if (param) {
            return param.type;
          } else {
            return null;
          }
        };
        _proto.setNumber = function setNumber(key, value) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.NUMBER) {
            param.value = value;
          }
        };
        _proto.setBool = function setBool(key, value) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.BOOLEAN) {
            param.value = value ? 1 : 0;
          }
        };
        _proto.setTrigger = function setTrigger(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.TRIGGER) {
            param.value = 1;
          }
        };
        _proto.resetTrigger = function resetTrigger(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.TRIGGER) {
            param.value = 0;
          }
        };
        _proto.autoTrigger = function autoTrigger(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.AUTO_TRIGGER) {
            param.value = 1;
          }
        };
        _proto.resetAutoTrigger = function resetAutoTrigger(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.AUTO_TRIGGER) {
            param.value = 0;
          }
        };
        _proto.resetAllAutoTrigger = function resetAllAutoTrigger() {
          this._paramMap.forEach(function (param, key) {
            if (param.type === ParamType.AUTO_TRIGGER) {
              param.value = 0;
            }
          });
        };
        _proto.getNumber = function getNumber(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.NUMBER) {
            return param.value;
          } else {
            return 0;
          }
        };
        _proto.getBool = function getBool(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.BOOLEAN) {
            return param.value;
          } else {
            return 0;
          }
        };
        _proto.getTrigger = function getTrigger(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.TRIGGER) {
            return param.value;
          } else {
            return 0;
          }
        };
        _proto.getAutoTrigger = function getAutoTrigger(key) {
          var param = this._paramMap.get(key);
          if (param && param.type === ParamType.AUTO_TRIGGER) {
            return param.value;
          } else {
            return 0;
          }
        };
        return AnimatorParams;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorSkeletal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorAnimation.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SkeletalAnimation, CCFloat, game, AnimatorAnimation;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SkeletalAnimation = module.SkeletalAnimation;
      CCFloat = module.CCFloat;
      game = module.game;
    }, function (module) {
      AnimatorAnimation = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "8c545jBn4xF7LWXjl506avi", "AnimatorSkeletal", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent,
        disallowMultiple = _decorator.disallowMultiple,
        menu = _decorator.menu,
        help = _decorator.help;
      var AnimatorSkeletal = exports('AnimatorSkeletal', (_dec = requireComponent(SkeletalAnimation), _dec2 = menu('OopsFramework/Animator/AnimatorSkeletal （骨骼动画状态机）'), _dec3 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565'), _dec4 = property({
        type: CCFloat,
        tooltip: "动画切换过度时间"
      }), ccclass(_class = disallowMultiple(_class = _dec(_class = _dec2(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_AnimatorAnimation) {
        _inheritsLoose(AnimatorSkeletal, _AnimatorAnimation);
        function AnimatorSkeletal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AnimatorAnimation.call.apply(_AnimatorAnimation, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "duration", _descriptor, _assertThisInitialized(_this));
          _this.cross_duration = 0;
          // 防止切换动画时间少于间隔时间导致动画状态错乱的问题
          _this.current_time = 0;
          return _this;
        }
        var _proto = AnimatorSkeletal.prototype;
        // 上一次切换状态时间
        _proto.onLoad = function onLoad() {
          this.cross_duration = this.duration * 1000;
        }

        /**
          * 播放动画
          * @override
          * @param animName 动画名
          * @param loop 是否循环播放
          */;
        _proto.playAnimation = function playAnimation(animName, loop) {
          if (!animName) {
            return;
          }
          if (game.totalTime - this.current_time > this.cross_duration) {
            this._animation.crossFade(animName, this.duration);
          } else {
            this._animation.play(animName);
          }
          this.current_time = game.totalTime;
          this._animState = this._animation.getState(animName);
          if (!this._animState) {
            return;
          }
          if (!this._wrapModeMap.has(this._animState)) {
            this._wrapModeMap.set(this._animState, this._animState.wrapMode);
          }
          // this._animState.wrapMode = loop ? 2 : this._wrapModeMap.get(this._animState)!;
          this._animState.wrapMode = loop ? 2 : 1; // 2为循环播放，1为单次播放
        };

        return AnimatorSkeletal;
      }(AnimatorAnimation), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "duration", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _class2)) || _class) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sp, AnimatorBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      AnimatorBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "7fde8yJEfxMMqzjg+V4UVkT", "AnimatorSpine", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent,
        disallowMultiple = _decorator.disallowMultiple,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 
       * Spine状态机组件（主状态机），trackIndex为0
       */
      var AnimatorSpine = exports('default', (_dec = requireComponent(sp.Skeleton), _dec2 = menu('OopsFramework/Animator/AnimatorSpine（Spine 状态机）'), _dec3 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565'), ccclass(_class = disallowMultiple(_class = _dec(_class = _dec2(_class = _dec3(_class = /*#__PURE__*/function (_AnimatorBase) {
        _inheritsLoose(AnimatorSpine, _AnimatorBase);
        function AnimatorSpine() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AnimatorBase.call.apply(_AnimatorBase, [this].concat(args)) || this;
          /** spine组件 */
          _this._spine = null;
          /** 动画完成的回调 */
          _this._completeListenerMap = new Map();
          /** 次状态机注册的回调 */
          _this._secondaryListenerMap = new Map();
          return _this;
        }
        var _proto = AnimatorSpine.prototype;
        _proto.start = function start() {
          if (!this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this._spine = this.getComponent(sp.Skeleton);
          this._spine.setEventListener(this.onSpineEvent.bind(this));
          this._spine.setCompleteListener(this.onSpineComplete.bind(this));
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 手动初始化状态机，可传入0-3个参数，类型如下
         * - onStateChangeCall 状态切换时的回调
         * - stateLogicMap 各个状态逻辑控制
         * - animationPlayer 自定义动画控制
         * @override
         */;
        _proto.onInit = function onInit() {
          if (this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this.initArgs.apply(this, arguments);
          this._spine = this.getComponent(sp.Skeleton);
          this._spine.setEventListener(this.onSpineEvent.bind(this));
          this._spine.setCompleteListener(this.onSpineComplete.bind(this));
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /** ---------- 后续扩展代码 开始 ---------- */;
        _proto.getBone = function getBone(name) {
          var bone = this._spine.findBone(name);
          return bone;
        };
        _proto.onSpineEvent = function onSpineEvent(trackEntry, event) {
          var _this$_animationPlaye;
          var animationName = trackEntry.animation ? event.data.name : "";
          (_this$_animationPlaye = this._animationPlayer) == null || _this$_animationPlaye.onFrameEventCallback(animationName, this);
        }

        /** ---------- 后续扩展代码 结束 ---------- */;
        _proto.onSpineComplete = function onSpineComplete(entry) {
          entry.trackIndex === 0 && this.onAnimFinished();
          this._completeListenerMap.forEach(function (target, cb) {
            target ? cb.call(target, entry) : cb(entry);
          });
          this._secondaryListenerMap.forEach(function (target, cb) {
            entry.trackIndex === target.TrackIndex && cb.call(target, entry);
          });
        }

        /**
         * 播放动画
         * @override
         * @param animName 动画名
         * @param loop 是否循环播放
         */;
        _proto.playAnimation = function playAnimation(animName, loop) {
          if (animName) {
            this._spine.setAnimation(0, animName, loop);
          } else {
            this._spine.clearTrack(0);
          }
        }

        /**
         * 缩放动画播放速率
         * @override
         * @param scale 缩放倍率
         */;
        _proto.scaleTime = function scaleTime(scale) {
          if (scale > 0) this._spine.timeScale = scale;
        }

        /**
         * 注册次状态机动画结束的回调（状态机内部方法，不能由外部直接调用）
         */;
        _proto.addSecondaryListener = function addSecondaryListener(cb, target) {
          this._secondaryListenerMap.set(cb, target);
        }

        /**
         * 注册动画完成时的监听
         * @param cb 回调
         * @param target 调用回调的this对象
         */;
        _proto.addCompleteListener = function addCompleteListener(cb, target) {
          if (target === void 0) {
            target = null;
          }
          if (this._completeListenerMap.has(cb)) {
            return;
          }
          this._completeListenerMap.set(cb, target);
        }

        /**
         * 注销动画完成的监听
         * @param cb 回调
         */;
        _proto.removeCompleteListener = function removeCompleteListener(cb) {
          this._completeListenerMap["delete"](cb);
        }

        /**
         * 清空动画完成的监听
         */;
        _proto.clearCompleteListener = function clearCompleteListener() {
          this._completeListenerMap.clear;
        };
        return AnimatorSpine;
      }(AnimatorBase)) || _class) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorSpineSecondary.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorSpine.ts', './AnimatorBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, AnimatorSpine, AnimatorBase;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      AnimatorSpine = module.default;
    }, function (module) {
      AnimatorBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "e47112s9c9Kwo8XQQ4KSW0c", "AnimatorSpineSecondary", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 
       * Spine状态机组件（次状态机），同一节点可添加多个，用于在不同track中播放动画，trackIndex必须大于0
       */
      var AnimatorSpineSecondary = exports('default', (_dec = requireComponent(sp.Skeleton), _dec2 = menu('OopsFramework/Animator/AnimatorSpine （Spine 次状态机）'), _dec3 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565'), _dec4 = property({
        tooltip: '动画播放的trackIndex，必须大于0'
      }), ccclass(_class = _dec(_class = _dec2(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_AnimatorBase) {
        _inheritsLoose(AnimatorSpineSecondary, _AnimatorBase);
        function AnimatorSpineSecondary() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AnimatorBase.call.apply(_AnimatorBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "TrackIndex", _descriptor, _assertThisInitialized(_this));
          /** 主状态机 */
          _this._main = null;
          /** spine组件 */
          _this._spine = null;
          return _this;
        }
        var _proto = AnimatorSpineSecondary.prototype;
        _proto.start = function start() {
          if (!this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this._spine = this.getComponent(sp.Skeleton);
          this._main = this.getComponent(AnimatorSpine);
          this._main.addSecondaryListener(this.onAnimFinished, this);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 手动初始化状态机，可传入0-3个参数，类型如下
         * - onStateChangeCall 状态切换时的回调
         * - stateLogicMap 各个状态逻辑控制
         * - animationPlayer 自定义动画控制
         * @override
         */;
        _proto.onInit = function onInit() {
          if (this.PlayOnStart || this._hasInit) {
            return;
          }
          this._hasInit = true;
          this.initArgs.apply(this, arguments);
          this._spine = this.getComponent(sp.Skeleton);
          this._main = this.getComponent(AnimatorSpine);
          this._main.addSecondaryListener(this.onAnimFinished, this);
          if (this.AssetRawUrl !== null) {
            this.initJson(this.AssetRawUrl.json);
          }
        }

        /**
         * 播放动画
         * @override
         * @param animName 动画名
         * @param loop 是否循环播放
         */;
        _proto.playAnimation = function playAnimation(animName, loop) {
          if (animName) {
            this._spine.setAnimation(this.TrackIndex, animName, loop);
          } else {
            this._spine.clearTrack(this.TrackIndex);
          }
        };
        return AnimatorSpineSecondary;
      }(AnimatorBase), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "TrackIndex", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorState.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimatorTransition.ts'], function (exports) {
  var _createClass, cclegacy, AnimatorTransition;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      AnimatorTransition = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bd2d1/E71JL1Jj3HzsYH82H", "AnimatorState", undefined);

      /**
       * 状态管理类
       */
      var AnimatorState = exports('default', /*#__PURE__*/function () {
        function AnimatorState(data, ac) {
          this._name = "";
          this._motion = "";
          this._loop = false;
          this._speed = 1;
          this._multi = "";
          this._transitions = [];
          this._ac = null;
          this._name = data.state;
          this._motion = data.motion || '';
          this._loop = data.loop || false;
          this._speed = data.speed || 1;
          this._multi = data.multiplier || '';
          this._ac = ac;
          for (var i = 0; i < data.transitions.length; i++) {
            var transition = new AnimatorTransition(data.transitions[i], ac);
            transition.isValid() && this._transitions.push(transition);
          }
        }

        /**
         * 判断各个分支是否满足条件，满足则转换状态
         */
        var _proto = AnimatorState.prototype;
        _proto.checkAndTrans = function checkAndTrans() {
          for (var i = 0; i < this._transitions.length; i++) {
            var transition = this._transitions[i];
            if (transition && transition.check()) {
              transition.doTrans();
              return;
            }
          }
        };
        _createClass(AnimatorState, [{
          key: "name",
          get: /** 状态名 */
          function get() {
            return this._name;
          }
          /** 动画名 */
        }, {
          key: "motion",
          get: function get() {
            return this._motion;
          }
          /** 动画是否循环播放 */
        }, {
          key: "loop",
          get: function get() {
            return this._loop;
          }
          /** 动画播放速度的混合参数 */
        }, {
          key: "multi",
          get: function get() {
            return this._multi;
          }
          /** 动画播放速度 */
        }, {
          key: "speed",
          get: function get() {
            return this._speed;
          },
          set: function set(value) {
            this._speed = value;
          }
        }]);
        return AnimatorState;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorStateLogic.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b06fbd3UdNKvooAUeDi9UTc", "AnimatorStateLogic", undefined);
      /**
       * 状态逻辑基类
       */
      var AnimatorStateLogic = exports('AnimatorStateLogic', /*#__PURE__*/function () {
        function AnimatorStateLogic() {}
        var _proto = AnimatorStateLogic.prototype;
        /**
         * 进入状态时调用
         * @virtual
         */
        _proto.onEntry = function onEntry() {}

        /**
         * 每次状态机逻辑更新时调用
         * @virtual
         */;
        _proto.onUpdate = function onUpdate() {}

        /**
         * 离开状态时调用
         * @virtual
         */;
        _proto.onExit = function onExit() {};
        return AnimatorStateLogic;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimatorTransition.ts", ['cc', './AnimatorCondition.ts'], function (exports) {
  var cclegacy, ParamType, AnimatorCondition;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ParamType = module.ParamType;
      AnimatorCondition = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "39224xRIkpEG7hvPJlKoGDy", "AnimatorTransition", undefined);
      /**
       * 状态过渡类
       */
      var AnimatorTransition = exports('default', /*#__PURE__*/function () {
        function AnimatorTransition(data, ac) {
          this._toStateName = '';
          this._hasExitTime = false;
          this._conditions = [];
          this._ac = null;
          this._toStateName = data.toState;
          this._hasExitTime = data.hasExitTime;
          this._ac = ac;
          for (var i = 0; i < data.conditions.length; i++) {
            var condition = new AnimatorCondition(data.conditions[i], ac);
            this._conditions.push(condition);
          }
        }

        /**
         * 返回该transition是否有效，当未勾选hasExitTime以及没有添加任何condition时此transition无效并忽略
         */
        var _proto = AnimatorTransition.prototype;
        _proto.isValid = function isValid() {
          return this._hasExitTime || this._conditions.length > 0;
        }

        /**
         * 判断是否满足所有转换条件
         */;
        _proto.check = function check() {
          if (this._toStateName === this._ac.curState.name) {
            return false;
          }
          if (this._hasExitTime && (this._ac.curState !== this._ac.animCompleteState || !this._ac.animComplete)) {
            return false;
          }
          for (var i = 0; i < this._conditions.length; i++) {
            if (!this._conditions[i].check()) {
              return false;
            }
          }
          return true;
        }

        /**
         * 转换状态
         */;
        _proto.doTrans = function doTrans() {
          // 满足条件时重置动画播完标记
          if (this._hasExitTime) {
            this._ac.animComplete = false;
          }
          // 满足状态转换条件时重置trigger和autoTrigger
          for (var i = 0; i < this._conditions.length; i++) {
            var type = this._conditions[i].getParamType();
            var name = this._conditions[i].getParamName();
            if (type === ParamType.TRIGGER) {
              this._ac.params.resetTrigger(name);
            } else if (type === ParamType.AUTO_TRIGGER) {
              this._ac.params.resetAutoTrigger(name);
            }
          }
          this._ac.changeState(this._toStateName);
        };
        return AnimatorTransition;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AppSettings.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "32128hObtVCCr4ukqnHx9Se", "AppSettings", undefined);
      /**
       * 高亮配置接口
       */
      /**
       * 笔记配置接口
       */
      /**
       * 其他配置接口
       */
      /**
       * 调试工具接口
       */
      /**
       * 完整设置接口
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ArrayExt.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2696fVV0U1BcotwtuSW7qe9", "ArrayExt", undefined);
      // @ts-ignore
      !Array.prototype.__cc_extended && Object.defineProperties(Array.prototype, {
        remove: {
          value: function value(filter) {
            if (typeof filter == 'function') {
              for (var _i2 = this.length - 1; _i2 > -1; --_i2) {
                filter(this[_i2], _i2, this) && this.splice(_i2, 1);
              }
            } else {
              for (var _i3 = this.length - 1; _i3 > -1; --_i3) {
                this[_i3] === filter && this.splice(_i3, 1);
              }
            }
            return this;
          }
        },
        removeOne: {
          value: function value(filter) {
            if (typeof filter == 'function') {
              for (var _i4 = 0; _i4 < this.length; ++_i4) {
                if (filter(this[_i4], _i4, this)) {
                  this.splice(_i4, 1);
                  return this;
                }
              }
            } else {
              for (var _i5 = 0; _i5 < this.length; ++_i5) {
                if (this[_i5] === filter) {
                  this.splice(_i5, 1);
                  return this;
                }
              }
            }
            return this;
          }
        },
        random: {
          value: function value() {
            var element = this[Math.floor(Math.random() * this.length)];
            return element;
          }
        },
        fastRemoveAt: {
          value: function value(index) {
            var length = this.length;
            if (index < 0 || index >= length) {
              return null;
            }
            var res = this[index];
            this[index] = this[length - 1];
            this.length = length - 1;
            return res;
          }
        },
        fastRemove: {
          value: function (_value) {
            function value(_x) {
              return _value.apply(this, arguments);
            }
            value.toString = function () {
              return _value.toString();
            };
            return value;
          }(function (value) {
            var index = this.indexOf(value);
            if (index >= 0) {
              this[index] = this[this.length - 1];
              --this.length;
              return true;
            }
            return false;
          })
        },
        first: {
          value: function value() {
            return this.length ? this[0] : null;
          }
        },
        last: {
          value: function value() {
            return this.length ? this[this.length - 1] : null;
          }
        },
        max: {
          value: function value(mapper) {
            if (!this.length) {
              return null;
            }
            function _max(a, b) {
              return a > b ? a : b;
            }
            if (typeof mapper == 'function') {
              var _max2 = mapper(this[0], 0, this);
              for (var _i6 = 1; _i6 < this.length; ++_i6) {
                var temp = mapper(this[_i6], _i6, this);
                _max2 = temp > _max2 ? temp : _max2;
              }
              return _max2;
            } else {
              return this.reduce(function (prev, cur) {
                return _max(prev, cur);
              });
            }
          }
        },
        min: {
          value: function value(mapper) {
            if (!this.length) {
              return null;
            }
            function _min(a, b) {
              return a < b ? a : b;
            }
            if (typeof mapper == 'function') {
              var _min2 = mapper(this[0], 0, this);
              for (var _i7 = 1; _i7 < this.length; ++_i7) {
                var temp = mapper(this[_i7], _i7, this);
                _min2 = temp < _min2 ? temp : _min2;
              }
              return _min2;
            } else {
              return this.reduce(function (prev, cur) {
                return _min(prev, cur);
              });
            }
          }
        },
        distinct: {
          value: function value() {
            return this.filter(function (v, i, arr) {
              return arr.indexOf(v) === i;
            });
          }
        },
        filterIndex: {
          value: function value(filter) {
            var output = [];
            for (var _i8 = 0; _i8 < this.length; ++_i8) {
              if (filter(this[_i8], _i8, this)) {
                output.push(_i8);
              }
            }
            return output;
          }
        },
        count: {
          value: function value(filter) {
            var result = 0;
            for (var _i9 = 0; _i9 < this.length; ++_i9) {
              if (filter(this[_i9], _i9, this)) {
                ++result;
              }
            }
            return result;
          }
        },
        sum: {
          value: function value(mapper) {
            var result = 0;
            for (var _i10 = 0; _i10 < this.length; ++_i10) {
              result += mapper ? mapper(this[_i10], _i10, this) : this[_i10];
            }
            return result;
          }
        },
        average: {
          value: function value(mapper) {
            return this.sum(mapper) / this.length;
          }
        },
        orderBy: {
          value: function value() {
            var mappers = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              mappers[_i] = arguments[_i];
            }
            return this.slice().sort(function (a, b) {
              for (var _i11 = 0; _i11 < mappers.length; ++_i11) {
                var va = mappers[_i11](a);
                var vb = mappers[_i11](b);
                if (va > vb) {
                  return 1;
                } else if (va < vb) {
                  return -1;
                }
              }
              return 0;
            });
          }
        },
        orderByDesc: {
          value: function value() {
            var mappers = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              mappers[_i] = arguments[_i];
            }
            return this.slice().sort(function (a, b) {
              for (var _i12 = 0; _i12 < mappers.length; ++_i12) {
                var va = mappers[_i12](a);
                var vb = mappers[_i12](b);
                if (va > vb) {
                  return -1;
                } else if (va < vb) {
                  return 1;
                }
              }
              return 0;
            });
          }
        },
        binarySearch: {
          value: function (_value2) {
            function value(_x2, _x3) {
              return _value2.apply(this, arguments);
            }
            value.toString = function () {
              return _value2.toString();
            };
            return value;
          }(function (value, keyMapper) {
            var low = 0,
              high = this.length - 1;
            while (low <= high) {
              var mid = (high + low) / 2 | 0;
              var midValue = keyMapper ? keyMapper(this[mid]) : this[mid];
              if (value === midValue) {
                return mid;
              } else if (value > midValue) {
                low = mid + 1;
              } else if (value < midValue) {
                high = mid - 1;
              }
            }
            return -1;
          })
        },
        binaryInsert: {
          value: function value(item, keyMapper, unique) {
            if (typeof keyMapper == 'boolean') {
              unique = keyMapper;
              keyMapper = undefined;
            }
            var low = 0,
              high = this.length - 1;
            var mid = NaN;
            var itemValue = keyMapper ? keyMapper(item) : item;
            while (low <= high) {
              mid = (high + low) / 2 | 0;
              var midValue = keyMapper ? keyMapper(this[mid]) : this[mid];
              if (itemValue === midValue) {
                if (unique) {
                  return mid;
                } else {
                  break;
                }
              } else if (itemValue > midValue) {
                low = mid + 1;
              } else if (itemValue < midValue) {
                high = mid - 1;
              }
            }
            var index = low > mid ? mid + 1 : mid;
            this.splice(index, 0, item);
            return index;
          }
        },
        binaryDistinct: {
          value: function value(keyMapper) {
            return this.filter(function (v, i, arr) {
              return arr.binarySearch(v, keyMapper) === i;
            });
          }
        },
        findLast: {
          value: function value(predicate) {
            for (var _i13 = this.length - 1; _i13 > -1; --_i13) {
              if (predicate(this[_i13], _i13, this)) {
                return this[_i13];
              }
            }
            return undefined;
          }
        },
        findLastIndex: {
          value: function value(predicate) {
            for (var _i14 = this.length - 1; _i14 > -1; --_i14) {
              if (predicate(this[_i14], _i14, this)) {
                return _i14;
              }
            }
            return -1;
          }
        },
        groupBy: {
          value: function value(grouper) {
            var group = this.reduce(function (prev, next) {
              var groupKey = grouper(next);
              if (!prev[groupKey]) {
                prev[groupKey] = [];
              }
              prev[groupKey].push(next);
              return prev;
            }, {});
            return Object.keys(group).map(function (key) {
              var arr = group[key];
              arr.key = key;
              return arr;
            });
          }
        },
        __cc_extended: {
          value: true
        }
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ArrayUtil.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4613b2zY/dMSaGPBGo6eti3", "ArrayUtil", undefined);
      /*
       * @Author: dgflash
       * @Date: 2021-08-11 16:41:12
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-02 14:50:57
       */

      /** 数组工具 */
      var ArrayUtil = exports('ArrayUtil', /*#__PURE__*/function () {
        function ArrayUtil() {}
        /**
         * 数组去重，并创建一个新数组返回
         * @param arr  源数组
         */
        ArrayUtil.noRepeated = function noRepeated(arr) {
          var res = [arr[0]];
          for (var i = 1; i < arr.length; i++) {
            var repeat = false;
            for (var j = 0; j < res.length; j++) {
              if (arr[i] == res[j]) {
                repeat = true;
                break;
              }
            }
            if (!repeat) {
              res.push(arr[i]);
            }
          }
          return res;
        }

        /**
         * 复制二维数组
         * @param array 目标数组 
         */;
        ArrayUtil.copy2DArray = function copy2DArray(array) {
          var newArray = [];
          for (var i = 0; i < array.length; i++) {
            newArray.push(array[i].concat());
          }
          return newArray;
        }

        /**
         * Fisher-Yates Shuffle 随机置乱算法
         * @param array 目标数组
         */;
        ArrayUtil.fisherYatesShuffle = function fisherYatesShuffle(array) {
          var count = array.length;
          while (count) {
            var index = Math.floor(Math.random() * count--);
            var temp = array[count];
            array[count] = array[index];
            array[index] = temp;
          }
          return array;
        }

        /**
         * 混淆数组
         * @param array 目标数组
         */;
        ArrayUtil.confound = function confound(array) {
          return array.slice().sort(function () {
            return Math.random() - .5;
          });
        }

        /**
         * 数组扁平化
         * @param array 目标数组
         */;
        ArrayUtil.flattening = function flattening(array) {
          for (; array.some(function (v) {
            return Array.isArray(v);
          });) {
            // 判断 array 中是否有数组
            array = [].concat.apply([], array); // 压扁数组
          }

          return array;
        }

        /** 删除数组中指定项 */;
        ArrayUtil.removeItem = function removeItem(array, item) {
          var temp = array.concat();
          for (var i = 0; i < temp.length; i++) {
            var value = temp[i];
            if (item == value) {
              array.splice(i, 1);
              break;
            }
          }
        }

        /**
         * 合并数组
         * @param array1 目标数组1
         * @param array2 目标数组2
         */;
        ArrayUtil.combineArrays = function combineArrays(array1, array2) {
          return [].concat(array1, array2);
        }

        /**
         * 获取随机数组成员
         * @param array 目标数组
         */;
        ArrayUtil.getRandomValueInArray = function getRandomValueInArray(array) {
          return array[Math.floor(Math.random() * array.length)];
        };
        return ArrayUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AsyncQueue.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, warn, log;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c48bBN521JzIxhITJunFji", "AsyncQueue", undefined);
      /**
       * 异步队列处理
       * @example
      var queue: AsyncQueue = new AsyncQueue();
      queue.push((next: NextFunction, params: any, args: any) => {
          oops.res.load("language/font/" + oops.language.current, next);
      });
      queue.push((next: NextFunction, params: any, args: any) => {
          oops.res.loadDir("common", next);
      });
      queue.complete =  () => {
          console.log("处理完成");
      };
      queue.play();
       */
      var AsyncQueue = exports('AsyncQueue', /*#__PURE__*/function () {
        function AsyncQueue() {
          // 正在运行的任务
          this._runningAsyncTask = null;
          this._queues = [];
          // 正在执行的异步任务标识
          this._isProcessingTaskUUID = 0;
          this._enable = true;
          /**
           * 任务队列完成回调
           */
          this.complete = null;
        }
        var _proto = AsyncQueue.prototype;
        /**
         * 添加一个异步任务到队列中
         * @param callback  回调
         * @param params    参数
         */
        _proto.push = function push(callback, params) {
          if (params === void 0) {
            params = null;
          }
          var uuid = AsyncQueue._$uuid_count++;
          this._queues.push({
            uuid: uuid,
            callbacks: [callback],
            params: params
          });
          return uuid;
        }

        /**
         * 添加多个任务，多个任务函数会同时执行
         * @param params     参数据
         * @param callbacks  回调
         * @returns 
         */;
        _proto.pushMulti = function pushMulti(params) {
          var uuid = AsyncQueue._$uuid_count++;
          for (var _len = arguments.length, callbacks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            callbacks[_key - 1] = arguments[_key];
          }
          this._queues.push({
            uuid: uuid,
            callbacks: callbacks,
            params: params
          });
          return uuid;
        }

        /**
         * 移除一个还未执行的异步任务
         * @param uuid  任务唯一编号
         */;
        _proto.remove = function remove(uuid) {
          var _this$_runningAsyncTa;
          if (((_this$_runningAsyncTa = this._runningAsyncTask) == null ? void 0 : _this$_runningAsyncTa.uuid) === uuid) {
            warn("正在执行的任务不可以移除");
            return;
          }
          for (var i = 0; i < this._queues.length; i++) {
            if (this._queues[i].uuid === uuid) {
              this._queues.splice(i, 1);
              break;
            }
          }
        }

        /** 队列长度 */;
        /** 清空队列 */
        _proto.clear = function clear() {
          this._queues = [];
          this._isProcessingTaskUUID = 0;
          this._runningAsyncTask = null;
        }

        /** 跳过当前正在执行的任务 */;
        _proto.step = function step() {
          if (this.isProcessing) {
            this.next(this._isProcessingTaskUUID);
          }
        }

        /**
         * 开始运行队列
         * @param args  参数
         */;
        _proto.play = function play(args) {
          var _this = this;
          if (args === void 0) {
            args = null;
          }
          if (this.isProcessing) {
            return;
          }
          if (!this._enable) {
            return;
          }
          var actionData = this._queues.shift();
          if (actionData) {
            this._runningAsyncTask = actionData;
            var taskUUID = actionData.uuid;
            this._isProcessingTaskUUID = taskUUID;
            var callbacks = actionData.callbacks;
            if (callbacks.length == 1) {
              var nextFunc = function nextFunc(nextArgs) {
                if (nextArgs === void 0) {
                  nextArgs = null;
                }
                _this.next(taskUUID, nextArgs);
              };
              callbacks[0](nextFunc, actionData.params, args);
            } else {
              // 多个任务函数同时执行
              var fnum = callbacks.length;
              var nextArgsArr = [];
              var _nextFunc = function _nextFunc(nextArgs) {
                if (nextArgs === void 0) {
                  nextArgs = null;
                }
                --fnum;
                nextArgsArr.push(nextArgs || null);
                if (fnum === 0) {
                  _this.next(taskUUID, nextArgsArr);
                }
              };
              var knum = fnum;
              for (var i = 0; i < knum; i++) {
                callbacks[i](_nextFunc, actionData.params, args);
              }
            }
          } else {
            this._isProcessingTaskUUID = 0;
            this._runningAsyncTask = null;
            if (this.complete) {
              this.complete(args);
            }
          }
        }

        /**
         * 往队列中push一个延时任务
         * @param time 毫秒时间
         * @param callback （可选参数）时间到了之后回调
         */;
        _proto.yieldTime = function yieldTime(time, callback) {
          if (callback === void 0) {
            callback = null;
          }
          var task = function task(next, params, args) {
            var _t = setTimeout(function () {
              clearTimeout(_t);
              if (callback) {
                callback();
              }
              next(args);
            }, time);
          };
          this.push(task, {
            des: "AsyncQueue.yieldTime"
          });
        };
        _proto.next = function next(taskUUID, args) {
          if (args === void 0) {
            args = null;
          }
          if (this._isProcessingTaskUUID === taskUUID) {
            this._isProcessingTaskUUID = 0;
            this._runningAsyncTask = null;
            this.play(args);
          } else {
            if (this._runningAsyncTask) {
              log(this._runningAsyncTask);
            }
          }
        }

        /**
         * 返回一个执行函数，执行函数调用count次后，next将触发
         * @param count 
         * @param next 
         * @return 返回一个匿名函数
         */;
        AsyncQueue.excuteTimes = function excuteTimes(count, next) {
          if (next === void 0) {
            next = null;
          }
          var fnum = count;
          var call = function call() {
            --fnum;
            if (fnum === 0) {
              next && next();
            }
          };
          return call;
        };
        _createClass(AsyncQueue, [{
          key: "queues",
          get: /** 任务队列 */
          function get() {
            return this._queues;
          }
        }, {
          key: "enable",
          get: /** 是否开启可用 */
          function get() {
            return this._enable;
          }
          /** 是否开启可用 */,
          set: function set(val) {
            if (this._enable === val) {
              return;
            }
            this._enable = val;
            if (val && this.size > 0) {
              this.play();
            }
          }
        }, {
          key: "size",
          get: function get() {
            return this._queues.length;
          }

          /** 是否有正在处理的任务 */
        }, {
          key: "isProcessing",
          get: function get() {
            return this._isProcessingTaskUUID > 0;
          }

          /** 队列是否已停止 */
        }, {
          key: "isStop",
          get: function get() {
            if (this._queues.length > 0) {
              return false;
            }
            if (this.isProcessing) {
              return false;
            }
            return true;
          }

          /** 正在执行的任务参数 */
        }, {
          key: "runningParams",
          get: function get() {
            if (this._runningAsyncTask) {
              return this._runningAsyncTask.params;
            }
            return null;
          }
        }]);
        return AsyncQueue;
      }());
      // 任务task的唯一标识
      AsyncQueue._$uuid_count = 1;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, AudioSource;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "e52d2ysY1BEbpcT2Cz0Wwss", "AudioEffect", undefined);
      var ccclass = _decorator.ccclass;

      /** 游戏音效 */
      var AudioEffect = exports('AudioEffect', (_dec = ccclass('AudioEffect'), _dec(_class = /*#__PURE__*/function (_AudioSource) {
        _inheritsLoose(AudioEffect, _AudioSource);
        function AudioEffect() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AudioSource.call.apply(_AudioSource, [this].concat(args)) || this;
          /** 背景音乐播放完成回调 */
          _this.onComplete = null;
          return _this;
        }
        var _proto = AudioEffect.prototype;
        _proto.start = function start() {
          this.node.on(AudioSource.EventType.ENDED, this.onAudioEnded, this);
        };
        _proto.onAudioEnded = function onAudioEnded() {
          this.onComplete && this.onComplete();
        };
        return AudioEffect;
      }(AudioSource)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioEffectPool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './ResLoader.ts', './AudioEffect.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, AudioClip, NodePool, Node, oops, resLoader, AudioEffect;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      AudioClip = module.AudioClip;
      NodePool = module.NodePool;
      Node = module.Node;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      AudioEffect = module.AudioEffect;
    }],
    execute: function () {
      cclegacy._RF.push({}, "01278BDjrtCr4CBpmO5DZlN", "AudioEffectPool", undefined);
      var AE_ID_MAX = 30000;

      /** 音效池 */
      var AudioEffectPool = exports('AudioEffectPool', /*#__PURE__*/function () {
        function AudioEffectPool() {
          this._switch = true;
          this._volume = 1;
          /** 音效播放器对象池 */
          this.pool = new NodePool();
          /** 对象池集合 */
          this.effects = new Map();
          /** 用过的音效资源记录 */
          this.res = new Map();
          this._aeId = 0;
        }
        var _proto = AudioEffectPool.prototype;
        /** 获取请求唯一编号 */
        _proto.getAeId = function getAeId() {
          if (this._aeId == AE_ID_MAX) this._aeId = 1;
          this._aeId++;
          return this._aeId;
        }

        /**
         * 加载与播放音效
         * @param url                  音效资源地址与音效资源
         * @param bundleName           资源包名
         * @param onPlayComplete       播放完成回调
         * @returns 
         */;
        _proto.load = /*#__PURE__*/
        function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, bundleName, onPlayComplete) {
            var _this = this;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (bundleName === void 0) {
                    bundleName = resLoader.defaultBundleName;
                  }
                  return _context2.abrupt("return", new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
                    var aeid, key, clip, ae, node;
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          if (_this["switch"]) {
                            _context.next = 2;
                            break;
                          }
                          return _context.abrupt("return", resolve(-1));
                        case 2:
                          aeid = _this.getAeId();
                          if (url instanceof AudioClip) {
                            key = url.uuid;
                          } else {
                            key = bundleName + "_" + url;
                          }
                          key += "_" + aeid;

                          // 创建音效资源
                          if (!(url instanceof AudioClip)) {
                            _context.next = 9;
                            break;
                          }
                          clip = url;
                          _context.next = 15;
                          break;
                        case 9:
                          clip = resLoader.get(url, AudioClip, bundleName);
                          if (clip) {
                            _context.next = 15;
                            break;
                          }
                          _this.res.set(bundleName, url);
                          _context.next = 14;
                          return resLoader.loadAsync(bundleName, url, AudioClip);
                        case 14:
                          clip = _context.sent;
                        case 15:
                          node = null;
                          if (_this.pool.size() == 0) {
                            node = new Node();
                            node.name = "AudioEffect";
                            node.parent = oops.audio.node;
                            ae = node.addComponent(AudioEffect);
                          } else {
                            node = _this.pool.get();
                            ae = node.getComponent(AudioEffect);
                          }
                          ae.onComplete = function () {
                            _this.put(aeid, url, bundleName); // 播放完回收对象
                            onPlayComplete && onPlayComplete();
                            // console.log(`【音效】回收，池中剩余音效播放器【${this.pool.size()}】`);
                          };

                          // 记录正在播放的音效播放器
                          _this.effects.set(key, ae);
                          ae.volume = _this.volume;
                          ae.clip = clip;
                          ae.play();
                          resolve(aeid);
                        case 23:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  }))));
                case 2:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function load(_x, _x2, _x3) {
            return _load.apply(this, arguments);
          }
          return load;
        }()
        /**
         * 回收音效播放器
         * @param aeid          播放器编号
         * @param url           音效路径
         * @param bundleName    资源包名
         */;

        _proto.put = function put(aeid, url, bundleName) {
          if (bundleName === void 0) {
            bundleName = resLoader.defaultBundleName;
          }
          var key;
          if (url instanceof AudioClip) {
            key = url.uuid;
          } else {
            key = bundleName + "_" + url;
          }
          key += "_" + aeid;
          var ae = this.effects.get(key);
          if (ae && ae.clip) {
            this.effects["delete"](key);
            ae.stop();
            this.pool.put(ae.node);
          }
        }

        /** 释放所有音效资源与对象池中播放器 */;
        _proto.release = function release() {
          // 释放正在播放的音效
          this.effects.forEach(function (ae) {
            ae.node.destroy();
          });
          this.effects.clear();

          // 释放音效资源
          this.res.forEach(function (url, bundleName) {
            resLoader.release(bundleName, url);
          });

          // 释放池中播放器
          this.pool.clear();
        }

        /** 停止播放所有音效 */;
        _proto.stop = function stop() {
          this.effects.forEach(function (ae) {
            ae.stop();
          });
        }

        /** 恢复所有音效 */;
        _proto.play = function play() {
          if (!this["switch"]) return;
          this.effects.forEach(function (ae) {
            ae.play();
          });
        }

        /** 暂停所有音效 */;
        _proto.pause = function pause() {
          if (!this["switch"]) return;
          this.effects.forEach(function (ae) {
            ae.pause();
          });
        };
        _createClass(AudioEffectPool, [{
          key: "switch",
          get: /** 音效开关 */
          function get() {
            return this._switch;
          },
          set: function set(value) {
            this._switch = value;
            if (value) this.stop();
          }
        }, {
          key: "volume",
          get: /** 所有音效音量 */
          function get() {
            return this._volume;
          },
          set: function set(value) {
            this._volume = value;
            this.effects.forEach(function (ae) {
              ae.volume = value;
            });
          }
        }]);
        return AudioEffectPool;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './AudioEffectPool.ts', './AudioMusic.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Component, oops, AudioEffectPool, AudioMusic;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      AudioEffectPool = module.AudioEffectPool;
    }, function (module) {
      AudioMusic = module.AudioMusic;
    }],
    execute: function () {
      cclegacy._RF.push({}, "252f0z+vPNL8Y/jsLYmomtw", "AudioManager", undefined);
      var LOCAL_STORE_KEY = "game_audio";

      /**
       * 音频管理
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037893&doc_id=2873565
       * @example
       // 模块功能通过 oops.audio 调用
       oops.audio.playMusic("audios/nocturne");
       */
      var AudioManager = exports('AudioManager', /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioManager, _Component);
        function AudioManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 背景音乐管理对象 */
          _this.music = null;
          /** 音效管理对象 */
          _this.effect = new AudioEffectPool();
          /** 音乐管理状态数据 */
          _this.local_data = {};
          return _this;
        }
        var _proto = AudioManager.prototype;
        /**
         * 设置背景音乐播放完成回调
         * @param callback 背景音乐播放完成回调
         */
        _proto.setMusicComplete = function setMusicComplete(callback) {
          if (callback === void 0) {
            callback = null;
          }
          this.music.onComplete = callback;
        }

        /**
         * 播放背景音乐
         * @param url        资源地址
         * @param callback   音乐播放完成事件
         * @param bundleName 资源包名
         */;
        _proto.playMusic = function playMusic(url, callback, bundleName) {
          if (this.music["switch"]) {
            this.music.loop = false;
            this.music.load(url, callback, bundleName).then();
          }
        }

        /** 循环播放背景音乐 */;
        _proto.playMusicLoop = function playMusicLoop(url, bundleName) {
          if (this.music["switch"]) {
            this.music.loop = true;
            this.music.load(url, null, bundleName).then();
          }
        }

        /** 停止背景音乐播放 */;
        _proto.stopMusic = function stopMusic() {
          if (this.music["switch"] && this.music.playing) {
            this.music.stop();
          }
        }

        /**
         * 获取背景音乐播放进度
         */;
        /**
         * 播放音效
         * @param url        资源地址
         * @param callback   加载完成回调
         * @param bundleName 资源包名
         */
        _proto.playEffect = function playEffect(url, bundleName, onPlayComplete) {
          return this.effect.load(url, bundleName, onPlayComplete);
        }

        /** 回收音效播放器 */;
        _proto.putEffect = function putEffect(aeid, url, bundleName) {
          this.effect.put(aeid, url, bundleName);
        }

        /** 获取音效音量 */;
        /** 恢复当前暂停的音乐与音效播放 */
        _proto.resumeAll = function resumeAll() {
          if (!this.music.playing && this.music.progress > 0) this.music.play();
          this.effect.play();
        }

        /** 暂停当前音乐与音效的播放 */;
        _proto.pauseAll = function pauseAll() {
          if (this.music.playing) this.music.pause();
          this.effect.pause();
        }

        /** 停止当前音乐与音效的播放 */;
        _proto.stopAll = function stopAll() {
          this.music.stop();
          this.effect.stop();
        }

        /** 保存音乐音效的音量、开关配置数据到本地 */;
        _proto.save = function save() {
          this.local_data.volume_music = this.music.volume;
          this.local_data.volume_effect = this.effect.volume;
          this.local_data.switch_music = this.music["switch"];
          this.local_data.switch_effect = this.effect["switch"];
          oops.storage.set(LOCAL_STORE_KEY, this.local_data);
        }

        /** 本地加载音乐音效的音量、开关配置数据并设置到游戏中 */;
        _proto.load = function load() {
          this.music = this.getComponent(AudioMusic) || this.addComponent(AudioMusic);
          this.local_data = oops.storage.getJson(LOCAL_STORE_KEY);
          if (this.local_data) {
            try {
              this.setState();
            } catch (_unused) {
              this.setStateDefault();
            }
          } else {
            this.setStateDefault();
          }
        };
        _proto.setState = function setState() {
          this.music.volume = this.local_data.volume_music;
          this.effect.volume = this.local_data.volume_effect;
          this.music["switch"] = this.local_data.switch_music;
          this.effect["switch"] = this.local_data.switch_effect;
        };
        _proto.setStateDefault = function setStateDefault() {
          this.local_data = {};
          this.music.volume = 1;
          this.effect.volume = 1;
          this.music["switch"] = true;
          this.effect["switch"] = true;
        };
        _createClass(AudioManager, [{
          key: "progressMusic",
          get: function get() {
            return this.music.progress;
          }

          /**
           * 设置背景乐播放进度
           * @param value     播放进度值
           */,
          set: function set(value) {
            this.music.progress = value;
          }

          /**
           * 获取背景音乐音量
           */
        }, {
          key: "volumeMusic",
          get: function get() {
            return this.music.volume;
          }

          /**
           * 设置背景音乐音量
           * @param value     音乐音量值
           */,
          set: function set(value) {
            this.music.volume = value;
            this.save();
          }

          /**
           * 获取背景音乐开关值
           */
        }, {
          key: "switchMusic",
          get: function get() {
            return this.music["switch"];
          }

          /**
           * 设置背景音乐开关值
           * @param value     开关值
           */,
          set: function set(value) {
            this.music["switch"] = value;
            if (!value) this.music.stop();
            this.save();
          }
        }, {
          key: "volumeEffect",
          get: function get() {
            return this.effect.volume;
          }

          /**
           * 设置获取音效音量
           * @param value     音效音量值
           */,
          set: function set(value) {
            this.effect.volume = value;
            this.save();
          }

          /** 获取音效开关值 */
        }, {
          key: "switchEffect",
          get: function get() {
            return this.effect["switch"];
          }

          /**
           * 设置音效开关值
           * @param value     音效开关值
           */,
          set: function set(value) {
            this.effect["switch"] = value;
            if (!value) this.effect.stop();
            this.save();
          }
        }]);
        return AudioManager;
      }(Component));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioMusic.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResLoader.ts'], function (exports) {
  var _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, AudioSource, AudioClip, resLoader;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
      AudioClip = module.AudioClip;
    }, function (module) {
      resLoader = module.resLoader;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5c1f3kqGetBiIv48/CvuaQv", "AudioMusic", undefined);
      var ccclass = _decorator.ccclass,
        menu = _decorator.menu;

      /** 
       * 背景音乐 
       * 1、播放一个新背景音乐时，先加载音乐资源，然后停止正在播放的背景资源同时施放当前背景音乐资源，最后播放新的背景音乐
       */
      var AudioMusic = exports('AudioMusic', (_dec = ccclass('AudioMusic'), _dec(_class = /*#__PURE__*/function (_AudioSource) {
        _inheritsLoose(AudioMusic, _AudioSource);
        function AudioMusic() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AudioSource.call.apply(_AudioSource, [this].concat(args)) || this;
          /** 背景音乐开关 */
          _this["switch"] = true;
          /** 背景音乐播放完成回调 */
          _this.onComplete = null;
          _this._progress = 0;
          _this._isLoading = false;
          _this._nextBundleName = null;
          // 下一个音乐资源包
          _this._nextUrl = null;
          return _this;
        }
        var _proto = AudioMusic.prototype;
        // 下一个播放音乐
        _proto.start = function start() {
          // this.node.on(AudioSource.EventType.STARTED, this.onAudioStarted, this);
          this.node.on(AudioSource.EventType.ENDED, this.onAudioEnded, this);
        }

        // private onAudioStarted() { }
        ;

        _proto.onAudioEnded = function onAudioEnded() {
          this.onComplete && this.onComplete();
        }

        /** 获取音乐播放进度 */;
        /**
         * 加载音乐并播放
         * @param url          音乐资源地址
         * @param callback     加载完成回调
         * @param bundleName   资源包名
         */
        _proto.load = /*#__PURE__*/
        function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, callback, bundleName) {
            var data;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (bundleName === void 0) {
                    bundleName = resLoader.defaultBundleName;
                  }
                  if (!this._isLoading) {
                    _context.next = 5;
                    break;
                  }
                  this._nextBundleName = bundleName;
                  this._nextUrl = url;
                  return _context.abrupt("return");
                case 5:
                  this._isLoading = true;
                  _context.next = 8;
                  return resLoader.loadAsync(bundleName, url, AudioClip);
                case 8:
                  data = _context.sent;
                  if (data) {
                    this._isLoading = false;

                    // 处理等待加载的背景音乐
                    if (this._nextUrl != null) {
                      // 加载等待播放的背景音乐
                      this.load(this._nextUrl, callback, this._nextBundleName);
                      this._nextBundleName = this._nextUrl = null;
                    } else {
                      callback && callback();

                      // 正在播放的时候先关闭
                      if (this.playing) {
                        this.stop();
                      }

                      // 删除当前正在播放的音乐
                      this.release();

                      // 播放背景音乐
                      this.clip = data;
                      this.play();
                    }
                  }
                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function load(_x, _x2, _x3) {
            return _load.apply(this, arguments);
          }
          return load;
        }() /** 释放当前背景音乐资源 */;
        _proto.release = function release() {
          if (this.clip) {
            this.stop();
            this.clip.decRef();
            this.clip = null;
          }
        };
        _createClass(AudioMusic, [{
          key: "progress",
          get: function get() {
            if (this.duration > 0) this._progress = this.currentTime / this.duration;
            return this._progress;
          }
          /**
           * 设置音乐当前播放进度
           * @param value     进度百分比0到1之间
           */,
          set: function set(value) {
            this._progress = value;
            this.currentTime = value * this.duration;
          }
        }]);
        return AudioMusic;
      }(AudioSource)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AVirtualScrollView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AItemRenderer.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Vec2, Layout, UITransform, NodeEventType, Widget, Vec3, instantiate, ScrollView, AItemRenderer;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Vec2 = module.Vec2;
      Layout = module.Layout;
      UITransform = module.UITransform;
      NodeEventType = module.NodeEventType;
      Widget = module.Widget;
      Vec3 = module.Vec3;
      instantiate = module.instantiate;
      ScrollView = module.ScrollView;
    }, function (module) {
      AItemRenderer = module.AItemRenderer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "a34b5hwp4FOBqQyipdRxVoQ", "AVirtualScrollView", undefined);
      var EPSILON = 1e-4;
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 虚拟滚动视图 扩展ScrollView
       * 渲染预制体必需挂载 AItemRenderer子类
       */
      var AVirtualScrollView = exports('default', (_dec = ccclass('AVirtualScrollView'), _dec2 = property({
        type: Prefab,
        serializable: true,
        displayName: "渲染预制体"
      }), _dec3 = property({
        displayName: "启动虚拟列表"
      }), _dec4 = property({
        tooltip: "无限滑动，到底后发送回调事件",
        visible: function visible() {
          return this.virtualList;
        }
      }), _dec5 = property({
        tooltip: "子项自适应大小",
        visible: function visible() {
          return this.virtualList;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_ScrollView) {
        _inheritsLoose(AVirtualScrollView, _ScrollView);
        function AVirtualScrollView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _ScrollView.call.apply(_ScrollView, [this].concat(args)) || this;
          /**渲染预制体必需挂载 ItemRenderer子类 */
          _initializerDefineProperty(_this, "itemRenderer", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "virtualList", _descriptor2, _assertThisInitialized(_this));
          /**开启滑动到底部 发送回调 */
          _initializerDefineProperty(_this, "infiniteScroll", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "autoChildrenSize", _descriptor4, _assertThisInitialized(_this));
          _this.infiniteScrollCb = function () {};
          _this.infiniteScrollThis = void 0;
          /**子项 回调函数  回调作用域*/
          _this.callback = function () {};
          _this.cbThis = void 0;
          /**最大渲染预制体 垂直数量 */
          _this.verticalCount = 0;
          /**最大渲染预制体 水平数量 */
          _this.horizontalCount = 0;
          /**预制体默认宽 加上间隔 */
          _this.itemW = 0;
          /**预制体默认高 加上间隔*/
          _this.itemH = 0;
          /**定时器 */
          _this.interval = void 0;
          /**预制体池 */
          _this.itemPool = [];
          /**预制体列表 */
          _this.itemList = [];
          /**预制体渲染类列表 */
          _this.itemRendererList = [];
          /**数据列表 */
          _this.dataList = [];
          /**方向布局 */
          _this.direction = new Vec2();
          /**方向间隙 */
          _this.padding = new Vec2();
          /**开始坐标 */
          _this.startPos = new Vec2();
          /**布局*/
          _this.contentLayout = new Layout();
          /**强制刷新标志 定时更新数据*/
          _this.forcedRefreshMark = false;
          /**刷新标志 定时更新数据 */
          _this.refreshMark = false;
          /**是否移动到底部  无限滚动回调*/
          _this.moveBottom = false;
          _this._uiTransform = new UITransform();
          _this.isInit = false;
          /**节点锚点 */
          _this.anchorPoint = new Vec2();
          /**位置对应节点大小 */
          _this.posToSize = {};
          return _this;
        }
        var _proto = AVirtualScrollView.prototype;
        _proto.onLoad = function onLoad() {
          this.isInit = true;
          this.itemList = [];
          this.itemPool = [];
          this.itemRendererList = [];
          if (!this.content) {
            return;
          }
          if (this.virtualList) {
            var contentLayout = this.content.getComponent(Layout);
            if (contentLayout) {
              this.contentLayout = contentLayout;
              this.contentLayout.enabled = false;
            } else {
              console.warn("content上缺少Layout组件");
            }
            this._uiTransform = this.node.getComponent(UITransform);
            this.resetSize();
            this.node.on(NodeEventType.SIZE_CHANGED, this.onSelfSizeChange, this);
            if (this.autoChildrenSize && this.contentLayout.type == Layout.Type.GRID) {
              this.autoChildrenSize = false;
              console.error("子项自适应大小 暂不支持网格布局");
            }
          }
          if (this.dataList) {
            this.refreshData(this.dataList);
          }
        };
        _proto.onSelfSizeChange = function onSelfSizeChange() {
          this.unschedule(this.delayRefresh);
          this.scheduleOnce(this.delayRefresh, 0.5);
        };
        _proto.delayRefresh = function delayRefresh() {
          this.resetSize();
          if (this.dataList != null) {
            this.refreshData(this.dataList);
          }
        }

        /**重置大小 */;
        _proto.resetSize = function resetSize() {
          var widget = this.content.getComponent(Widget);
          if (widget) {
            widget.updateAlignment();
          } else {
            widget = this.getComponent(Widget);
            widget && widget.updateAlignment();
          }
          var nodeUITransform = this.itemRenderer.data._uiProps.uiTransformComp;
          this.anchorPoint = nodeUITransform.anchorPoint.clone();
          var nodeWidth = nodeUITransform.width;
          var nodeHeight = nodeUITransform.height;

          //自适应节点大小
          if (this.autoChildrenSize) {
            var _this$posToSize$0$wid, _this$posToSize$, _this$posToSize$0$hei, _this$posToSize$2;
            nodeWidth = (_this$posToSize$0$wid = (_this$posToSize$ = this.posToSize[0]) == null ? void 0 : _this$posToSize$.width) != null ? _this$posToSize$0$wid : nodeUITransform.width;
            nodeHeight = (_this$posToSize$0$hei = (_this$posToSize$2 = this.posToSize[0]) == null ? void 0 : _this$posToSize$2.height) != null ? _this$posToSize$0$hei : nodeUITransform.height;
          }
          //方向布局
          this.direction.x = this.contentLayout.horizontalDirection == Layout.HorizontalDirection.LEFT_TO_RIGHT ? 1 : -1;
          this.direction.y = this.contentLayout.verticalDirection == Layout.VerticalDirection.TOP_TO_BOTTOM ? -1 : 1;

          //上下左右间隙
          this.padding.x = this.contentLayout.horizontalDirection == Layout.HorizontalDirection.LEFT_TO_RIGHT ? this.contentLayout.paddingLeft : this.contentLayout.paddingRight;
          this.padding.y = this.contentLayout.verticalDirection == Layout.VerticalDirection.TOP_TO_BOTTOM ? this.contentLayout.paddingTop : this.contentLayout.paddingBottom;

          //第一个节点大小 计算起始位置
          this.startPos.x = (nodeWidth - nodeWidth * this.anchorPoint.x + this.padding.x) * this.direction.x;
          this.startPos.y = (nodeHeight - nodeHeight * this.anchorPoint.y + this.padding.y) * this.direction.y;

          //预制体宽高  
          this.itemW = nodeUITransform.width + this.contentLayout.spacingX;
          this.itemH = nodeUITransform.height + this.contentLayout.spacingY;
          var hCount = (this._uiTransform.width + this.contentLayout.spacingX - this.contentLayout.paddingLeft) / this.itemW;
          var vCount = (this._uiTransform.height + this.contentLayout.spacingY - this.contentLayout.paddingTop) / this.itemH;

          //垂直、水平最大预制体数量  如果自适应子项大小  用默认节点大小计算最大渲染数量
          this.horizontalCount = Math.ceil(hCount) + 1;
          this.verticalCount = Math.ceil(vCount) + 1;
          if (this.contentLayout.type == Layout.Type.GRID) {
            if (this.contentLayout.startAxis == Layout.AxisDirection.HORIZONTAL) {
              this.horizontalCount = Math.floor(hCount);
            } else {
              this.verticalCount = Math.floor(vCount);
            }
          }
        };
        _proto._getContentPosition = function _getContentPosition() {
          if (!this._content) {
            return Vec3.ZERO.clone();
          }
          this._contentPos.set(this._content.position);
          return this._contentPos;
        }

        /**利用ScrollView本身方法 来标记滑动中 */;
        _proto._setContentPosition = function _setContentPosition(position) {
          // super.content!.position = position;
          // super['_setContentPosition'](position);
          if (!this._content) {
            return;
          }
          var contentPos = this._getContentPosition();
          if (Math.abs(position.x - contentPos.x) < EPSILON && Math.abs(position.y - contentPos.y) < EPSILON) {
            return;
          }
          this._content.setPosition(position);
          this._outOfBoundaryAmountDirty = true;
          this.refreshMark = true;
        }

        /**
         * 设置列表 子项回调
         * 回调会携带当前子项的 data 和 透传参数
         * @param cb 回调
         * @param cbT 作用域
         */;
        _proto.setItemCallback = function setItemCallback(cb, cbT) {
          this.callback = cb;
          this.cbThis = cbT;
        }

        /**子项回调 */;
        _proto.onItemCallback = function onItemCallback(data) {
          this.callback && this.callback.call(this.cbThis, data);
        }

        /**
         * 设置列表 无限滚动到底部后 回调
         * @param cb 回调
         * @param cbT 作用域
         */;
        _proto.setInfiniteScrollCallback = function setInfiniteScrollCallback(cb, cbT) {
          this.infiniteScrollCb = cb;
          this.infiniteScrollThis = cbT;
        }

        /**无限滚动到底部后 回调 */;
        _proto.onInfiniteScrollCallback = function onInfiniteScrollCallback() {
          this.moveBottom = false;
          if (this.infiniteScrollCb) {
            console.log("发送回调");
            this.infiniteScrollCb.call(this.infiniteScrollThis);
          }
        }

        /**
         * 刷新数据
         * @param data 数据源 单项|队列
         */;
        _proto.refreshData = function refreshData(data) {
          if (Array.isArray(data)) {
            this.dataList = data;
          } else {
            this.dataList = [data];
          }
          if (!this.isInit) {
            return;
          }
          if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
          }
          this.addItem();
          if (this.virtualList) {
            // this.refreshContentSize();
            this.forcedRefreshMark = true;
            this.refreshMark = true;
            this.interval = setInterval(this.refreshItem.bind(this), 1000 / 10);
            this.refreshItem();
          }
        }

        /**添加预制体 */;
        _proto.addItem = function addItem() {
          var _this2 = this;
          var len = 0;
          if (this.virtualList) {
            switch (this.contentLayout.type) {
              case Layout.Type.HORIZONTAL:
                len = this.horizontalCount;
                break;
              case Layout.Type.VERTICAL:
                len = this.verticalCount;
                break;
              case Layout.Type.GRID:
                len = this.horizontalCount * this.verticalCount;
                break;
            }
            len = Math.min(len, this.dataList.length);
          } else {
            len = this.dataList.length;
          }
          var itemListLen = this.itemList.length;
          if (itemListLen < len) {
            var itemRenderer;
            for (var i = itemListLen; i < len; i++) {
              var child = this.itemPool.length > 0 ? this.itemPool.shift() : instantiate(this.itemRenderer);
              this.content.addChild(child);
              this.itemList.push(child);
              itemRenderer = child.getComponent(AItemRenderer);
              this.itemRendererList.push(itemRenderer);
              itemRenderer.registerCallback(this.onItemCallback, this);
              if (this.autoChildrenSize) {
                child.on(NodeEventType.SIZE_CHANGED, this.delayChangeRefreshMark.bind(this, child), this);
              }
            }
          } else {
            var cL = this.content.children.length;
            var item;
            while (cL > len) {
              item = this.itemList[cL - 1];
              this.content.removeChild(item);
              this.itemList.splice(cL - 1, 1);
              this.itemRendererList.splice(cL - 1, 1);
              this.itemPool.push(item);
              cL = this.content.children.length;
            }
          }
          if (!this.virtualList) {
            this.dataList.forEach(function (v, idx) {
              _this2.itemRendererList[idx].data = v;
            });
          }
        }

        /**延迟一帧标记刷新列表数据 */;
        _proto.delayChangeRefreshMark = function delayChangeRefreshMark(node) {
          var itemRenderer = node.getComponent(AItemRenderer);
          if (!itemRenderer) {
            return;
          }
          var nowDataIdx = itemRenderer.nowDataIdx;
          var pos = this.posToSize[nowDataIdx];
          var nodeUITransform = this.node.getComponent(UITransform);
          //记录数据源索引Node改变后的大小
          if (pos) {
            if (pos.x == nodeUITransform.contentSize.x && pos.y == nodeUITransform.contentSize.y) {
              return;
            }
            pos.x = nodeUITransform.contentSize.x;
            pos.y = nodeUITransform.contentSize.y;
          } else {
            pos = nodeUITransform.contentSize.clone();
          }
          console.log("预刷新子项状态===" + nowDataIdx);
          this.posToSize[nowDataIdx] = pos;
          //延迟一帧刷新
          this.unschedule(this.changeRefreshMark);
          this.scheduleOnce(this.changeRefreshMark, 0);

          //立即刷新
          this.refreshMark = true;
          this.refreshItem();
        }

        /**标记刷新列表等定时刷新数据 */;
        _proto.changeRefreshMark = function changeRefreshMark() {
          // console.log("刷新子项状态");
          this.refreshMark = true;
        }

        /**根据数据数量 改变content宽高 */;
        _proto.refreshContentSize = function refreshContentSize() {
          var layout = this.contentLayout;
          var dataListLen = this.dataList.length;
          var value;
          var contentParentUI = this.content.parent.getComponent(UITransform);
          var contentUI = this.content.getComponent(UITransform);
          switch (this.contentLayout.type) {
            case Layout.Type.HORIZONTAL:
              value = layout.paddingLeft + layout.paddingRight;
              if (this.autoChildrenSize) {
                for (var i = 0; i < dataListLen; i++) {
                  var _this$posToSize$i$wid, _this$posToSize$i;
                  value += ((_this$posToSize$i$wid = (_this$posToSize$i = this.posToSize[i]) == null ? void 0 : _this$posToSize$i.width) != null ? _this$posToSize$i$wid : this.itemW - this.contentLayout.spacingX) + this.contentLayout.spacingX;
                }
              } else {
                value += dataListLen * this.itemW;
              }

              //排列方向从右到左排序的话，scrollview底层会计算content的位置，导致位置不对，content的宽度最小值改为父容器的大小
              if (this.contentLayout.horizontalDirection == Layout.HorizontalDirection.RIGHT_TO_LEFT) {
                var _width;
                value = Math.max(value, (_width = contentParentUI.width) != null ? _width : 0);
              }
              contentUI.width = value;
              break;
            case Layout.Type.VERTICAL:
              value = layout.paddingTop + layout.paddingBottom;
              if (this.autoChildrenSize) {
                for (var _i = 0; _i < dataListLen; _i++) {
                  var _this$posToSize$_i$he, _this$posToSize$_i;
                  value += ((_this$posToSize$_i$he = (_this$posToSize$_i = this.posToSize[_i]) == null ? void 0 : _this$posToSize$_i.height) != null ? _this$posToSize$_i$he : this.itemH - this.contentLayout.spacingY) + this.contentLayout.spacingY;
                }
              } else {
                value += dataListLen * this.itemH;
              }

              //排列方向从下到上排序的话，scrollview底层会计算content的位置，导致位置不对，content的高度最小值改为父容器的大小
              if (this.contentLayout.verticalDirection == Layout.VerticalDirection.BOTTOM_TO_TOP) {
                var _height;
                value = Math.max(value, (_height = contentParentUI.height) != null ? _height : 0);
              }
              contentUI.height = value;
              break;
            case Layout.Type.GRID:
              if (this.contentLayout.startAxis == Layout.AxisDirection.HORIZONTAL) {
                contentUI.height = layout.paddingTop + Math.ceil(dataListLen / this.horizontalCount) * this.itemH + layout.paddingBottom;
              } else if (this.contentLayout.startAxis == Layout.AxisDirection.VERTICAL) {
                contentUI.width = layout.paddingLeft + Math.ceil(dataListLen / this.verticalCount) * this.itemW + layout.paddingRight;
              }
              break;
          }
        }

        /**刷新预制体位置 和 数据填充 */;
        _proto.refreshItem = function refreshItem() {
          this.moveBottom && this.onInfiniteScrollCallback();
          if (!this.refreshMark) {
            return;
          }
          switch (this.contentLayout.type) {
            case Layout.Type.HORIZONTAL:
              this.refreshHorizontal();
              break;
            case Layout.Type.VERTICAL:
              this.refreshVertical();
              break;
            case Layout.Type.GRID:
              this.refreshGrid();
              break;
          }
          this.refreshContentSize();
          this.refreshMark = false;
          this.forcedRefreshMark = false;
        }

        /**刷新水平 */;
        _proto.refreshHorizontal = function refreshHorizontal() {
          var start = this.getStart();
          var end = start + this.horizontalCount;
          if (end > this.dataList.length) {
            //超出边界处理
            end = this.dataList.length;
            start = Math.max(end - this.horizontalCount, 0);
          }
          var tempV = 0;
          var itemListLen = this.itemList.length;
          var item, pos, idx;
          for (var i = 0; i < itemListLen; i++) {
            idx = (start + i) % itemListLen;
            item = this.itemList[idx];
            pos = item.getPosition();
            tempV = this.getPos(start + i);
            if (pos.x != tempV || this.forcedRefreshMark) {
              console.log("修改的数据=" + (start + i));
              pos.x = tempV;
              item.position = pos;
              var itemRenderer = this.itemRendererList[idx].node.getComponent(AItemRenderer);
              itemRenderer.nowDataIdx = start + i;
              this.itemRendererList[idx].data = this.dataList[start + i];

              //记录位置和node大小
              var trans = item.getComponent(UITransform);
              // const trans = item._uiProps.uiTransformComp;
              this.posToSize[start + i] = trans.contentSize.clone();
              if (this.infiniteScroll && start > 0 && start + i == this.dataList.length - 1) {
                this.moveBottom = true;
              }
            }
          }
        }

        /**刷新垂直 */;
        _proto.refreshVertical = function refreshVertical() {
          var start = this.getStart();
          var end = start + this.verticalCount;
          if (end > this.dataList.length) {
            end = this.dataList.length;
            start = Math.max(end - this.verticalCount, 0);
          }
          var tempV = 0;
          var itemListLen = this.itemList.length;
          var item, pos, idx;
          for (var i = 0; i < itemListLen; i++) {
            idx = (start + i) % itemListLen;
            item = this.itemList[idx];
            pos = item.getPosition();
            tempV = this.getPos(start + i);
            if (pos.y != tempV || this.forcedRefreshMark) {
              console.log("修改的数据=" + (start + i));
              pos.y = tempV;
              item.position = pos;
              var itemRenderer = this.itemRendererList[idx].node.getComponent(AItemRenderer);
              itemRenderer.nowDataIdx = start + i;
              this.itemRendererList[idx].data = this.dataList[start + i];

              //记录位置和node大小
              var trans = item.getComponent(UITransform);
              // const trans = item._uiProps.uiTransformComp;
              this.posToSize[start + i] = trans.contentSize.clone();
              if (this.infiniteScroll && start > 0 && start + i == this.dataList.length - 1) {
                this.moveBottom = true;
              }
            }
          }
        }

        /**刷新网格 */;
        _proto.refreshGrid = function refreshGrid() {
          //是否垂直方向 添加网格
          var isVDirection = this.contentLayout.startAxis == Layout.AxisDirection.VERTICAL;
          var start = Math.floor(Math.abs(this.content.position.y) / this.itemH) * this.horizontalCount;
          if (isVDirection) {
            start = Math.floor(Math.abs(this.content.position.x) / this.itemW) * this.verticalCount;
            if (this.content.position.x > 0) {
              start = 0;
            }
          } else if (this.content.position.y < 0) {
            start = 0;
          }
          if (start < 0) {
            start = 0;
          }
          var end = start + this.horizontalCount * this.verticalCount;
          if (end > this.dataList.length) {
            end = this.dataList.length;
            start = Math.max(end - this.horizontalCount * this.verticalCount, 0);
          }
          var tempX = 0;
          var tempY = 0;
          var itemListLen = this.itemList.length;
          var item, pos, idx;
          for (var i = 0; i < itemListLen; i++) {
            idx = (start + i) % itemListLen;
            item = this.itemList[idx];
            pos = item.getPosition();
            if (isVDirection) {
              tempX = this.startPos.x + this.direction.x * Math.floor((start + i) / this.verticalCount) * this.itemW;
              tempY = this.startPos.y + this.direction.y * ((start + i) % this.verticalCount) * this.itemH;
            } else {
              tempX = this.startPos.x + this.direction.x * ((start + i) % this.horizontalCount) * this.itemW;
              tempY = this.startPos.y + this.direction.y * Math.floor((start + i) / this.horizontalCount) * this.itemH;
            }
            if (pos.y != tempY || pos.x != tempX || this.forcedRefreshMark) {
              console.log("修改的数据=" + (start + i));
              pos.x = tempX;
              pos.y = tempY;
              item.position = pos;
              this.itemRendererList[idx].data = this.dataList[start + i];
              if (this.infiniteScroll && start > 0 && start + i == this.dataList.length - 1) {
                this.moveBottom = true;
              }
            }
          }
        }

        /**获取开始索引 */;
        _proto.getStart = function getStart() {
          var start = 0;
          /**节点高度 */
          var value = 0;
          switch (this.contentLayout.type) {
            case Layout.Type.HORIZONTAL:
              if (this.autoChildrenSize) {
                value = Math.abs(this.content.position.x);
                for (var item in this.posToSize) {
                  var _this$posToSize$item$, _this$posToSize$item;
                  value -= ((_this$posToSize$item$ = (_this$posToSize$item = this.posToSize[item]) == null ? void 0 : _this$posToSize$item.width) != null ? _this$posToSize$item$ : this.itemW - this.contentLayout.spacingX) + this.contentLayout.spacingX;
                  if (value <= 0) {
                    break;
                  } else {
                    start++;
                  }
                }
              } else {
                start = Math.floor(Math.abs(this.content.position.x) / this.itemW);
              }

              //超出边界处理
              if (this.contentLayout.horizontalDirection == Layout.HorizontalDirection.LEFT_TO_RIGHT && this.content.position.x > 0 || this.contentLayout.horizontalDirection == Layout.HorizontalDirection.RIGHT_TO_LEFT && this.content.position.x < 0) {
                start = 0;
              }
              break;
            case Layout.Type.VERTICAL:
              if (this.autoChildrenSize) {
                value = Math.abs(this.content.position.y);
                for (var _item in this.posToSize) {
                  var _this$posToSize$_item, _this$posToSize$_item2;
                  value -= ((_this$posToSize$_item = (_this$posToSize$_item2 = this.posToSize[_item]) == null ? void 0 : _this$posToSize$_item2.height) != null ? _this$posToSize$_item : this.itemH - this.contentLayout.spacingY) + this.contentLayout.spacingY;
                  if (value <= 0) {
                    break;
                  } else {
                    start++;
                  }
                }
              } else {
                start = Math.floor(Math.abs(this.content.position.y) / this.itemH);
              }

              //超出边界处理
              if (this.contentLayout.verticalDirection == Layout.VerticalDirection.TOP_TO_BOTTOM && this.content.position.y < 0 || this.contentLayout.verticalDirection == Layout.VerticalDirection.BOTTOM_TO_TOP && this.content.position.y > 0) {
                start = 0;
              }
              break;
            case Layout.Type.GRID:
              console.error("暂不支持网格布局");
              break;
          }
          if (start < 0) {
            start = 0;
          }
          return start;
        }

        /**根据索引获取位置 */;
        _proto.getPos = function getPos(idx) {
          var position = 0;
          var h, w;
          switch (this.contentLayout.type) {
            case Layout.Type.HORIZONTAL:
              if (this.autoChildrenSize) {
                //重置开始位置
                if (idx == 0) {
                  var _this$posToSize$0$wid2, _this$posToSize$3;
                  w = (_this$posToSize$0$wid2 = (_this$posToSize$3 = this.posToSize[0]) == null ? void 0 : _this$posToSize$3.width) != null ? _this$posToSize$0$wid2 : this.itemH - this.contentLayout.spacingX;
                  this.startPos.x = w * this.anchorPoint.x * this.direction.x;
                }
                position += this.startPos.x + this.padding.x * this.direction.x;
                for (var i = 1; i <= idx; i++) {
                  var _this$posToSize$width, _this$posToSize, _this$posToSize$i$wid2, _this$posToSize$i2;
                  w = (_this$posToSize$width = (_this$posToSize = this.posToSize[i - 1]) == null ? void 0 : _this$posToSize.width) != null ? _this$posToSize$width : this.itemW - this.contentLayout.spacingX;
                  position += (w - w * this.anchorPoint.x + this.contentLayout.spacingX) * this.direction.x;
                  w = (_this$posToSize$i$wid2 = (_this$posToSize$i2 = this.posToSize[i]) == null ? void 0 : _this$posToSize$i2.width) != null ? _this$posToSize$i$wid2 : this.itemW - this.contentLayout.spacingX;
                  position += w * this.anchorPoint.x * this.direction.x;
                }
              } else {
                position = this.startPos.x + idx * this.itemW * this.direction.x;
              }
              break;
            case Layout.Type.VERTICAL:
              if (this.autoChildrenSize) {
                //重置开始位置
                if (idx == 0) {
                  var _this$posToSize$0$hei2, _this$posToSize$4;
                  h = (_this$posToSize$0$hei2 = (_this$posToSize$4 = this.posToSize[0]) == null ? void 0 : _this$posToSize$4.height) != null ? _this$posToSize$0$hei2 : this.itemH - this.contentLayout.spacingY;
                  this.startPos.y = (h - h * this.anchorPoint.y) * this.direction.y;
                }
                position += this.startPos.y + this.padding.y * this.direction.y;
                for (var _i2 = 1; _i2 <= idx; _i2++) {
                  var _this$posToSize$heigh, _this$posToSize2, _this$posToSize$_i2$h, _this$posToSize$_i2;
                  h = ((_this$posToSize$heigh = (_this$posToSize2 = this.posToSize[_i2 - 1]) == null ? void 0 : _this$posToSize2.height) != null ? _this$posToSize$heigh : this.itemH - this.contentLayout.spacingY) * this.anchorPoint.y + this.contentLayout.spacingY;
                  position += h * this.direction.y;
                  h = (_this$posToSize$_i2$h = (_this$posToSize$_i2 = this.posToSize[_i2]) == null ? void 0 : _this$posToSize$_i2.height) != null ? _this$posToSize$_i2$h : this.itemH - this.contentLayout.spacingY;
                  position += (h - h * this.anchorPoint.y) * this.direction.y;
                }
              } else {
                position = this.startPos.y + idx * this.itemH * this.direction.y;
              }
              break;
            case Layout.Type.GRID:
              console.error("暂不支持网格布局");
              break;
          }
          return position;
        };
        _proto.onDestroy = function onDestroy() {
          this.dataList = [];
          this.itemList = [];
          this.itemRendererList = [];
          this.posToSize = {};
          this.itemPool.forEach(function (item) {
            item.destroy();
          });
          this.itemPool = [];
          if (this.interval) {
            clearInterval(this.interval);
          }
          this.node.targetOff(this);
        };
        return AVirtualScrollView;
      }(ScrollView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemRenderer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "virtualList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "infiniteScroll", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "autoChildrenSize", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseDifficultyStrategy.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "47aaaFfgP5M6aYknCreRQtZ", "BaseDifficultyStrategy", undefined);
      /**
       * 难度策略基础抽象类
       * 
       * 核心职责：
       * 1. 提供策略模式的默认实现
       * 2. 封装通用的难度调整逻辑
       * 3. 为具体策略实现提供工具方法
       * 
       * 设计要点：
       * - 抽象类（不能被直接实例化）
       * - 实现IDifficultyStrategy基础接口
       * - 使用oops框架的存储系统
       */
      var BaseDifficultyStrategy = exports('BaseDifficultyStrategy', /*#__PURE__*/function () {
        function BaseDifficultyStrategy() {}
        var _proto = BaseDifficultyStrategy.prototype;
        /**
         * 创建难度调整建议对象的工具方法
         * 
         * @param shouldAdjust 是否需要调整
         * @param adjustedDifficulty 建议调整到的难度
         * @param reason 调整原因（用于调试）
         * @param confidence 调整置信度（0-1）
         * @returns 标准化后的DifficultyAdjustment对象
         * 
         * 设计目的：
         * - 封装对象创建逻辑
         * - 保证返回对象符合接口规范
         * 
         * 使用示例：
         * ```ts
         * return this.createAdjustment(
         *   true,
         *   SudokuDifficulty.Novice,
         *   AdjustmentReason.CONSECUTIVE_FAILURES,
         *   0.8
         * );
         * ```
         */
        _proto.createAdjustment = function createAdjustment(shouldAdjust, adjustedDifficulty, reason, confidence) {
          return {
            shouldAdjust: shouldAdjust,
            adjustedDifficulty: adjustedDifficulty,
            reason: reason,
            confidence: Math.min(1, Math.max(0, confidence || 0)) // 确保在0-1范围内
          };
        };

        return BaseDifficultyStrategy;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseStrategy.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f5e67TmrqFPSZfYyRaqBsLO", "BaseStrategy", undefined);
      /**
       * 策略基类
       */
      var BaseStrategy = exports('BaseStrategy', function BaseStrategy() {});
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseSudokuCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './GameLogic.ts', './NoteNumber.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Node, Color, UITransform, Vec3, Component, Configuration, CellRelationType, AssociationType, NoteNumber;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      Color = module.Color;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      CellRelationType = module.CellRelationType;
      AssociationType = module.AssociationType;
    }, function (module) {
      NoteNumber = module.NoteNumber;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "22affruWrtBVK9vk6mwND0/", "BaseSudokuCell", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseSudokuCell = exports('BaseSudokuCell', (_dec = ccclass('BaseSudokuCell'), _dec2 = property({
        type: Sprite,
        tooltip: "单元格背景",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "单元格文字",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "笔记节点根节点",
        visible: true
      }), _dec5 = property({
        type: [Node],
        tooltip: "笔记节点",
        visible: true
      }), _dec6 = property(Color), _dec7 = property({
        type: Node,
        tooltip: "遮罩节点",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseSudokuCell, _Component);
        function BaseSudokuCell() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cellBG", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cellLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeNoteRoot", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeNotes", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "warningColor", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mask", _descriptor6, _assertThisInitialized(_this));
          _this.row = 0;
          // 行
          _this.col = 0;
          // 列
          _this.cellNumber = 0;
          // 填入的数字
          _this.solutionNumber = 0;
          // 答案数字
          _this.canFill = false;
          // 是否可填写
          /** 与选中单元格的关系 */
          _this.relation = {
            type: CellRelationType.UNRELATED,
            isSameNumber: false
          };
          // 是否选中
          _this.selectNumber = 0;
          //选中的数字
          _this.notesNumber = [0, 0, 0, 0, 0, 0, 0, 0, 0];
          _this.appSettings = void 0;
          _this.themeConfig = void 0;
          return _this;
        }
        var _proto = BaseSudokuCell.prototype;
        // 初始化方法
        _proto.init = function init(row, col, cellSize, cellNumber) {
          if (cellNumber === void 0) {
            cellNumber = 0;
          }
          this.row = row;
          this.col = col;
          this.cellNumber = cellNumber;
          var uiTransform = this.getComponent(UITransform);
          this.node.scale = new Vec3(cellSize / uiTransform.contentSize.width, cellSize / uiTransform.contentSize.height);
          this.hideAllNodeNote();
          this.cellLabel.node.active = true;
          this.mask.active = false;
          if (this.cellNumber == 0) {
            this.cellLabel.string = "";
            this.canFill = true;
          } else {
            this.cellLabel.string = cellNumber.toString();
            this.canFill = false;
          }
          this.refreshCell();
        }

        /**
         * setTheme
         */;
        _proto.setThemeConfig = function setThemeConfig(themeConfig) {
          this.themeConfig = themeConfig;
        }
        /**
         * 初始化数字
         */;
        _proto.initNumber = function initNumber(cellNumber, solutionNumber) {
          this.reset();
          this.cellNumber = cellNumber;
          this.solutionNumber = solutionNumber;
          this.cellLabel.node.active = true; // 记得将文字的显示状态重置，否则一下的设置可能不生效
          if (this.cellNumber == 0) {
            this.cellLabel.string = "";
            this.canFill = true;
          } else {
            // console.log(`${this.row}-${this.col}填入的数字`,cellNumber);
            this.cellLabel.string = cellNumber.toString();
            this.canFill = false;
          }
          this.refreshCell();
        }
        /**
         * 初始化笔记数字
         */;
        _proto.hideAllNodeNote = function hideAllNodeNote() {
          this.nodeNoteRoot.active = false;
          this.notesNumber = [0, 0, 0, 0, 0, 0, 0, 0, 0];
          this.nodeNotes.forEach(function (element, index) {
            element.active = false;
          });
        }

        /**
         * reset
         */;
        _proto.reset = function reset() {
          this.hideAllNodeNote();
          this.cellLabel.string = "";
          this.canFill = false;
          this.mask.active = false;
        };
        _proto.refreshCell = function refreshCell() {
          var _this$appSettings;
          if (!this.themeConfig) {
            return;
          }
          this.setNoteColor(new Color(this.themeConfig.noteTextColor));
          var isError = this.cellNumber && this.cellNumber != 0 && !this.checkIsFinish() && this.canFill;
          if (isError) {
            this.applyErrorStyle();
          }
          // 判断是否在同一9宫格或行或列
          switch (this.relation.type) {
            case CellRelationType.SELECTED:
              this.applySelectedStyle();
              break;
            case CellRelationType.ASSOCIATED:
              this.applyAssociatedStyle();
              break;
            default:
              this.applyDefaultStyle();
              break;
          }

          // 判断文字是否相同，相同时判断是否无关联
          if (this.relation.isSameNumber && (_this$appSettings = this.appSettings) != null && _this$appSettings.highlight.sameDigits) {
            this.cellBG.color = new Color(this.themeConfig.sameNumberBackground);
            // this.cellLabel.color = new Color(this.themeConfig.sameNumberTextColor);
          }

          if (isError) {
            if (this.relation.type == CellRelationType.SELECTED) {
              this.cellLabel.color = new Color(this.themeConfig.selectedErrorTextColor);
            } else {
              this.cellLabel.color = new Color(this.themeConfig.errorTextColor);
            }
          }
        };
        _proto.setNoteColor = function setNoteColor(labelColor) {
          var _this2 = this;
          this.nodeNotes.forEach(function (element, index) {
            if (!_this2.themeConfig) {
              return;
            }
            var noteNumber = element.getComponent(NoteNumber);
            if (noteNumber) {
              var _this2$appSettings;
              if (noteNumber.number === _this2.selectNumber && (_this2$appSettings = _this2.appSettings) != null && _this2$appSettings.highlight.duplicateCandidates) {
                noteNumber.setBGColor(new Color(Configuration.getInstance().getThemeConfig().sameNumberNoteBackground));
                noteNumber.setLabelColor(new Color(Configuration.getInstance().getThemeConfig().sameNumberNoteTextColor));
              } else {
                noteNumber.setBGColor();
                noteNumber.setLabelColor(labelColor);
              }
            }
          });
        }
        //检测是否完成单元格填入
        ;

        _proto.checkIsFinish = function checkIsFinish() {
          return this.cellNumber === this.solutionNumber;
        }
        // 提取样式应用方法
        ;

        _proto.applyErrorStyle = function applyErrorStyle() {
          if (!this.themeConfig) {
            return;
          }
          var theme = this.themeConfig;
          this.cellBG.color = new Color(theme.errorBackground);
          this.cellLabel.color = new Color(theme.errorTextColor);
        };
        _proto.applySelectedStyle = function applySelectedStyle() {
          if (!this.themeConfig) {
            return;
          }
          var theme = this.themeConfig;
          this.cellBG.color = new Color(theme.selectedCellBackground);
          this.cellLabel.color = new Color(theme.selectedCellTextColor);
          this.setNoteColor(new Color(theme.selectedNoteTextColor));
        };
        _proto.applyAssociatedStyle = function applyAssociatedStyle() {
          var _this3 = this;
          if (this.relation.type == CellRelationType.ASSOCIATED) {
            var shouldHighlight = this.relation.spaceRelations.some(function (relation) {
              var _this3$appSettings, _this3$appSettings2;
              return (relation === AssociationType.ROW || relation === AssociationType.COLUMN) && ((_this3$appSettings = _this3.appSettings) == null ? void 0 : _this3$appSettings.highlight.rowsColumns) || relation === AssociationType.BOX && ((_this3$appSettings2 = _this3.appSettings) == null ? void 0 : _this3$appSettings2.highlight.blocks);
            });

            // 判断是否需要高亮数字关联（行/列/宫）
            var highlightNumber = this.relation.numberRelations.some(function (relation) {
              var _this3$appSettings3, _this3$appSettings4;
              return (relation === AssociationType.ROW || relation === AssociationType.COLUMN) && ((_this3$appSettings3 = _this3.appSettings) == null ? void 0 : _this3$appSettings3.highlight.allRowsColumns) || relation === AssociationType.BOX && ((_this3$appSettings4 = _this3.appSettings) == null ? void 0 : _this3$appSettings4.highlight.allBlocks);
            });
            if (shouldHighlight || highlightNumber) {
              this.applyHighlightedStyle();
            } else {
              this.applyDefaultStyle();
            }
          }
        };
        _proto.applyHighlightedStyle = function applyHighlightedStyle() {
          if (!this.themeConfig) {
            return;
          }
          var theme = this.themeConfig;
          this.cellBG.color = new Color(theme.relatedAreaBackground);
          this.applyTextColor();
        };
        _proto.applyDefaultStyle = function applyDefaultStyle() {
          if (!this.themeConfig) {
            return;
          }
          var theme = this.themeConfig;
          this.cellBG.color = new Color(theme.cellBackground);
          this.applyTextColor();
        };
        _proto.applyTextColor = function applyTextColor() {
          if (!this.themeConfig) {
            return;
          }
          var theme = this.themeConfig;
          this.cellLabel.color = new Color(this.canFill ? theme.prefilledTextColor : theme.cellTextColor);
        };
        _proto.setNumber = function setNumber(_temp) {
          var _ref = _temp === void 0 ? {
              number: undefined
            } : _temp,
            number = _ref.number,
            _ref$isUndo = _ref.isUndo,
            _ref$isHint = _ref.isHint,
            _ref$isErase = _ref.isErase,
            isErase = _ref$isErase === void 0 ? true : _ref$isErase;
          //重复写入为置空
          if (number === this.cellNumber && isErase) {
            number = 0;
          }
          if (number === undefined) {
            number = 0;
          }
          this.cellNumber = number;
          this.cellLabel.node.active = true;
          this.nodeNoteRoot.active = false;
          if (this.cellNumber == 0) {
            this.cellLabel.string = "";
            this.nodeNoteRoot.active = true;
          } else {
            this.cellLabel.string = number.toString();
          }
        };
        _proto.setNoteNumber = function setNoteNumber(_temp2) {
          var _this4 = this;
          var _ref2 = _temp2 === void 0 ? {
              number: undefined
            } : _temp2,
            number = _ref2.number,
            _ref2$isVisible = _ref2.isVisible,
            isVisible = _ref2$isVisible === void 0 ? true : _ref2$isVisible,
            _ref2$isUndo = _ref2.isUndo,
            _ref2$isHint = _ref2.isHint;
          if (typeof number === "string") {
            var notesStr = number;
            this.hideAllNodeNote();
            var array = notesStr.split('').map(Number);
            array.forEach(function (element) {
              if (element >= 1 && element <= 9) {
                if (_this4.cellNumber == 0) {
                  _this4.cellLabel.node.active = false;
                  _this4.nodeNoteRoot.active = true;
                  _this4.nodeNotes[element - 1].active = true;
                  _this4.notesNumber[element - 1] = element;
                }
              }
            });
          } else {
            if (this.cellNumber != 0) {
              return;
            }
            if (number === undefined) {
              number = 0;
            }
            if (number != 0) {
              var index = number;
              number = isVisible ? number : 0;

              //重复写入为置空
              if (number === this.notesNumber[index - 1]) {
                number = 0;
              }
              this.cellLabel.node.active = false;
              this.nodeNoteRoot.active = true;
              this.notesNumber[index - 1] = number;
              this.nodeNotes[index - 1].active = number != 0;
            } else {
              this.hideAllNodeNote();
            }
          }
        };
        return BaseSudokuCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cellBG", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cellLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeNoteRoot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeNotes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "warningColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 100, 100, 255);
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseSudokuGrid.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameLogic.ts', './BaseSudokuCell.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Graphics, Node, Color, UITransform, Vec2, instantiate, Component, GameLogic, BaseSudokuCell;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      Node = module.Node;
      Color = module.Color;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      BaseSudokuCell = module.BaseSudokuCell;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "461c4NNHIVAe4e2dq+e5ZA9", "BaseSudokuGrid", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BaseSudokuGrid = exports('BaseSudokuGrid', (_dec = ccclass('BaseSudokuGrid'), _dec2 = property({
        type: Prefab,
        tooltip: "单元格预制体",
        visible: true
      }), _dec3 = property({
        type: Graphics,
        tooltip: "绘制组件",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "单元格根节点",
        visible: true
      }), _dec5 = property(Color), _dec6 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseSudokuGrid, _Component);
        function BaseSudokuGrid() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cellPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cellRoot", _descriptor3, _assertThisInitialized(_this));
          // 线宽配置
          _initializerDefineProperty(_this, "lineWidth", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "boldLineWidth", _descriptor5, _assertThisInitialized(_this));
          // 颜色配置
          _initializerDefineProperty(_this, "normalColor", _descriptor6, _assertThisInitialized(_this));
          // 细线颜色（默认灰色）
          _initializerDefineProperty(_this, "boldColor", _descriptor7, _assertThisInitialized(_this));
          // 粗线颜色（默认黑色）
          _this.gridSize = 0;
          _this.cellSize = 0;
          _this.halfSize = 0;
          // 单元格容器
          _this.cells = [];
          _this.themeConfig = void 0;
          return _this;
        }
        var _proto = BaseSudokuGrid.prototype;
        _proto.init = function init(themeConfig, gameData) {
          this.themeConfig = themeConfig;
          this.normalColor = new Color(this.themeConfig.thinLineColor);
          this.boldColor = new Color(this.themeConfig.boldLineColor);
          var uiTransform = this.getComponent(UITransform);
          this.gridSize = uiTransform.width;
          this.cellSize = this.gridSize / 9;
          this.halfSize = this.gridSize / 2;
          this.graphics.lineCap = Graphics.LineCap.SQUARE;
          this.graphics.lineJoin = Graphics.LineJoin.ROUND;
          this.drawGridLines(false);
          this.createBaseSudokuCells();
          this.refreshSudokuData(gameData);
        };
        _proto.drawGridLines = function drawGridLines(isBoldOnly) {
          this.graphics.clear();
          if (!isBoldOnly) {
            // 绘制细线
            for (var i = 0; i <= 9; i++) {
              if (i % 3 === 0) continue;
              var pos = i * this.cellSize - this.halfSize;

              // 水平线
              this.drawLine(new Vec2(-this.halfSize, pos), new Vec2(this.halfSize, pos), this.lineWidth, this.normalColor);

              // 垂直线
              this.drawLine(new Vec2(pos, -this.halfSize), new Vec2(pos, this.halfSize), this.lineWidth, this.normalColor);
            }
          }

          // 绘制粗线
          for (var _i = 0; _i <= 3; _i++) {
            var _pos = _i * 3 * this.cellSize - this.halfSize;

            // 水平线
            this.drawLine(new Vec2(-this.halfSize, _pos), new Vec2(this.halfSize, _pos), this.boldLineWidth, this.boldColor);

            // 垂直线
            this.drawLine(new Vec2(_pos, -this.halfSize), new Vec2(_pos, this.halfSize), this.boldLineWidth, this.boldColor);
          }
        };
        _proto.drawLine = function drawLine(start, end, lineWidth, strokeColor) {
          this.graphics.lineWidth = lineWidth;
          this.graphics.strokeColor = strokeColor;
          this.graphics.moveTo(start.x, start.y);
          this.graphics.lineTo(end.x, end.y);
          this.graphics.stroke();
          this.graphics.fill();
        }

        // 新增方法：创建数独单元格
        ;

        _proto.createBaseSudokuCells = function createBaseSudokuCells() {
          this.cellRoot.removeAllChildren();
          this.cells = [];
          var cellSize = this.gridSize / 9;
          for (var row = 0; row < 9; row++) {
            this.cells[row] = [];
            for (var col = 0; col < 9; col++) {
              this.createCell(row, col, cellSize);
            }
          }
        }

        // 创建单个单元格
        ;

        _proto.createCell = function createCell(row, col, baseSize) {
          if (!this.cellPrefab) return;

          // 计算实际可用尺寸（扣除线宽）
          var lineWidth = this.getLineWidth(row, col);
          var actualSize = baseSize - (lineWidth.left + lineWidth.right) / 2;

          // 调整位置计算（考虑线宽偏移）
          var posOffsetX = (lineWidth.left - lineWidth.right) / 2;
          var posOffsetY = (lineWidth.bottom - lineWidth.top) / 2;

          // 实例化预制体
          var cell = instantiate(this.cellPrefab);

          // 设置位置（以中心为锚点）
          var posX = col * baseSize - this.halfSize + baseSize / 2 + posOffsetX;
          var posY = this.halfSize - row * baseSize - baseSize / 2 + posOffsetY;
          cell.setPosition(posX, posY);

          // 设置单元格数据（需要自行实现BaseSudokuCell组件）
          var cellComponent = cell.getComponent(BaseSudokuCell);
          if (cellComponent) {
            cellComponent.init(row, col, actualSize, 0);
            if (this.themeConfig) {
              cellComponent.setThemeConfig(this.themeConfig);
            }
            this.cells[row][col] = cellComponent;
          }
          cell.parent = this.cellRoot;
        }

        // 新增线宽计算方法
        ;

        _proto.getLineWidth = function getLineWidth(row, col) {
          // 判断是否在粗线边界
          var isBoldLeft = col % 3 === 0;
          var isBoldRight = (col + 1) % 3 === 0;
          var isBoldTop = row % 3 === 0;
          var isBoldBottom = (row + 1) % 3 === 0;
          return {
            left: isBoldLeft ? this.boldLineWidth : this.lineWidth,
            right: isBoldRight ? this.boldLineWidth : this.lineWidth,
            top: isBoldTop ? this.boldLineWidth : this.lineWidth,
            bottom: isBoldBottom ? this.boldLineWidth : this.lineWidth
          };
        };
        _proto.refreshSudokuData = function refreshSudokuData(gameData) {
          var puzzle = GameLogic.parseSudokuString(gameData.puzzleStr);
          var solution = GameLogic.parseSudokuString(gameData.solutionStr);
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              this.cells[row][col].initNumber(puzzle[row][col], solution[row][col]);
              var cellKey = row + "-" + col;
              var inputNotes = gameData.userInputNotes.get(cellKey);
              if (inputNotes) {
                this.cells[row][col].setNoteNumber({
                  number: inputNotes,
                  isUndo: true
                });
              }
              var input = gameData.userInputs.get(cellKey);
              if (input) {
                this.cells[row][col].setNumber({
                  number: input,
                  isUndo: true
                });
              }
            }
          }
        };
        return BaseSudokuGrid;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cellPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cellRoot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lineWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "boldLineWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "normalColor", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(150, 150, 150, 255);
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "boldColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(0, 0, 0, 255);
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BeginnerBasicStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './BaseDifficultyStrategy.ts', './DifficultyTypes.ts'], function (exports) {
  var _inheritsLoose, cclegacy, SudokuDifficulty, BaseDifficultyStrategy, AdjustmentReason;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      SudokuDifficulty = module.SudokuDifficulty;
    }, function (module) {
      BaseDifficultyStrategy = module.BaseDifficultyStrategy;
    }, function (module) {
      AdjustmentReason = module.AdjustmentReason;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e993eNOmvhFJ6xzv0xhL5KJ", "BeginnerBasicStrategy", undefined);

      /**
       * 初学者难度调整策略
       * 
       * 核心职责：
       * 1. 监控 Beginner 难度（1级）的玩家表现
       * 2. 当玩家持续表现不佳时触发降级到 Novice（0级）
       * 3. 提供降级后的清理操作
       * 
       * 策略条件（满足任一即触发降级）：
       * 1. 连续3次未完成且进度不足50%
       * 2. 全局最近5局完成率低于40%
       * 
       * 设计说明：
       * - 继承自 BaseDifficultyStrategy 基础类
       * - 仅针对 Beginner 难度生效
       * - 降级目标固定为 Novice 难度
       */
      var BeginnerBasicStrategy = exports('BeginnerBasicStrategy', /*#__PURE__*/function (_BaseDifficultyStrate) {
        _inheritsLoose(BeginnerBasicStrategy, _BaseDifficultyStrate);
        function BeginnerBasicStrategy() {
          return _BaseDifficultyStrate.apply(this, arguments) || this;
        }
        var _proto = BeginnerBasicStrategy.prototype;
        /**
         * 严格条件评估（检查最近连续2局）
         * @param history 游戏历史数据
         * @returns 调整建议
         * 
         * 判断逻辑：
         * 触发降级的两种情况：
         * 1. 完全没有游戏记录（新玩家）
         * 2. 连续2局Beginner难度且：
         *    - 完成度 >50%
         *    - 未完成
         */
        _proto.evaluate = function evaluate(history) {
          // 获取就近2局游戏（不筛选状态）
          var recentGames = history.getRecentGames(2);
          var noHistory = recentGames.length === 0;
          if (noHistory) {
            return this.createAdjustment(true, SudokuDifficulty.Novice);
          }

          // 严格连续检查（确保是最近连续的两局）
          var isConsecutive = recentGames.length === 2;

          // 条件判断
          var shouldDowngrade = isConsecutive && recentGames.every(function (game) {
            return game.difficulty === SudokuDifficulty.Beginner && game.progress > 0.5 && !game.isCompleted;
          });
          return this.createAdjustment(shouldDowngrade, shouldDowngrade ? SudokuDifficulty.Novice : undefined, shouldDowngrade ? AdjustmentReason.CONSECUTIVE_FAILURES : undefined, shouldDowngrade ? 0.8 : 0);
        };
        return BeginnerBasicStrategy;
      }(BaseDifficultyStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BehaviorTree.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BTreeNode.ts'], function (exports) {
  var _createClass, cclegacy, BTreeNode;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BTreeNode = module.BTreeNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "22a91RP3fNG/rWWAXlmM4BT", "BehaviorTree", undefined);
      var countUnnamed = 0;

      /** 行为树 */
      var BehaviorTree = exports('BehaviorTree', /*#__PURE__*/function () {
        /**
         * 构造函数
         * @param node          根节点
         * @param blackboard    外部参数对象
         */
        function BehaviorTree(node, blackboard) {
          this.title = void 0;
          /** 根节点 */
          this._root = void 0;
          /** 当前执行节点 */
          this._current = void 0;
          /** 是否已开始执行 */
          this._started = false;
          /** 外部参数对象 */
          this._blackboard = void 0;
          countUnnamed += 1;
          this.title = node.constructor.name + '(btree_' + countUnnamed + ')';
          this._root = node;
          this._blackboard = blackboard;
        }

        /** 设置行为逻辑中的共享数据 */
        var _proto = BehaviorTree.prototype;
        _proto.setObject = function setObject(blackboard) {
          this._blackboard = blackboard;
        }

        /** 执行行为树逻辑 */;
        _proto.run = function run() {
          if (this._started) {
            console.error("\u884C\u4E3A\u6811\u3010" + this.title + "\u3011\u672A\u8C03\u7528\u6B65\u9AA4\uFF0C\u5728\u6700\u540E\u4E00\u6B21\u8C03\u7528\u6B65\u9AA4\u65F6\u6709\u4E00\u4E2A\u4EFB\u52A1\u672A\u5B8C\u6210");
          }
          this._started = true;
          var node = BehaviorTree.getNode(this._root);
          this._current = node;
          node.setControl(this);
          node.start(this._blackboard);
          node.run(this._blackboard);
        };
        _proto.running = function running(node) {
          this._started = false;
        };
        _proto.success = function success() {
          this._current.end(this._blackboard);
          this._started = false;
        };
        _proto.fail = function fail() {
          this._current.end(this._blackboard);
          this._started = false;
        }

        /** ---------------------------------------------------------------------------------------------------- */;
        BehaviorTree.register = function register(name, node) {
          this._registeredNodes.set(name, node);
        };
        BehaviorTree.getNode = function getNode(name) {
          var node = name instanceof BTreeNode ? name : this._registeredNodes.get(name);
          if (!node) {
            throw new Error("\u65E0\u6CD5\u627E\u5230\u8282\u70B9\u3010" + name + "\u3011\uFF0C\u53EF\u80FD\u5B83\u6CA1\u6709\u6CE8\u518C\u8FC7");
          }
          return node;
        };
        _createClass(BehaviorTree, [{
          key: "started",
          get: /** 是否已开始执行 */
          function get() {
            return this._started;
          }
        }]);
        return BehaviorTree;
      }());
      BehaviorTree._registeredNodes = new Map();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BhvButtonGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, Button, SpriteFrame, EventHandler, Component, color;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      EventHandler = module.EventHandler;
      Component = module.Component;
      color = module.color;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
      cclegacy._RF.push({}, "41df676L55LvJ52uxkQpfxJ", "BhvButtonGroup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var PARAM_TYPE = /*#__PURE__*/function (PARAM_TYPE) {
        PARAM_TYPE[PARAM_TYPE["CHILDREN_INDEX"] = 0] = "CHILDREN_INDEX";
        PARAM_TYPE[PARAM_TYPE["CHILDREN_NAME"] = 1] = "CHILDREN_NAME";
        return PARAM_TYPE;
      }(PARAM_TYPE || {});
      /**
       * 群体事件，适合绑定节点组的回调信息
       * 将该组件的所处节点的所有子节点，绑定相同的回调对象，并将组件名设置到customEventData属性中
       */
      var BhvButtonGroup = exports('BhvButtonGroup', (_dec = menu("OopsFramework/UI/Button Group （按钮组控制）"), _dec2 = property({
        type: Enum(Button.Transition)
      }), _dec3 = property({
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.COLOR;
        }
      }), _dec4 = property({
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.COLOR;
        }
      }), _dec5 = property({
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.COLOR;
        }
      }), _dec6 = property({
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.COLOR;
        }
      }), _dec7 = property({
        type: SpriteFrame,
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.SPRITE;
        }
      }), _dec8 = property({
        type: SpriteFrame,
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.SPRITE;
        }
      }), _dec9 = property({
        type: SpriteFrame,
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.SPRITE;
        }
      }), _dec10 = property({
        type: SpriteFrame,
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.SPRITE;
        }
      }), _dec11 = property({
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.SCALE || this.transition === Button.Transition.COLOR;
        }
      }), _dec12 = property({
        visible: function visible() {
          // @ts-ignore
          return this.transition === Button.Transition.SCALE;
        }
      }), _dec13 = property({
        type: Enum(PARAM_TYPE)
      }), _dec14 = property({
        type: [EventHandler]
      }), _dec15 = property({
        tooltip: '规避3.x引擎BUG，EventHandler.component位为空导致找不到触发事件的脚本名的问题',
        readonly: true
      }), ccclass(_class = _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BhvButtonGroup, _Component);
        function BhvButtonGroup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "transition", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hoverColor", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "normalColor", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "pressedColor", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "disabledColor", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "normalSprite", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "pressedSprite", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hoverSprite", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "disabledSprite", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "duration", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "zoomScale", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "paramType", _descriptor12, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "touchEvents", _descriptor13, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "EventHandler_component", _descriptor14, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BhvButtonGroup.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          this.node.children.forEach(function (node, nodeIndex) {
            var comp = node.getComponent(Button);
            if (comp == null) comp = node.addComponent(Button);

            // 同步属性

            // comp.target = node;
            // comp.transition = this.transition;
            // comp.zoomScale = this.zoomScale;

            // comp.disabledSprite = this.disabledSprite;
            // comp.hoverSprite = this.hoverSprite;
            // comp.normalSprite = this.normalSprite;
            // comp.pressedSprite = this.pressedSprite;

            // comp.hoverColor = this.hoverColor;
            // comp.normalColor = this.normalColor;
            // comp.pressedColor = this.pressedColor;
            // comp.disabledColor = this.disabledColor;

            // 绑定回调事件
            _this2.touchEvents.forEach(function (event) {
              // 克隆数据，每个节点获取的都是不同的回调
              var hd = new EventHandler(); //copy对象
              hd.component = event.component == "" ? _this2.EventHandler_component : event.component;
              hd.handler = event.handler;
              hd.target = event.target;
              if (_this2.paramType === PARAM_TYPE.CHILDREN_INDEX) {
                hd.customEventData = nodeIndex.toString();
              } else {
                hd.customEventData = node.name;
              }
              comp.clickEvents.push(hd);
            });
          });
        };
        return BhvButtonGroup;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "transition", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return Button.Transition.NONE;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hoverColor", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return color(255, 255, 255);
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "normalColor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return color(214, 214, 214);
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pressedColor", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return color(211, 211, 211);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "disabledColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return color(124, 124, 124);
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "normalSprite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "pressedSprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "hoverSprite", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "disabledSprite", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "duration", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "zoomScale", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "paramType", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PARAM_TYPE.CHILDREN_INDEX;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "touchEvents", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "EventHandler_component", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "VMModify";
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BhvFrameIndex.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, SpriteFrame, CCInteger, error, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      CCInteger = module.CCInteger;
      error = module.error;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "c238ewfJ2VJnZ8Gb8YQs5Ts", "BhvFrameIndex", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        requireComponent = _decorator.requireComponent,
        menu = _decorator.menu;

      /** 图片切换 */
      var BhvFrameIndex = exports('BhvFrameIndex', (_dec = requireComponent(Sprite), _dec2 = menu("OopsFramework/UI/Frame Index （图片切换）"), _dec3 = property({
        type: [SpriteFrame],
        tooltip: 'sprite将会用到帧图片'
      }), _dec4 = property({
        type: CCInteger,
        tooltip: '当前显示的帧图'
      }), ccclass(_class = executeInEditMode(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BhvFrameIndex, _Component);
        function BhvFrameIndex() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "spriteFrames", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_index", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BhvFrameIndex.prototype;
        /** 通过设置帧名字来设置对象 */
        _proto.setName = function setName(name) {
          var index = this.spriteFrames.findIndex(function (v) {
            return v.name == name;
          });
          if (index < 0) {
            error('frameIndex 设置了不存在的name:', name);
          }
          this.index = index || 0;
        }

        /** 随机范围设置帧图片 */;
        _proto.random = function random(min, max) {
          if (!this.spriteFrames) return;
          var frameMax = this.spriteFrames.length;
          if (min == null || min < 0) min = 0;
          if (max == null || max > frameMax) max = frameMax;
          this.index = Math.floor(Math.random() * (max - min) + min);
        };
        _proto.next = function next() {
          this.index++;
        };
        _proto.previous = function previous() {
          this.index--;
        };
        _createClass(BhvFrameIndex, [{
          key: "index",
          get: function get() {
            return this._index;
          },
          set: function set(value) {
            if (value < 0) return;
            this._index = value % this.spriteFrames.length;
            var sprite = this.node.getComponent(Sprite);
            //设置 Sprite 组件的spriteFrame属性，变换图片               
            sprite.spriteFrame = this.spriteFrames[this._index];
          }
        }]);
        return BhvFrameIndex;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spriteFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [null];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "index", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "index"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_index", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BhvRollNumber.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Enum, lerp, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Enum = module.Enum;
      lerp = module.lerp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "72d13dwmG9LS4gkJhSuAp3F", "BhvRollNumber", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var VALUE_TYPE = /*#__PURE__*/function (VALUE_TYPE) {
        VALUE_TYPE[VALUE_TYPE["INTEGER"] = 0] = "INTEGER";
        VALUE_TYPE[VALUE_TYPE["FIXED_2"] = 1] = "FIXED_2";
        VALUE_TYPE[VALUE_TYPE["TIMER"] = 2] = "TIMER";
        VALUE_TYPE[VALUE_TYPE["PERCENTAGE"] = 3] = "PERCENTAGE";
        VALUE_TYPE[VALUE_TYPE["KMBT_FIXED2"] = 4] = "KMBT_FIXED2";
        VALUE_TYPE[VALUE_TYPE["CUSTOMER"] = 5] = "CUSTOMER";
        return VALUE_TYPE;
      }(VALUE_TYPE || {});
      /**
       * 滚动数字
       * 将会使用 lerp 自动滚动数字到目标数值
       */
      var BhvRollNumber = exports('BhvRollNumber', (_dec = menu("OopsFramework/UI/Roll Number （滚动数字）"), _dec2 = property({
        type: Label,
        tooltip: '需要滚动的 Label 组件,如果不进行设置，就会从自己的节点自动查找'
      }), _dec3 = property({
        tooltip: '当前的滚动值(开始的滚动值)'
      }), _dec4 = property({
        tooltip: '是否显示正负符号'
      }), _dec5 = property({
        tooltip: '滚动的目标值'
      }), _dec6 = property({
        tooltip: '滚动的线性差值',
        step: 0.01,
        max: 1,
        min: 0
      }), _dec7 = property({
        tooltip: '是否在开始时就播放'
      }), _dec8 = property({
        tooltip: '在滚动之前会等待几秒',
        step: 0.1,
        max: 1,
        min: 0
      }), _dec9 = property({
        type: Enum(VALUE_TYPE),
        tooltip: '是否在开始时就播放'
      }), ccclass(_class = _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BhvRollNumber, _Component);
        function BhvRollNumber() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "value", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "showPlusSymbol", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_targetValue", _descriptor4, _assertThisInitialized(_this));
          /** 滚动的线性差值 0 ~ 1 */
          _initializerDefineProperty(_this, "lerp", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "playAtStart", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "runWaitTimer", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueType", _descriptor8, _assertThisInitialized(_this));
          /** 自定义string 处理函数 */
          _this.onCustom = null;
          _this.isScrolling = false;
          return _this;
        }
        var _proto = BhvRollNumber.prototype;
        _proto.onLoad = function onLoad() {
          if (this.label == undefined) {
            this.label = this.node.getComponent(Label);
          }
          if (this.playAtStart) {
            this.updateLabel();
            this.scroll();
          }
        }

        /** 开始滚动数字 */;
        _proto.scroll = function scroll() {
          var _this2 = this;
          if (this.isScrolling) return; //  已经在滚动了就返回
          if (this.runWaitTimer > 0) {
            this.scheduleOnce(function () {
              _this2.isScrolling = true;
            }, this.runWaitTimer);
          } else {
            this.isScrolling = true;
          }
        }

        /** 停止滚动数字 */;
        _proto.stop = function stop() {
          this.value = this.targetValue;
          this.isScrolling = false;
          this.updateLabel();
        }

        /** 初始化数值,不填写则全部按默认值处理 */;
        _proto.init = function init(value, target, lerp) {
          this.targetValue = target || 0;
          this.value = value || 0;
          this.lerp = lerp || 0.1;
        }

        /** 滚动到指定数字 */;
        _proto.scrollTo = function scrollTo(target) {
          if (target === null || target === undefined) return;
          this.targetValue = target;
        }

        /** 更新文本 */;
        _proto.updateLabel = function updateLabel() {
          var value = this.value;
          var string = '';
          switch (this.valueType) {
            case VALUE_TYPE.INTEGER:
              // 最终显示整数类型
              string = Math.round(value) + '';
              break;
            case VALUE_TYPE.FIXED_2:
              // 最终显示两位小数类型
              string = value.toFixed(2);
              break;
            case VALUE_TYPE.TIMER:
              // 最终显示 计时器类型
              string = parseTimer(value);
              break;
            case VALUE_TYPE.PERCENTAGE:
              // 最终显示 百分比
              string = Math.round(value * 100) + '%';
              break;
            case VALUE_TYPE.KMBT_FIXED2:
              // 长单位缩放,只计算到 KMBT
              if (value >= Number.MAX_VALUE) {
                string = 'MAX';
              } else if (value > 1000000000000) {
                string = (value / 1000000000000).toFixed(2) + 'T';
              } else if (value > 1000000000) {
                string = (value / 1000000000).toFixed(2) + 'B';
              } else if (value > 1000000) {
                string = (value / 1000000).toFixed(2) + 'M';
              } else if (value > 1000) {
                string = (value / 1000).toFixed(2) + "K";
              } else {
                string = Math.round(value).toString();
              }
              break;
            case VALUE_TYPE.CUSTOMER:
              // 自定义设置模式 (通过给定的自定义函数..处理)
              if (this.onCustom) {
                string = this.onCustom(this.value, this.targetValue);
              }
              break;
          }

          // 显示正负符号

          if (this.showPlusSymbol) {
            if (value > 0) {
              string = '+' + string;
            } else if (value < 0) {
              string = '-' + string;
            }
          }
          if (this.label) {
            if (string === this.label.string) return; // 保证效率,如果上次赋值过,就不重复赋值
            this.label.string = string;
          }
        };
        _proto.update = function update(dt) {
          if (this.isScrolling == false) return;
          this.value = lerp(this.value, this.targetValue, this.lerp);
          this.updateLabel();
          if (Math.abs(this.value - this.targetValue) <= 0.0001) {
            this.value = this.targetValue;
            this.isScrolling = false;
            //this.node.emit('roll-hit-target');        // 滚动数字击中了目标
            return;
          }
        };
        _createClass(BhvRollNumber, [{
          key: "targetValue",
          get: function get() {
            return this._targetValue;
          },
          set: function set(v) {
            this._targetValue = v;
            this.scroll(); //数据变动了就开始滚动
          }
        }]);

        return BhvRollNumber;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "value", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "showPlusSymbol", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "targetValue", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "targetValue"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_targetValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lerp", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "playAtStart", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "runWaitTimer", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "valueType", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return VALUE_TYPE.INTEGER;
        }
      })), _class2)) || _class) || _class));

      /** 时间格式转换 */
      function parseTimer(timer, isFullTimer) {
        if (timer === void 0) {
          timer = 0;
        }
        if (isFullTimer === void 0) {
          isFullTimer = true;
        }
        var t = Math.floor(timer);
        var hours = Math.floor(t / 3600);
        var mins = Math.floor(t % 3600 / 60);
        var secs = t % 60;
        var m = '' + mins;
        var s = '' + secs;
        if (secs < 10) s = '0' + secs;

        // full timer 按小时算,无论有没有小时
        if (isFullTimer) {
          if (mins < 10) m = '0' + mins;
          return hours + ':' + m + ':' + s;
        } else {
          m = '' + (mins + hours * 60);
          if (mins < 10) m = '0' + mins;
          return m + ':' + s;
        }
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BhvSwitchPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMEnv.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCInteger, Component, VMEnv;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Component = module.Component;
    }, function (module) {
      VMEnv = module.VMEnv;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "b3d083kncpDPqVztMtiq6DO", "BhvSwitchPage", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        menu = _decorator.menu;

      /** 页面切换 */
      var BhvSwitchPage = exports('BhvSwitchPage', (_dec = menu("OopsFramework/UI/Switch Page （页面切换）"), _dec2 = property({
        type: CCInteger
      }), ccclass(_class = executeInEditMode(_class = _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BhvSwitchPage, _Component);
        function BhvSwitchPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "isLoopPage", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_index", _descriptor2, _assertThisInitialized(_this));
          _this.preIndex = 0;
          //判断是否在 changing 页面状态
          _this._isChanging = false;
          return _this;
        }
        var _proto = BhvSwitchPage.prototype;
        _proto.onLoad = function onLoad() {
          this.preIndex = this.index;
        };
        _proto._updateEditorPage = function _updateEditorPage(page) {
          if (!VMEnv.editor) return;
          var children = this.node.children;
          for (var i = 0; i < children.length; i++) {
            var node = children[i];
            if (i == page) {
              node.active = true;
            } else {
              node.active = false;
            }
          }
        };
        _proto._updatePage = function _updatePage(page) {
          var children = this.node.children;
          var preIndex = this.preIndex;
          var curIndex = this.index;
          if (preIndex === curIndex) return; //没有改变就不进行操作

          var preNode = children[preIndex]; //旧节点
          var showNode = children[curIndex]; //新节点

          preNode.active = false;
          showNode.active = true;
        };
        _proto.next = function next() {
          if (this.isChanging) {
            return false;
          } else {
            this.index++;
            return true;
          }
        };
        _proto.previous = function previous() {
          if (this.isChanging) {
            return false;
          } else {
            this.index--;
            return true;
          }
        };
        _proto.setEventIndex = function setEventIndex(e, index) {
          if (this.index >= 0 && this.index != null && this.isChanging === false) {
            this.index = index;
            return true;
          } else {
            return false;
          }
        };
        _createClass(BhvSwitchPage, [{
          key: "index",
          get: function get() {
            return this._index;
          },
          set: function set(v) {
            if (this.isChanging) return;
            v = Math.round(v);
            var count = this.node.children.length - 1;
            if (this.isLoopPage) {
              if (v > count) v = 0;
              if (v < 0) v = count;
            } else {
              if (v > count) v = count;
              if (v < 0) v = 0;
            }
            this.preIndex = this._index; //标记之前的页面
            this._index = v;
            if (VMEnv.editor) {
              this._updateEditorPage(v);
            } else {
              this._updatePage(v);
            }
          }
        }, {
          key: "isChanging",
          get: /**只读，是否在changing 的状态 */
          function get() {
            return this._isChanging;
          }
        }]);
        return BhvSwitchPage;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isLoopPage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_index", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "index", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "index"), _class2.prototype)), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BoxLineReductionStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e60460L32ZKlaA+kXZB9H73", "BoxLineReductionStrategy", undefined);
      /**
       * 方块/行/列消减策略
       */
      var BoxLineReductionStrategy = exports('BoxLineReductionStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(BoxLineReductionStrategy, _BaseStrategy);
        function BoxLineReductionStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 6;
          return _this;
        }
        var _proto = BoxLineReductionStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkBoxLineReduction(board, candidates);
          if (result) {
            return this.createBoxLineReductionSteps(board, candidates, result);
          }
          return null;
        }

        /**
         * 检查方块/行/列消减
         */;
        _proto.checkBoxLineReduction = function checkBoxLineReduction(board, candidates) {
          var _this2 = this;
          var _loop = function _loop(row) {
              var _loop3 = function _loop3(val) {
                  // 找出当前行中包含该值的列
                  var cols = [];
                  for (var _col = 0; _col < 9; _col++) {
                    if (candidates[row][_col].has(val)) {
                      cols.push(_col);
                    }
                  }

                  // 检查2或3个候选数的情况
                  if (cols.length === 2 || cols.length === 3) {
                    // 检查这些单元格是否在同一个方块中
                    var boxCol = Math.floor(cols[0] / 3);
                    var allSameBox = cols.every(function (col) {
                      return Math.floor(col / 3) === boxCol;
                    });
                    if (allSameBox) {
                      var boxIndex = Math.floor(row / 3) * 3 + boxCol;
                      var boxCells = _this2.getAreaCells(HighlightAreaType.BOX, boxIndex);

                      // 获取方块中需要移除该值的单元格
                      var affectedCells = boxCells.filter(function (pos) {
                        return pos.row !== row &&
                        // 不在当前行
                        candidates[pos.row][pos.col].has(val);
                      });
                      if (affectedCells.length > 0) {
                        return {
                          v: {
                            v: {
                              value: val,
                              lineCells: cols.map(function (col) {
                                return {
                                  row: row,
                                  col: col
                                };
                              }),
                              affectedCells: affectedCells,
                              direction: HighlightAreaType.ROW,
                              lineIndex: row,
                              boxIndex: boxIndex
                            }
                          }
                        };
                      }
                    }
                  }
                },
                _ret3;
              for (var val = 1; val <= 9; val++) {
                _ret3 = _loop3(val);
                if (_ret3) return _ret3.v;
              }
            },
            _ret;
          // 检查行
          for (var row = 0; row < 9; row++) {
            _ret = _loop(row);
            if (_ret) return _ret.v;
          }

          // 检查列
          var _loop2 = function _loop2(col) {
              var _loop4 = function _loop4(val) {
                  // 找出当前列中包含该值的行
                  var rows = [];
                  for (var _row = 0; _row < 9; _row++) {
                    if (candidates[_row][col].has(val)) {
                      rows.push(_row);
                    }
                  }

                  // 检查2或3个候选数的情况
                  if (rows.length === 2 || rows.length === 3) {
                    // 检查这些单元格是否在同一个方块中
                    var boxRow = Math.floor(rows[0] / 3);
                    var allSameBox = rows.every(function (row) {
                      return Math.floor(row / 3) === boxRow;
                    });
                    if (allSameBox) {
                      var boxIndex = boxRow * 3 + Math.floor(col / 3);
                      var boxCells = _this2.getAreaCells(HighlightAreaType.BOX, boxIndex);

                      // 获取方块中需要移除该值的单元格
                      var affectedCells = boxCells.filter(function (pos) {
                        return pos.col !== col &&
                        // 不在当前列
                        candidates[pos.row][pos.col].has(val);
                      });
                      if (affectedCells.length > 0) {
                        return {
                          v: {
                            v: {
                              value: val,
                              lineCells: rows.map(function (row) {
                                return {
                                  row: row,
                                  col: col
                                };
                              }),
                              affectedCells: affectedCells,
                              direction: HighlightAreaType.COLUMN,
                              lineIndex: col,
                              boxIndex: boxIndex
                            }
                          }
                        };
                      }
                    }
                  }
                },
                _ret4;
              for (var val = 1; val <= 9; val++) {
                _ret4 = _loop4(val);
                if (_ret4) return _ret4.v;
              }
            },
            _ret2;
          for (var col = 0; col < 9; col++) {
            _ret2 = _loop2(col);
            if (_ret2) return _ret2.v;
          }
          return null;
        }

        /**
         * 创建解题步骤
         */;
        _proto.createBoxLineReductionSteps = function createBoxLineReductionSteps(board, candidates, info) {
          var steps = [];
          var value = info.value,
            lineCells = info.lineCells,
            affectedCells = info.affectedCells,
            direction = info.direction;

          // 步骤1：发现消减模式
          steps.push(this.createDiscoveryStep(board, candidates, value, lineCells, affectedCells, direction));

          // 步骤2：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, value, lineCells, affectedCells, direction));

          // 步骤3：展示影响
          steps.push(this.createImpactDemonstrationStep(board, candidates, value, lineCells, affectedCells, direction));

          // 步骤4：执行移除
          steps.push(this.createRemovalExecutionStep(board, candidates, value, lineCells, affectedCells, direction));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, value, lineCells, affectedCells, direction) {
          var _this3 = this;
          var boxCells = this.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBoxIndex(lineCells[0].row, lineCells[0].col));
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("BoxLineReductionStrategy.discoveryDes", {
              name: _this3.name,
              description: _this3.description,
              directionName: directionName,
              value: value
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: lineCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat((direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(lineCells[0].row) : SolverUtils.getColumnCells(lineCells[0].col)).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: [].concat(lineCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, value, lineCells, affectedCells, direction) {
          var _this4 = this;
          var boxCells = this.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBoxIndex(lineCells[0].row, lineCells[0].col));
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("BoxLineReductionStrategy.ruleExplanationDes", {
              name: _this4.name,
              directionName: directionName,
              value: value
            });
          };
          // 构建高亮图层（从低到高优先级）
          var highlightLayers = [
          // 整行/列背景
          (direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(lineCells[0].row) : SolverUtils.getColumnCells(lineCells[0].col)).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }),
          // 方块中的单元格
          boxCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: [].concat(candidates[pos.row][pos.col])
            };
          })];
          return {
            technique: this.name,
            stepId: 2,
            position: lineCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights(highlightLayers),
            highlightNotes: [].concat(lineCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, value, lineCells, affectedCells, direction) {
          var _this5 = this;
          var boxCells = this.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBoxIndex(lineCells[0].row, lineCells[0].col));
          var highlightLayers = [
          // 整行/列背景
          (direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(lineCells[0].row) : SolverUtils.getColumnCells(lineCells[0].col)).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined,
              value: board[pos.row][pos.col] !== BLANK_CHAR ? board[pos.row][pos.col] : undefined
            };
          }),
          // 方块中的单元格
          boxCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: [].concat(candidates[pos.row][pos.col])
            };
          })];
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("BoxLineReductionStrategy.impactDemonstrationDes", {
              name: _this5.name,
              value: value
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: lineCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights(highlightLayers),
            highlightNotes: [].concat(lineCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, value, lineCells, affectedCells, direction) {
          var _this6 = this;
          var boxCells = this.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBoxIndex(lineCells[0].row, lineCells[0].col));

          // 实际从候选数中移除数字
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("BoxLineReductionStrategy.removalExecutionDes", {
              name: _this6.name,
              value: value
            });
          };
          var highlightLayers = [
          // 整行/列背景
          (direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(lineCells[0].row) : SolverUtils.getColumnCells(lineCells[0].col)).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined,
              value: board[pos.row][pos.col] !== BLANK_CHAR ? board[pos.row][pos.col] : undefined
            };
          }),
          // 方块中的单元格
          boxCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: [].concat(candidates[pos.row][pos.col])
            };
          })];
          return {
            technique: this.name,
            stepId: 4,
            position: lineCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights(highlightLayers),
            highlightNotes: [].concat(lineCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _createClass(BoxLineReductionStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("BoxLineReductionStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("BoxLineReductionStrategy.description");
          }
        }]);
        return BoxLineReductionStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BranchNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BehaviorTree.ts', './BTreeNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, BehaviorTree, BTreeNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BehaviorTree = module.BehaviorTree;
    }, function (module) {
      BTreeNode = module.BTreeNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "beafaDMsw9FCbGDpLVmMfa1", "BranchNode", undefined);

      /** 复合节点 */
      var BranchNode = exports('BranchNode', /*#__PURE__*/function (_BTreeNode) {
        _inheritsLoose(BranchNode, _BTreeNode);
        function BranchNode(nodes) {
          var _this;
          _this = _BTreeNode.call(this) || this;
          /** 子节点数组 */
          _this.children = void 0;
          /** 当前任务索引 */
          _this._actualTask = void 0;
          /** 正在运行的节点 */
          _this._runningNode = void 0;
          _this._nodeRunning = void 0;
          /** 外部参数对象 */
          _this._blackboard = void 0;
          _this.children = nodes || [];
          return _this;
        }
        var _proto = BranchNode.prototype;
        _proto.start = function start() {
          this._actualTask = 0;
          _BTreeNode.prototype.start.call(this);
        };
        _proto.run = function run(blackboard) {
          if (this.children.length == 0) {
            // 没有子任务直接视为执行失败
            this._control.fail();
          } else {
            this._blackboard = blackboard;
            this.start();
            if (this._actualTask < this.children.length) {
              this._run();
            }
          }
          this.end();
        }

        /** 执行当前节点逻辑 */;
        _proto._run = function _run(blackboard) {
          var node = BehaviorTree.getNode(this.children[this._actualTask]);
          this._runningNode = node;
          node.setControl(this);
          node.start(this._blackboard);
          node.run(this._blackboard);
        };
        _proto.running = function running(node) {
          this._nodeRunning = node;
          this._control.running(node);
        };
        _proto.success = function success() {
          this._nodeRunning = null;
          this._runningNode.end(this._blackboard);
        };
        _proto.fail = function fail() {
          this._nodeRunning = null;
          this._runningNode.end(this._blackboard);
        };
        return BranchNode;
      }(BTreeNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BTreeNode.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f0aeepAwndJP7wlpP6QKx06", "BTreeNode", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-06-21 12:05:14
       * @LastEditors: dgflash
       * @LastEditTime: 2022-07-20 14:04:44
       */
      /** 行为树节点 */
      var BTreeNode = exports('BTreeNode', /*#__PURE__*/function () {
        function BTreeNode() {
          this._control = void 0;
          this.title = void 0;
          this.title = this.constructor.name;
        }
        var _proto = BTreeNode.prototype;
        _proto.start = function start(blackboard) {};
        _proto.end = function end(blackboard) {};
        _proto.setControl = function setControl(control) {
          this._control = control;
        };
        _proto.running = function running(blackboard) {
          this._control.running(this);
        };
        _proto.success = function success() {
          this._control.success();
        };
        _proto.fail = function fail() {
          this._control.fail();
        };
        return BTreeNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BuildTimeConstants.ts", ['cc', './env'], function (exports) {
  var cclegacy, env;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      env = module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "21a39/4HchJdJkSQKKKkLh9", "BuildTimeConstants", undefined);
      var keys = Object.keys(env).sort();

      /* 游戏运行环境 */
      var BuildTimeConstants = exports('BuildTimeConstants', function BuildTimeConstants() {
        var keyNameMaxLen = keys.reduce(function (len, key) {
          return Math.max(len, key.length);
        }, 0);
        var enviroment = "" + keys.map(function (key) {
          var value = env[key];
          var valueRep = typeof value === 'boolean' ? value ? 'true' : 'false' : value;
          return "\n" + key.padStart(keyNameMaxLen, ' ') + " : " + valueRep;
        });
        console.log(enviroment);
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './ButtonSimple.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Animation, AnimationClip, Node, Sprite, oops, ButtonSimple;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      AnimationClip = module.AnimationClip;
      Node = module.Node;
      Sprite = module.Sprite;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      ButtonSimple = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "1be36hrGO5Oz6Eapg6ygW03", "ButtonEffect", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 有特效按钮 */
      var ButtonEffect = exports('default', (_dec = ccclass("ButtonEffect"), _dec2 = menu('OopsFramework/Button/ButtonEffect （有特效按钮）'), _dec3 = property({
        tooltip: "是否开启"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_ButtonSimple) {
        _inheritsLoose(ButtonEffect, _ButtonSimple);
        function ButtonEffect() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _ButtonSimple.call.apply(_ButtonSimple, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "disabledEffect", _descriptor, _assertThisInitialized(_this));
          _this.anim = void 0;
          return _this;
        }
        var _proto = ButtonEffect.prototype;
        _proto.onLoad = function onLoad() {
          this.anim = this.node.addComponent(Animation);
          var ac_start = oops.res.get("common/anim/button_scale_start", AnimationClip);
          var ac_end = oops.res.get("common/anim/button_scale_end", AnimationClip);
          this.anim.defaultClip = ac_start;
          this.anim.createState(ac_start, ac_start == null ? void 0 : ac_start.name);
          this.anim.createState(ac_end, ac_end == null ? void 0 : ac_end.name);
          this.node.on(Node.EventType.TOUCH_START, this.onTouchtStart, this);
          _ButtonSimple.prototype.onLoad.call(this);
        };
        _proto.onTouchtStart = function onTouchtStart(event) {
          if (!this.disabledEffect) {
            this.anim.play("button_scale_start");
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          if (!this.disabledEffect) {
            this.anim.play("button_scale_end");
          }
          _ButtonSimple.prototype.onTouchEnd.call(this, event);
        };
        _proto.onDestroy = function onDestroy() {
          this.node.off(Node.EventType.TOUCH_START, this.onTouchtStart, this);
          _ButtonSimple.prototype.onDestroy.call(this);
        };
        _createClass(ButtonEffect, [{
          key: "grayscale",
          get: /** 按钮禁用效果 */
          function get() {
            return this.node.getComponent(Sprite).grayscale;
          },
          set: function set(value) {
            if (this.node.getComponent(Sprite)) {
              this.node.getComponent(Sprite).grayscale = value;
            }
          }
        }]);
        return ButtonEffect;
      }(ButtonSimple), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "disabledEffect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonSimple.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, AudioClip, Node, game, Component, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      Node = module.Node;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "8d645yObX1FvJfk2sbi0rxp", "ButtonSimple", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 节点按钮 */
      var ButtonSimple = exports('default', (_dec = ccclass("ButtonSimple"), _dec2 = menu('OopsFramework/Button/ButtonSimple （节点按钮）'), _dec3 = property({
        tooltip: "是否只触发一次"
      }), _dec4 = property({
        tooltip: "每次触发间隔"
      }), _dec5 = property({
        tooltip: "触摸音效",
        type: AudioClip
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ButtonSimple, _Component);
        function ButtonSimple() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "once", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "interval", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "effect", _descriptor3, _assertThisInitialized(_this));
          // private effectIds: number[] = [];
          _this.touchCount = 0;
          _this.touchtEndTime = 0;
          return _this;
        }
        var _proto = ButtonSimple.prototype;
        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
        }

        /** 触摸结束 */;
        _proto.onTouchEnd = function onTouchEnd(event) {
          if (this.once) {
            if (this.touchCount > 0) {
              event.propagationStopped = true;
              return;
            }
            this.touchCount++;
          }

          // 防连点500毫秒出发一次事件
          if (this.touchtEndTime && game.totalTime - this.touchtEndTime < this.interval) {
            event.propagationStopped = true;
          } else {
            this.touchtEndTime = game.totalTime;

            // 短按触摸音效
            this.playEffect();
          }
        }

        /** 短按触摸音效 */;
        _proto.playEffect = /*#__PURE__*/
        function () {
          var _playEffect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (this.effect) {
                    oops.audio.playEffect(this.effect);
                    // const effectId = await oops.audio.playEffect(this.effect, resLoader.defaultBundleName, () => {
                    //     this.effectIds.remove(effectId);
                    // });
                    // if (effectId > 0) this.effectIds.push(effectId);
                  }

                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function playEffect() {
            return _playEffect.apply(this, arguments);
          }
          return playEffect;
        }();
        _proto.onDestroy = function onDestroy() {
          this.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);

          // if (this.effect) {
          //     this.effectIds.forEach(effectId => {
          //         oops.audio.putEffect(effectId, this.effect);
          //     });
          // }
        };

        return ButtonSimple;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "once", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "interval", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 500;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "effect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonTouchLong.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ButtonEffect.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EventHandler, ButtonEffect;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventHandler = module.EventHandler;
    }, function (module) {
      ButtonEffect = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "da96en7WYpPTaPIkO1l/Nux", "ButtonTouchLong", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 长按按钮 */
      var ButtonTouchLong = exports('ButtonTouchLong', (_dec = ccclass("ButtonTouchLong"), _dec2 = menu('OopsFramework/Button/ButtonTouchLong （长按按钮）'), _dec3 = property({
        tooltip: "长按时间（秒）"
      }), _dec4 = property({
        type: [EventHandler],
        tooltip: "长按时间（秒）"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_ButtonEffect) {
        _inheritsLoose(ButtonTouchLong, _ButtonEffect);
        function ButtonTouchLong() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _ButtonEffect.call.apply(_ButtonEffect, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "time", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "clickEvents", _descriptor2, _assertThisInitialized(_this));
          _this._passTime = 0;
          _this._isTouchLong = true;
          _this._event = null;
          return _this;
        }
        var _proto = ButtonTouchLong.prototype;
        _proto.onLoad = function onLoad() {
          this._isTouchLong = false;
          _ButtonEffect.prototype.onLoad.call(this);
        }

        /** 触摸开始 */;
        _proto.onTouchtStart = function onTouchtStart(event) {
          this._event = event;
          this._passTime = 0;
          _ButtonEffect.prototype.onTouchtStart.call(this, event);
        }

        /** 触摸结束 */;
        _proto.onTouchEnd = function onTouchEnd(event) {
          if (this._passTime > this.time) {
            event.propagationStopped = true;
          }
          this._event = null;
          this._passTime = 0;
          this._isTouchLong = false;
          _ButtonEffect.prototype.onTouchEnd.call(this, event);
        };
        _proto.removeTouchLong = function removeTouchLong() {
          this._event = null;
          this._isTouchLong = false;
        }

        /** 引擎更新事件 */;
        _proto.update = function update(dt) {
          var _this2 = this;
          if (this._event && !this._isTouchLong) {
            this._passTime += dt;
            if (this._passTime >= this.time) {
              this._isTouchLong = true;
              this.clickEvents.forEach(function (event) {
                event.emit([event.customEventData]);
                // 长按触摸音效
                _this2.playEffect();
              });
              this.removeTouchLong();
            }
          }
        };
        return ButtonTouchLong;
      }(ButtonEffect), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "clickEvents", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Calendar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DayItem.ts', './Config.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Layout, Prefab, instantiate, Component, Node, DayItem, Language, EventType, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Layout = module.Layout;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
      Node = module.Node;
    }, function (module) {
      DayItem = module.DayItem;
    }, function (module) {
      Language = module.Language;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "2d307c+edpE0ZH3fJYJpCkY", "Calendar", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var CalendarEvent = exports('CalendarEvent', /*#__PURE__*/function (CalendarEvent) {
        CalendarEvent["SELECTED_DATE"] = "selected_date";
        return CalendarEvent;
      }({})); // 当前页码变化事件
      var Calendar = exports('Calendar', (_dec = ccclass('Calendar'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property([Label]), _dec5 = property(Layout), _dec6 = property(Prefab), _dec7 = property({
        tooltip: "是否允许选择未来日期"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Calendar, _Component);
        function Calendar() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "monthLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "progressLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "weekdayLabels", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "daysGrid", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "dayItemPrefab", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "allowFutureSelection", _descriptor6, _assertThisInitialized(_this));
          _this._currentDate = new Date();
          _this.selectedDate = null;
          return _this;
        }
        var _proto = Calendar.prototype;
        _proto.onLoad = function onLoad() {
          this.refreshCalendar();
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        }
        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        };
        _proto.onRefreshLanguage = function onRefreshLanguage() {
          this.updateMonthLabel();
          this.updateWeekdayLabels();
        }

        /**
         * 设置当前显示的月份
         * @param year 年份
         * @param month 月份 (1-12)
         */;
        _proto.setMonth = function setMonth(year, month, day) {
          // 月份从0开始，所以需要减1
          this._currentDate = new Date(year, month - 1, day);
          this.refreshCalendar();
        }

        /**
         * 获取当前显示的月份
         * @returns 当前月份对象 {year: number, month: number}
         */;
        _proto.getCurrentMonth = function getCurrentMonth() {
          return {
            year: this._currentDate.getFullYear(),
            month: this._currentDate.getMonth() + 1
          };
        }

        /**
         * 切换到上一个月
         */;
        _proto.prevMonth = function prevMonth() {
          var date = new Date(this._currentDate);
          date.setMonth(date.getMonth() - 1);
          this._currentDate = date;
          this.refreshCalendar();
        }

        /**
         * 切换到下一个月
         */;
        _proto.nextMonth = function nextMonth() {
          var date = new Date(this._currentDate);
          date.setMonth(date.getMonth() + 1);
          this._currentDate = date;
          this.refreshCalendar();
        }

        /**
         * 刷新日历显示
         */;
        _proto.refreshCalendar = function refreshCalendar() {
          this.updateMonthLabel();
          this.updateWeekdayLabels();
          this.generateDayItems();
        };
        _proto.updateMonthLabel = function updateMonthLabel() {
          // const dateFormatter = new Intl.DateTimeFormat(oops.language.current, {
          //     year: 'numeric',
          //     month: 'long',
          //     // day: 'numeric'
          // });
          // this.monthLabel.string = dateFormatter.format(this._currentDate);

          var dateStr = this._currentDate.toLocaleDateString(oops.language.current, {
            year: 'numeric',
            month: 'long'
            //   day: 'numeric'
          });

          this.monthLabel.string = dateStr;
          // this.monthLabel.string = `${this._currentDate.getFullYear()}年${this._currentDate.getMonth() + 1}月`;
        }

        /**
         * 获取星期名称数组（从周一到周日）
         * @param {string} [locale='zh-CN'] - 语言代码（默认中文）
         * @param {string} [format='short'] - 名称格式：'short'(短)/'long'(长)/'narrow'(极简)
         * @returns {string[]} 星期名称数组
         */;
        _proto.getWeekdayNames = function getWeekdayNames(locale) {
          if (locale === void 0) {
            locale = 'zh-CN';
          }
          // 基准日期：2025年5月26日（周一）
          var baseDate = new Date(2025, 4, 26);
          var weekdays = [];
          for (var i = 0; i < 7; i++) {
            var date = new Date(baseDate);
            date.setDate(baseDate.getDate() + i);
            weekdays.push(date.toLocaleDateString(locale, {
              weekday: 'short'
            }));
          }
          if (locale === Language.ZH_CN) {
            return ["周一", "周二", "周三", "周四", "周五", "周六", "周日"];
          } else {
            return ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
          }
        };
        _proto.updateWeekdayLabels = function updateWeekdayLabels() {
          var _this2 = this;
          var weekdays = this.getWeekdayNames(oops.language.current);
          weekdays.forEach(function (day, i) {
            _this2.weekdayLabels[i].string = day;
          });
        };
        _proto.generateDayItems = function generateDayItems() {
          var _this3 = this;
          var year = this._currentDate.getFullYear();
          var month = this._currentDate.getMonth();
          var today = new Date();

          // 计算关键数据
          var daysInMonth = new Date(year, month + 1, 0).getDate();
          var firstDayOfWeek = (new Date(year, month, 1).getDay() + 6) % 7;

          // 更新进度显示
          this.progressLabel.string = "0/" + daysInMonth;

          // 获取或创建格子节点
          var existingChildren = this.daysGrid.node.children;
          var childIndex = 0;

          // 处理空白格子
          for (var i = 0; i < firstDayOfWeek; i++) {
            var dayNode = existingChildren[childIndex];
            if (!dayNode) {
              dayNode = instantiate(this.dayItemPrefab);
              this.daysGrid.node.addChild(dayNode);
            }
            dayNode.getComponent(DayItem).hideAll();
            dayNode.active = true;
            childIndex++;
          }

          // 检查当月是否包含今天
          var isCurrentMonth = this._currentDate.getFullYear() === today.getFullYear() && this._currentDate.getMonth() === today.getMonth();
          var defaultSelectDay = isCurrentMonth ? today.getDate() : 1;

          // 处理日期格子
          var _loop = function _loop() {
            var date = new Date(year, month, day);
            var isToday = isCurrentMonth && _this3.isSameDay(date, today);
            var isFutureDate = date > today && !isToday;

            // 获取或创建节点
            var dayNode = existingChildren[childIndex];
            if (!dayNode) {
              dayNode = instantiate(_this3.dayItemPrefab);
              _this3.daysGrid.node.addChild(dayNode);
            }
            var dayComp = dayNode.getComponent(DayItem);
            dayNode.active = true;

            // 初始化或更新格子
            dayComp.init(date, {
              isToday: isToday,
              isSelectable: !isFutureDate || _this3.allowFutureSelection
            });

            // 设置点击事件（确保只绑定一次）
            dayNode.off(Node.EventType.TOUCH_END); // 先移除旧监听
            if (dayComp.isSelectable) {
              dayNode.on(Node.EventType.TOUCH_END, function () {
                if (_this3.selectedDate) _this3.selectedDate.setSelected(false);
                dayComp.setSelected(true);
                _this3.selectedDate = dayComp;
                oops.message.dispatchEvent(CalendarEvent.SELECTED_DATE, _this3.selectedDate);
              });
            }

            // 设置默认选中
            var shouldSelect = isCurrentMonth && isToday || !isCurrentMonth && day === defaultSelectDay;
            dayComp.setSelected(shouldSelect);
            if (shouldSelect) {
              _this3.selectedDate = dayComp;
              oops.message.dispatchEvent(CalendarEvent.SELECTED_DATE, _this3.selectedDate);
            }
            childIndex++;
          };
          for (var day = 1; day <= daysInMonth; day++) {
            _loop();
          }

          // 隐藏多余的节点（如果有）
          for (var _i = childIndex; _i < existingChildren.length; _i++) {
            existingChildren[_i].active = false;
          }
        };
        _proto.onStartChallenge = function onStartChallenge() {
          console.log('开始每日挑战');
        }

        /** 判断是否为同一天 */;
        _proto.isSameDay = function isSameDay(date1, date2) {
          return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
        };
        return Calendar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "monthLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "progressLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "weekdayLabels", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "daysGrid", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "dayItemPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "allowFutureSelection", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CameraUtil.ts", ['cc'], function (exports) {
  var cclegacy, Vec3, view;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      view = module.view;
    }],
    execute: function () {
      cclegacy._RF.push({}, "95c77QQpp1EjKj8UBFCCdKu", "CameraUtil", undefined);

      /** 摄像机工具 */
      var CameraUtil = exports('CameraUtil', /*#__PURE__*/function () {
        function CameraUtil() {}
        /**
         * 当前世界坐标是否在摄像机显示范围内
         * @param camera    摄像机
         * @param worldPos  坐标
         */
        CameraUtil.isInView = function isInView(camera, worldPos) {
          var cameraPos = camera.node.getWorldPosition();
          var viewPos = camera.worldToScreen(worldPos);
          var dir = Vec3.normalize(new Vec3(), worldPos.subtract(cameraPos));
          var forward = camera.node.forward;
          var dot = Vec3.dot(forward, dir);
          var viewportRect = view.getViewportRect();

          // 判断物体是否在相机前面
          return dot > 0
          // 判断物体是否在视窗内
          && viewPos.x <= viewportRect.width && viewPos.x >= 0 && viewPos.y <= viewportRect.height && viewPos.y >= 0;
        };
        return CameraUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CandidateErrorStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _extends, _createClass, cclegacy, HighlightConfig, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _extends = module.extends;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9812c9FuZhGvq7Ph+RX0sfU", "CandidateErrorStrategy", undefined);
      var CandidateErrorStrategy = exports('CandidateErrorStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(CandidateErrorStrategy, _BaseStrategy);
        function CandidateErrorStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 0;
          return _this;
        }
        var _proto = CandidateErrorStrategy.prototype;
        // 错误提示优先级最高
        /**
        * 执行策略，每次只返回一个最优解的多步骤推理过程
        * @param board 当前数独棋盘状态
        * @param candidates 每个单元格的候选数字集合
        * @returns 返回解决步骤数组，如果没有找到隐藏单数则返回null
        */
        _proto.execute = function execute(board, candidates) {
          return null;
        }

        /**
         * 构建候选数错误提示步骤
         * @param board 当前棋盘状态
         * @param solutionBoard 数独题目的完整答案
         * @param userCandidates 用户输入的候选数
         * @param candidates 导致策略推导错误的候选数
         * @param correctCandidates 正确的候选数
         * @param errorPosition 错误位置
         * @returns 返回错误提示步骤数组
         */;
        _proto.buildErrorSteps = function buildErrorSteps(board, solutionBoard, userCandidates, candidates, correctCandidates, errorPosition) {
          var steps = [];

          // 1. 添加错误检测步骤
          steps.push(this.createErrorDetectionStep(solutionBoard, userCandidates, candidates, correctCandidates, errorPosition));

          // 2. 添加修正建议步骤
          steps.push(this.createCorrectionStep(solutionBoard, userCandidates, candidates, correctCandidates, errorPosition));
          return steps;
        }

        /**
         * 构建错误检测步骤
         */;
        _proto.createErrorDetectionStep = function createErrorDetectionStep(solutionBoard, userCandidates, candidates, correctCandidates, errorPosition) {
          var _this2 = this;
          // 使用Map存储高亮单元格（自动去重）
          var highlightsMap = new Map();
          var highlightNotes = [];

          // 遍历所有单元格
          var _loop = function _loop(row) {
            var _loop2 = function _loop2(col) {
              var highlightCandidates = [];
              userCandidates[row][col].forEach(function (number) {
                if (!correctCandidates[row][col].has(number)) {
                  highlightNotes.push({
                    position: {
                      row: row,
                      col: col
                    },
                    value: number,
                    backgroundColor: HighlightConfig.hintRemoveCell.background,
                    textColor: HighlightConfig.hintRemoveCell.textColor
                  });
                  highlightCandidates.push(number);
                }
              });
              var isMissingSolution = false;
              correctCandidates[row][col].forEach(function (element) {
                if (userCandidates[row][col].size == 0) {
                  highlightNotes.push({
                    position: {
                      row: row,
                      col: col
                    },
                    value: element,
                    backgroundColor: HighlightConfig.targetCell.background,
                    textColor: HighlightConfig.targetCell.textColor
                  });
                  highlightCandidates.push(element);
                } else {
                  if (!userCandidates[row][col].has(element) && solutionBoard[row][col] == element) {
                    highlightNotes.push({
                      position: {
                        row: row,
                        col: col
                      },
                      value: element,
                      backgroundColor: HighlightConfig.targetCell.background,
                      textColor: HighlightConfig.targetCell.textColor
                    });
                    highlightCandidates.push(element);
                    isMissingSolution = true;
                  } else if (userCandidates[row][col].has(element)) {
                    highlightNotes.push({
                      position: {
                        row: row,
                        col: col
                      },
                      value: element,
                      backgroundColor: HighlightConfig.defaultCell.background,
                      textColor: HighlightConfig.defaultCell.textColor
                    });
                    highlightCandidates.push(element);
                  }
                }
              });
              // 候选数缺少答案，全部补全
              if (isMissingSolution) {
                correctCandidates[row][col].forEach(function (element) {
                  highlightNotes.push({
                    position: {
                      row: row,
                      col: col
                    },
                    value: element,
                    backgroundColor: HighlightConfig.targetCell.background,
                    textColor: HighlightConfig.targetCell.textColor
                  });
                  highlightCandidates.push(element);
                });
              }
              _this2.addHighlight(highlightsMap, {
                position: {
                  row: row,
                  col: col
                },
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: highlightCandidates
              });
            };
            for (var col = 0; col < 9; col++) {
              _loop2(col);
            }
          };
          for (var row = 0; row < 9; row++) {
            _loop(row);
          }
          var highlights = Array.from(highlightsMap.values());
          var highlightCandidates = [];
          userCandidates[errorPosition.row][errorPosition.col].forEach(function (element) {
            if (!correctCandidates[errorPosition.row][errorPosition.col].has(element)) {
              highlightNotes.push({
                position: errorPosition,
                value: element,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor
              });
              highlightCandidates.push(element);
            }
          });
          correctCandidates[errorPosition.row][errorPosition.col].forEach(function (element) {
            if (!userCandidates[errorPosition.row][errorPosition.col].has(element)) {
              highlightNotes.push({
                position: errorPosition,
                value: element,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor
              });
              highlightCandidates.push(element);
            } else {
              highlightNotes.push({
                position: errorPosition,
                value: element,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor
              });
              highlightCandidates.push(element);
            }
          });
          highlights.push({
            position: errorPosition,
            candidates: highlightCandidates,
            backgroundColor: HighlightConfig.defaultCell.background,
            textColor: HighlightConfig.defaultCell.textColor
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("CandidateErrorStrategy.errorDetectionStep", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: errorPosition,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        }

        /**
         * 构建修正建议步骤
         */;
        _proto.createCorrectionStep = function createCorrectionStep(solutionBoard, userCandidates, candidates, correctCandidates, errorPosition) {
          var _this3 = this;
          // 使用Map存储高亮单元格（自动去重）
          var highlightsMap = new Map();
          var highlightNotes = [];

          // 遍历所有单元格
          var _loop3 = function _loop3(row) {
            var _loop4 = function _loop4(col) {
              var highlightCandidates = [];
              var isMissingSolution = false;
              correctCandidates[row][col].forEach(function (element) {
                if (userCandidates[row][col].size == 0) {
                  highlightNotes.push({
                    position: {
                      row: row,
                      col: col
                    },
                    value: element,
                    backgroundColor: HighlightConfig.defaultCell.background,
                    textColor: HighlightConfig.defaultCell.textColor
                  });
                  highlightCandidates.push(element);
                } else {
                  if (!userCandidates[row][col].has(element) && solutionBoard[row][col] == element) {
                    highlightNotes.push({
                      position: {
                        row: row,
                        col: col
                      },
                      value: element,
                      backgroundColor: HighlightConfig.defaultCell.background,
                      textColor: HighlightConfig.defaultCell.textColor
                    });
                    highlightCandidates.push(element);
                    isMissingSolution = true;
                  } else if (userCandidates[row][col].has(element)) {
                    highlightNotes.push({
                      position: {
                        row: row,
                        col: col
                      },
                      value: element,
                      backgroundColor: HighlightConfig.defaultCell.background,
                      textColor: HighlightConfig.defaultCell.textColor
                    });
                    highlightCandidates.push(element);
                  }
                }
              });

              // 候选数缺少答案，全部补全
              if (isMissingSolution) {
                correctCandidates[row][col].forEach(function (element) {
                  highlightNotes.push({
                    position: {
                      row: row,
                      col: col
                    },
                    value: element,
                    backgroundColor: HighlightConfig.defaultCell.background,
                    textColor: HighlightConfig.defaultCell.textColor
                  });
                  highlightCandidates.push(element);
                });
              }
              _this3.addHighlight(highlightsMap, {
                position: {
                  row: row,
                  col: col
                },
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: highlightCandidates
              });
            };
            for (var col = 0; col < 9; col++) {
              _loop4(col);
            }
          };
          for (var row = 0; row < 9; row++) {
            _loop3(row);
          }
          var highlights = Array.from(highlightsMap.values());
          var highlightCandidates = [];
          correctCandidates[errorPosition.row][errorPosition.col].forEach(function (element) {
            if (!userCandidates[errorPosition.row][errorPosition.col].has(element)) {
              highlightNotes.push({
                position: errorPosition,
                value: element,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor
              });
              highlightCandidates.push(element);
            } else {
              highlightNotes.push({
                position: errorPosition,
                value: element,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor
              });
              highlightCandidates.push(element);
            }
          });
          highlights.push({
            position: errorPosition,
            candidates: highlightCandidates,
            backgroundColor: HighlightConfig.defaultCell.background,
            textColor: HighlightConfig.defaultCell.textColor
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("CandidateErrorStrategy.correctionStep", {
              name: _this3.name,
              description: _this3.description
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: errorPosition,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        };
        _proto.addHighlight = function addHighlight(highlightsMap, cell) {
          var key = cell.position.row + "," + cell.position.col;
          if (!highlightsMap.has(key)) {
            // 如果单元格不存在，直接添加
            highlightsMap.set(key, cell);
          } else {
            // 如果单元格已存在，合并属性（新值优先，保留原有未修改的属性）
            var existingCell = highlightsMap.get(key);
            highlightsMap.set(key, _extends({}, existingCell, cell));
          }
        };
        _createClass(CandidateErrorStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("CandidateErrorStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("CandidateErrorStrategy.description");
          }
        }]);
        return CandidateErrorStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameComponent.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, GameComponent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GameComponent = module.GameComponent;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "dd207fiyGJLf5r+bkiMgwdt", "CCComp", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 
       * 游戏显示对象组件
       * 
       * 功能介绍：
       * 1. 对象拥有 cc.Component 组件功能与 ecs.Comp 组件功能
       * 2. 对象自带全局事件监听、释放、发送全局消息功能
       * 3. 对象管理的所有节点摊平，直接通过节点名获取cc.Node对象
       * 
       * 应用场景
       * 1. 网络游戏，优先有数据对象，然后创建视图对象，当释放视图组件时，部分场景不希望释放数据对象
       * 
       * @example
      @ccclass('RoleViewComp')
      @ecs.register('RoleView', false)
      export class RoleViewComp extends CCComp {
          @property({ type: sp.Skeleton, tooltip: '角色动画' })
          spine: sp.Skeleton = null!;
            onLoad(){
              
          }
      }
       */
      var CCComp = exports('CCComp', (_dec = ccclass('CCComp'), _dec(_class = (_class2 = /*#__PURE__*/function (_GameComponent) {
        _inheritsLoose(CCComp, _GameComponent);
        function CCComp() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameComponent.call.apply(_GameComponent, [this].concat(args)) || this;
          _this.canRecycle = void 0;
          _this.ent = void 0;
          return _this;
        }
        return CCComp;
      }(GameComponent), _class2.tid = -1, _class2.compName = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CCVMParentComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMParent.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, VMParent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      VMParent = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "5908aTmM1lItpXgo7ROpQeQ", "CCVMParentComp", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 
       * 支持 MVVM 功能的游戏显示对象组件
       * 
       * 使用方法：
       * 1. 对象拥有 cc.Component 组件功能与 ecs.Comp 组件功能
       * 2. 对象自带全局事件监听、释放、发送全局消息功能
       * 3. 对象管理的所有节点摊平，直接通过节点名获取cc.Node对象（节点名不能有重名）
       * 4. 对象支持 VMParent 所有功能
       * 
       * 应用场景
       * 1. 网络游戏，优先有数据对象，然后创建视图对象，当释放视图组件时，部分场景不希望释放数据对象
       * 
       * @example
      @ccclass('LoadingViewComp')
      @ecs.register('LoadingView', false)
      export class LoadingViewComp extends CCVMParentComp {
          // VM 组件绑定数据
          data: any = {
              // 加载资源当前进度
              finished: 0,
              // 加载资源最大进度
              total: 0,
              // 加载资源进度比例值
              progress: "0",
              // 加载流程中提示文本
              prompt: ""
          };
            private progress: number = 0;
            reset(): void {
            
          }
      }
       */
      var CCVMParentComp = exports('CCVMParentComp', (_dec = ccclass('CCVMParentComp'), _dec(_class = (_class2 = /*#__PURE__*/function (_VMParent) {
        _inheritsLoose(CCVMParentComp, _VMParent);
        function CCVMParentComp() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMParent.call.apply(_VMParent, [this].concat(args)) || this;
          _this.canRecycle = void 0;
          _this.ent = void 0;
          return _this;
        }
        return CCVMParentComp;
      }(VMParent), _class2.tid = -1, _class2.compName = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Collection.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, _wrapNativeSuper, cclegacy;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _wrapNativeSuper = module.wrapNativeSuper;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1dcf5AtQQVK3KQ/2jHHD5gi", "Collection", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-07-22 15:54:51
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-22 14:47:59
       */

      /** 支持Map与Array功能的集合对象 */
      var Collection = exports('Collection', /*#__PURE__*/function (_Map) {
        _inheritsLoose(Collection, _Map);
        function Collection() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Map.call.apply(_Map, [this].concat(args)) || this;
          _this._array = [];
          return _this;
        }
        var _proto = Collection.prototype;
        /**
         * 设置值
         * @param key       关键字
         * @param value     数据值
         */
        _proto.set = function set(key, value) {
          if (this.has(key)) {
            var old = this.get(key);
            var index = this._array.indexOf(old);
            this._array[index] = value;
          } else {
            this._array.push(value);
          }
          return _Map.prototype.set.call(this, key, value);
        }

        /**
         * 删除值
         * @param key       关键字
         */;
        _proto["delete"] = function _delete(key) {
          var value = this.get(key);
          if (value) {
            var index = this._array.indexOf(value);
            if (index > -1) this._array.splice(index, 1);
            return _Map.prototype["delete"].call(this, key);
          }
          return false;
        };
        _proto.clear = function clear() {
          this._array.splice(0, this._array.length);
          _Map.prototype.clear.call(this);
        };
        _createClass(Collection, [{
          key: "array",
          get: /** 获取数组对象 */
          function get() {
            return this._array;
          }
        }]);
        return Collection;
      }( /*#__PURE__*/_wrapNativeSuper(Map)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonPrompt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageLabel.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, LanguageLabel, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      LanguageLabel = module.LanguageLabel;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "653bf8VPC5Fn49zFJFqXVgx", "CommonPrompt", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 公共提示窗口 */
      var CommonPrompt = exports('CommonPrompt', (_dec = ccclass("CommonPrompt"), _dec2 = property(LanguageLabel), _dec3 = property(LanguageLabel), _dec4 = property(LanguageLabel), _dec5 = property(LanguageLabel), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CommonPrompt, _Component);
        function CommonPrompt() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 窗口标题多语言组件 */
          _initializerDefineProperty(_this, "lab_title", _descriptor, _assertThisInitialized(_this));
          /** 提示内容多语言组件 */
          _initializerDefineProperty(_this, "lab_content", _descriptor2, _assertThisInitialized(_this));
          /** 确认按钮文本多语言组件 */
          _initializerDefineProperty(_this, "lab_ok", _descriptor3, _assertThisInitialized(_this));
          /** 取消按钮文本多语言组件 */
          _initializerDefineProperty(_this, "lab_cancel", _descriptor4, _assertThisInitialized(_this));
          _this.config = {};
          return _this;
        }
        var _proto = CommonPrompt.prototype;
        /**
         * 
         * 
         * @param params 参数 
         * {
         *     title:      标题
         *     content:    内容
         *     okWord:     ok按钮上的文字
         *     okFunc:     确认时执行的方法
         *     cancelWord: 取消按钮的文字
         *     cancelFunc: 取消时执行的方法
         *     needCancel: 是否需要取消按钮
         * }
         */
        _proto.onAdded = function onAdded(params) {
          this.config = params || {};
          this.setTitle();
          this.setContent();
          this.setBtnOkLabel();
          this.setBtnCancelLabel();
          this.node.active = true;
          return true;
        };
        _proto.setTitle = function setTitle() {
          this.lab_title.dataID = this.config.title;
        };
        _proto.setContent = function setContent() {
          this.lab_content.dataID = this.config.content;
        };
        _proto.setBtnOkLabel = function setBtnOkLabel() {
          this.lab_ok.dataID = this.config.okWord;
        };
        _proto.setBtnCancelLabel = function setBtnCancelLabel() {
          if (this.lab_cancel) {
            this.lab_cancel.dataID = this.config.cancelWord;
            this.lab_cancel.node.parent.active = this.config.needCancel || false;
          }
        };
        _proto.onOk = function onOk() {
          if (typeof this.config.okFunc == "function") {
            this.config.okFunc();
          }
          this.close();
        };
        _proto.onClose = function onClose() {
          if (typeof this.config.closeFunc == "function") {
            this.config.closeFunc();
          }
          this.close();
        };
        _proto.onCancel = function onCancel() {
          if (typeof this.config.cancelFunc == "function") {
            this.config.cancelFunc();
          }
          this.close();
        };
        _proto.close = function close() {
          oops.gui.removeByNode(this.node);
        };
        _proto.onDestroy = function onDestroy() {
          this.config = null;
        };
        return CommonPrompt;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lab_title", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lab_content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lab_ok", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lab_cancel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      var _theme, _difficulty;
      cclegacy._RF.push({}, "21b43vBqh9BOb5iy2zXa0dq", "Config", undefined);
      /**
       * 数独游戏全局配置脚本
       * 包含主题系统、难度系统、通用设置等可配置参数
       */
      // ===================== 主题系统 =====================
      /** 
       * 主题名称枚举 
       * 说明：预定义的4种视觉主题方案
       */
      var ThemeName = exports('ThemeName', /*#__PURE__*/function (ThemeName) {
        ThemeName["Default"] = "Default";
        ThemeName["Brown"] = "Brown";
        ThemeName["Nature"] = "Nature";
        ThemeName["Dark"] = "Dark";
        return ThemeName;
      }({})); // 暗黑模式主题

      // ===================== 难度系统 =====================

      /** Minimum number of givens required in a puzzle */
      var MIN_GIVENS = exports('MIN_GIVENS', 17);

      /** Total number of squares in the puzzle */
      var NR_SQUARES = exports('NR_SQUARES', 81);

      /**
       * 数独难度级别枚举
       * 
       * 每个级别对应初始提示数（clues），数值越小难度越高
       * 
       * 难度参考标准：
       * - 17 clues: 数学证明的最小唯一解数独所需提示数
       * - 22-23 clues: 人类解算的极限难度
       */
      var SudokuDifficulty = exports('SudokuDifficulty', /*#__PURE__*/function (SudokuDifficulty) {
        SudokuDifficulty[SudokuDifficulty["Novice"] = 0] = "Novice";
        SudokuDifficulty[SudokuDifficulty["Beginner"] = 1] = "Beginner";
        SudokuDifficulty[SudokuDifficulty["Elementary"] = 2] = "Elementary";
        SudokuDifficulty[SudokuDifficulty["Intermediate"] = 3] = "Intermediate";
        SudokuDifficulty[SudokuDifficulty["Advanced"] = 4] = "Advanced";
        SudokuDifficulty[SudokuDifficulty["Expert"] = 5] = "Expert";
        SudokuDifficulty[SudokuDifficulty["Master"] = 6] = "Master";
        SudokuDifficulty[SudokuDifficulty["Extreme"] = 7] = "Extreme";
        return SudokuDifficulty;
      }({}));
      var PuzzleLibraryPath = exports('PuzzleLibraryPath', /*#__PURE__*/function (PuzzleLibraryPath) {
        PuzzleLibraryPath["Novice"] = "database/p_0";
        PuzzleLibraryPath["Beginner"] = "database/p_1";
        PuzzleLibraryPath["Elementary"] = "database/p_2";
        PuzzleLibraryPath["Intermediate"] = "database/p_3";
        PuzzleLibraryPath["Advanced"] = "database/p_4";
        PuzzleLibraryPath["Expert"] = "database/p_5";
        PuzzleLibraryPath["Master"] = "database/p_6";
        PuzzleLibraryPath["Extreme"] = "database/p_7";
        return PuzzleLibraryPath;
      }({}));

      /**
       * 数独游戏模式枚举
       * @description 与API路由 `/puzzles/level/{level}` 配合使用
       */
      var SudokuGameMode = exports('SudokuGameMode', /*#__PURE__*/function (SudokuGameMode) {
        SudokuGameMode["NORMAL"] = "normal";
        SudokuGameMode["DAILY_CHALLENGE"] = "daily";
        SudokuGameMode["ARENA"] = "arena";
        SudokuGameMode["PRACTICE"] = "practice";
        return SudokuGameMode;
      }({}));

      // ===================== 游戏状态 =====================
      // 在GameModel中维护游戏状态
      var GameState = exports('GameState', /*#__PURE__*/function (GameState) {
        GameState[GameState["Ready"] = 0] = "Ready";
        GameState[GameState["Playing"] = 1] = "Playing";
        GameState[GameState["Paused"] = 2] = "Paused";
        GameState[GameState["GameOver"] = 3] = "GameOver";
        return GameState;
      }({}));
      var Language = exports('Language', /*#__PURE__*/function (Language) {
        Language["ZH_CN"] = "zh-CN";
        Language["EN"] = "en";
        return Language;
      }({}));
      // 默认语言
      var DEFAULT_LANGUAGE = exports('DEFAULT_LANGUAGE', Language.ZH_CN);

      // ===================== 配置实现 =====================
      /**
       * 全局配置对象
       * 说明：实际配置数据存储在此对象中
       */
      var Config = exports('default', {
        // ---------- 主题配置 ----------
        theme: (_theme = {}, _theme[ThemeName.Default] = {
          gameBackgroundColor: "#f7fbff",
          gamePrimaryColor: "#4a75ce",
          //主调颜色 控制界面大面积底色（如卡片背景、导航栏）
          gameAccentColor: "#393c6a",
          //强调色 用于核心操作按钮/关键状态
          gameSecondaryColor: "#aeb7d6",
          //次级色 次要功能按钮/文字
          gameNeutralColor: "#181c42",
          //中性色 文字/图标等固定元素

          boldLineColor: "#181c42",
          thinLineColor: "#d4dcf9",
          cellBackground: "#ffffff",
          cellTextColor: "#181c42",
          selectedCellBackground: "#4269b5",
          selectedCellTextColor: "#ffffff",
          relatedAreaBackground: "#f7f3ff",
          relatedAreaTextColor: "#181c42",
          prefilledTextColor: "#4269b5",
          errorBackground: "#ffffff",
          errorTextColor: "#d63c5a",
          selectedErrorTextColor: "#ff8a8c",
          hintBackground: "#ffffbd",
          hintTextColor: "#4269b5",
          hintRemoveBackground: "#ed6464",
          hintRemoveTextColor: "#ffffff",
          noteTextColor: "#2f312f",
          selectedNoteTextColor: "#f5f6ff",
          sameNumberNoteBackground: "#4269b5",
          sameNumberNoteTextColor: "#fffdff",
          sameNumberBackground: "#cedfff",
          // 浅黄色背景
          sameNumberTextColor: "#181c42" // 深橙色文字
        }, _theme[ThemeName.Brown] = {
          gameBackgroundColor: "#fffbef",
          gamePrimaryColor: "#6b3410",
          //主调颜色 控制界面大面积底色（如卡片背景、导航栏）
          gameAccentColor: "#9c5d18",
          //强调色 用于核心操作按钮/关键状态
          gameSecondaryColor: "#c7ae80",
          //次级色 次要功能按钮/文字
          gameNeutralColor: "#6b3410",
          //中性色 文字/图标等固定元素

          boldLineColor: "#6b3410",
          thinLineColor: "#decfad",
          cellBackground: "#fffff7",
          cellTextColor: "#6b3410",
          selectedCellBackground: "#9c5d18",
          selectedCellTextColor: "#ffffff",
          relatedAreaBackground: "#ffefde",
          relatedAreaTextColor: "#6b3410",
          prefilledTextColor: "#9c5d18",
          errorBackground: "#fffff7",
          errorTextColor: "#d63c5a",
          selectedErrorTextColor: "#ff8a8c",
          hintBackground: "#9c5d18",
          hintTextColor: "#ffffff",
          hintRemoveBackground: "#d63c5a",
          hintRemoveTextColor: "#ffffff",
          noteTextColor: "#75411d",
          selectedNoteTextColor: "#faf8f6",
          sameNumberNoteBackground: "#9c5d18",
          sameNumberNoteTextColor: "#fef9f4",
          sameNumberBackground: "#f7dfb5",
          // 浅橙色背景
          sameNumberTextColor: "#6b3410" // 深红棕色文字
        }, _theme[ThemeName.Nature] = {
          gameBackgroundColor: "#f7fff7",
          gamePrimaryColor: "#214500",
          //主调颜色 控制界面大面积底色（如卡片背景、导航栏）
          gameAccentColor: "#317d4a",
          //强调色 用于核心操作按钮/关键状态
          gameSecondaryColor: "#8cba9c",
          //次级色 次要功能按钮/文字
          gameNeutralColor: "#214500",
          //中性色 文字/图标等固定元素

          boldLineColor: "#214500",
          thinLineColor: "#add3bd",
          cellBackground: "#f7fff7",
          cellTextColor: "#214500",
          selectedCellBackground: "#317d4a",
          selectedCellTextColor: "#fefefe",
          relatedAreaBackground: "#e7fbde",
          relatedAreaTextColor: "#214500",
          prefilledTextColor: "#317d4a",
          errorBackground: "#f7fff7",
          errorTextColor: "#d63c5a",
          selectedErrorTextColor: "#ff8a8c",
          hintBackground: "#ffffbd",
          hintTextColor: "#4269b5",
          hintRemoveBackground: "#E8F5E9",
          hintRemoveTextColor: "#2E7D32",
          noteTextColor: "#3a5c1c",
          selectedNoteTextColor: "#ffffff",
          sameNumberNoteBackground: "#317d4a",
          sameNumberNoteTextColor: "#ffffff",
          sameNumberBackground: "#cee7bd",
          // 浅绿色背景
          sameNumberTextColor: "#214500" // 深绿色文字
        }, _theme[ThemeName.Dark] = {
          gameBackgroundColor: "#101010",
          gamePrimaryColor: "#6b799c",
          //主调颜色 控制界面大面积底色（如卡片背景、导航栏）
          gameAccentColor: "#395d9c",
          //强调色 用于核心操作按钮/关键状态
          gameSecondaryColor: "#3f4860",
          //次级色 次要功能按钮/文字
          gameNeutralColor: "#b5bace",
          //中性色 文字/图标等固定元素

          boldLineColor: "#424d63",
          thinLineColor: "#292842",
          cellBackground: "#101010",
          cellTextColor: "#8496bd",
          selectedCellBackground: "#39599c",
          selectedCellTextColor: "#8496bd",
          relatedAreaBackground: "#212031",
          relatedAreaTextColor: "#8496bd",
          prefilledTextColor: "#4a75ce",
          errorBackground: "#101010",
          errorTextColor: "#bd4963",
          selectedErrorTextColor: "#bd4963",
          hintBackground: "#6b799c",
          hintTextColor: "#ffffff",
          hintRemoveBackground: "#8496bd",
          hintRemoveTextColor: "#d63c5a",
          noteTextColor: "#7f91b6",
          selectedNoteTextColor: "#8395b9",
          sameNumberNoteBackground: "#39599c",
          sameNumberNoteTextColor: "#8395b9",
          sameNumberBackground: "#293052",
          // 深紫色背景
          sameNumberTextColor: "#8496bd" // 浅绿色文字
        }, _theme),
        // ---------- 难度配置 ----------
        difficulty: (_difficulty = {}, _difficulty[SudokuDifficulty.Novice] = {
          label: "SudokuDifficulty.Novice",
          prefilledNumbers: 64,
          // 高预填数（约44%填充率）
          maxErrors: 3,
          // 允许5次错误
          timeLimit: 1200,
          // 20分钟（1200秒）
          hintLimit: 3 // 最多使用3次提示
        }, _difficulty[SudokuDifficulty.Beginner] = {
          label: "SudokuDifficulty.Beginner",
          prefilledNumbers: 53,
          // 中等预填数（约35%）
          maxErrors: 3,
          // 允许3次错误
          timeLimit: 900,
          // 15分钟
          hintLimit: 3 // 最多2次提示
        }, _difficulty[SudokuDifficulty.Elementary] = {
          label: "SudokuDifficulty.Elementary",
          prefilledNumbers: 44,
          // 低预填数（约27%）
          maxErrors: 3,
          // 仅允许1次错误
          timeLimit: 600,
          // 10分钟
          hintLimit: 3 // 仅1次提示
        }, _difficulty[SudokuDifficulty.Intermediate] = {
          label: "SudokuDifficulty.Intermediate",
          prefilledNumbers: 35,
          // 极低预填数（22%）
          maxErrors: 3,
          // 不允许错误
          timeLimit: 300,
          // 5分钟
          hintLimit: 3 // 无提示
        }, _difficulty[SudokuDifficulty.Advanced] = {
          label: "SudokuDifficulty.Advanced",
          prefilledNumbers: 26,
          // 接近理论极限
          maxErrors: 3,
          timeLimit: 180,
          // 3分钟
          hintLimit: 3
        }, _difficulty[SudokuDifficulty.Expert] = {
          label: "SudokuDifficulty.Expert",
          prefilledNumbers: 21,
          // 人类极限
          maxErrors: 3,
          timeLimit: 120,
          // 2分钟
          hintLimit: 3
        }, _difficulty[SudokuDifficulty.Master] = {
          label: "SudokuDifficulty.Master",
          prefilledNumbers: 17,
          // 理论最小值
          maxErrors: 3,
          timeLimit: 120,
          hintLimit: undefined,
          isShowAutoNote: true
        }, _difficulty[SudokuDifficulty.Extreme] = {
          label: "SudokuDifficulty.Extreme",
          prefilledNumbers: 17,
          // 理论最小值
          maxErrors: 3,
          timeLimit: 120,
          hintLimit: 3
        }, _difficulty),
        // ---------- 通用配置 ----------
        defaultFontSize: 28,
        // 适中字号，适合大多数屏幕
        enableSound: true,
        // 默认启用声音反馈
        enableAnimation: true,
        // 默认启用过渡动画

        languages: Object.values(Language)
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config2.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5034dEezo5Frr6dhZGVgmTh", "Config", undefined);
      /*
       * @Author: dgflash
       * @Date: 2021-07-03 16:13:17
       * @LastEditors: dgflash
       * @LastEditTime: 2022-11-01 15:47:16
       */
      /** 游戏配置静态访问类 */
      var Config = exports('Config', function Config() {
        /** 环境常量 */
        //  btc!: BuildTimeConstants;
        /** 游戏配置数据，版本号、支持语种等数据 */
        this.game = void 0;
        /** 浏览器查询参数 */
        this.query = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Configuration.ts", ['cc', './Config.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var cclegacy, Config, ThemeName, SudokuDifficulty, EventType, oops;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Config = module.default;
      ThemeName = module.ThemeName;
      SudokuDifficulty = module.SudokuDifficulty;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bb34ahSDIBFGbRuXPZ8Tc/j", "Configuration", undefined);

      /**
       * 全局配置管理类
       * 实现功能：
       * 1. 当前主题管理
       * 2. 难度设置管理
       * 3. 用户偏好持久化
       * 4. 配置变更通知
       */
      var Configuration = exports('Configuration', /*#__PURE__*/function () {
        function Configuration() {
          // 当前配置状态
          this.currentTheme = void 0;
          this.currentDifficulty = void 0;
          // 从本地存储加载或使用默认配置
          this.currentTheme = this.loadPersistedConfig('theme') || ThemeName.Default;
          this.currentDifficulty = this.loadPersistedConfig('difficulty') || SudokuDifficulty.Beginner;
        }

        // ===================== 单例访问 =====================
        Configuration.getInstance = function getInstance() {
          if (!Configuration.instance) {
            Configuration.instance = new Configuration();
          }
          return Configuration.instance;
        }

        // ===================== 主题管理 =====================
        ;

        var _proto = Configuration.prototype;
        _proto.getThemeConfig = function getThemeConfig() {
          return Config.theme[this.currentTheme];
        };
        _proto.getCurrentTheme = function getCurrentTheme() {
          return this.currentTheme;
        };
        _proto.getCurrentDifficulty = function getCurrentDifficulty() {
          return this.currentDifficulty;
        };
        _proto.setTheme = function setTheme(themeName) {
          this.currentTheme = themeName;
          this.persistConfig('theme', themeName);
          this.notifyConfigChange();
        };
        _proto.getAvailableThemes = function getAvailableThemes() {
          return Object.values(ThemeName);
        }

        // ===================== 难度管理 =====================
        ;

        _proto.getDifficultyConfig = function getDifficultyConfig() {
          return Config.difficulty[this.currentDifficulty];
        };
        _proto.setDifficulty = function setDifficulty(difficulty) {
          this.currentDifficulty = difficulty;
          this.persistConfig('difficulty', difficulty.toString());
          this.notifyConfigChange();
        }

        // ===================== 持久化存储 =====================
        ;

        _proto.persistConfig = function persistConfig(key, value) {
          oops.storage.set("sudo_" + key, value);
        };
        _proto.loadPersistedConfig = function loadPersistedConfig(key) {
          var value = oops.storage.get("sudo_" + key);
          if (value) {
            return value ? value : null;
          }
          return null;
        }

        // ===================== 私有方法 =====================
        ;

        _proto.notifyConfigChange = function notifyConfigChange() {
          oops.message.dispatchEvent(EventType.REFRESH_THEME);
        };
        return Configuration;
      }());
      // 单例实例
      Configuration.instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "8153fG5b5NB+6fEU22QuKKk", "CustomToggle", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var CustomToggle = exports('CustomToggle', (_dec = ccclass('CustomToggle'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Toggle), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CustomToggle, _Component);
        function CustomToggle() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "onStateNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "offStateNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggle", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = CustomToggle.prototype;
        _proto.onToggle = function onToggle(event, customEventData) {
          if (this.toggle.isChecked) {
            this.onStateNode.active = true;
            this.offStateNode.active = false;
          } else {
            this.onStateNode.active = false;
            this.offStateNode.active = true;
          }
        };
        return CustomToggle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "onStateNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "offStateNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "toggle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyChallengeManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts'], function (exports) {
  var _extends, cclegacy, oops;
  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85bd1f1IBpFm7c8tXuU7l2A", "DailyChallengeManager", undefined);

      /**
       * 每日挑战历史记录管理器
       * 
       * 功能：
       * 1. 管理每日挑战的当前游戏状态
       * 2. 按日期保存每日挑战记录（每天只能玩一次）
       * 3. 记录每日挑战的最佳成绩
       * 4. 提供今日是否已完成的检查
       */
      var DailyChallengeManager = exports('DailyChallengeManager', /*#__PURE__*/function () {
        function DailyChallengeManager() {
          this.cachedHistory = void 0;
          // 初始化时立即加载数据到缓存
          this.loadHistoryToCache();
        }

        /**
         * 获取 DailyChallengeManager 单例实例
         */
        DailyChallengeManager.getInstance = function getInstance() {
          if (!DailyChallengeManager.instance) {
            DailyChallengeManager.instance = new DailyChallengeManager();
          }
          return DailyChallengeManager.instance;
        }

        // ========== 公开方法 ==========

        /**
         * 获取完整历史记录
         */;
        var _proto = DailyChallengeManager.prototype;
        _proto.getHistory = function getHistory() {
          return this.cachedHistory;
        }

        /**
         * 更新当前每日挑战进度
         */;
        _proto.updateCurrentGame = function updateCurrentGame(gameData, date) {
          var history = this.getHistory();
          var dateStr = this.getDateString(date);
          gameData.createTime = gameData.createTime || Date.now();
          var storedData = this.convertToStoredData(gameData);

          // 记录今日挑战
          history[dateStr] = storedData;
          this.saveHistory(history);
        }

        /**
         * 获取所有历史挑战记录（按日期倒序）
         */;
        _proto.getAllChallenges = function getAllChallenges() {
          var _this = this;
          var history = this.getHistory();
          var result = {};

          // 获取所有日期并按倒序排序
          Object.keys(history).sort(function (a, b) {
            return new Date(b).getTime() - new Date(a).getTime();
          }).forEach(function (date) {
            result[date] = _this.convertToGameData(history[date]);
          });
          return result;
        }

        /**
         * 获取指定日期的挑战记录
         */;
        _proto.getChallengeByDate = function getChallengeByDate(date) {
          var dateStr = this.getDateString(date);
          var storedData = this.getHistory()[dateStr];
          return storedData ? this.convertToGameData(storedData) : null;
        }

        // ========== 私有方法 ==========
        ;

        _proto.loadHistoryToCache = function loadHistoryToCache() {
          var historyStr = oops.storage.get(DailyChallengeManager.HISTORY_STORAGE_KEY);
          this.cachedHistory = historyStr ? JSON.parse(historyStr) : this.getDefaultHistory();
        };
        _proto.getDefaultHistory = function getDefaultHistory() {
          return {};
        };
        _proto.saveHistory = function saveHistory(history) {
          oops.storage.set(DailyChallengeManager.HISTORY_STORAGE_KEY, JSON.stringify(history));
        };
        _proto.convertToStoredData = function convertToStoredData(gameData) {
          return _extends({}, gameData, {
            userInputs: this.mapToObject(gameData.userInputs),
            userInputNotes: this.mapToObject(gameData.userInputNotes)
          });
        };
        _proto.convertToGameData = function convertToGameData(storedData) {
          return _extends({}, storedData, {
            userInputs: this.objectToMap(storedData.userInputs),
            userInputNotes: this.objectToMap(storedData.userInputNotes)
          });
        };
        _proto.mapToObject = function mapToObject(map) {
          var obj = {};
          map.forEach(function (value, key) {
            obj[key] = value;
          });
          return obj;
        };
        _proto.objectToMap = function objectToMap(obj) {
          var map = new Map();
          Object.entries(obj).forEach(function (_ref) {
            var key = _ref[0],
              value = _ref[1];
            map.set(key, value);
          });
          return map;
        };
        _proto.getDateString = function getDateString(date) {
          return date.toISOString().split('T')[0];
        };
        return DailyChallengeManager;
      }());
      DailyChallengeManager.instance = void 0;
      DailyChallengeManager.HISTORY_STORAGE_KEY = 'sudoku_daily_challenge_history_v2';
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyChallengePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Calendar.ts', './InfinitePageView.ts', './Config.ts', './UIConfig.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component, CalendarEvent, InfinitePageView, InfinitePageViewEvent, SudokuGameMode, UIID, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      CalendarEvent = module.CalendarEvent;
    }, function (module) {
      InfinitePageView = module.InfinitePageView;
      InfinitePageViewEvent = module.InfinitePageViewEvent;
    }, function (module) {
      SudokuGameMode = module.SudokuGameMode;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "1e976/OgrxOqKqP+LitS2ML", "DailyChallengePage", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DailyChallengePage = exports('DailyChallengePage', (_dec = ccclass('DailyChallengePage'), _dec2 = property({
        type: InfinitePageView,
        tooltip: "InfinitePageView",
        visible: true
      }), _dec3 = property({
        type: Button,
        tooltip: "btn_nextPage",
        visible: true
      }), _dec4 = property({
        type: Button,
        tooltip: "btn_prevPage",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DailyChallengePage, _Component);
        function DailyChallengePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "infinitePageView", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_nextPage", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_prevPage", _descriptor3, _assertThisInitialized(_this));
          _this.selectedDate = null;
          return _this;
        }
        var _proto = DailyChallengePage.prototype;
        _proto.onLoad = function onLoad() {
          oops.message.on(InfinitePageViewEvent.PAGE_CHANGED, this.onPageChanged, this);
          oops.message.on(CalendarEvent.SELECTED_DATE, this.onSelectedDate, this);
        };
        _proto.onDestroy = function onDestroy() {
          oops.message.off(InfinitePageViewEvent.PAGE_CHANGED, this.onPageChanged, this);
          oops.message.off(CalendarEvent.SELECTED_DATE, this.onSelectedDate, this);
        };
        _proto.onPageChanged = function onPageChanged() {
          var pageState = this.infinitePageView.getPageState();
          this.btn_nextPage.node.active = pageState.canNext;
          this.btn_prevPage.node.active = pageState.canPrev;
        };
        _proto.onSelectedDate = function onSelectedDate(event, args) {
          this.selectedDate = args;
          console.log("args->", args);
        };
        _proto.start = function start() {
          var data = this.getDateRangeForCalendar();
          console.log("data->", data);
          this.infinitePageView.setData(data, data.length - 1);
        };
        _proto.update = function update(deltaTime) {}

        /**
         * 获取从今年1月1日到当前日期的时间数组（适配setMonth）
         * @returns 返回适配setMonth的日期数组 [{year, month, day}]，按时间正序排列
         */;
        _proto.getDateRangeForCalendar = function getDateRangeForCalendar() {
          var result = [];
          var today = new Date();
          var currentYear = today.getFullYear();
          var currentMonth = today.getMonth();
          var currentDay = today.getDate();

          // 1. 先添加从1月到上个月的第一天
          for (var month = 0; month < currentMonth; month++) {
            result.push({
              year: currentYear,
              month: month + 1,
              // 转换为1-12的月份
              day: 1 // 每月第一天
            });
          }

          // 2. 最后添加当前月的当天
          result.push({
            year: currentYear,
            month: currentMonth + 1,
            day: currentDay
          });
          return result;
        }

        /** 切换到上一页 */;
        _proto.onPrevPage = function onPrevPage() {
          this.infinitePageView.prevPage();
        }

        /** 切换到下一页 */;
        _proto.onNextPage = function onNextPage() {
          this.infinitePageView.nextPage();
        }

        /**
         * 开始游戏
         */;
        _proto.onStartGame = function onStartGame() {
          var _this$selectedDate;
          oops.gui.replaceAsync(UIID.Lobby, UIID.Game, {
            gameMode: SudokuGameMode.DAILY_CHALLENGE,
            data: {
              date: (_this$selectedDate = this.selectedDate) == null ? void 0 : _this$selectedDate.date
            }
          });
        };
        return DailyChallengePage;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "infinitePageView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_nextPage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_prevPage", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyChallengePageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Calendar.ts', './InfinitePageViewItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Calendar, InfinitePageViewItem;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Calendar = module.Calendar;
    }, function (module) {
      InfinitePageViewItem = module.InfinitePageViewItem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "ca5c5+VPx9Hro7erb8kv3et", "DailyChallengePageItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DailyChallengePageItem = exports('DailyChallengePageItem', (_dec = ccclass('DailyChallengePageItem'), _dec2 = property({
        type: Calendar,
        tooltip: "Calendar",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_InfinitePageViewItem) {
        _inheritsLoose(DailyChallengePageItem, _InfinitePageViewItem);
        function DailyChallengePageItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _InfinitePageViewItem.call.apply(_InfinitePageViewItem, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "calendar", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = DailyChallengePageItem.prototype;
        _proto.start = function start() {
          // this.scheduleOnce(() => {
          //     this.updateSize();
          // }, 0);
        };
        _proto.update = function update(deltaTime) {};
        _proto.updateView = function updateView(data) {
          console.log("刷新界面", data);
          // this.label.string = data;
          this.calendar.setMonth(data.year, data.month, data.day);
        };
        return DailyChallengePageItem;
      }(InfinitePageViewItem), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "calendar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyGameRecords.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "436a2cgugVI26OzYbqt7+6L", "DailyGameRecords", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DateExt.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "80ebbBz8etB5qijWdYrU2HH", "DateExt", undefined);
      /** 格式化时间字符串 */
      Date.prototype.format = function (format) {
        var year = this.getFullYear();
        var month = this.getMonth() + 1;
        var day = this.getDate();
        var hours = this.getHours();
        var minutes = this.getMinutes();
        var seconds = this.getSeconds();
        return format.replace('yy', year.toString()).replace('mm', (month < 10 ? '0' : '') + month).replace('dd', (day < 10 ? '0' : '') + day).replace('hh', (hours < 10 ? '0' : '') + hours).replace('mm', (minutes < 10 ? '0' : '') + minutes).replace('ss', (seconds < 10 ? '0' : '') + seconds);
      };
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DailyChallengeManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Sprite, ProgressBar, Color, Component, DailyChallengeManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      ProgressBar = module.ProgressBar;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      DailyChallengeManager = module.DailyChallengeManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "4986d6C4eVB1qfs+z4i+kkR", "DayItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DayItem = exports('DayItem', (_dec = ccclass('DayItem'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec5 = property(ProgressBar), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DayItem, _Component);
        function DayItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // 基础显示元素（匹配图片）
          _initializerDefineProperty(_this, "dayLabel", _descriptor, _assertThisInitialized(_this));
          // 日期数字
          _initializerDefineProperty(_this, "selectedBg", _descriptor2, _assertThisInitialized(_this));
          // 选中背景（图片中1号的深蓝色实心）
          _initializerDefineProperty(_this, "todayMark", _descriptor3, _assertThisInitialized(_this));
          // 当前日期标记（图片中未展示但建议添加）
          _initializerDefineProperty(_this, "progressBar", _descriptor4, _assertThisInitialized(_this));
          // 当前记录进度
          // 数据存储
          _this._date = new Date();
          // 完整日期对象
          _this._isSelected = false;
          _this.isSelectable = true;
          return _this;
        }
        var _proto = DayItem.prototype;
        _proto.hideAll = function hideAll() {
          this.dayLabel.node.active = false;
          this.selectedBg.node.active = false;
          this.todayMark.node.active = false;
          this.progressBar.node.active = false;
        }

        /**
         * 初始化日期格子（严格匹配图片样式）
         * @param date 完整日期对象
         * @param isToday 是否为今天
         */;
        _proto.init = function init(date, options) {
          this.dayLabel.node.active = true;
          this.selectedBg.node.active = false;
          this.setSelected(false);
          this._date = date;
          this.isSelectable = options.isSelectable;

          // 基础显示
          this.dayLabel.string = date.getDate().toString();
          this.todayMark.node.active = options.isToday;

          // 不可选样式
          if (!this.isSelectable) {
            this.dayLabel.color = Color.GRAY;
          }
          var gameData = DailyChallengeManager.getInstance().getChallengeByDate(date);
          if (gameData) {
            this.progressBar.node.active = true;
            this.progressBar.progress = gameData.progress ? gameData.progress : 0.1;
          } else {
            this.progressBar.node.active = false;
          }
        }

        /**
         * 设置选中状态（匹配图片中1号的深蓝色实心效果）
         * @param selected 是否选中
         */;
        _proto.setSelected = function setSelected(selected) {
          if (!this.isSelectable) return;
          this._isSelected = selected;
          this.selectedBg.node.active = selected;

          // 选中时文字变白（匹配图片中1号的效果）
          this.dayLabel.color = selected ? Color.WHITE : Color.BLACK;
        }

        // 获取完整日期数据
        ;

        _createClass(DayItem, [{
          key: "date",
          get: function get() {
            return new Date(this._date); // 返回副本防止篡改
          }

          // 是否选中
        }, {
          key: "isSelected",
          get: function get() {
            return this._isSelected;
          }
        }]);
        return DayItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dayLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "selectedBg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "todayMark", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Decorator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BehaviorTree.ts', './BTreeNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, BehaviorTree, BTreeNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BehaviorTree = module.BehaviorTree;
    }, function (module) {
      BTreeNode = module.BTreeNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0455agxsbxHlYleJPDpJX3l", "Decorator", undefined);

      /** 
       * 装饰器是条件语句只能附加在其他节点上并且定义所附加的节点是否执行 
       * 如果装饰器是true 它所在的子树会被执行，如果是false 所在的子树不会被执行
       */
      var Decorator = exports('Decorator', /*#__PURE__*/function (_BTreeNode) {
        _inheritsLoose(Decorator, _BTreeNode);
        function Decorator(node) {
          var _this;
          _this = _BTreeNode.call(this) || this;
          _this.node = void 0;
          if (node) _this.node = BehaviorTree.getNode(node);
          return _this;
        }
        var _proto = Decorator.prototype;
        _proto.setNode = function setNode(node) {
          this.node = BehaviorTree.getNode(node);
        };
        _proto.start = function start() {
          this.node.setControl(this);
          this.node.start();
          _BTreeNode.prototype.start.call(this);
        };
        _proto.end = function end() {
          this.node.end();
        };
        _proto.run = function run(blackboard) {
          this.node.run(blackboard);
        };
        return Decorator;
      }(BTreeNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Defines.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82d3a9c71JEkI95d3qscHm8", "Defines", undefined);
      /*
       * @Author: dgflash
       * @Date: 2021-11-18 11:21:32
       * @LastEditors: dgflash
       * @LastEditTime: 2023-01-09 11:52:38
       */
      /*** 界面回调参数对象定义 */
      /** 本类型仅供gui模块内部使用，请勿在功能逻辑中使用 */
      var ViewParams = exports('ViewParams', function ViewParams() {
        /** 界面配置 */
        this.config = null;
        /** 传递给打开界面的参数 */
        this.params = null;
        /** 窗口事件 */
        this.callbacks = null;
        /** 是否在使用状态 */
        this.valid = true;
        /** 界面根节点 */
        this.node = null;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DelegateComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Component, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d8f1fGRD7dBzIeBSkOpd/Py", "DelegateComponent", undefined);
      var ccclass = _decorator.ccclass;
      var EventOnAdded = "onAdded";
      var EventOnBeforeRemove = "onBeforeRemove";
      var EventOnRemoved = "onRemoved";

      /** 窗口事件触发组件 */
      var DelegateComponent = exports('DelegateComponent', (_dec = ccclass('DelegateComponent'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DelegateComponent, _Component);
        function DelegateComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 视图参数 */
          _this.vp = null;
          /** 界面关闭回调 - 包括关闭动画播放完（辅助框架内存业务流程使用） */
          _this.onCloseWindow = null;
          return _this;
        }
        var _proto = DelegateComponent.prototype;
        /** 窗口添加 */
        _proto.add = function add() {
          var _this2 = this;
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var i, component, func;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  i = 0;
                case 1:
                  if (!(i < _this2.node.components.length)) {
                    _context.next = 14;
                    break;
                  }
                  component = _this2.node.components[i];
                  func = component[EventOnAdded];
                  if (!func) {
                    _context.next = 11;
                    break;
                  }
                  _context.next = 7;
                  return func.call(component, _this2.vp.params);
                case 7:
                  _context.t0 = _context.sent;
                  if (!(_context.t0 == false)) {
                    _context.next = 11;
                    break;
                  }
                  resolve(false);
                  return _context.abrupt("return");
                case 11:
                  i++;
                  _context.next = 1;
                  break;
                case 14:
                  // 触发外部窗口显示前的事件（辅助实现自定义动画逻辑）
                  if (typeof _this2.vp.callbacks.onAdded === "function") {
                    _this2.vp.callbacks.onAdded(_this2.node, _this2.vp.params);
                  }
                  resolve(true);
                case 16:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        }

        /** 删除节点，该方法只能调用一次，将会触发onBeforeRemoved回调 */;
        _proto.remove = function remove(isDestroy) {
          if (this.vp.valid) {
            // 触发窗口移除舞台之前事件
            this.applyComponentsFunction(this.node, EventOnBeforeRemove, this.vp.params);

            //  通知外部对象窗口组件上移除之前的事件（关闭窗口前的关闭动画处理）
            if (typeof this.vp.callbacks.onBeforeRemove === "function") {
              this.vp.callbacks.onBeforeRemove(this.node, this.onBeforeRemoveNext.bind(this, isDestroy));
            } else {
              this.removed(this.vp, isDestroy);
            }
          }
        }

        /** 窗口关闭前动画处理完后的回调方法，主要用于释放资源 */;
        _proto.onBeforeRemoveNext = function onBeforeRemoveNext(isDestroy) {
          this.removed(this.vp, isDestroy);
        }

        /** 窗口组件中触发移除事件与释放窗口对象 */;
        _proto.removed = function removed(vp, isDestroy) {
          vp.valid = false;
          if (vp.callbacks && typeof vp.callbacks.onRemoved === "function") {
            vp.callbacks.onRemoved(this.node, vp.params);
          }

          // 界面移除舞台事件
          this.onCloseWindow && this.onCloseWindow(vp);
          if (isDestroy) {
            // 释放界面显示对象
            this.node.destroy();

            // 释放界面相关资源
            oops.res.release(vp.config.prefab);

            // oops.log.logView(`【界面管理】释放【${vp.config.prefab}】界面资源`);
          } else {
            this.node.removeFromParent();
          }
        };
        _proto.onDestroy = function onDestroy() {
          // 触发窗口组件上窗口移除之后的事件
          this.applyComponentsFunction(this.node, EventOnRemoved, this.vp.params);
          this.vp = null;
        };
        _proto.applyComponentsFunction = function applyComponentsFunction(node, funName, params) {
          for (var i = 0; i < node.components.length; i++) {
            var component = node.components[i];
            var func = component[funName];
            if (func) {
              func.call(component, params);
            }
          }
        };
        return DelegateComponent;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DeviceUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, sys;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }],
    execute: function () {
      cclegacy._RF.push({}, "287a3oHJD1OrKr6dp6idwn9", "DeviceUtil", undefined);

      /** 设备工具 */
      var DeviceUtil = exports('DeviceUtil', /*#__PURE__*/function () {
        function DeviceUtil() {}
        /** 返回手机屏幕安全区域，如果不是异形屏将默认返回设计分辨率尺寸。目前只支持安卓、iOS 原生平台和微信小游戏平台 */
        DeviceUtil.getSafeAreaRect = function getSafeAreaRect() {
          return sys.getSafeAreaRect();
        }

        /** 当前平台 */;
        _createClass(DeviceUtil, null, [{
          key: "platform",
          get: function get() {
            return sys.platform;
          }

          /** 当前操作系统 */
        }, {
          key: "os",
          get: function get() {
            return sys.os;
          }

          /** 是否为原生环境 */
        }, {
          key: "isNative",
          get: function get() {
            return sys.isNative;
          }

          /** 是否为浏览器环境 */
        }, {
          key: "isBrowser",
          get: function get() {
            return sys.isBrowser;
          }

          /** 是否为手机 */
        }, {
          key: "isMobile",
          get: function get() {
            return sys.isMobile;
          }

          /** 是否为安卓手机 */
        }, {
          key: "isAndroid",
          get: function get() {
            return sys.platform === sys.Platform.ANDROID;
          }

          /** 是否为苹果手机 */
        }, {
          key: "isIPhone",
          get: function get() {
            return sys.platform === sys.Platform.IOS;
          }

          /** 是否为手机浏览器 */
        }, {
          key: "isMobileBrowser",
          get: function get() {
            return sys.platform === sys.Platform.MOBILE_BROWSER;
          }

          /** 是否为桌面浏览器 */
        }, {
          key: "isDesktopBrowser",
          get: function get() {
            return sys.platform === sys.Platform.DESKTOP_BROWSER;
          }

          /** 是否为微信小游戏 */
        }, {
          key: "isWeChat",
          get: function get() {
            return sys.platform === sys.Platform.WECHAT_GAME;
          }

          /** 是否为字节小游戏 */
        }, {
          key: "isByteDance",
          get: function get() {
            return sys.platform === sys.Platform.BYTEDANCE_MINI_GAME;
          }

          /** 是否为百度小游戏 */
        }, {
          key: "isBaidu",
          get: function get() {
            return sys.platform === sys.Platform.BAIDU_MINI_GAME;
          }

          /** 是否为 vivo 小游戏 */
        }, {
          key: "isVivo",
          get: function get() {
            return sys.platform === sys.Platform.VIVO_MINI_GAME;
          }

          /** 是否为 OPPO 小游戏 */
        }, {
          key: "isOPPO",
          get: function get() {
            return sys.platform === sys.Platform.OPPO_MINI_GAME;
          }

          /** 是否为小米小游戏 */
        }, {
          key: "isXiaomi",
          get: function get() {
            return sys.platform === sys.Platform.XIAOMI_QUICK_GAME;
          }

          /** 是否为华为小游戏 */
        }, {
          key: "isHuawei",
          get: function get() {
            return sys.platform === sys.Platform.HUAWEI_QUICK_GAME;
          }

          /** 是否为支付宝小游戏 */
        }, {
          key: "isAlipay",
          get: function get() {
            return sys.platform === sys.Platform.ALIPAY_MINI_GAME;
          }

          /** 是否为开源鸿蒙小游戏 */
        }, {
          key: "isOpenHarmony",
          get: function get() {
            return sys.platform === sys.Platform.OPENHARMONY;
          }
        }]);
        return DeviceUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DifficultyConfig.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9ac45onGJJDCpfau+U2TA7W", "DifficultyConfig", undefined);
      /**
       * 难度配置接口
       * 说明：定义不同难度级别的游戏规则参数
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DifficultyManager.ts", ['cc', './Config.ts', './BeginnerBasicStrategy.ts', './GameHistoryImpl.ts'], function (exports) {
  var cclegacy, SudokuDifficulty, BeginnerBasicStrategy, GameHistoryImpl;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      SudokuDifficulty = module.SudokuDifficulty;
    }, function (module) {
      BeginnerBasicStrategy = module.BeginnerBasicStrategy;
    }, function (module) {
      GameHistoryImpl = module.GameHistoryImpl;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f7d56RSDWtHEodfxQcKg54g", "DifficultyManager", undefined);

      /**
       * 数独游戏难度管理系统
       * 
       * 主要职责：
       * 1. 管理不同难度级别的调整策略
       * 2. 记录和追踪游戏历史数据
       * 3. 根据玩家表现自动调整游戏难度
       * 4. 提供调试接口用于开发验证
       */
      var DifficultyManager = exports('DifficultyManager', /*#__PURE__*/function () {
        // 私有构造函数确保单例
        function DifficultyManager() {
          // 存储各难度对应的策略（键为难度级别，值为策略实现）
          this.strategies = new Map();
          // 游戏历史记录（使用实现类但通过接口引用）
          this.history = new GameHistoryImpl();
          this.initDefaultStrategies();
        }

        /**
         * 获取单例实例
         * @returns DifficultyManager 全局唯一实例
         */
        DifficultyManager.getInstance = function getInstance() {
          if (!DifficultyManager.instance) {
            DifficultyManager.instance = new DifficultyManager();
          }
          return DifficultyManager.instance;
        }

        /**
         * 记录游戏结果
         * @param record 游戏记录对象，包含：
         *   - difficulty: 游戏难度级别
         *   - progress: 完成进度（0-1）
         *   - isCompleted: 是否完成
         *   - timestamp: 可选时间戳（默认当前时间）
         */;
        var _proto = DifficultyManager.prototype;
        _proto.recordGameResult = function recordGameResult(record) {
          // 通过实现类添加记录（需类型断言）
          this.history.addRecord(record);
        }

        /**
         * 评估是否需要调整难度
         * @param difficulty 要评估的难度级别
         * @returns 调整建议对象，包含：
         *   - shouldAdjust: 是否需要调整
         *   - adjustedDifficulty: 建议调整到的难度（如有）
         *   - reason: 调整原因说明
         *   - confidence: 调整置信度（0-1）
         */;
        _proto.evaluate = function evaluate(difficulty) {
          console.log("this.strategies->", this.strategies);
          var strategy = this.strategies.get(Number(difficulty));
          return (strategy == null ? void 0 : strategy.evaluate(this.history)) || {
            shouldAdjust: false
          };
        }

        /**
         * 清空所有历史记录（重置为初始状态）
         */;
        _proto.clearHistory = function clearHistory() {
          this.history = new GameHistoryImpl();
        }

        /**
         * 初始化默认策略（当前仅Beginner难度有特殊策略）
         */;
        _proto.initDefaultStrategies = function initDefaultStrategies() {
          // 为Beginner难度注册基础策略
          this.strategies.set(Number(SudokuDifficulty.Beginner), new BeginnerBasicStrategy());

          // 其他难度默认使用无策略（即不自动调整）
        }

        /**
         * 调试方法：获取当前历史记录
         * @returns 当前存储的所有游戏记录（副本）
         * 
         * 注意：实际开发中应只在开发环境使用此方法
         */;
        _proto.debugGetHistory = function debugGetHistory() {
          // 返回记录数组的副本（防止外部修改内部数据）
          return [].concat(this.history.records);
        };
        return DifficultyManager;
      }());
      // 单例实例
      DifficultyManager.instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DifficultyTypes.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "652381W71hEFIZ4L3sZon/m", "DifficultyTypes", undefined);
      /**
       * 数独游戏难度系统类型定义
       * 
       * 核心职责：
       * 1. 定义游戏记录数据结构
       * 2. 声明难度调整相关接口
       * 3. 提供策略模式需要的类型契约
       */
      /**
       * 单局游戏记录数据结构
       * 
       * @property difficulty - 游戏难度级别（枚举值）
       * @property progress - 完成进度（0到1的小数，1表示100%完成）
       * @property isCompleted - 是否成功完成本局游戏
       * @property timestamp - 记录创建时间戳（毫秒数）
       * 
       * 示例：
       * {
       *   difficulty: SudokuDifficulty.Beginner,
       *   progress: 0.85,
       *   isCompleted: true,
       *   timestamp: 1672531200000
       * }
       */
      /**
       * 游戏历史记录接口
       * 
       * 职责：
       * 1. 存储多局游戏记录
       * 2. 提供按条件查询的能力
       * 
       * @property records - 存储所有游戏记录的数组
       * @method getRecentRecords - 获取指定难度的最近若干条记录
       * 
       * 实现要求：
       * - 记录应按时间顺序存储（旧记录在前，新记录在后）
       * - 应保证数据不可变性（返回新数组而非内部引用）
       */
      /**
       * 难度调整建议结果
       * 
       * 使用场景：
       * 当系统检测到玩家当前难度不合适时返回的调整建议
       * 
       * @property shouldAdjust - 是否需要调整难度
       * @property adjustedDifficulty - 建议调整到的目标难度（当shouldAdjust为true时有效）
       * @property reason - 调整原因说明（用于调试或UI展示）
       * @property confidence - 调整置信度（0-1的小数，1表示100%确定需要调整）
       * 
       * 示例：
       * {
       *   shouldAdjust: true,
       *   adjustedDifficulty: SudokuDifficulty.Novice,
       *   reason: "连续3次未完成游戏",
       *   confidence: 0.9
       * }
       */
      /**
       * 难度调整原因枚举
       * 
       * 标准化系统可能返回的调整原因，主要用于：
       * 1. 日志记录
       * 2. 调试信息
       * 3. 本地化显示（当前为中文）
       * 
       * 注意：新增原因时需要同步更新策略实现
       */
      var AdjustmentReason = exports('AdjustmentReason', /*#__PURE__*/function (AdjustmentReason) {
        AdjustmentReason["CONSECUTIVE_FAILURES"] = "\u8FDE\u7EED\u5931\u8D25";
        AdjustmentReason["LOW_COMPLETION_RATE"] = "\u4F4E\u5B8C\u6210\u7387";
        AdjustmentReason["PLAYER_STRUGGLING"] = "\u73A9\u5BB6\u6301\u7EED\u56F0\u96BE";
        return AdjustmentReason;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DirectorExt.ts", ['cc'], function () {
  var cclegacy, Director, director, js;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Director = module.Director;
      director = module.director;
      js = module.js;
    }],
    execute: function () {
      cclegacy._RF.push({}, "37f48DDLR1EXKhzn+7pLlWB", "DirectorExt", undefined);

      /** 全局游戏时间缩放 */
      //@ts-ignore
      if (!Director.prototype["__$cc-director-speed-extension$__"]) {
        //@ts-ignore
        Director.prototype["__$cc-director-speed-extension$__"] = true;
        var oldTick = director.tick.bind(director);
        director.tick = function (dt) {
          dt *= director.globalGameTimeScale;
          oldTick(dt);
        };
        js.mixin(Director.prototype, {
          globalGameTimeScale: 1
        });
      }
      // director.globalGameTimeScale = 0.5;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECS.ts", ['cc', './ECSComp.ts', './ECSEntity.ts', './ECSMatcher.ts', './ECSModel.ts', './ECSSystem.ts'], function (exports) {
  var cclegacy, ECSComp, ECSEntity, ECSMatcher, ECSModel, ECSSystem, ECSRootSystem, ECSComblockSystem;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ECSComp = module.ECSComp;
    }, function (module) {
      ECSEntity = module.ECSEntity;
    }, function (module) {
      ECSMatcher = module.ECSMatcher;
    }, function (module) {
      ECSModel = module.ECSModel;
    }, function (module) {
      ECSSystem = module.ECSSystem;
      ECSRootSystem = module.ECSRootSystem;
      ECSComblockSystem = module.ECSComblockSystem;
    }],
    execute: function () {
      exports('ecs', void 0);
      cclegacy._RF.push({}, "be87fT76plLkaUKEYpkuV0n", "ECS", undefined);

      /** 
       * ECSEntity对象在destroy后，会回收到ECSModel.entityPool实体对象池中
       * ECSComp对象从ECSEntity.remove后，数据组件会回收到ECSModel.compPools组件对象池中
       */

      /** 
       * Entity-Component-System（实体-组件-系统）框架
       * 文档：https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12033388&doc_id=2873565
       */
      var ecs;
      (function (_ecs) {
        /** 实体 - 一个概念上的定义，指的是游戏世界中的一个独特物体，是一系列组件的集合 */

        /** 组件 - 一堆数据的集合，即不存在任何的行为，只用来存储状态 */

        /** 系统 - 关注实体上组件数据变化，处理游戏逻辑 */

        /** 根系统 - 驱动游戏中所有系统工作 */

        /** 处理游戏逻辑系统对象 - 继承此对象实现自定义业务逻辑 */

        /** 实体 - 一个概念上的定义，指的是游戏世界中的一个独特物体，是一系列组件的集合 */
        var Entity = _ecs.Entity = ECSEntity;
        var Comp = _ecs.Comp = ECSComp;
        var System = _ecs.System = ECSSystem;
        var RootSystem = _ecs.RootSystem = ECSRootSystem;
        var ComblockSystem = _ecs.ComblockSystem = ECSComblockSystem;

        //#region 接口

        /** 组件接口 */

        /** 实体匹配器接口 */

        /**
         * 监听组件首次添加到实体上时，在ComblockSystem上实现这个接口
         * 1. entityEnter会在update方法之前执行，实体进入后，不会再次进入entityEnter方法中
         * 2. 当实体从当前System移除，下次再次符合条件进入System也会执行上述流程
         * @example
        export class RoleUpgradeSystem extends ecs.ComblockSystem implements ecs.IEntityEnterSystem {
            filter(): ecs.IMatcher {
                return ecs.allOf(RoleUpgradeComp, RoleModelLevelComp);
            }
              entityEnter(e: Role): void {
                e.remove(RoleUpgradeComp);
            }
        }
         */

        /** 监听组件从实体上移除时，在ComblockSystem上实现这个接口 */

        /** 监听系统第一次执行update处理实体时，在ComblockSystem上实现这个接口 */

        /** 监听系统执行update处理实体时，在ComblockSystem上实现这个接口 */

        //#endregion

        /**
         * 注册组件到ecs系统中
         * @param name   由于js打包会改变类名，所以这里必须手动传入组件的名称
         * @param canNew 标识是否可以new对象。想继承自Cocos Creator的组件就不能去new，需要写成@ecs.register('name', false)
         * @example
        // 注册实体
        @ecs.register('Role')
        export class Role extends ecs.Entity {
          }
          // 注册数据组件
        @ecs.register('RoleModel')
        export class RoleModelComp extends ecs.Comp {
            id: number = -1;
              reset() {
                this.id =  -1;
            }
        }
          // 注册系统组件
        @ecs.register('Initialize')
        export class InitResSystem extends ecs.ComblockSystem implements ecs.IEntityEnterSystem {
          }
          // 注册显示对象组件
        @ccclass('RoleViewComp')
        @ecs.register('RoleView', false)
        export class RoleViewComp extends CCComp {
            onLoad(){
                
            }
        }
        */
        function register(name, canNew) {
          if (canNew === void 0) {
            canNew = true;
          }
          return function (ctor) {
            // 注册系统
            if (ctor.s) {
              var system = ECSModel.systems.get(name);
              if (system == null) {
                system = new ecs.System();
                ECSModel.systems.set(name, system);
              }
              system.add(new ctor());
            }
            // 注册实体
            else if (ctor.tid == undefined) {
              ECSModel.entityCtors.set(ctor, name);
            }
            // 注册组件
            else {
              if (ctor.tid === -1) {
                ctor.tid = ECSModel.compTid++;
                ctor.compName = name;
                if (canNew) {
                  ECSModel.compCtors.push(ctor); // 注册不同类型的组件
                  ECSModel.compPools.set(ctor.tid, []);
                } else {
                  ECSModel.compCtors.push(null);
                }
                ECSModel.compAddOrRemove.set(ctor.tid, []);
              } else {
                throw new Error("\u91CD\u590D\u6CE8\u518C\u7EC4\u4EF6\uFF1A " + name + ".");
              }
            }
          };
        }
        _ecs.register = register;
        function getEntity(ctor) {
          // 获取实体对象名
          var entityName = ECSModel.entityCtors.get(ctor);
          if (entityName == undefined) console.error(ctor.name + " \u5B9E\u4F53\u6CA1\u6709\u6CE8\u518C");

          // 获取实体对象池
          var entitys = ECSModel.entityPool.get(entityName) || [];
          var entity = entitys.pop();

          // 缓存中没有同类实体，则创建一个新的
          if (!entity) {
            entity = new ctor();
            entity.eid = ECSModel.eid++; // 实体唯一编号
            entity.name = entityName;
          }

          // 触发实体初始化逻辑
          if (entity.init) {
            entity.isValid = true;
            entity.init();
          } else console.error(ctor.name + " \u5B9E\u4F53\u7F3A\u5C11 init \u65B9\u6CD5\u521D\u59CB\u5316\u9ED8\u8BA4\u7EC4\u4EF6");
          ECSModel.eid2Entity.set(entity.eid, entity);
          return entity;
        }
        _ecs.getEntity = getEntity;
        function query(matcher) {
          var group = ECSModel.groups.get(matcher.mid);
          if (!group) {
            group = ECSModel.createGroup(matcher);
            ECSModel.eid2Entity.forEach(group.onComponentAddOrRemove, group);
          }
          return group.matchEntities;
        }
        _ecs.query = query;
        function clear() {
          ECSModel.eid2Entity.forEach(function (entity) {
            entity.destroy();
          });
          ECSModel.groups.forEach(function (group) {
            group.clear();
          });
          ECSModel.compAddOrRemove.forEach(function (callbackLst) {
            callbackLst.length = 0;
          });
          ECSModel.eid2Entity.clear();
          ECSModel.groups.clear();
        }
        _ecs.clear = clear;
        function getEntityByEid(eid) {
          return ECSModel.eid2Entity.get(eid);
        }
        _ecs.getEntityByEid = getEntityByEid;
        function activeEntityCount() {
          return ECSModel.eid2Entity.size;
        }
        _ecs.activeEntityCount = activeEntityCount;
        /** 创建实体 */
        function createEntity() {
          var entity = new Entity();
          entity.eid = ECSModel.eid++; // 实体id也是有限的资源
          ECSModel.eid2Entity.set(entity.eid, entity);
          return entity;
        }

        /**
         * 指定一个组件创建实体，返回组件对象。
         * @param ctor 
         */
        function createEntityWithComp(ctor) {
          var entity = createEntity();
          return entity.add(ctor);
        }

        //#region 过滤器
        /**
         * 表示只关心这些组件的添加和删除动作。虽然实体可能有这些组件之外的组件，但是它们的添加和删除没有被关注，所以不会存在对关注之外的组件
         * 进行添加操作引发Group重复添加实体。
         * @param args 
         * @example
         * ecs.allOf(AComponent, BComponent, CComponent);
         */
        function allOf() {
          var _ECSMatcher;
          return (_ECSMatcher = new ECSMatcher()).allOf.apply(_ECSMatcher, arguments);
        }
        _ecs.allOf = allOf;
        function anyOf() {
          var _ECSMatcher2;
          return (_ECSMatcher2 = new ECSMatcher()).anyOf.apply(_ECSMatcher2, arguments);
        }
        _ecs.anyOf = anyOf;
        function onlyOf() {
          var _ECSMatcher3;
          return (_ECSMatcher3 = new ECSMatcher()).onlyOf.apply(_ECSMatcher3, arguments);
        }
        _ecs.onlyOf = onlyOf;
        function excludeOf() {
          var _ECSMatcher4;
          return (_ECSMatcher4 = new ECSMatcher()).excludeOf.apply(_ECSMatcher4, arguments);
        }
        _ecs.excludeOf = excludeOf;
        function getSingleton(ctor) {
          if (!ECSModel.tid2comp.has(ctor.tid)) {
            var comp = createEntityWithComp(ctor);
            ECSModel.tid2comp.set(ctor.tid, comp);
          }
          return ECSModel.tid2comp.get(ctor.tid);
        }
        _ecs.getSingleton = getSingleton;
        function addSingleton(obj) {
          var tid = obj.constructor.tid;
          if (!ECSModel.tid2comp.has(tid)) {
            ECSModel.tid2comp.set(tid, obj);
          }
        }
        _ecs.addSingleton = addSingleton;
      })(ecs || (ecs = exports('ecs', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSComp.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3d017ZhAZRH4bPfpLr5++8F", "ECSComp", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-09-01 18:00:28
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-05 14:03:54
       */
      /** 
       * 组件抽象类
       * 注：建议组件里面只放数据可能在实际写代码会碰到一些比较麻烦的问题，如果是单纯对组件内的数据操作可以在组件里面写方法
       */
      var ECSComp = exports('ECSComp', function ECSComp() {
        /** 拥有该组件的实体 */
        this.ent = void 0;
        /**
         * 是否可回收组件对象，默认情况下都是可回收的
         * 注：如果该组件对象是由ecs系统外部创建的，则不可回收，需要用户自己手动进行回收
         */
        this.canRecycle = true;
      });
      /** 组件的类型编号，-1表示未给该组件分配编号 */
      ECSComp.tid = -1;
      /** 组件名 */
      ECSComp.compName = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ECSMask.ts', './ECSModel.ts'], function (exports) {
  var _createClass, cclegacy, ECSMask, ECSModel;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ECSMask = module.ECSMask;
    }, function (module) {
      ECSModel = module.ECSModel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1fb62WC3PZPvLhjoZQfrREJ", "ECSEntity", undefined);

      //#region 辅助方法

      /**
       * 实体身上组件有增删操作，广播通知对应的观察者
       * @param entity 实体对象
       * @param componentTypeId 组件类型id
       */
      function broadcastCompAddOrRemove(entity, componentTypeId) {
        var events = ECSModel.compAddOrRemove.get(componentTypeId);
        for (var i = events.length - 1; i >= 0; i--) {
          events[i](entity);
        }
        // 判断是不是删了单例组件
        if (ECSModel.tid2comp.has(componentTypeId)) {
          ECSModel.tid2comp["delete"](componentTypeId);
        }
      }

      /**
       * 创建组件对象
       * @param ctor
       */
      function createComp(ctor) {
        var cct = ECSModel.compCtors[ctor.tid];
        if (!cct) {
          throw Error("\u6CA1\u6709\u627E\u5230\u8BE5\u7EC4\u4EF6\u7684\u6784\u9020\u51FD\u6570\uFF0C\u68C0\u67E5" + ctor.compName + "\u662F\u5426\u4E3A\u4E0D\u53EF\u6784\u9020\u7684\u7EC4\u4EF6");
        }
        var comps = ECSModel.compPools.get(ctor.tid);
        var component = comps.pop() || new cct();
        return component;
      }

      /**
       * 销毁实体
       * 
       * 缓存销毁的实体，下次新建实体时会优先从缓存中拿
       * @param entity 
       */
      function destroyEntity(entity) {
        if (ECSModel.eid2Entity.has(entity.eid)) {
          var entitys = ECSModel.entityPool.get(entity.name);
          if (entitys == null) {
            entitys = [];
            ECSModel.entityPool.set(entity.name, entitys);
          }
          entitys.push(entity);
          ECSModel.eid2Entity["delete"](entity.eid);
        } else {
          console.warn('试图销毁不存在的实体');
        }
      }

      //#endregion

      /** ECS实体对象 */
      var ECSEntity = exports('ECSEntity', /*#__PURE__*/function () {
        function ECSEntity() {
          /** 实体唯一标识，不要手动修改 */
          this.eid = -1;
          /** 实体对象名 */
          this.name = "";
          /** 实体是否有效 */
          this.isValid = true;
          /** 组件过滤数据 */
          this.mask = new ECSMask();
          /** 当前实体身上附加的组件构造函数 */
          this.compTid2Ctor = new Map();
          /** 配合 entity.remove(Comp, false)， 记录组件实例上的缓存数据，在添加时恢复原数据 */
          this.compTid2Obj = new Map();
          this._parent = null;
          this._children = null;
        }
        var _proto = ECSEntity.prototype;
        /**
         * 添加子实体
         * @param entity 被添加的实体对象
         */
        _proto.addChild = function addChild(entity) {
          entity._parent = this;
          this.children.set(entity.eid, entity);
        }

        /**
         * 移除子实体
         * @param entity    被移除的实体对象
         * @param isDestroy 被移除的实体是否释放，默认为释放
         * @returns 
         */;
        _proto.removeChild = function removeChild(entity, isDestroy) {
          if (isDestroy === void 0) {
            isDestroy = true;
          }
          if (this.children == null) return;
          entity.parent = null;
          this.children["delete"](entity.eid);
          if (isDestroy) entity.destroy();
        }

        /**
         * 根据组件类动态创建组件，并通知关心的系统。如果实体存在了这个组件，那么会先删除之前的组件然后添加新的
         * 
         * 注意：不要直接new Component，new来的Component不会从Component的缓存池拿缓存的数据
         * @param componentTypeId   组件类
         * @param isReAdd           true-表示用户指定这个实体可能已经存在了该组件，那么再次add组件的时候会先移除该组件然后再添加一遍。false-表示不重复添加组件
         */;
        _proto.add = function add(ctor, isReAdd) {
          if (isReAdd === void 0) {
            isReAdd = false;
          }
          if (typeof ctor === 'function') {
            var compTid = ctor.tid;
            if (ctor.tid === -1) {
              throw Error("\u3010" + this.name + "\u3011\u5B9E\u4F53\u3010" + ctor.compName + "\u3011\u7EC4\u4EF6\u672A\u6CE8\u518C");
            }
            if (this.compTid2Ctor.has(compTid)) {
              // 判断是否有该组件，如果有则先移除
              if (isReAdd) {
                this.remove(ctor);
              } else {
                console.log("\u3010" + this.name + "\u3011\u5B9E\u4F53\u3010" + ctor.compName + "\u3011\u7EC4\u4EF6\u5DF2\u5B58\u5728");
                // @ts-ignore
                return this[ctor.compName];
              }
            }
            this.mask.set(compTid);
            var comp;
            if (this.compTid2Obj.has(compTid)) {
              comp = this.compTid2Obj.get(compTid);
              this.compTid2Obj["delete"](compTid);
            } else {
              // 创建组件对象
              comp = createComp(ctor);
            }

            // 将组件对象直接附加到实体对象身上，方便直接获取
            // @ts-ignore
            this[ctor.compName] = comp;
            this.compTid2Ctor.set(compTid, ctor);
            comp.ent = this;
            // 广播实体添加组件的消息
            broadcastCompAddOrRemove(this, compTid);
            return comp;
          } else {
            var tmpCtor = ctor.constructor;
            var _compTid = tmpCtor.tid;
            // console.assert(compTid !== -1 || !compTid, '组件未注册！');
            // console.assert(this.compTid2Ctor.has(compTid), '已存在该组件！');
            if (_compTid === -1 || _compTid == null) throw Error("\u3010" + this.name + "\u3011\u5B9E\u4F53\u3010" + tmpCtor.name + "\u3011\u7EC4\u4EF6\u672A\u6CE8\u518C");
            if (this.compTid2Ctor.has(_compTid)) throw Error("\u3010" + this.name + "\u3011\u5B9E\u4F53\u3010" + tmpCtor.name + "\u3011\u7EC4\u4EF6\u5DF2\u7ECF\u5B58\u5728");
            this.mask.set(_compTid);
            //@ts-ignore
            this[tmpCtor.compName] = ctor;
            this.compTid2Ctor.set(_compTid, tmpCtor);
            //@ts-ignore
            ctor.ent = this;
            //@ts-ignore
            ctor.canRecycle = false;
            broadcastCompAddOrRemove(this, _compTid);
            return this;
          }
        }

        /**
         * 批量添加组件
         * @param ctors 组件类
         * @returns 
         */;
        _proto.addComponents = function addComponents() {
          for (var _len = arguments.length, ctors = new Array(_len), _key = 0; _key < _len; _key++) {
            ctors[_key] = arguments[_key];
          }
          for (var _i = 0, _ctors = ctors; _i < _ctors.length; _i++) {
            var _ctor = _ctors[_i];
            this.add(_ctor);
          }
          return this;
        }

        /**
         * 获取一个组件实例
         * @param ctor 组件类
         */;
        _proto.get = function get(ctor) {
          // @ts-ignore
          return this[ctor.compName];
        }

        /**
         * 组件是否在实体存在内
         * @param ctor 组件类
         */;
        _proto.has = function has(ctor) {
          if (typeof ctor == "number") {
            return this.mask.has(ctor);
          } else {
            return this.compTid2Ctor.has(ctor.tid);
          }
        }

        /**
         * 从实体上删除指定组件
         * @param ctor      组件构造函数或者组件Tag
         * @param isRecycle 是否回收该组件对象。对于有些组件上有大量数据，当要描述移除组件但是不想清除组件上的数据是可以
         * 设置该参数为false，这样该组件对象会缓存在实体身上，下次重新添加组件时会将该组件对象添加回来，不会重新从组件缓存
         * 池中拿一个组件来用。
         */;
        _proto.remove = function remove(ctor, isRecycle) {
          if (isRecycle === void 0) {
            isRecycle = true;
          }
          var hasComp = false;
          //@ts-ignore
          var componentTypeId = ctor.tid;
          //@ts-ignore
          var compName = ctor.compName;
          if (this.mask.has(componentTypeId)) {
            hasComp = true;
            //@ts-ignore
            var comp = this[ctor.compName];
            //@ts-ignore
            comp.ent = null;
            if (isRecycle) {
              comp.reset();

              // 回收组件到指定缓存池中
              if (comp.canRecycle) {
                var compPoolsType = ECSModel.compPools.get(componentTypeId);
                compPoolsType.push(comp);
              }
            } else {
              this.compTid2Obj.set(componentTypeId, comp); // 用于缓存显示对象组件
            }
          }

          // 删除实体上的组件逻辑
          if (hasComp) {
            //@ts-ignore
            this[compName] = null;
            this.mask["delete"](componentTypeId);
            this.compTid2Ctor["delete"](componentTypeId);
            broadcastCompAddOrRemove(this, componentTypeId);
          }
        }

        /** 销毁实体，实体会被回收到实体缓存池中 */;
        _proto.destroy = function destroy() {
          var _this = this;
          this.isValid = false;

          // 如果有父模块，则移除父模块上记录的子模块
          if (this._parent) {
            this._parent.removeChild(this, false);
            this._parent = null;
          }

          // 移除模块上所有子模块
          if (this._children) {
            this._children.forEach(function (e) {
              _this.removeChild(e);
            });
            this._children = null;
          }

          // 移除实体上所有组件
          this.compTid2Ctor.forEach(this._remove, this);
          destroyEntity(this);
          this.compTid2Obj.clear();
        };
        _proto._remove = function _remove(comp) {
          this.remove(comp, true);
        };
        _createClass(ECSEntity, [{
          key: "parent",
          get: /** 父实体 */
          function get() {
            return this._parent;
          },
          set: function set(value) {
            this._parent = value;
          }
        }, {
          key: "children",
          get: /** 子实体集合 */
          function get() {
            if (this._children == null) {
              this._children = new Map();
            }
            return this._children;
          }
        }]);
        return ECSEntity;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c21a23o9P5FNJamcMmoYWfs", "ECSGroup", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-09-01 18:00:28
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-05 14:21:54
       */
      var ECSGroup = exports('ECSGroup', /*#__PURE__*/function () {
        function ECSGroup(matcher) {
          /** 实体筛选规则 */
          this.matcher = void 0;
          this._matchEntities = new Map();
          this._entitiesCache = null;
          /**
           * 当前group中实体的数量
           * 
           * 注：不要手动修改这个属性值。
           * 注：其实可以通过this._matchEntities.size获得实体数量，但是需要封装get方法。为了减少一次方法的调用所以才直接创建一个count属性
           */
          this.count = 0;
          this._enteredEntities = null;
          this._removedEntities = null;
          this.matcher = matcher;
        }
        var _proto = ECSGroup.prototype;
        _proto.onComponentAddOrRemove = function onComponentAddOrRemove(entity) {
          if (this.matcher.isMatch(entity)) {
            // Group只关心指定组件在实体身上的添加和删除动作。
            this._matchEntities.set(entity.eid, entity);
            this._entitiesCache = null;
            this.count++;
            if (this._enteredEntities) {
              this._enteredEntities.set(entity.eid, entity);
              this._removedEntities["delete"](entity.eid);
            }
          } else if (this._matchEntities.has(entity.eid)) {
            // 如果Group中有这个实体，但是这个实体已经不满足匹配规则，则从Group中移除该实体
            this._matchEntities["delete"](entity.eid);
            this._entitiesCache = null;
            this.count--;
            if (this._enteredEntities) {
              this._enteredEntities["delete"](entity.eid);
              this._removedEntities.set(entity.eid, entity);
            }
          }
        };
        _proto.watchEntityEnterAndRemove = function watchEntityEnterAndRemove(enteredEntities, removedEntities) {
          this._enteredEntities = enteredEntities;
          this._removedEntities = removedEntities;
        };
        _proto.clear = function clear() {
          var _this$_enteredEntitie, _this$_removedEntitie;
          this._matchEntities.clear();
          this._entitiesCache = null;
          this.count = 0;
          (_this$_enteredEntitie = this._enteredEntities) == null || _this$_enteredEntitie.clear();
          (_this$_removedEntitie = this._removedEntities) == null || _this$_removedEntitie.clear();
        };
        _createClass(ECSGroup, [{
          key: "matchEntities",
          get:
          /**
           * 符合规则的实体
           */
          function get() {
            if (this._entitiesCache === null) {
              this._entitiesCache = Array.from(this._matchEntities.values());
            }
            return this._entitiesCache;
          }
        }, {
          key: "entity",
          get: /** 获取matchEntities中第一个实体 */
          function get() {
            return this.matchEntities[0];
          }
        }]);
        return ECSGroup;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSMask.ts", ['cc', './ECSModel.ts'], function (exports) {
  var cclegacy, ECSModel;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ECSModel = module.ECSModel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d18694PPbtGs5Ipgo/vaJBX", "ECSMask", undefined);
      var ECSMask = exports('ECSMask', /*#__PURE__*/function () {
        function ECSMask() {
          this.mask = void 0;
          this.size = 0;
          var length = Math.ceil(ECSModel.compTid / 31);
          this.mask = new Uint32Array(length);
          this.size = length;
        }
        var _proto = ECSMask.prototype;
        _proto.set = function set(num) {
          // https://stackoverflow.com/questions/34896909/is-it-correct-to-set-bit-31-in-javascript
          // this.mask[((num / 32) >>> 0)] |= ((1 << (num % 32)) >>> 0);
          this.mask[num / 31 >>> 0] |= 1 << num % 31;
        };
        _proto["delete"] = function _delete(num) {
          this.mask[num / 31 >>> 0] &= ~(1 << num % 31);
        };
        _proto.has = function has(num) {
          return !!(this.mask[num / 31 >>> 0] & 1 << num % 31);
        };
        _proto.or = function or(other) {
          for (var i = 0; i < this.size; i++) {
            // &操作符最大也只能对2^30进行操作，如果对2^31&2^31会得到负数。当然可以(2^31&2^31) >>> 0，这样多了一步右移操作。
            if (this.mask[i] & other.mask[i]) {
              return true;
            }
          }
          return false;
        };
        _proto.and = function and(other) {
          for (var i = 0; i < this.size; i++) {
            if ((this.mask[i] & other.mask[i]) != this.mask[i]) {
              return false;
            }
          }
          return true;
        };
        _proto.clear = function clear() {
          for (var i = 0; i < this.size; i++) {
            this.mask[i] = 0;
          }
        };
        return ECSMask;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSMatcher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ECSMask.ts', './ECSModel.ts'], function (exports) {
  var _construct, _createForOfIteratorHelperLoose, _createClass, _inheritsLoose, cclegacy, ECSMask, ECSModel;
  return {
    setters: [function (module) {
      _construct = module.construct;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ECSMask = module.ECSMask;
    }, function (module) {
      ECSModel = module.ECSModel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "37e8arlqPlN7amZYyHFvBIp", "ECSMatcher", undefined);
      var macherId = 1;

      /**
       * 筛选规则间是“与”的关系
       * 比如：ecs.Macher.allOf(...).excludeOf(...)表达的是allOf && excludeOf，即实体有“这些组件” 并且 “没有这些组件”
       */
      var ECSMatcher = exports('ECSMatcher', /*#__PURE__*/function () {
        function ECSMatcher() {
          this.rules = [];
          this._indices = null;
          this.isMatch = void 0;
          this.mid = -1;
          this._key = null;
          this.mid = macherId++;
        }

        /**
         * 匹配器关注的组件索引。在创建Group时，Context根据组件id去给Group关联组件的添加和移除事件。
         */
        var _proto = ECSMatcher.prototype;
        /**
         * 组件间是或的关系，表示关注拥有任意一个这些组件的实体。
         * @param args 组件索引
         */
        _proto.anyOf = function anyOf() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          this.rules.push(_construct(AnyOf, args));
          this.bindMatchMethod();
          return this;
        }

        /**
         * 组件间是与的关系，表示关注拥有所有这些组件的实体。
         * @param args 组件索引
         */;
        _proto.allOf = function allOf() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          this.rules.push(_construct(AllOf, args));
          this.bindMatchMethod();
          return this;
        }

        /**
         * 表示关注只拥有这些组件的实体
         * 
         * 注意：
         *  不是特殊情况不建议使用onlyOf。因为onlyOf会监听所有组件的添加和删除事件。
         * @param args 组件索引
         */;
        _proto.onlyOf = function onlyOf() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          this.rules.push(_construct(AllOf, args));
          var otherTids = [];
          for (var _iterator = _createForOfIteratorHelperLoose(ECSModel.compCtors), _step; !(_step = _iterator()).done;) {
            var ctor = _step.value;
            if (args.indexOf(ctor) < 0) {
              otherTids.push(ctor);
            }
          }
          this.rules.push(_construct(ExcludeOf, otherTids));
          this.bindMatchMethod();
          return this;
        }

        /**
         * 不包含指定的任意一个组件
         * @param args 
         */;
        _proto.excludeOf = function excludeOf() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          this.rules.push(_construct(ExcludeOf, args));
          this.bindMatchMethod();
          return this;
        };
        _proto.bindMatchMethod = function bindMatchMethod() {
          if (this.rules.length === 1) {
            this.isMatch = this.isMatch1;
          } else if (this.rules.length === 2) {
            this.isMatch = this.isMatch2;
          } else {
            this.isMatch = this.isMatchMore;
          }
        };
        _proto.isMatch1 = function isMatch1(entity) {
          return this.rules[0].isMatch(entity);
        };
        _proto.isMatch2 = function isMatch2(entity) {
          return this.rules[0].isMatch(entity) && this.rules[1].isMatch(entity);
        };
        _proto.isMatchMore = function isMatchMore(entity) {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this.rules), _step2; !(_step2 = _iterator2()).done;) {
            var rule = _step2.value;
            if (!rule.isMatch(entity)) {
              return false;
            }
          }
          return true;
        };
        _proto.clone = function clone() {
          var newMatcher = new ECSMatcher();
          newMatcher.mid = macherId++;
          this.rules.forEach(function (rule) {
            return newMatcher.rules.push(rule);
          });
          return newMatcher;
        };
        _createClass(ECSMatcher, [{
          key: "key",
          get: function get() {
            if (!this._key) {
              var s = '';
              for (var i = 0; i < this.rules.length; i++) {
                s += this.rules[i].getKey();
                if (i < this.rules.length - 1) {
                  s += ' && ';
                }
              }
              this._key = s;
            }
            return this._key;
          }
        }, {
          key: "indices",
          get: function get() {
            var _this = this;
            if (this._indices === null) {
              this._indices = [];
              this.rules.forEach(function (rule) {
                Array.prototype.push.apply(_this._indices, rule.indices);
              });
            }
            return this._indices;
          }
        }]);
        return ECSMatcher;
      }());
      var BaseOf = /*#__PURE__*/function () {
        function BaseOf() {
          this.indices = [];
          this.mask = new ECSMask();
          var componentTypeId = -1;
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          var len = args.length;
          for (var i = 0; i < len; i++) {
            if (typeof args[i] === "number") {
              componentTypeId = args[i];
            } else {
              componentTypeId = args[i].tid;
            }
            if (componentTypeId == -1) {
              throw Error('存在没有注册的组件！');
            }
            this.mask.set(componentTypeId);
            if (this.indices.indexOf(componentTypeId) < 0) {
              // 去重
              this.indices.push(componentTypeId);
            }
          }
          if (len > 1) {
            this.indices.sort(function (a, b) {
              return a - b;
            }); // 对组件类型id进行排序，这样关注相同组件的系统就能共用同一个group
          }
        }

        var _proto2 = BaseOf.prototype;
        _proto2.toString = function toString() {
          return this.indices.join('-'); // 生成group的key
        };

        return BaseOf;
      }();
      /**
       * 用于描述包含任意一个这些组件的实体
       */
      var AnyOf = /*#__PURE__*/function (_BaseOf) {
        _inheritsLoose(AnyOf, _BaseOf);
        function AnyOf() {
          return _BaseOf.apply(this, arguments) || this;
        }
        var _proto3 = AnyOf.prototype;
        _proto3.isMatch = function isMatch(entity) {
          // @ts-ignore
          return this.mask.or(entity.mask);
        };
        _proto3.getKey = function getKey() {
          return 'anyOf:' + this.toString();
        };
        return AnyOf;
      }(BaseOf);
      /**
       * 用于描述包含了“这些”组件的实体，这个实体除了包含这些组件还可以包含其他组件
       */
      var AllOf = /*#__PURE__*/function (_BaseOf2) {
        _inheritsLoose(AllOf, _BaseOf2);
        function AllOf() {
          return _BaseOf2.apply(this, arguments) || this;
        }
        var _proto4 = AllOf.prototype;
        _proto4.isMatch = function isMatch(entity) {
          // @ts-ignore
          return this.mask.and(entity.mask);
        };
        _proto4.getKey = function getKey() {
          return 'allOf:' + this.toString();
        };
        return AllOf;
      }(BaseOf);
      /**
       * 不包含指定的任意一个组件
       */
      var ExcludeOf = /*#__PURE__*/function (_BaseOf3) {
        _inheritsLoose(ExcludeOf, _BaseOf3);
        function ExcludeOf() {
          return _BaseOf3.apply(this, arguments) || this;
        }
        var _proto5 = ExcludeOf.prototype;
        _proto5.getKey = function getKey() {
          return 'excludeOf:' + this.toString();
        };
        _proto5.isMatch = function isMatch(entity) {
          // @ts-ignore
          return !this.mask.or(entity.mask);
        };
        return ExcludeOf;
      }(BaseOf);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSModel.ts", ['cc', './ECSGroup.ts'], function (exports) {
  var cclegacy, ECSGroup;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ECSGroup = module.ECSGroup;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d60egM6r9Gta4Op3VABSGM", "ECSModel", undefined);

      /** 组件类型 */

      /** 实体构造器接口 */

      /** 组件构造器接口 */

      /** ECS框架内部数据 */
      var ECSModel = exports('ECSModel', /*#__PURE__*/function () {
        function ECSModel() {}
        /**
         * 创建group，每个group只关心对应组件的添加和删除
         * @param matcher 实体筛选器
         */
        ECSModel.createGroup = function createGroup(matcher) {
          var group = ECSModel.groups.get(matcher.mid);
          if (!group) {
            group = new ECSGroup(matcher);
            ECSModel.groups.set(matcher.mid, group);
            var careComponentTypeIds = matcher.indices;
            for (var i = 0; i < careComponentTypeIds.length; i++) {
              ECSModel.compAddOrRemove.get(careComponentTypeIds[i]).push(group.onComponentAddOrRemove.bind(group));
            }
          }
          return group;
        }

        /** 系统组件 */;
        return ECSModel;
      }());
      /** 实体自增id */
      ECSModel.eid = 1;
      /** 实体造函数 */
      ECSModel.entityCtors = new Map();
      /** 实体对象缓存池 */
      ECSModel.entityPool = new Map();
      /** 通过实体id查找实体对象 */
      ECSModel.eid2Entity = new Map();
      /** 组件类型id */
      ECSModel.compTid = 0;
      /** 组件缓存池 */
      ECSModel.compPools = new Map();
      /** 组件构造函数，用于ecs.register注册时，记录不同类型的组件 */
      ECSModel.compCtors = [];
      /**
       * 每个组件的添加和删除的动作都要派送到“关心”它们的group上。goup对当前拥有或者之前（删除前）拥有该组件的实体进行组件规则判断。判断该实体是否满足group
       * 所期望的组件组合。
       */
      ECSModel.compAddOrRemove = new Map();
      /** 编号获取组件 */
      ECSModel.tid2comp = new Map();
      /**
       * 缓存的group
       * 
       * key是组件的筛选规则，一个筛选规则对应一个group
       */
      ECSModel.groups = new Map();
      ECSModel.systems = new Map();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ECSSystem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ECSModel.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, _createClass, cclegacy, ECSModel;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ECSModel = module.ECSModel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9261fRWg2RBY5kxbFJsY1QC", "ECSSystem", undefined);

      /** 继承此类实现具体业务逻辑的系统 */
      var ECSComblockSystem = exports('ECSComblockSystem', /*#__PURE__*/function () {
        /** 构造函数 */
        function ECSComblockSystem() {
          this.group = void 0;
          this.dt = 0;
          this.enteredEntities = null;
          this.removedEntities = null;
          this.hasEntityEnter = false;
          this.hasEntityRemove = false;
          this.hasUpdate = false;
          this.tmpExecute = null;
          this.execute = void 0;
          var hasOwnProperty = Object.hasOwnProperty;
          var prototype = Object.getPrototypeOf(this);
          var hasEntityEnter = hasOwnProperty.call(prototype, 'entityEnter');
          var hasEntityRemove = hasOwnProperty.call(prototype, 'entityRemove');
          var hasFirstUpdate = hasOwnProperty.call(prototype, 'firstUpdate');
          var hasUpdate = hasOwnProperty.call(prototype, 'update');
          this.hasEntityEnter = hasEntityEnter;
          this.hasEntityRemove = hasEntityRemove;
          this.hasUpdate = hasUpdate;
          if (hasEntityEnter || hasEntityRemove) {
            this.enteredEntities = new Map();
            this.removedEntities = new Map();
            this.execute = this.execute1;
            this.group = ECSModel.createGroup(this.filter());
            this.group.watchEntityEnterAndRemove(this.enteredEntities, this.removedEntities);
          } else {
            this.execute = this.execute0;
            this.group = ECSModel.createGroup(this.filter());
          }
          if (hasFirstUpdate) {
            this.tmpExecute = this.execute;
            this.execute = this.updateOnce;
          }
        }

        /** 系统实始化 */
        var _proto = ECSComblockSystem.prototype;
        _proto.init = function init() {}

        /** 系统释放事件 */;
        _proto.onDestroy = function onDestroy() {}

        /** 是否存在实体 */;
        _proto.hasEntity = function hasEntity() {
          return this.group.count > 0;
        }

        /**
         * 先执行entityEnter，最后执行firstUpdate
         * @param dt 
         * @returns 
         */;
        _proto.updateOnce = function updateOnce(dt) {
          if (this.group.count === 0) {
            return;
          }
          this.dt = dt;

          // 处理刚进来的实体
          if (this.enteredEntities.size > 0) {
            var entities = this.enteredEntities.values();
            for (var _iterator = _createForOfIteratorHelperLoose(entities), _step; !(_step = _iterator()).done;) {
              var entity = _step.value;
              this.entityEnter(entity);
            }
            this.enteredEntities.clear();
          }

          // 只执行firstUpdate
          for (var _iterator2 = _createForOfIteratorHelperLoose(this.group.matchEntities), _step2; !(_step2 = _iterator2()).done;) {
            var _entity = _step2.value;
            this.firstUpdate(_entity);
          }
          this.execute = this.tmpExecute;
          this.execute(dt);
          this.tmpExecute = null;
        }

        /**
         * 只执行update
         * @param dt 
         * @returns 
         */;
        _proto.execute0 = function execute0(dt) {
          if (this.group.count === 0) return;
          this.dt = dt;

          // 执行update
          if (this.hasUpdate) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(this.group.matchEntities), _step3; !(_step3 = _iterator3()).done;) {
              var entity = _step3.value;
              this.update(entity);
            }
          }
        }

        /**
         * 先执行entityRemove，再执行entityEnter，最后执行update
         * @param dt 
         * @returns 
         */;
        _proto.execute1 = function execute1(dt) {
          var entities;
          if (this.removedEntities.size > 0) {
            if (this.hasEntityRemove) {
              entities = this.removedEntities.values();
              for (var _iterator4 = _createForOfIteratorHelperLoose(entities), _step4; !(_step4 = _iterator4()).done;) {
                var entity = _step4.value;
                this.entityRemove(entity);
              }
            }
            this.removedEntities.clear();
          }
          if (this.group.count === 0) return;
          this.dt = dt;

          // 处理刚进来的实体
          if (this.enteredEntities.size > 0) {
            if (this.hasEntityEnter) {
              entities = this.enteredEntities.values();
              for (var _iterator5 = _createForOfIteratorHelperLoose(entities), _step5; !(_step5 = _iterator5()).done;) {
                var _entity2 = _step5.value;
                this.entityEnter(_entity2);
              }
            }
            this.enteredEntities.clear();
          }

          // 执行update
          if (this.hasUpdate) {
            for (var _iterator6 = _createForOfIteratorHelperLoose(this.group.matchEntities), _step6; !(_step6 = _iterator6()).done;) {
              var _entity3 = _step6.value;
              this.update(_entity3);
            }
          }
        }

        /**
         * 实体过滤规则
         * 
         * 根据提供的组件过滤实体。
         */;
        return ECSComblockSystem;
      }());

      /** 根System，对游戏中的System遍历从这里开始，一个System组合中只能有一个RootSystem，可以有多个并行的RootSystem */
      ECSComblockSystem.s = true;
      var ECSRootSystem = exports('ECSRootSystem', /*#__PURE__*/function () {
        function ECSRootSystem() {
          this.executeSystemFlows = [];
          this.systemCnt = 0;
        }
        var _proto2 = ECSRootSystem.prototype;
        _proto2.add = function add(system) {
          if (system instanceof ECSSystem) {
            // 将嵌套的System都“摊平”，放在根System中进行遍历，减少execute的频繁进入退出。
            Array.prototype.push.apply(this.executeSystemFlows, system.comblockSystems);
          } else {
            this.executeSystemFlows.push(system);
          }
          this.systemCnt = this.executeSystemFlows.length;
          return this;
        };
        _proto2.init = function init() {
          var _this = this;
          // 自动注册系统组件
          ECSModel.systems.forEach(function (sys) {
            return _this.add(sys);
          });

          // 初始化组件
          this.executeSystemFlows.forEach(function (sys) {
            return sys.init();
          });
        };
        _proto2.execute = function execute(dt) {
          for (var i = 0; i < this.systemCnt; i++) {
            // @ts-ignore
            this.executeSystemFlows[i].execute(dt);
          }
        };
        _proto2.clear = function clear() {
          this.executeSystemFlows.forEach(function (sys) {
            return sys.onDestroy();
          });
        };
        return ECSRootSystem;
      }());

      /** 系统组合器，用于将多个相同功能模块的系统逻辑上放在一起，系统也可以嵌套系统 */
      var ECSSystem = exports('ECSSystem', /*#__PURE__*/function () {
        function ECSSystem() {
          this._comblockSystems = [];
        }
        var _proto3 = ECSSystem.prototype;
        _proto3.add = function add(system) {
          if (system instanceof ECSSystem) {
            Array.prototype.push.apply(this._comblockSystems, system._comblockSystems);
            system._comblockSystems.length = 0;
          } else {
            this._comblockSystems.push(system);
          }
          return this;
        };
        _createClass(ECSSystem, [{
          key: "comblockSystems",
          get: function get() {
            return this._comblockSystems;
          }
        }]);
        return ECSSystem;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Effect2DFollow3D.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './MathUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, Component, oops, MathUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      MathUtil = module.MathUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "f04f92UNY1J34UPA0VrEIsH", "Effect2DFollow3D", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 2D节点跟随3D节点 */
      var Effect2DFollow3D = exports('Effect2DFollow3D', (_dec = ccclass("Effect2DFollow3D"), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Effect2DFollow3D, _Component);
        function Effect2DFollow3D() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 3D世界节点 */
          _initializerDefineProperty(_this, "node3d", _descriptor, _assertThisInitialized(_this));
          /** 2D界面界面 */
          _initializerDefineProperty(_this, "nodeUi", _descriptor2, _assertThisInitialized(_this));
          /** 距离 */
          _initializerDefineProperty(_this, "distance", _descriptor3, _assertThisInitialized(_this));
          /** 3D摄像机 */
          _this.camera = null;
          _this.pos = new Vec3();
          return _this;
        }
        var _proto = Effect2DFollow3D.prototype;
        /**
         * 设3D定位参考点，并更新位置
         * @param node 3D世界节点
         */
        _proto.setTarget = function setTarget(node) {
          this.node3d = node;
        };
        _proto.start = function start() {
          var scale = this.zoom();
          this.node.setScale(scale, scale, 1);
        };
        _proto.lateUpdate = function lateUpdate(dt) {
          var scale = this.zoom();
          scale = MathUtil.lerp(this.node.scale.x, scale, 0.1);
          this.node.setScale(scale, scale, 1);
        };
        _proto.zoom = function zoom() {
          this.camera.convertToUINode(this.node3d.worldPosition, oops.gui.game, this.pos);
          this.nodeUi.setPosition(this.pos);

          // @ts-ignore
          Vec3.transformMat4(this.pos, this.node3d.worldPosition, this.camera._camera.matView);
          var ratio = this.distance / Math.abs(this.pos.z);
          return Math.floor(ratio * 100) / 100;
        };
        return Effect2DFollow3D;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "node3d", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeUi", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "distance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectDelayRelease.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EffectSingleCase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, EffectSingleCase;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EffectSingleCase = module.EffectSingleCase;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "01359fvxlFJZKx7BLUcTSWS", "EffectDelayRelease", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 延时释放特效 */
      var EffectDelayRelease = exports('EffectDelayRelease', (_dec = ccclass('EffectDelayRelease'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EffectDelayRelease, _Component);
        function EffectDelayRelease() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 延时释放时间(单位秒) */
          _initializerDefineProperty(_this, "delay", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = EffectDelayRelease.prototype;
        _proto.onEnable = function onEnable() {
          this.scheduleOnce(this.onDelay, this.delay);
        };
        _proto.onDelay = function onDelay() {
          EffectSingleCase.instance.put(this.node);
        };
        return EffectDelayRelease;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "delay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "445875CzyRKaLiSXTYH66lm", "EffectEvent", undefined);
      /** 特效管理模块事件 */
      var EffectEvent = exports('EffectEvent', /*#__PURE__*/function (EffectEvent) {
        EffectEvent["Put"] = "EffectEvent_Put";
        return EffectEvent;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectFinishedRelease.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EffectEvent.ts', './MessageManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sp, Animation, ParticleSystem, Component, EffectEvent, message;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Animation = module.Animation;
      ParticleSystem = module.ParticleSystem;
      Component = module.Component;
    }, function (module) {
      EffectEvent = module.EffectEvent;
    }, function (module) {
      message = module.message;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a751fmayL5JMYH0D4uJoK5H", "EffectFinishedRelease", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 动画播放完释放特效 - Animation、ParticleSystem */
      var EffectFinishedRelease = exports('EffectFinishedRelease', (_dec = ccclass('EffectFinishedRelease'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EffectFinishedRelease, _Component);
        function EffectFinishedRelease() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 动画最大播放时间 */
          _this.maxDuration = 0;
          return _this;
        }
        var _proto = EffectFinishedRelease.prototype;
        _proto.onEnable = function onEnable() {
          var _this2 = this;
          // SPINE动画
          var spine = this.getComponent(sp.Skeleton);
          if (spine) {
            // 播放第一个动画
            var json = spine.skeletonData.skeletonJson.animations;
            for (var name in json) {
              spine.setCompleteListener(this.onRecovery.bind(this));
              spine.setAnimation(0, name, false);
              break;
            }
          } else {
            // COCOS动画
            var anims = this.node.getComponentsInChildren(Animation);
            if (anims.length > 0) {
              anims.forEach(function (animator) {
                var _animator$defaultClip;
                var aniName = (_animator$defaultClip = animator.defaultClip) == null ? void 0 : _animator$defaultClip.name;
                if (aniName) {
                  var aniState = animator.getState(aniName);
                  if (aniState) {
                    var duration = aniState.duration;
                    _this2.maxDuration = duration > _this2.maxDuration ? duration : _this2.maxDuration;
                  }
                }
                animator.play();
              });
              this.scheduleOnce(this.onRecovery.bind(this), this.maxDuration);
            }
            // 粒子动画
            else if (ParticleSystem) {
              var particles = this.node.getComponentsInChildren(ParticleSystem);
              particles.forEach(function (particle) {
                particle.clear();
                particle.stop();
                particle.play();
                var duration = particle.duration;
                _this2.maxDuration = duration > _this2.maxDuration ? duration : _this2.maxDuration;
              });
              this.scheduleOnce(this.onRecovery.bind(this), this.maxDuration);
            }
          }
        };
        _proto.onRecovery = function onRecovery() {
          if (this.node.parent) message.dispatchEvent(EffectEvent.Put, this.node);
        };
        return EffectFinishedRelease;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectSingleCase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MessageManager.ts', './ResLoader.ts', './ViewUtil.ts', './EffectEvent.ts', './EffectFinishedRelease.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, _createClass, cclegacy, Prefab, NodePool, sp, Animation, ParticleSystem, message, resLoader, ViewUtil, EffectEvent, EffectFinishedRelease;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      NodePool = module.NodePool;
      sp = module.sp;
      Animation = module.Animation;
      ParticleSystem = module.ParticleSystem;
    }, function (module) {
      message = module.message;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      ViewUtil = module.ViewUtil;
    }, function (module) {
      EffectEvent = module.EffectEvent;
    }, function (module) {
      EffectFinishedRelease = module.EffectFinishedRelease;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bf338Z+oYxIUbd4bPREw9Ud", "EffectSingleCase", undefined);

      /** 特效参数 */

      /**
       * 动画特效对象池管理器，加载动画后自动播放，播放完后自动回收到池中
       * 1、支持Spine动画
       * 2、支持Cocos Animation动画
       * 3、支持Cocos ParticleSystem粒子动画
       */
      var EffectSingleCase = exports('EffectSingleCase', /*#__PURE__*/function () {
        function EffectSingleCase() {
          this._speed = 1;
          /** 对象池集合 */
          this.effects = new Map();
          /** 正在使用中的显示对象集合 */
          this.effects_use = new Map();
          /** 对象池中用到的资源 - 这里只管理本对象加载的资源，预加载资源由其它对象自己施放 */
          this.res = new Map();
          message.on(EffectEvent.Put, this.onPut, this);
        }
        var _proto = EffectSingleCase.prototype;
        _proto.onPut = function onPut(event, node) {
          this.put(node);
        }

        /**
         * 获取指定资源池中对象数量
         * @param path  预制资源路径
         */;
        _proto.getCount = function getCount(path) {
          var np = this.effects.get(path);
          if (np) {
            return np.size();
          }
          return 0;
        }

        /** 池中预加载显示对象 */;
        _proto.preload = function preload(count, path, bundleName) {
          var _this = this;
          if (bundleName === void 0) {
            bundleName = resLoader.defaultBundleName;
          }
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var np, i, node;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  np = _this.effects.get(path);
                  if (np == null) {
                    np = new NodePool();
                    _this.effects.set(path, np);
                  }
                  _this.res.set(path, bundleName);
                  _context.next = 5;
                  return resLoader.loadAsync(bundleName, path, Prefab);
                case 5:
                  for (i = 0; i < count; i++) {
                    node = ViewUtil.createPrefabNode(path); //@ts-ignore
                    node.res_path = path;
                    np.put(node);
                  }
                  resolve();
                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        }

        /**
         * 加载资源并生成节点对象
         * @param path    预制资源路径
         * @param parent  父节点
         * @param params  显示参数
         */;
        _proto.loadAndShow = function loadAndShow(path, parent, params) {
          var _this2 = this;
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var np, node, _node;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  np = _this2.effects.get(path);
                  if (!(np == undefined)) {
                    _context2.next = 15;
                    break;
                  }
                  if (!(params && params.bundleName)) {
                    _context2.next = 8;
                    break;
                  }
                  _this2.res.set(path, params.bundleName);
                  _context2.next = 6;
                  return resLoader.loadAsync(params.bundleName, path, Prefab);
                case 6:
                  _context2.next = 11;
                  break;
                case 8:
                  _this2.res.set(path, resLoader.defaultBundleName);
                  _context2.next = 11;
                  return resLoader.loadAsync(path, Prefab);
                case 11:
                  node = _this2.show(path, parent, params);
                  resolve(node);
                  _context2.next = 17;
                  break;
                case 15:
                  _node = _this2.show(path, parent, params);
                  resolve(_node);
                case 17:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        }

        /**
         * 显示预制对象
         * @param path    预制资源路径
         * @param parent  父节点
         * @param params  显示参数
         */;
        _proto.show = function show(path, parent, params) {
          var np = this.effects.get(path);
          if (np == null) {
            np = new NodePool();
            this.effects.set(path, np);
          }
          var node;
          // 创建池中新显示对象
          if (np.size() == 0) {
            node = ViewUtil.createPrefabNode(path);
            //@ts-ignore
            node.res_path = path;
            if (params && params.isPlayFinishedRelease) {
              node.addComponent(EffectFinishedRelease);
            }
          }
          // 池中获取没使用的显示对象
          else {
            node = np.get();
          }

          // 设置动画播放速度
          this.setSpeed(node);

          // 设置显示对象位置
          if (params) {
            if (params.pos) node.position = params.pos;
            if (params.worldPos) node.worldPosition = params.worldPos;
          }

          // 显示到屏幕上
          if (parent) node.parent = parent;

          // 记录缓冲池中放出的节点
          this.effects_use.set(node, true);
          return node;
        }

        /**
         * 回收对象
         * @param name  预制对象名称
         * @param node  节点
         */;
        _proto.put = function put(node) {
          //@ts-ignore
          var name = node.res_path;
          if (name) {
            var np = this.effects.get(name);
            if (np) {
              // 回收使用的节点
              this.effects_use["delete"](node);

              // 回到到池中
              np.put(node);
            }
          }
        }

        /**
         * 清除对象池数据
         * @param path  参数为空时，清除所有对象池数据;指定名时，清楚指定数据
         */;
        _proto.clear = function clear(path) {
          if (path) {
            var np = this.effects.get(path);
            np.clear();
          } else {
            this.effects.forEach(function (np) {
              np.clear();
            });
            this.effects.clear();
          }
        }

        /**
         * 释放对象池中显示对象的资源内存
         * @param path 资源路径
         */;
        _proto.release = function release(path) {
          if (path) {
            this.clear(path);
            var bundleName = this.res.get(path);
            resLoader.release(path, bundleName);
            this.res["delete"](path);
          } else {
            // 施放池中对象内存
            this.clear();

            // 施放对象资源内存
            this.res.forEach(function (bundleName, path) {
              resLoader.release(path, bundleName);
            });
            this.res.clear();
          }
        }

        /** 设置动画速度 */;
        _proto.setSpeed = function setSpeed(node) {
          var _this3 = this;
          // SPINE动画
          var spine = node.getComponent(sp.Skeleton);
          if (spine) {
            spine.timeScale = this.speed;
          } else {
            // COCOS动画
            var anims = node.getComponentsInChildren(Animation);
            if (anims.length > 0) {
              anims.forEach(function (animator) {
                var _animator$defaultClip;
                var aniName = (_animator$defaultClip = animator.defaultClip) == null ? void 0 : _animator$defaultClip.name;
                if (aniName) {
                  var aniState = animator.getState(aniName);
                  if (aniState) {
                    aniState.speed = _this3.speed;
                  }
                }
              });
            }
            // 粒子动画
            else if (ParticleSystem) {
              var particles = node.getComponentsInChildren(ParticleSystem);
              particles.forEach(function (particle) {
                particle.simulationSpeed = _this3.speed;
              });
            }
          }
        };
        _createClass(EffectSingleCase, [{
          key: "speed",
          get: /** 全局动画播放速度 */
          function get() {
            return this._speed;
          },
          set: function set(value) {
            var _this4 = this;
            this._speed = value;
            this.effects_use.forEach(function (value, key) {
              _this4.setSpeed(key);
            });
          }
        }], [{
          key: "instance",
          get: function get() {
            if (this._instance == null) {
              this._instance = new EffectSingleCase();
            }
            return this._instance;
          }
        }]);
        return EffectSingleCase;
      }());
      EffectSingleCase._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EncryptUtil.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      // /*
      cclegacy._RF.push({}, "46d12Bx4JdKnIYHhcvNk6S1", "EncryptUtil", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventDispatcher.ts", ['cc', './MessageManager.ts'], function (exports) {
  var cclegacy, MessageEventData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      MessageEventData = module.MessageEventData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c680af5iPNKeIO4cArf/90m", "EventDispatcher", undefined);

      /* 事件对象基类，继承该类将拥有发送和接送事件的能力 */
      var EventDispatcher = exports('EventDispatcher', /*#__PURE__*/function () {
        function EventDispatcher() {
          this._msg = null;
        }
        var _proto = EventDispatcher.prototype;
        /**
         * 注册全局事件
         * @param event     事件名
         * @param listener  处理事件的侦听器函数
         * @param object    侦听函数绑定的作用域对象
         */
        _proto.on = function on(event, listener, object) {
          if (this._msg == null) {
            this._msg = new MessageEventData();
          }
          this._msg.on(event, listener, object);
        }

        /**
         * 移除全局事件
         * @param event      事件名
         */;
        _proto.off = function off(event) {
          if (this._msg) {
            this._msg.off(event);
          }
        }

        /** 
         * 触发全局事件 
         * @param event      事件名
         * @param args       事件参数
         */;
        _proto.dispatchEvent = function dispatchEvent(event) {
          var _this$_msg;
          if (this._msg == null) {
            this._msg = new MessageEventData();
          }
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_this$_msg = this._msg).dispatchEvent.apply(_this$_msg, [event].concat(args));
        }

        /**
         * 销毁事件对象
         */;
        _proto.destroy = function destroy() {
          if (this._msg) {
            this._msg.clear();
          }
          this._msg = null;
        };
        return EventDispatcher;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventMessage.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "beea7u9xnJD4rMj6ua/LTcF", "EventMessage", undefined);
      /*
       * @Author: dgflash
       * @Date: 2021-07-03 16:13:17
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-02 11:03:08
       */
      /**
       * 全局事件监听方法
       * @param event      事件名
       * @param args       事件参数
       */
      /** 框架内部全局事件  */
      var EventMessage = exports('EventMessage', /*#__PURE__*/function (EventMessage) {
        EventMessage["GAME_SHOW"] = "GAME_ENTER";
        EventMessage["GAME_HIDE"] = "GAME_EXIT";
        EventMessage["GAME_RESIZE"] = "GAME_RESIZE";
        EventMessage["GAME_FULL_SCREEN"] = "GAME_FULL_SCREEN";
        EventMessage["GAME_ORIENTATION"] = "GAME_ORIENTATION";
        return EventMessage;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventType.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d811dlAz0lFz5yYpt1W9RCK", "EventType", undefined);
      // EventType.ts
      var EventType = exports('EventType', /*#__PURE__*/function (EventType) {
        EventType["RESET_GAME"] = "reset_game";
        EventType["GAME_END"] = "game_end";
        EventType["REFRESH_THEME"] = "refresh_theme";
        EventType["SELECT_CELL"] = "select_cell";
        EventType["REFRESH_GAME_STATE"] = "refresh_game_state";
        EventType["TOUCH_NUMBERBTN"] = "touch_number_btn";
        EventType["CHECK_TOUCH_NUMBERBTN_FINISH"] = "check_touch_numberbtn_finish";
        EventType["UNDO"] = "undo";
        EventType["SWITCH_NOTE"] = "switch_note";
        EventType["ERASE_NUMBER"] = "erase_number";
        EventType["TOUCH_HINT"] = "touch_hint";
        EventType["HINT_NUMBER"] = "hint_number";
        EventType["INPUT_NUMBER"] = "input_number";
        EventType["INPUT_NOTE_NUMBER"] = "input_note_number";
        EventType["RESURRECTION_GAME"] = "resurrection_game";
        EventType["REFRESH_SETTING"] = "refresh_setting";
        EventType["REFRESH_HINT"] = "refresh_hint";
        EventType["REFRESH_LANGUAGE"] = "refresh_language";
        return EventType;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FailPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventType.ts', './UIConfig.ts', './StatisticsManager.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _extends, cclegacy, _decorator, Component, EventType, UIID, StatisticsManager, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      StatisticsManager = module.StatisticsManager;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "259e1OmwaJNtoxzK8HzecOy", "FailPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FailPopup = exports('FailPopup', (_dec = ccclass('FailPopup'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FailPopup, _Component);
        function FailPopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.gameData = void 0;
          _this.isStatistics = true;
          return _this;
        }
        var _proto = FailPopup.prototype;
        // 恢复生命值，不记录失败对局中
        _proto.onResurrection = function onResurrection() {
          this.isStatistics = false;
          oops.gui.remove(UIID.FailPopup);
          oops.message.dispatchEvent(EventType.RESURRECTION_GAME);
        };
        _proto.onStartNewGame = function onStartNewGame() {
          oops.gui.open(UIID.LevelPopup);
        };
        _proto.onResetGame = function onResetGame() {
          oops.gui.remove(UIID.FailPopup);
          oops.message.dispatchEvent(EventType.RESET_GAME, {
            data: {
              isGenerate: false,
              isReset: true
            }
          });
        };
        _proto.onBack = function onBack() {
          oops.gui.remove(UIID.FailPopup);
          oops.gui.replaceAsync(UIID.Game, UIID.Lobby);
        };
        _proto.onAdded = function onAdded(params) {
          //score: number, difficulty: string, time: number
          console.log("params->", params);
          this.gameData = this.deepCopyGameData(params.gameData);
          // console.log("拷贝后的数据->",this.gameData);
        };

        _proto.onRemoved = function onRemoved(params) {
          // console.log("onRemoved->",this.gameData);
        };
        _proto.onDestroy = function onDestroy() {
          // console.log("onDestroy",this.gameData)
          if (this.gameData && this.isStatistics) {
            StatisticsManager.getInstance().updateStatistics(this.gameData, false);
          }
        }

        /**
         * 通用深拷贝方法（自动适配GameData所有字段）
         * @param source 要拷贝的GameData对象
         * @returns 全新的深拷贝对象
         */;
        _proto.deepCopyGameData = function deepCopyGameData(source) {
          // 处理Map类型字段（根据图片中的字段名）
          var mapFields = {
            userInputs: new Map(),
            userInputNotes: new Map()
          };

          // 自动复制Map类型
          Object.entries(mapFields).forEach(function (_ref) {
            var key = _ref[0];
            if (source[key] instanceof Map) {
              mapFields[key] = new Map(source[key]);
            }
          });

          // 构建新对象（自动包含所有字段）
          return _extends({}, source, mapFields);
        };
        return FailPopup;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FinnedXWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e67c3INCuJPCbHU1WimNJtA", "FinnedXWingStrategy", undefined);
      // Finned X-Wing
      var FinnedXWingStrategy = exports('FinnedXWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(FinnedXWingStrategy, _BaseStrategy);
        function FinnedXWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 14;
          _this.FISH_SIZE = 2;
          return _this;
        }
        var _proto = FinnedXWingStrategy.prototype;
        // 鱼固定大小为2
        _proto.execute = function execute(board, candidates) {
          var result = this.findXWing(candidates);
          return result ? this.createSteps(board, candidates, result) : null;
        };
        _proto.findXWing = function findXWing(candidates) {
          // 检查行方向和列方向的X-Wing
          return this.findFinnedXWingInDirection(candidates, HighlightAreaType.ROW) || this.findFinnedXWingInDirection(candidates, HighlightAreaType.COLUMN);
        };
        _proto.findFinnedXWingInDirection = function findFinnedXWingInDirection(candidates, direction) {
          for (var value = 1; value <= 9; value++) {
            // 1. 先找标准X-Wing基集（恰好2个候选数的行/列）
            var perfectBaseUnits = this.findPerfectBaseUnits(candidates, value, direction);

            // 2. 再找可能带鳍的基集（2个或3个候选数的行/列）
            var potentialFinnedUnits = this.findPotentialFinnedUnits(candidates, value, direction);

            // 3. 尝试组合标准基集和带鳍基集
            for (var _iterator = _createForOfIteratorHelperLoose(perfectBaseUnits), _step; !(_step = _iterator()).done;) {
              var perfectUnit = _step.value;
              for (var _iterator2 = _createForOfIteratorHelperLoose(potentialFinnedUnits), _step2; !(_step2 = _iterator2()).done;) {
                var finnedUnit = _step2.value;
                var baseUnits = [perfectUnit, finnedUnit];
                var result = this.validateFinnedXWing(candidates, value, baseUnits, direction);
                if (result) return result;
              }
            }
          }
          return null;
        }

        // 找完美基集（恰好2个候选数）
        ;

        _proto.findPerfectBaseUnits = function findPerfectBaseUnits(candidates, value, direction) {
          var units = [];
          for (var unit = 0; unit < 9; unit++) {
            var count = 0;
            for (var pos = 0; pos < 9; pos++) {
              var row = direction === HighlightAreaType.ROW ? unit : pos;
              var col = direction === HighlightAreaType.ROW ? pos : unit;
              if (candidates[row][col].has(value)) count++;
            }
            if (count === 2) units.push(unit);
          }
          return units;
        }

        /**
         * 查找可能带鳍的基集（行/列）
         * @param candidates 候选数矩阵
         * @param value 当前检测的数字
         * @param direction 检测方向（行/列）
         * @returns 可能带鳍的基集单位索引数组
         */;
        _proto.findPotentialFinnedUnits = function findPotentialFinnedUnits(candidates, value, direction) {
          var units = [];
          var isRowBased = direction === HighlightAreaType.ROW;
          for (var unit = 0; unit < 9; unit++) {
            var positions = [];

            // 1. 收集该行/列的所有候选数位置
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }

            // 2. 排除不可能的情况
            if (positions.length <= 2 || positions.length > 4) continue;

            // 3. 检查是否可能包含鳍（需要满足鳍的条件）
            if (this.isPotentialFinnedUnit(positions)) {
              units.push(unit);
            }
          }
          return units;
        }

        /**
         * 判断一组候选数位置是否可能形成带鳍基集
         * @param positions 候选数位置数组
         */;
        _proto.isPotentialFinnedUnit = function isPotentialFinnedUnit(positions) {
          if (2 < positions.length && positions.length <= 4) {
            // 检查这些候选数是否符合鳍的特征：
            // 按宫分组
            var boxMap = new Map();
            positions.forEach(function (pos) {
              var boxKey = Math.floor(pos.row / 3) + "-" + Math.floor(pos.col / 3);
              if (!boxMap.has(boxKey)) boxMap.set(boxKey, []);
              boxMap.get(boxKey).push(pos);
            });

            // 情况2.1：如果3个候选数分布在3个不同宫 → 不可能有鳍
            if (boxMap.size === 3) return false;

            // 情况2.2：如果有2个候选数在同一宫 → 可能一个是鳍
            if (boxMap.size === 2) {
              for (var _iterator3 = _createForOfIteratorHelperLoose(boxMap), _step3; !(_step3 = _iterator3()).done;) {
                var _step3$value = _step3.value,
                  _ = _step3$value[0],
                  boxPositions = _step3$value[1];
                // 存在独占一宫的情况，就是说该基集只存在一边有鳍
                if (boxPositions.length === 1) {
                  return true; // 可能是鳍
                }
              }
              // 存在多边鳍
              return false;
            }

            // 情况2.3：3个候选数都在同一宫 
            return true;
          }
          return false;
        }

        // 验证Finned X-Wing结构
        ;

        _proto.validateFinnedXWing = function validateFinnedXWing(candidates, value, baseUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;

          // 1. 找出两个基集的共同覆盖集
          var _this$findFinnedXWing = this.findFinnedXWingStructure(candidates, value, baseUnits, direction),
            coverUnits = _this$findFinnedXWing.coverUnits,
            intersections = _this$findFinnedXWing.intersections,
            fins = _this$findFinnedXWing.fins;
          if (coverUnits.length !== 2) return null;

          // 必须有鳍
          if (fins.length === 0) return null;
          var fin = fins[0];

          //  确定可消除的候选数
          var eliminations = this.findEliminations(candidates, value, coverUnits, direction, fin, intersections);
          return eliminations.length > 0 ? {
            value: value,
            baseUnits: baseUnits,
            coverUnits: coverUnits,
            eliminations: eliminations,
            intersections: intersections,
            direction: direction,
            fins: fins
          } : null;
        };
        _proto.checkFinnedXWing = function checkFinnedXWing(candidates, value, baseUnits, coverUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var fins = [];

          // 找出所有鱼鳍位置（不在标准X-Wing交叉点上的候选数）
          for (var _iterator4 = _createForOfIteratorHelperLoose(coverUnits), _step4; !(_step4 = _iterator4()).done;) {
            var coverUnit = _step4.value;
            for (var _iterator5 = _createForOfIteratorHelperLoose(baseUnits), _step5; !(_step5 = _iterator5()).done;) {
              var baseUnit = _step5.value;
              var row = isRowBased ? baseUnit : coverUnit;
              var col = isRowBased ? coverUnit : baseUnit;
              if (candidates[row][col].has(value)) {
                // 检查是否在基集和覆盖集的交叉点上
                var isIntersection = baseUnits.includes(isRowBased ? row : col) && coverUnits.includes(isRowBased ? col : row);
                if (!isIntersection) {
                  fins.push({
                    row: row,
                    col: col
                  });
                }
              }
            }
          }
          if (fins.length === 0) return null;

          // 确定消除位置（与鱼鳍在同一区块的其他单元格）
          var eliminations = this.findFinnedEliminations(candidates, value, fins, direction);
          return eliminations.length > 0 ? {
            eliminations: eliminations,
            fins: fins
          } : null;
        };
        _proto.findFinnedEliminations = function findFinnedEliminations(candidates, value, fins, direction) {
          var eliminations = [];
          var isRowBased = direction === HighlightAreaType.ROW;

          // 收集所有鱼鳍所在的区块
          var finBoxes = fins.map(function (fin) {
            return {
              startRow: Math.floor(fin.row / 3) * 3,
              startCol: Math.floor(fin.col / 3) * 3
            };
          });

          // 去重后的区块列表
          var uniqueBoxes = Array.from(new Set(finBoxes.map(function (b) {
            return b.startRow + "," + b.startCol;
          }))).map(function (str) {
            var _str$split$map = str.split(',').map(Number),
              startRow = _str$split$map[0],
              startCol = _str$split$map[1];
            return {
              startRow: startRow,
              startCol: startCol
            };
          });

          // 检查每个区块中的候选数
          for (var _iterator6 = _createForOfIteratorHelperLoose(uniqueBoxes), _step6; !(_step6 = _iterator6()).done;) {
            var _step6$value = _step6.value,
              startRow = _step6$value.startRow,
              startCol = _step6$value.startCol;
            var _loop = function _loop(r) {
              var _loop2 = function _loop2(c) {
                // 跳过鱼鳍本身
                if (fins.some(function (fin) {
                  return fin.row === r && fin.col === c;
                })) return 1; // continue

                // 检查是否在覆盖集中
                var inCoverSet = fins.some(function (fin) {
                  return isRowBased ? c === fin.col : r === fin.row;
                });
                if (inCoverSet && candidates[r][c].has(value)) {
                  eliminations.push({
                    row: r,
                    col: c
                  });
                }
              };
              for (var c = startCol; c < startCol + 3; c++) {
                if (_loop2(c)) continue;
              }
            };
            for (var r = startRow; r < startRow + 3; r++) {
              _loop(r);
            }
          }
          return eliminations;
        }

        /**
         * 找出两个基集的共同覆盖集、交叉点及鳍坐标
         * @returns {
         *   coverUnits: number[];      // 共同覆盖集单位列表（列/行索引）
         *   intersections: Position[] // 两个基集的交叉点位置
         *   fins: Position[]          // 鳍的坐标位置
         * }
         */;
        _proto.findFinnedXWingStructure = function findFinnedXWingStructure(candidates, value, baseUnits, direction) {
          var _this2 = this;
          var isRowBased = direction === HighlightAreaType.ROW;
          var unitA = baseUnits[0],
            unitB = baseUnits[1];
          var result = {
            coverUnits: [],
            intersections: [],
            fins: []
          };

          // 1. 找出所有候选数位置（包括可能的鳍）
          var allPositions = [];
          for (var _iterator7 = _createForOfIteratorHelperLoose(baseUnits), _step7; !(_step7 = _iterator7()).done;) {
            var unit = _step7.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                allPositions.push({
                  row: row,
                  col: col
                });
              }
            }
          }

          // 2. 识别共同覆盖集和交叉点
          var coverMap = new Map();
          allPositions.forEach(function (pos) {
            var coverUnit = isRowBased ? pos.col : pos.row;
            if (!coverMap.has(coverUnit)) {
              coverMap.set(coverUnit, []);
            }
            coverMap.get(coverUnit).push(pos);
          });

          // 3. 筛选有效覆盖集（至少被两个基集共享）
          coverMap.forEach(function (positions, coverUnit) {
            // 标准交叉点：该覆盖集单位上有两个候选数（来自不同基集）
            if (positions.length === 2) {
              var _result$intersections;
              result.coverUnits.push(coverUnit);
              (_result$intersections = result.intersections).push.apply(_result$intersections, positions);
            }
            // 鳍：该覆盖集单位上只有一个候选数
            else if (positions.length === 1) {
              result.fins.push(positions[0]);
            }
          });

          // 4. 验证X-Wing基本结构
          if (result.coverUnits.length !== 2) {
            return {
              coverUnits: [],
              intersections: [],
              fins: []
            };
          }

          // 5. 检查所有鱼鳍是否同宫
          if (result.fins.length > 1) {
            var firstFinBox = this.getBoxRange(result.fins[0]);
            var allFinsSameBox = result.fins.every(function (fin) {
              return _this2.isSameBox(fin, result.fins[0]);
            });
            if (!allFinsSameBox) {
              // 如果鱼鳍不同宫，清空结果
              return {
                coverUnits: [],
                intersections: [],
                fins: []
              };
            }
          }
          return result;
        }
        /**
         * 判断两个单元格是否同宫
         * @param pos1 单元格1
         * @param pos2 单元格2
         */;
        _proto.isSameBox = function isSameBox(pos1, pos2) {
          var box1 = this.getBoxRange(pos1);
          var box2 = this.getBoxRange(pos2);
          return box1.startRow === box2.startRow && box1.startCol === box2.startCol;
        }
        /**
         * 基于已知交叉点和鳍位置查找可消除候选数
         * @param candidates 候选数矩阵 
         * @param value 目标数字
         * @param coverUnits 覆盖集单位 [列/行A, 列/行B]
         * @param direction 检测方向（行/列） 
         * @param fin 鳍的位置
         * @param intersections X-Wing交叉点位置
         */;
        _proto.findEliminations = function findEliminations(candidates, value, coverUnits, direction, fin, intersections) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var eliminations = [];
          var finBox = this.getBoxRange(fin);

          // 1. 确定需要检查的覆盖集单位（排除鳍所在的覆盖集）
          var targetCoverUnits = coverUnits.filter(function (unit) {
            var finUnit = isRowBased ? fin.col : fin.row;
            return unit !== finUnit;
          });

          // 2. 检查每个覆盖集的单元格
          for (var _iterator8 = _createForOfIteratorHelperLoose(targetCoverUnits), _step8; !(_step8 = _iterator8()).done;) {
            var coverUnit = _step8.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : coverUnit;
              var col = isRowBased ? coverUnit : pos;
              var currentPos = {
                row: row,
                col: col
              };

              // 跳过以下情况：
              // - 是交叉点（已在intersections中）
              // - 不在鳍的宫内
              if (this.isIntersection(currentPos, intersections) || !this.isInBox(currentPos, finBox)) {
                continue;
              }

              // 如果该位置有目标候选数，则加入消除列表
              if (candidates[row][col].has(value)) {
                eliminations.push(currentPos);
              }
            }
          }
          return eliminations;
        }

        // 辅助方法：判断是否为交叉点
        ;

        _proto.isIntersection = function isIntersection(pos, intersections) {
          return intersections.some(function (i) {
            return i.row === pos.row && i.col === pos.col;
          });
        }

        // 辅助方法：获取位置所在的宫范围
        ;

        _proto.getBoxRange = function getBoxRange(pos) {
          return {
            startRow: Math.floor(pos.row / 3) * 3,
            startCol: Math.floor(pos.col / 3) * 3
          };
        }

        // 辅助方法：判断是否同一位置
        ;

        _proto.isSamePosition = function isSamePosition(a, b) {
          return a.row === b.row && a.col === b.col;
        }

        // 辅助方法：判断是否在指定宫内
        ;

        _proto.isInBox = function isInBox(pos, box) {
          return pos.row >= box.startRow && pos.row < box.startRow + 3 && pos.col >= box.startCol && pos.col < box.startCol + 3;
        };
        _proto.getBaseCandidates = function getBaseCandidates(candidates, value, baseUnits, direction) {
          var positions = [];
          for (var _iterator9 = _createForOfIteratorHelperLoose(baseUnits), _step9; !(_step9 = _iterator9()).done;) {
            var unit = _step9.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = direction === HighlightAreaType.ROW ? unit : pos;
              var col = direction === HighlightAreaType.ROW ? pos : unit;
              if (candidates[row][col].has(value)) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          return positions;
        };
        _proto.findCoverUnits = function findCoverUnits(baseCandidates, direction) {
          // 收集所有覆盖候选的列/行（与基集方向相反）
          var coverCandidates = new Set();
          for (var _iterator10 = _createForOfIteratorHelperLoose(baseCandidates), _step10; !(_step10 = _iterator10()).done;) {
            var _step10$value = _step10.value,
              row = _step10$value.row,
              col = _step10$value.col;
            coverCandidates.add(direction === HighlightAreaType.ROW ? col : row);
          }

          // 检查是否恰好有3个覆盖集
          return coverCandidates.size === this.FISH_SIZE ? Array.from(coverCandidates) : [];
        };
        _proto.createSteps = function createSteps(board, candidates, xwingInfo) {
          var steps = [];

          // 步骤1：发现X-Wing模式
          steps.push(this.createDiscoveryStep(board, candidates, xwingInfo));

          // 步骤2：展示鱼鳍
          steps.push(this.createFinStep(board, candidates, xwingInfo));

          // 步骤3：标记待删除候选数
          steps.push(this.createEliminationStep(board, candidates, xwingInfo));

          // 步骤4：执行移除
          steps.push(this.createRemovalStep(board, candidates, xwingInfo));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref) {
          var _this3 = this;
          var value = _ref.value,
            baseUnits = _ref.baseUnits,
            direction = _ref.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("FinnedXWingStrategy.discoveryDes", {
              name: _this3.name,
              description: _this3.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: {
              row: baseUnits[0],
              col: 0
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: this.highlightBaseUnits(board, candidates, baseUnits, direction),
            highlightNotes: this.highlightNotesBaseUnits(candidates, value, baseUnits, direction)
          };
        };
        _proto.createFinStep = function createFinStep(board, candidates, _ref2) {
          var _this4 = this;
          var value = _ref2.value,
            baseUnits = _ref2.baseUnits,
            coverUnits = _ref2.coverUnits,
            intersections = _ref2.intersections,
            direction = _ref2.direction,
            fins = _ref2.fins;
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = isRowBased ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("FinnedXWingStrategy.visualizationDes", {
              name: _this4.name,
              value: value,
              baseDirection: baseDirection,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              fins: fins.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              count: fins.length
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: fins[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.highlightBaseUnits(board, candidates, baseUnits, direction), this.highlightCoverUnits(board, candidates, coverUnits, direction), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[fin.row][fin.col] === BLANK_CHAR ? [].concat(candidates[fin.row][fin.col]) : undefined
              };
            }), intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: [].concat(intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.sameNumber.background,
                textColor: HighlightConfig.sameNumber.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, _ref3) {
          var _this5 = this;
          var value = _ref3.value,
            baseUnits = _ref3.baseUnits,
            coverUnits = _ref3.coverUnits,
            intersections = _ref3.intersections,
            direction = _ref3.direction,
            fins = _ref3.fins,
            eliminations = _ref3.eliminations;
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = isRowBased ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("FinnedXWingStrategy.eliminationDes", {
              name: _this5.name,
              value: value,
              baseDirection: baseDirection,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              fins: fins.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              eliminations: eliminations.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              count: eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.highlightBaseUnits(board, candidates, baseUnits, direction), this.highlightCoverUnits(board, candidates, coverUnits, direction), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[fin.row][fin.col] === BLANK_CHAR ? [].concat(candidates[fin.row][fin.col]) : undefined
              };
            }), intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), this.highlightEliminations(board, candidates, eliminations)),
            highlightNotes: [].concat(intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.sameNumber.background,
                textColor: HighlightConfig.sameNumber.textColor,
                value: value
              };
            }), this.highlightEliminationNotes(candidates, value, eliminations))
          };
        };
        _proto.createRemovalStep = function createRemovalStep(board, candidates, _ref4) {
          var _this6 = this;
          var value = _ref4.value,
            baseUnits = _ref4.baseUnits,
            coverUnits = _ref4.coverUnits,
            intersections = _ref4.intersections,
            direction = _ref4.direction,
            fins = _ref4.fins,
            eliminations = _ref4.eliminations;
          // 实际删除候选数
          eliminations.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = isRowBased ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("FinnedXWingStrategy.removalDes", {
              name: _this6.name,
              value: value,
              baseDirection: baseDirection,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              fins: fins.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              count: eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.highlightBaseUnits(board, candidates, baseUnits, direction), this.highlightCoverUnits(board, candidates, coverUnits, direction), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[fin.row][fin.col] === BLANK_CHAR ? [].concat(candidates[fin.row][fin.col]) : undefined
              };
            }), intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), this.highlightEliminations(board, candidates, eliminations)),
            highlightNotes: [].concat(intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.sameNumber.background,
                textColor: HighlightConfig.sameNumber.textColor,
                value: value
              };
            }))
          };
        }

        /* 高亮辅助函数 */;
        _proto.highlightBaseUnits = function highlightBaseUnits(board, candidates, baseUnits, direction) {
          return baseUnits.flatMap(function (unit) {
            var cells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(unit) : SolverUtils.getColumnCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightCoverUnits = function highlightCoverUnits(board, candidates, coverUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          return coverUnits.flatMap(function (unit) {
            var cells = isRowBased ? SolverUtils.getColumnCells(unit) : SolverUtils.getRowCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightEliminations = function highlightEliminations(board, candidates, eliminations) {
          return eliminations.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
              textColor: HighlightConfig.sameRelatedAreaCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          });
        };
        _proto.highlightNotesBaseUnits = function highlightNotesBaseUnits(candidates, value, baseUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];
          for (var _iterator11 = _createForOfIteratorHelperLoose(baseUnits), _step11; !(_step11 = _iterator11()).done;) {
            var unit = _step11.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.sameNumber.background,
                  textColor: HighlightConfig.sameNumber.textColor,
                  value: value
                });
              }
            }
          }
          return notes;
        };
        _proto.highlightNotesCoverUnits = function highlightNotesCoverUnits(candidates, value, coverUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];
          for (var _iterator12 = _createForOfIteratorHelperLoose(coverUnits), _step12; !(_step12 = _iterator12()).done;) {
            var unit = _step12.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : unit;
              var col = isRowBased ? unit : pos;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                });
              }
            }
          }
          return notes;
        };
        _proto.highlightEliminationNotes = function highlightEliminationNotes(candidates, value, eliminations) {
          return eliminations.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: value
            };
          });
        };
        _createClass(FinnedXWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("FinnedXWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("FinnedXWingStrategy.description");
          }
        }]);
        return FinnedXWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FlashSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sp, Material, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Material = module.Material;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "61de7pPhiNF5plXR5pVKfXu", "FlashSpine", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FlashSpine = exports('default', (_dec = ccclass('FlashSpine'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FlashSpine, _Component);
        function FlashSpine() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.duration = 0.5;
          _this._median = 0;
          _this._time = 0;
          _this._material = null;
          _this._skeleton = null;
          return _this;
        }
        var _proto = FlashSpine.prototype;
        _proto.onLoad = function onLoad() {
          this._median = this.duration / 2;
          // 获取材质
          this._skeleton = this.node.getComponent(sp.Skeleton);
          this._material = this._skeleton.customMaterial;
          // 设置材质对应的属性
          this._material.setProperty("u_rate", 1);
        };
        _proto.update = function update(dt) {
          if (this._time > 0) {
            this._time -= dt;
            this._time = this._time < 0 ? 0 : this._time;
            var rate = Math.abs(this._time - this._median) * 2 / this.duration;
            var mat = new Material();
            mat.copy(this._material);
            this._skeleton.customMaterial = mat;
            mat.setProperty("u_rate", rate);
          }
        };
        _proto.clickFlash = function clickFlash() {
          this._time = this.duration;
        };
        return FlashSpine;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FlashSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a7a9eXWbUpJ3rONqlgUYCY/", "FlashSprite", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FlashSprite = exports('default', (_dec = ccclass('FlashSprite'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FlashSprite, _Component);
        function FlashSprite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.duration = 0.5;
          _this._median = 0;
          _this._time = 0;
          _this._material = null;
          return _this;
        }
        var _proto = FlashSprite.prototype;
        _proto.onLoad = function onLoad() {
          this._median = this.duration / 2;
          // 获取材质
          this._material = this.node.getComponent(Sprite).getMaterial(0);
          // 设置材质对应的属性
          this._material.setProperty("u_rate", 1);
        };
        _proto.update = function update(dt) {
          if (this._time > 0) {
            this._time -= dt;
            this._time = this._time < 0 ? 0 : this._time;
            var rate = Math.abs(this._time - this._median) * 2 / this.duration;
            this._material.setProperty("u_rate", rate);
          }
        };
        _proto.clickFlash = function clickFlash() {
          this._time = this.duration;
        };
        return FlashSprite;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreeFlightCamera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, math, KeyCode, CCFloat, input, Input, game, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      KeyCode = module.KeyCode;
      CCFloat = module.CCFloat;
      input = module.input;
      Input = module.Input;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "6c841mU+4JNvqwHy5tJsJh0", "FreeFlightCamera", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var Vec2 = math.Vec2,
        Vec3 = math.Vec3,
        Quat = math.Quat;
      var v2_1 = new Vec2();
      var v2_2 = new Vec2();
      var v3_1 = new Vec3();
      var qt_1 = new Quat();
      var KEYCODE = {
        W: 'W'.charCodeAt(0),
        S: 'S'.charCodeAt(0),
        A: 'A'.charCodeAt(0),
        D: 'D'.charCodeAt(0),
        Q: 'Q'.charCodeAt(0),
        E: 'E'.charCodeAt(0),
        SHIFT: KeyCode.SHIFT_LEFT
      };
      var FreeFlightCamera = exports('FreeFlightCamera', (_dec = ccclass("FreeFlightCamera"), _dec2 = menu('OopsFramework/Camera/FreeFlightCamera （自由飞行摄像机）'), _dec3 = property({
        type: CCFloat,
        tooltip: "移动速度"
      }), _dec4 = property({
        type: CCFloat,
        tooltip: "按Shift键后的速度"
      }), _dec5 = property({
        type: CCFloat,
        slide: true,
        range: [0.05, 0.5, 0.01],
        tooltip: "移动后惯性效果"
      }), _dec6 = property({
        type: CCFloat,
        tooltip: "旋转速度"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FreeFlightCamera, _Component);
        function FreeFlightCamera() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "moveSpeed", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "moveSpeedShiftScale", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "damp", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rotateSpeed", _descriptor4, _assertThisInitialized(_this));
          _this._euler = new Vec3();
          _this._velocity = new Vec3();
          _this._position = new Vec3();
          _this._speedScale = 1;
          return _this;
        }
        var _proto = FreeFlightCamera.prototype;
        _proto.onLoad = function onLoad() {
          input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          Vec3.copy(this._euler, this.node.eulerAngles);
          Vec3.copy(this._position, this.node.position);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
        };
        _proto.update = function update(dt) {
          // position
          Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);
          Vec3.scaleAndAdd(this._position, this._position, v3_1, this.moveSpeed * this._speedScale);
          Vec3.lerp(v3_1, this.node.position, this._position, dt / this.damp); // 向量线性插值产生位移惯性效果
          this.node.setPosition(v3_1);

          // rotation
          Quat.fromEuler(qt_1, this._euler.x, this._euler.y, this._euler.z);
          Quat.slerp(qt_1, this.node.rotation, qt_1, dt / this.damp); // 四元素线性插值产生旋转惯性效果
          this.node.setRotation(qt_1);
        };
        _proto.onMouseWheel = function onMouseWheel(event) {
          var delta = -event.getScrollY() * this.moveSpeed * 0.1; // 向下滚动时增量为正
          Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this.node.rotation);
          Vec3.scaleAndAdd(this._position, this.node.position, v3_1, delta);
        };
        _proto.onKeyDown = function onKeyDown(event) {
          var v = this._velocity;
          if (event.keyCode === KEYCODE.SHIFT) {
            this._speedScale = this.moveSpeedShiftScale;
          } else if (event.keyCode === KEYCODE.W) {
            if (v.z === 0) {
              v.z = -1;
            }
          } else if (event.keyCode === KEYCODE.S) {
            if (v.z === 0) {
              v.z = 1;
            }
          } else if (event.keyCode === KEYCODE.A) {
            if (v.x === 0) {
              v.x = -1;
            }
          } else if (event.keyCode === KEYCODE.D) {
            if (v.x === 0) {
              v.x = 1;
            }
          } else if (event.keyCode === KEYCODE.Q) {
            if (v.y === 0) {
              v.y = -1;
            }
          } else if (event.keyCode === KEYCODE.E) {
            if (v.y === 0) {
              v.y = 1;
            }
          }
        };
        _proto.onKeyUp = function onKeyUp(event) {
          var v = this._velocity;
          if (event.keyCode === KEYCODE.SHIFT) {
            this._speedScale = 1;
          } else if (event.keyCode === KEYCODE.W) {
            if (v.z < 0) {
              v.z = 0;
            }
          } else if (event.keyCode === KEYCODE.S) {
            if (v.z > 0) {
              v.z = 0;
            }
          } else if (event.keyCode === KEYCODE.A) {
            if (v.x < 0) {
              v.x = 0;
            }
          } else if (event.keyCode === KEYCODE.D) {
            if (v.x > 0) {
              v.x = 0;
            }
          } else if (event.keyCode === KEYCODE.Q) {
            if (v.y < 0) {
              v.y = 0;
            }
          } else if (event.keyCode === KEYCODE.E) {
            if (v.y > 0) {
              v.y = 0;
            }
          }
        };
        _proto.onTouchStart = function onTouchStart(e) {
          game.canvas.requestPointerLock();
        };
        _proto.onTouchMove = function onTouchMove(e) {
          e.getStartLocation(v2_1);
          if (v2_1.x > game.canvas.width * 0.4) {
            // rotation
            e.getDelta(v2_2);
            this._euler.y -= v2_2.x * this.rotateSpeed * 0.1; // 上下旋转
            this._euler.x += v2_2.y * this.rotateSpeed * 0.1; // 左右旋转
          } else {
            // position
            e.getLocation(v2_2);
            Vec2.subtract(v2_2, v2_2, v2_1);
            this._velocity.x = v2_2.x * 0.01;
            this._velocity.z = -v2_2.y * 0.01;
          }
        };
        _proto.onTouchEnd = function onTouchEnd(e) {
          if (document.exitPointerLock) {
            document.exitPointerLock();
          }
          e.getStartLocation(v2_1);
          if (v2_1.x < game.canvas.width * 0.4) {
            // position
            this._velocity.x = 0;
            this._velocity.z = 0;
          }
        };
        return FreeFlightCamera;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveSpeed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "moveSpeedShiftScale", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "damp", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rotateSpeed", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameCollision.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ccenum, Collider, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ccenum = module.ccenum;
      Collider = module.Collider;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "7fa3eqzDkpBUq8OUNr05VJh", "GameCollision", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 碰撞物体类型 */
      var CollisionType = exports('CollisionType', /*#__PURE__*/function (CollisionType) {
        CollisionType[CollisionType["Role"] = 0] = "Role";
        CollisionType[CollisionType["Ballistic"] = 1] = "Ballistic";
        CollisionType[CollisionType["Wall"] = 2] = "Wall";
        return CollisionType;
      }({}));
      ccenum(CollisionType);
      var Event_TriggerEnter = "onTriggerEnter";
      var Event_TriggerStay = "onTriggerStay";
      var Event_TriggerExit = "onTriggerExit";
      var Event_CollisionEnter = "onCollisionEnter";
      var Event_CollisionStay = "onCollisionStay";
      var Event_CollisionExit = "onCollisionExit";

      /** 碰撞器与触发器 */
      var GameCollision = exports('GameCollision', (_dec = ccclass('GameCollision'), _dec2 = property({
        type: CollisionType,
        tooltip: '碰撞物体类型'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameCollision, _Component);
        function GameCollision() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.collider = null;
          _initializerDefineProperty(_this, "type", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = GameCollision.prototype;
        _proto.onLoad = function onLoad() {
          this.collider = this.getComponent(Collider);
          if (this.collider.isTrigger) {
            this.collider.on(Event_TriggerEnter, this.onTrigger, this);
            this.collider.on(Event_TriggerStay, this.onTrigger, this);
            this.collider.on(Event_TriggerExit, this.onTrigger, this);
          } else {
            this.collider.on(Event_CollisionEnter, this.onCollision, this);
            this.collider.on(Event_CollisionStay, this.onCollision, this);
            this.collider.on(Event_CollisionExit, this.onCollision, this);
          }
        };
        _proto.onTrigger = function onTrigger(event) {
          switch (event.type) {
            case Event_TriggerEnter:
              this.onTriggerEnter(event);
              break;
            case Event_TriggerStay:
              this.onTriggerStay(event);
              break;
            case Event_TriggerExit:
              this.onTriggerExit(event);
              break;
          }
        };
        _proto.onTriggerEnter = function onTriggerEnter(event) {};
        _proto.onTriggerStay = function onTriggerStay(event) {};
        _proto.onTriggerExit = function onTriggerExit(event) {};
        _proto.onCollision = function onCollision(event) {
          switch (event.type) {
            case Event_CollisionEnter:
              this.onCollisionEnter(event);
              break;
            case Event_CollisionStay:
              this.onCollisionStay(event);
              break;
            case Event_CollisionExit:
              this.onCollisionExit(event);
              break;
          }
        };
        _proto.onCollisionEnter = function onCollisionEnter(event) {};
        _proto.onCollisionStay = function onCollisionStay(event) {};
        _proto.onCollisionExit = function onCollisionExit(event) {};
        return GameCollision;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return CollisionType.Ballistic;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './EventDispatcher.ts', './EventMessage.ts', './ResLoader.ts', './ViewUtil.ts'], function (exports) {
  var _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, Button, EventHandler, input, Input, Component, isValid, SpriteFrame, oops, EventDispatcher, EventMessage, resLoader, ViewUtil;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      EventHandler = module.EventHandler;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
      isValid = module.isValid;
      SpriteFrame = module.SpriteFrame;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      EventDispatcher = module.EventDispatcher;
    }, function (module) {
      EventMessage = module.EventMessage;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      ViewUtil = module.ViewUtil;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "62362nWbWZP653j6XL/zJDq", "GameComponent", undefined);
      var ccclass = _decorator.ccclass;

      /** 加载资源类型 */
      var ResType = /*#__PURE__*/function (ResType) {
        ResType[ResType["Load"] = 0] = "Load";
        ResType[ResType["LoadDir"] = 1] = "LoadDir";
        ResType[ResType["Audio"] = 2] = "Audio";
        return ResType;
      }(ResType || {});
      /** 资源加载记录 */
      /** 
       * 游戏显示对象组件模板
       * 1、当前对象加载的资源，会在对象释放时，自动释放引用的资源
       * 2、当前对象支持启动游戏引擎提供的各种常用逻辑事件
       */
      var GameComponent = exports('GameComponent', (_dec = ccclass("GameComponent"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameComponent, _Component);
        function GameComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          //#region 全局事件管理
          _this._event = null;
          //#endregion
          //#region 预制节点管理
          /** 摊平的节点集合（所有节点不能重名） */
          _this.nodes = null;
          //#endregion
          //#region 资源加载管理
          /** 资源路径 */
          _this.resPaths = null;
          return _this;
        }
        var _proto = GameComponent.prototype;
        /**
         * 注册全局事件
         * @param event       事件名
         * @param listener    处理事件的侦听器函数
         * @param object      侦听函数绑定的this对象
         */
        _proto.on = function on(event, listener, object) {
          this.event.on(event, listener, object);
        }

        /**
         * 移除全局事件
         * @param event      事件名
         */;
        _proto.off = function off(event) {
          this.event.off(event);
        }

        /** 
         * 触发全局事件 
         * @param event      事件名
         * @param args       事件参数
         */;
        _proto.dispatchEvent = function dispatchEvent(event) {
          var _this$event;
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          (_this$event = this.event).dispatchEvent.apply(_this$event, [event].concat(args));
        };
        /** 通过节点名获取预制上的节点，整个预制不能有重名节点 */
        _proto.getNode = function getNode(name) {
          if (this.nodes) {
            return this.nodes.get(name);
          }
          return undefined;
        }

        /** 平摊所有节点存到Map<string, Node>中通过get(name: string)方法获取 */;
        _proto.nodeTreeInfoLite = function nodeTreeInfoLite() {
          this.nodes = new Map();
          ViewUtil.nodeTreeInfoLite(this.node, this.nodes);
        }

        /**
         * 从资源缓存中找到预制资源名并创建一个显示对象
         * @param path 资源路径
         */;
        _proto.createPrefabNode = function createPrefabNode(path, bundleName) {
          if (bundleName === void 0) {
            bundleName = oops.res.defaultBundleName;
          }
          return ViewUtil.createPrefabNode(path, bundleName);
        }

        /**
         * 加载预制并创建预制节点
         * @param path       资源路径
         * @param bundleName 资源包名
         */;
        _proto.createPrefabNodeAsync = function createPrefabNodeAsync(path, bundleName) {
          if (bundleName === void 0) {
            bundleName = oops.res.defaultBundleName;
          }
          return ViewUtil.createPrefabNodeAsync(path, bundleName);
        };
        // 资源使用记录
        /**
         * 获取资源
         * @param path          资源路径
         * @param type          资源类型
         * @param bundleName    远程资源包名
         */
        _proto.getRes = function getRes(path, type, bundleName) {
          return oops.res.get(path, type, bundleName);
        }

        /**
         * 添加资源使用记录
         * @param type          资源类型
         * @param bundleName    资源包名
         * @param paths         资源路径
         */;
        _proto.addPathToRecord = function addPathToRecord(type, bundleName, paths, resId) {
          if (this.resPaths == null) this.resPaths = new Map();
          var rps = this.resPaths.get(type);
          if (rps == null) {
            rps = new Map();
            this.resPaths.set(type, rps);
          }
          if (paths instanceof Array) {
            var realBundle = bundleName;
            for (var index = 0; index < paths.length; index++) {
              var realPath = paths[index];
              var key = this.getResKey(realBundle, realPath, resId);
              if (!rps.has(key)) {
                rps.set(key, {
                  path: realPath,
                  bundle: realBundle,
                  resId: resId
                });
              }
            }
          } else if (typeof paths === "string") {
            var _realBundle = bundleName;
            var _realPath = paths;
            var _key3 = this.getResKey(_realBundle, _realPath, resId);
            if (!rps.has(_key3)) {
              rps.set(_key3, {
                path: _realPath,
                bundle: _realBundle,
                resId: resId
              });
            }
          } else {
            var _realBundle2 = oops.res.defaultBundleName;
            var _realPath2 = bundleName;
            var _key4 = this.getResKey(_realBundle2, _realPath2, resId);
            if (!rps.has(_key4)) {
              rps.set(_key4, {
                path: _realPath2,
                bundle: _realBundle2,
                resId: resId
              });
            }
          }
        };
        _proto.getResKey = function getResKey(realBundle, realPath, resId) {
          var key = realBundle + ":" + realPath;
          if (resId != null) key += ":" + resId;
          return key;
        }

        /**
         * 加载一个资源
         * @param bundleName    远程包名
         * @param paths         资源路径
         * @param type          资源类型
         * @param onProgress    加载进度回调
         * @param onComplete    加载完成回调
         */;
        _proto.load = function load(bundleName, paths, type, onProgress, onComplete) {
          this.addPathToRecord(ResType.Load, bundleName, paths);
          oops.res.load(bundleName, paths, type, onProgress, onComplete);
        }

        /**
         * 异步加载一个资源
         * @param bundleName    远程包名
         * @param paths         资源路径
         * @param type          资源类型
         */;
        _proto.loadAsync = function loadAsync(bundleName, paths, type) {
          this.addPathToRecord(ResType.Load, bundleName, paths);
          return oops.res.loadAsync(bundleName, paths, type);
        }

        /**
         * 加载文件夹中的资源
         * @param bundleName    远程包名
         * @param dir           文件夹名
         * @param type          资源类型
         * @param onProgress    加载进度回调
         * @param onComplete    加载完成回调
         */;
        _proto.loadDir = function loadDir(bundleName, dir, type, onProgress, onComplete) {
          var realDir;
          var realBundle;
          if (typeof dir === "string") {
            realDir = dir;
            realBundle = bundleName;
          } else {
            realDir = bundleName;
            realBundle = oops.res.defaultBundleName;
          }
          this.addPathToRecord(ResType.LoadDir, realBundle, realDir);
          oops.res.loadDir(bundleName, dir, type, onProgress, onComplete);
        }

        /** 释放资源 */;
        _proto.release = function release() {
          if (this.resPaths) {
            var rps = this.resPaths.get(ResType.Load);
            if (rps) {
              rps.forEach(function (value) {
                oops.res.release(value.path, value.bundle);
              });
              rps.clear();
            }
          }
        }

        /** 释放文件夹的资源 */;
        _proto.releaseDir = function releaseDir() {
          if (this.resPaths) {
            var rps = this.resPaths.get(ResType.LoadDir);
            if (rps) {
              rps.forEach(function (value) {
                oops.res.releaseDir(value.path, value.bundle);
              });
            }
          }
        }

        /** 释放音效资源 */;
        _proto.releaseAudioEffect = function releaseAudioEffect() {
          if (this.resPaths) {
            var rps = this.resPaths.get(ResType.Audio);
            if (rps) {
              rps.forEach(function (value) {
                oops.audio.putEffect(value.resId, value.path, value.bundle);
              });
            }
          }
        }

        /**
         * 设置图片资源
         * @param target  目标精灵对象
         * @param path    图片资源地址
         * @param bundle  资源包名
         */;
        _proto.setSprite = /*#__PURE__*/
        function () {
          var _setSprite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(target, path, bundle) {
            var spriteFrame, rps, key;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (bundle === void 0) {
                    bundle = resLoader.defaultBundleName;
                  }
                  _context.next = 3;
                  return this.loadAsync(bundle, path, SpriteFrame);
                case 3:
                  spriteFrame = _context.sent;
                  if (!(!spriteFrame || !isValid(target))) {
                    _context.next = 8;
                    break;
                  }
                  rps = this.resPaths.get(ResType.Load);
                  if (rps) {
                    key = this.getResKey(bundle, path);
                    rps["delete"](key);
                    oops.res.release(path, bundle);
                  }
                  return _context.abrupt("return");
                case 8:
                  target.spriteFrame = spriteFrame;
                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function setSprite(_x, _x2, _x3) {
            return _setSprite.apply(this, arguments);
          }
          return setSprite;
        }() //#endregion
        //#region 音频播放管理
        /**
         * 播放背景音乐（不受自动释放资源管理）
         * @param url           资源地址
         * @param callback      资源加载完成回调
         * @param bundleName    资源包名
         */;

        _proto.playMusic = function playMusic(url, callback, bundleName) {
          oops.audio.playMusic(url, callback, bundleName);
        }

        /**
         * 循环播放背景音乐（不受自动释放资源管理）
         * @param url           资源地址
         * @param bundleName    资源包名
         */;
        _proto.playMusicLoop = function playMusicLoop(url, bundleName) {
          oops.audio.stopMusic();
          oops.audio.playMusicLoop(url, bundleName);
        }

        /**
         * 播放音效
         * @param url           资源地址
         * @param callback      资源加载完成回调
         * @param bundleName    资源包名
         */;
        _proto.playEffect = /*#__PURE__*/
        function () {
          var _playEffect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, bundleName) {
            var _this2 = this;
            var id;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (bundleName == null) bundleName = oops.res.defaultBundleName;
                  _context2.next = 3;
                  return oops.audio.playEffect(url, bundleName, function () {
                    var rps = _this2.resPaths.get(ResType.Audio);
                    if (rps) {
                      var key = _this2.getResKey(bundleName, url, id);
                      rps["delete"](key);
                    }
                  });
                case 3:
                  id = _context2.sent;
                  this.addPathToRecord(ResType.Audio, bundleName, url, id);
                case 5:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function playEffect(_x4, _x5) {
            return _playEffect.apply(this, arguments);
          }
          return playEffect;
        }() //#endregion
        //#region 游戏逻辑事件
        /** 
         * 批量设置当前界面按钮事件
         * @param bindRootEvent  是否对预制根节点绑定触摸事件
         * @example
         * 注：按钮节点Label1、Label2必须绑定UIButton等类型的按钮组件才会生效，方法名必须与节点名一致
         * this.setButton();
         * 
         * Label1(event: EventTouch) { console.log(event.target.name); }
         * Label2(event: EventTouch) { console.log(event.target.name); }
         */;

        _proto.setButton = function setButton(bindRootEvent) {
          var _this3 = this;
          if (bindRootEvent === void 0) {
            bindRootEvent = true;
          }
          // 自定义按钮批量绑定触摸事件
          if (bindRootEvent) {
            this.node.on(Node.EventType.TOUCH_END, function (event) {
              var self = _this3;
              var func = self[event.target.name];
              if (func) {
                func.call(_this3, event);
              }
              // 不触发界面根节点触摸事件、不触发长按钮组件的触摸事件
              // else if (event.target != this.node && event.target.getComponent(ButtonTouchLong) == null) {
              //     console.warn(`名为【${event.target.name}】的按钮事件方法不存在`);
              // }
            }, this);
          }

          // Cocos Creator Button组件批量绑定触摸事件（使用UIButton支持放连点功能）
          var regex = /<([^>]+)>/;
          var buttons = this.node.getComponentsInChildren(Button);
          buttons.forEach(function (b) {
            var node = b.node;
            var self = _this3;
            var func = self[node.name];
            if (func) {
              var event = new EventHandler();
              event.target = _this3.node;
              event.handler = b.node.name;
              event.component = _this3.name.match(regex)[1];
              b.clickEvents.push(event);
            }
            // else {
            //     console.warn(`名为【${node.name}】的按钮事件方法不存在`);
            // }
          });
        }

        /** 
         * 批量设置全局事件 
         * @example
         *  this.setEvent("onGlobal");
         *  this.dispatchEvent("onGlobal", "全局事件");
         * 
         *  onGlobal(event: string, args: any) { console.log(args) };
         */;
        _proto.setEvent = function setEvent() {
          var self = this;
          for (var _len3 = arguments.length, args = new Array(_len3), _key5 = 0; _key5 < _len3; _key5++) {
            args[_key5] = arguments[_key5];
          }
          for (var _i = 0, _args3 = args; _i < _args3.length; _i++) {
            var name = _args3[_i];
            var func = self[name];
            if (func) this.on(name, func, this);else console.error("\u540D\u4E3A\u3010" + name + "\u3011\u7684\u5168\u5C40\u4E8B\u65B9\u6CD5\u4E0D\u5B58\u5728");
          }
        }

        /**
         * 键盘事件开关
         * @param on 打开键盘事件为true
         */;
        _proto.setKeyboard = function setKeyboard(on) {
          if (on) {
            input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
            input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
            input.on(Input.EventType.KEY_PRESSING, this.onKeyPressing, this);
          } else {
            input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);
            input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
            input.off(Input.EventType.KEY_PRESSING, this.onKeyPressing, this);
          }
        }

        /** 键按下 */;
        _proto.onKeyDown = function onKeyDown(event) {}

        /** 键放开 */;
        _proto.onKeyUp = function onKeyUp(event) {}

        /** 键长按 */;
        _proto.onKeyPressing = function onKeyPressing(event) {}

        /** 监听游戏从后台进入事件 */;
        _proto.setGameShow = function setGameShow() {
          this.on(EventMessage.GAME_SHOW, this.onGameShow, this);
        }

        /** 监听游戏切到后台事件 */;
        _proto.setGameHide = function setGameHide() {
          this.on(EventMessage.GAME_HIDE, this.onGameHide, this);
        }

        /** 监听游戏画笔尺寸变化事件 */;
        _proto.setGameResize = function setGameResize() {
          this.on(EventMessage.GAME_RESIZE, this.onGameResize, this);
        }

        /** 监听游戏全屏事件 */;
        _proto.setGameFullScreen = function setGameFullScreen() {
          this.on(EventMessage.GAME_FULL_SCREEN, this.onGameFullScreen, this);
        }

        /** 监听游戏旋转屏幕事件 */;
        _proto.setGameOrientation = function setGameOrientation() {
          this.on(EventMessage.GAME_ORIENTATION, this.onGameOrientation, this);
        }

        /** 游戏从后台进入事件回调 */;
        _proto.onGameShow = function onGameShow() {}

        /** 游戏切到后台事件回调 */;
        _proto.onGameHide = function onGameHide() {}

        /** 游戏画笔尺寸变化事件回调 */;
        _proto.onGameResize = function onGameResize() {}

        /** 游戏全屏事件回调 */;
        _proto.onGameFullScreen = function onGameFullScreen() {}

        /** 游戏旋转屏幕事件回调 */;
        _proto.onGameOrientation = function onGameOrientation() {}
        //#endregion
        ;

        _proto.onDestroy = function onDestroy() {
          // 释放消息对象
          if (this._event) {
            this._event.destroy();
            this._event = null;
          }

          // 节点引用数据清除
          if (this.nodes) {
            this.nodes.clear();
            this.nodes = null;
          }

          // 自动释放资源
          if (this.resPaths) {
            this.releaseAudioEffect();
            this.release();
            this.releaseDir();
            this.resPaths.clear();
            this.resPaths = null;
          }
        };
        _createClass(GameComponent, [{
          key: "event",
          get: /** 全局事件管理器 */
          function get() {
            if (this._event == null) this._event = new EventDispatcher();
            return this._event;
          }
        }]);
        return GameComponent;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts'], function (exports) {
  var _createClass, cclegacy, oops;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "54585zBsmtGfZEDczLG3SH5", "GameConfig", undefined);

      /* 游戏配置解析，对应 resources/config/config.json 配置 */
      var GameConfig = exports('GameConfig', /*#__PURE__*/function () {
        function GameConfig(config) {
          this._data = null;
          this._data = Object.freeze(config.json);
          oops.log.logConfig(this._data, "游戏配置");
        }
        _createClass(GameConfig, [{
          key: "version",
          get: /** 客户端版本号配置 */
          function get() {
            return this._data["config"]["version"];
          }
          /** 包名 */
        }, {
          key: "package",
          get: function get() {
            return this._data["config"]["package"];
          }
          /** 游戏每秒传输帧数 */
        }, {
          key: "frameRate",
          get: function get() {
            return this._data.config.frameRate;
          }
          /** 本地存储内容加密 key */
        }, {
          key: "localDataKey",
          get: function get() {
            return this._data.config.localDataKey;
          }
          /** 本地存储内容加密 iv */
        }, {
          key: "localDataIv",
          get: function get() {
            return this._data.config.localDataIv;
          }
          /** Http 服务器地址 */
        }, {
          key: "httpServer",
          get: function get() {
            return this._data.config.httpServer;
          }
          /** Http 请求超时时间 */
        }, {
          key: "httpTimeout",
          get: function get() {
            return this._data.config.httpTimeout;
          }

          /** 获取当前客户端支持的语言类型 */
        }, {
          key: "language",
          get: function get() {
            return this._data.language.type || ["zh"];
          }
          /** 获取当前客户端支持的语言 Json 配置路径 */
        }, {
          key: "languagePathJson",
          get: function get() {
            return this._data.language.path.json || "language/json";
          }
          /** 获取当前客户端支持的语言纹理配置路径 */
        }, {
          key: "languagePathTexture",
          get: function get() {
            return this._data.language.path.texture || "language/texture";
          }
          /** 默认语言 */
        }, {
          key: "languageDefault",
          get: function get() {
            return this._data.language["default"] || "zh";
          }

          /** 是否启用远程资源 */
        }, {
          key: "bundleEnable",
          get: function get() {
            return this._data.bundle.enable;
          }
          /** 远程资源服务器地址 */
        }, {
          key: "bundleServer",
          get: function get() {
            return this._data.bundle.server;
          }
          /** 远程资源名 */
        }, {
          key: "bundleDefault",
          get: function get() {
            return this._data.bundle["default"];
          }
          /** 远程所有资源包配置 */
        }, {
          key: "bundlePackages",
          get: function get() {
            return this._data.bundle.packages;
          }

          /** 加载界面资源超时提示 */
        }, {
          key: "loadingTimeoutGui",
          get: function get() {
            return this._data.config.loadingTimeoutGui || 1000;
          }
        }, {
          key: "data",
          get: /** 游戏配置数据 */
          function get() {
            return this._data;
          }
        }]);
        return GameConfig;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConfig2.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b6443LWc8BFAZHj8Wpo8kwN", "GameConfig", undefined);
      /**
       * 游戏全局配置类型
       * 说明：聚合所有可配置模块的类型定义
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './Configuration.ts', './GameLogic.ts', './DailyChallengeManager.ts', './DifficultyManager.ts', './HistoryManager.ts', './GameModel.ts', './NetworkService.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Component, GameState, SudokuGameMode, Configuration, GameLogic, DailyChallengeManager, DifficultyManager, HistoryManager, GameModel, NetworkService;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      GameState = module.GameState;
      SudokuGameMode = module.SudokuGameMode;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      DailyChallengeManager = module.DailyChallengeManager;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      GameModel = module.GameModel;
    }, function (module) {
      NetworkService = module.NetworkService;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "700b9kWTFZMw5qjnwZSt5Yv", "GameController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameController = exports('GameController', (_dec = ccclass('GameController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameController, _Component);
        function GameController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.view = void 0;
          _this.model = void 0;
          return _this;
        }
        var _proto = GameController.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.init = function init(view) {
          this.view = view;
        };
        _proto.createGameModel = /*#__PURE__*/function () {
          var _createGameModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gameMode, modeData, isGenerate, isReset) {
            var displayDifficulty, actualDifficulty, difficultyAdjustment, source, currentGameData, gameData;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (isGenerate === void 0) {
                    isGenerate = true;
                  }
                  if (isReset === void 0) {
                    isReset = false;
                  }
                  displayDifficulty = Configuration.getInstance().getCurrentDifficulty();
                  actualDifficulty = displayDifficulty;
                  difficultyAdjustment = DifficultyManager.getInstance().evaluate(displayDifficulty); // 进行难度分析看是否需要调整难度
                  if (difficultyAdjustment.shouldAdjust && difficultyAdjustment.adjustedDifficulty != undefined) {
                    actualDifficulty = difficultyAdjustment.adjustedDifficulty;
                  }
                  currentGameData = null; //每日挑战
                  if (!(gameMode === SudokuGameMode.DAILY_CHALLENGE)) {
                    _context.next = 19;
                    break;
                  }
                  gameData = DailyChallengeManager.getInstance().getChallengeByDate(modeData.date);
                  if (!gameData) {
                    _context.next = 14;
                    break;
                  }
                  source = {
                    puzzleStr: gameData.puzzleStr,
                    solutionStr: gameData.solutionStr,
                    blanks: GameLogic.findBlanks(gameData.puzzleStr)
                  };
                  currentGameData = gameData;
                  _context.next = 17;
                  break;
                case 14:
                  _context.next = 16;
                  return NetworkService.generateDailyChallenge(actualDifficulty, modeData.date);
                case 16:
                  source = _context.sent;
                case 17:
                  _context.next = 28;
                  break;
                case 19:
                  currentGameData = HistoryManager.getInstance().getCurrentGame();
                  if (!(this.model && !isGenerate)) {
                    _context.next = 24;
                    break;
                  }
                  //继续游戏
                  source = {
                    puzzleStr: this.model.gameData.puzzleStr,
                    solutionStr: this.model.gameData.solutionStr,
                    blanks: GameLogic.findBlanks(this.model.gameData.puzzleStr)
                  };
                  _context.next = 27;
                  break;
                case 24:
                  _context.next = 26;
                  return NetworkService.generate(actualDifficulty);
                case 26:
                  source = _context.sent;
                case 27:
                  if (isReset) {
                    currentGameData = null;
                  }
                case 28:
                  this.model = new GameModel(source, gameMode, modeData, displayDifficulty, actualDifficulty, currentGameData);
                  this.model.gameState = GameState.Playing;
                case 30:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function createGameModel(_x, _x2, _x3, _x4) {
            return _createGameModel.apply(this, arguments);
          }
          return createGameModel;
        }();
        _proto.resetGame = /*#__PURE__*/function () {
          var _resetGame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gameMode, modeData, isGenerate, isReset) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.createGameModel(gameMode, modeData, isGenerate, isReset);
                case 2:
                  if (!(!this.view || !this.model)) {
                    _context2.next = 4;
                    break;
                  }
                  return _context2.abrupt("return");
                case 4:
                  this.view.refreshGameModel(this.model);
                  this.view.resetGame();
                case 6:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function resetGame(_x5, _x6, _x7, _x8) {
            return _resetGame.apply(this, arguments);
          }
          return resetGame;
        }();
        _proto.inputNumber = function inputNumber(args) {
          if (!this.view || !this.model) {
            return;
          }
          this.model.updateInput(args.row, args.col, args.value, args.idUndo);
          this.view.refreshNumberBtnCount();
          this.view.refreshScoreAndHP();
        };
        _proto.inputNoteNumber = function inputNoteNumber(args) {
          if (this.model) {
            this.model.updateInputNote(args.row, args.col, args.value, args.idUndo);
          }
        };
        _proto.getInput = function getInput(row, col) {
          if (this.model) {
            return this.model.getInput(row, col);
          }
          return undefined;
        };
        _proto.getInputNote = function getInputNote(row, col) {
          if (this.model) {
            return this.model.getInputNote(row, col);
          }
          return undefined;
        };
        _proto.updateHintLimit = function updateHintLimit() {
          if (!this.model || !this.view) {
            return;
          }
          this.model.updateHintLimit();
          this.view.refreshHint();
        };
        return GameController;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameData.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "decf5+9dLVILakWFtuzeTzH", "GameData", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameHistoryImpl.ts", ['cc', './Oops.ts'], function (exports) {
  var cclegacy, oops;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8bd9cQawtxJML+Wn4VnRSHl", "GameHistoryImpl", undefined);

      /**
       * 增强版游戏历史记录实现类（带本地缓存）
       * 
       * 功能升级：
       * 1. 内存中维护最近20条记录（快速访问）
       * 2. 自动持久化到本地存储（长期保存）
       * 3. 启动时自动加载历史记录
       * 
       * 存储结构：
       * {
       *   version: 1,
       *   records: GameRecord[],
       *   lastUpdated: timestamp
       * }
       */
      var GameHistoryImpl = exports('GameHistoryImpl', /*#__PURE__*/function () {
        function GameHistoryImpl(records) {
          if (records === void 0) {
            records = [];
          }
          this.records = records;
          this.loadFromStorage();
        }

        // ========== 公开接口 ==========
        var _proto = GameHistoryImpl.prototype;
        _proto.getRecentRecords = function getRecentRecords(difficulty, count) {
          return this.records.filter(function (r) {
            return r.difficulty === difficulty;
          }).slice(-count);
        };
        _proto.addRecord = function addRecord(record) {
          // 确保时间戳
          if (!record.timestamp) {
            record.timestamp = Date.now();
          }

          // 内存处理
          this.records.push(record);
          if (this.records.length > GameHistoryImpl.MAX_MEMORY_RECORDS) {
            this.records.shift();
          }

          // 持久化处理
          this.saveToStorage();
        }

        /**
         * 获取就近N局游戏记录（不限难度）
         * @param count 要获取的记录数量
         * @param filter 可选过滤条件
         * @returns 按时间倒序排列的记录数组
         */;
        _proto.getRecentGames = function getRecentGames(count, filter) {
          var result = [].concat(this.records).reverse(); // 倒序获取最新记录

          if (filter) {
            if (filter.isCompleted !== undefined) {
              result = result.filter(function (r) {
                return r.isCompleted === filter.isCompleted;
              });
            }
            if (filter.minProgress !== undefined) {
              result = result.filter(function (r) {
                return r.progress >= filter.minProgress;
              });
            }
            if (filter.maxProgress !== undefined) {
              result = result.filter(function (r) {
                return r.progress <= filter.maxProgress;
              });
            }
          }
          return result.slice(0, count);
        }

        /**
         * 获取最近完成的N局记录
         * @param count 要获取的记录数量
         * @param difficulty 可选难度筛选
         */;
        _proto.getRecentCompletedGames = function getRecentCompletedGames(count, difficulty) {
          var result = this.records.filter(function (r) {
            return r.isCompleted;
          });
          if (difficulty !== undefined) {
            result = result.filter(function (r) {
              return r.difficulty === difficulty;
            });
          }
          return result.slice(-count).reverse(); // 返回时间倒序
        }

        /**
         * 获取最近未完成的N局记录
         * @param count 要获取的记录数量
         * @param difficulty 可选难度筛选
         */;
        _proto.getRecentUncompletedGames = function getRecentUncompletedGames(count, difficulty) {
          var result = this.records.filter(function (r) {
            return !r.isCompleted;
          });
          if (difficulty !== undefined) {
            result = result.filter(function (r) {
              return r.difficulty === difficulty;
            });
          }
          return result.slice(-count).reverse(); // 返回时间倒序
        }

        // ========== 持久化方法 ==========

        /**
         * 从本地存储加载历史记录
         */;
        _proto.loadFromStorage = function loadFromStorage() {
          var raw = oops.storage.get(GameHistoryImpl.STORAGE_KEY);
          if (!raw) return;
          try {
            var data = JSON.parse(raw);
            if (data != null && data.records) {
              // 合并内存和存储的记录（去重）
              var combined = [].concat(data.records, this.records).filter(function (v, i, a) {
                return a.findIndex(function (t) {
                  return t.timestamp === v.timestamp;
                }) === i;
              });
              this.records = combined.slice(-GameHistoryImpl.MAX_MEMORY_RECORDS);
            }
          } catch (e) {
            console.error('加载难度历史记录失败:', e);
          }
        }

        /**
         * 保存记录到本地存储
         */;
        _proto.saveToStorage = function saveToStorage() {
          var data = {
            version: 1,
            records: this.records,
            lastUpdated: Date.now()
          };
          oops.storage.set(GameHistoryImpl.STORAGE_KEY, JSON.stringify(data));
        }

        /**
         * 清空所有记录（内存+持久化）
         */;
        _proto.clearAll = function clearAll() {
          this.records = [];
          oops.storage.remove(GameHistoryImpl.STORAGE_KEY);
        };
        return GameHistoryImpl;
      }());
      GameHistoryImpl.STORAGE_KEY = 'difficulty_history_v2';
      GameHistoryImpl.MAX_MEMORY_RECORDS = 5;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLogic.ts", ['cc', './Config.ts', './sudoku.ts'], function (exports) {
  var cclegacy, NR_SQUARES, MIN_GIVENS, generate, solve, get_candidates;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NR_SQUARES = module.NR_SQUARES;
      MIN_GIVENS = module.MIN_GIVENS;
    }, function (module) {
      generate = module.generate;
      solve = module.solve;
      get_candidates = module.get_candidates;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4dafduOpMxHxb9ioQtCO2oC", "GameLogic", undefined);
      /**
       * 单元格关联类型枚举（具体关联维度）
       */
      var AssociationType = exports('AssociationType', /*#__PURE__*/function (AssociationType) {
        AssociationType["ROW"] = "ROW";
        AssociationType["COLUMN"] = "COLUMN";
        AssociationType["BOX"] = "BOX";
        return AssociationType;
      }({}));

      /**
       * 关系类型枚举（简化版）
       */
      var CellRelationType = exports('CellRelationType', /*#__PURE__*/function (CellRelationType) {
        CellRelationType["SELECTED"] = "SELECTED";
        CellRelationType["UNRELATED"] = "UNRELATED";
        CellRelationType["ASSOCIATED"] = "ASSOCIATED";
        return CellRelationType;
      }({}));

      /**
       * 单元格关系联合类型（支持多重关联）
       */

      /**
       * 单元格数据接口（解耦具体实现）
       */

      var GameLogic = exports('GameLogic', /*#__PURE__*/function () {
        function GameLogic() {}
        /**
        * 判断两个单元格之间的空间关系
        */
        GameLogic.getSpaceRelations = function getSpaceRelations(currentRow, currentCol, targetRow, targetCol) {
          var relations = [];
          if (currentRow === targetRow) relations.push(AssociationType.ROW);
          if (currentCol === targetCol) relations.push(AssociationType.COLUMN);
          if (Math.floor(currentRow / 3) === Math.floor(targetRow / 3) && Math.floor(currentCol / 3) === Math.floor(targetCol / 3)) {
            relations.push(AssociationType.BOX);
          }
          return relations;
        }

        /**
         * 更新后的核心关系判断逻辑
         */;
        GameLogic.getCellRelation = function getCellRelation(currentCell, selectedCell, sameNumberCells) {
          var _this = this;
          if (sameNumberCells === void 0) {
            sameNumberCells = [];
          }
          var isSameNumber = false;
          // 无选中单元格 → 返回 UNRELATED
          if (!selectedCell) {
            return {
              type: CellRelationType.UNRELATED,
              isSameNumber: isSameNumber
            };
          }

          // 检查是否选中自身
          if (currentCell.row === selectedCell.row && currentCell.col === selectedCell.col) {
            return {
              type: CellRelationType.SELECTED,
              isSameNumber: isSameNumber
            };
          }

          // 计算与选中单元格的空间关系
          var spaceRelations = this.getSpaceRelations(currentCell.row, currentCell.col, selectedCell.row, selectedCell.col);

          // 计算与相同数字单元格的空间关系
          var numberRelations = [];
          isSameNumber = selectedCell.number !== 0 && currentCell.number === selectedCell.number;
          sameNumberCells.forEach(function (cell) {
            numberRelations = [].concat(numberRelations, _this.getSpaceRelations(currentCell.row, currentCell.col, cell.row, cell.col));
          });
          numberRelations = [].concat(new Set(numberRelations)); // 去重

          // 返回组合关系（只要有任何关联就返回ASSOCIATED）
          return spaceRelations.length > 0 || numberRelations.length > 0 ? {
            type: CellRelationType.ASSOCIATED,
            spaceRelations: spaceRelations,
            numberRelations: numberRelations,
            isSameNumber: isSameNumber
          } : {
            type: CellRelationType.UNRELATED,
            isSameNumber: isSameNumber
          };
        }

        /**
         * 批量计算关系（二维数组版本）
         */;
        GameLogic.getGridRelations = function getGridRelations(grid, selectedCell) {
          var _this2 = this;
          // 平铺二维数组并生成key
          var allCells = grid.flat();
          var relations = new Map();
          if (!selectedCell) {
            allCells.forEach(function (cell) {
              relations.set(cell.row + "-" + cell.col, {
                type: CellRelationType.UNRELATED,
                isSameNumber: false
              });
            });
            return {
              relations: relations,
              sameNumberCells: []
            };
          }

          // 预计算相同数字单元格（排除自身和空值）
          var sameNumberCells = allCells.filter(function (cell) {
            return selectedCell.number !== 0 && cell.number === selectedCell.number && !(cell.row === selectedCell.row && cell.col === selectedCell.col);
          });

          // 批量计算关系
          allCells.forEach(function (cell) {
            var relation = _this2.getCellRelation(cell, selectedCell, sameNumberCells);
            relations.set(cell.row + "-" + cell.col, relation);
          });
          return {
            relations: relations,
            sameNumberCells: sameNumberCells
          };
        }

        /**
         * 生成数独题目（适配新版难度标准）
         * @param difficulty 难度级别（支持预设名称或自定义数字）
         * @param unique 是否要求唯一解
         * @returns 结构化数独数据
         */;
        GameLogic.generate = function generate$1(difficulty, unique) {
          if (unique === void 0) {
            unique = true;
          }
          difficulty = this.force_range(difficulty, NR_SQUARES + 1, MIN_GIVENS);

          // 生成题目
          var puzzleStr = generate(difficulty);
          var solutionStr = solve(puzzleStr);
          if (solutionStr) {
            return {
              puzzleStr: puzzleStr,
              solutionStr: solutionStr,
              blanks: this.findBlanks(puzzleStr)
            };
          } else {
            console.error("生成错误，该题无解");
            return this.generate(difficulty, unique);
          }
        }

        /**
        * 以网格形式返回每个方格的所有可能候选项。
        *
        * @param board -81个字符的board字符串。
        * @returns 每个平方的候选字符串的二维数组，如果遇到矛盾，则为假。
        * @throws 如果棋盘无效。
        */;
        GameLogic.getCandidates = function getCandidates(puzzleStr) {
          return get_candidates(puzzleStr);
        }

        /**
         * 将字符串格式数独转换为二维数组
         * @param str 数独字符串（81字符）
         * @returns 9x9二维数组
         */;
        GameLogic.parseSudokuString = function parseSudokuString(str) {
          if (str.length !== 81) {
            throw new Error('Invalid sudoku string length');
          }
          var grid = [];
          for (var row = 0; row < 9; row++) {
            grid[row] = [];
            for (var col = 0; col < 9; col++) {
              var _char = str.charAt(row * 9 + col);
              grid[row][col] = _char === '0' ? 0 : parseInt(_char, 10);
            }
          }
          return grid;
        }

        /**
         * 查找所有空格位置
         * @param puzzleStr 谜题字符串
         */;
        GameLogic.findBlanks = function findBlanks(puzzleStr) {
          var blanks = [];
          for (var i = 0; i < puzzleStr.length; i++) {
            if (puzzleStr[i] === ".") {
              var row = Math.floor(i / 9);
              var col = i % 9;
              blanks.push({
                row: row,
                col: col
              });
            }
          }
          return blanks;
        }

        /**
         * 强制一个数字在指定的范围内。
         *
         * @param nr - 要调整的数字。
         * @param max - 最大值
         * @param min - 最小值
         * @returns The number forced within the range.
         */;
        GameLogic.force_range = function force_range(nr, max, min) {
          if (min === void 0) {
            min = 0;
          }
          nr = nr || 0;
          if (nr < min) {
            return min;
          }
          if (nr > max) {
            return max;
          }
          return nr;
        }

        /**
         * 格式化时间显示（强制两位数+可选毫秒）
         * @param timer 时间（秒），可以是整数或小数
         * @param showMilliseconds 是否显示毫秒（默认false）
         * @returns 格式化的时间字符串 (HH:MM:SS 或 HH:MM:SS:mmm)
         */;
        GameLogic.formatTimeDisplay = function formatTimeDisplay(timer, showMilliseconds) {
          if (showMilliseconds === void 0) {
            showMilliseconds = false;
          }
          // 输入验证
          if (typeof timer !== 'number' || isNaN(timer)) {
            return showMilliseconds ? "00:00:00:000" : "00:00:00";
          }

          // 确保非负数
          var totalSeconds = Math.max(0, timer);

          // 计算各部分
          var hours = Math.floor(totalSeconds / 3600);
          var minutes = Math.floor(totalSeconds % 3600 / 60);
          var seconds = Math.floor(totalSeconds % 60);
          var milliseconds = Math.floor(totalSeconds % 1 * 1000);

          // 补零函数
          var pad = function pad(num, length) {
            if (length === void 0) {
              length = 2;
            }
            return num.toString().padStart(length, '0');
          };

          // 组合基础时间
          var timeStr = "";
          if (hours > 0) {
            timeStr = pad(hours) + ":" + pad(minutes) + ":" + pad(seconds);
          } else {
            timeStr = pad(minutes) + ":" + pad(seconds);
          }

          // 添加毫秒部分
          if (showMilliseconds) {
            timeStr += ":" + pad(milliseconds, 3);
          }
          return timeStr;
        }

        /**
         * 检查当前填入值是否与现有数字冲突
         * @param row 行号
         * @param col 列号
         * @param value 待检查的值
         * @param puzzleStr 题目
         * @param currentInputs 当前所有用户输入
         * @returns 冲突位置数组 [row, col][]
         */;
        GameLogic.checkConflicts = function checkConflicts(row, col, value, puzzleStr, currentInputs) {
          var conflicts = [];
          var gridStartRow = Math.floor(row / 3) * 3;
          var gridStartCol = Math.floor(col / 3) * 3;

          // 检查指定位置是否为可编辑位置（题目中为'0'）
          var isEditable = function isEditable(r, c) {
            return puzzleStr[r * 9 + c] === '0';
          };
          if (!isEditable(row, col)) {
            return conflicts;
          }

          // 获取单元格当前实际值（优先用户输入）
          var getCurrentValue = function getCurrentValue(r, c) {
            var key = r + "-" + c;
            return currentInputs.get(key) || (puzzleStr[r * 9 + c] !== '0' ? parseInt(puzzleStr[r * 9 + c]) : null);
          };

          // 检查行和列
          for (var i = 0; i < 9; i++) {
            // 行检查（跳过自己）
            if (i !== col) {
              var val = getCurrentValue(row, i);
              if (val === value) conflicts.push([row, i]);
            }

            // 列检查（跳过自己）
            if (i !== row) {
              var _val = getCurrentValue(i, col);
              if (_val === value) conflicts.push([i, col]);
            }
          }

          // 检查3x3宫格
          for (var r = gridStartRow; r < gridStartRow + 3; r++) {
            for (var c = gridStartCol; c < gridStartCol + 3; c++) {
              // 跳过自己和已经检查过的行列
              if (r === row && c === col) continue;
              if (r === row || c === col) continue;
              var _val2 = getCurrentValue(r, c);
              if (_val2 === value) conflicts.push([r, c]);
            }
          }
          return conflicts;
        }

        /**
         * 将Date对象转换为国际标准月日格式（MM-DD）
         * @param date Date对象（自动处理时区）
         * @returns ISO格式的月日字符串（如 "05-13"）
         */;
        GameLogic.toISOMonthDay = function toISOMonthDay(date) {
          console.log("date->", date);
          // 使用UTC方法避免时区干扰
          var month = (date.getMonth() + 1).toString().padStart(2, '0'); // 05
          var day = date.getDate().toString().padStart(2, '0'); // 13
          return month + "-" + day;
        };
        GameLogic.formatDateToYYYYMMDD = function formatDateToYYYYMMDD(date) {
          var year = date.getFullYear();
          var month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从 0 开始，补零
          var day = String(date.getDate()).padStart(2, '0'); // 补零

          return "" + year + month + day;
        };
        return GameLogic;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameManager.ts", ['cc'], function (exports) {
  var cclegacy, director;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }],
    execute: function () {
      cclegacy._RF.push({}, "73fa0CEfOhMdJUoZwoFIIZV", "GameManager", undefined);

      /** 游戏世界管理 */
      var GameManager = exports('GameManager', /*#__PURE__*/function () {
        function GameManager(root) {
          /** 界面根节点 */
          this.root = void 0;
          this.root = root;
        }

        /** 设置游戏动画速度 */
        var _proto = GameManager.prototype;
        _proto.setTimeScale = function setTimeScale(scale) {
          //@ts-ignore
          director.globalGameTimeScale = scale;
        }
        /** 获取游戏动画速度 */;
        _proto.getTimeScale = function getTimeScale() {
          //@ts-ignore
          return director.globalGameTimeScale;
        };
        return GameManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameManager2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './EventType.ts', './GameController.ts', './GameLogic.ts', './SettingsManager.ts', './GameView.ts', './Logger.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _extends, cclegacy, _decorator, Component, SudokuGameMode, EventType, GameController, GameLogic, SettingsManager, GameView, Logger, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SudokuGameMode = module.SudokuGameMode;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameController = module.GameController;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      SettingsManager = module.SettingsManager;
    }, function (module) {
      GameView = module.GameView;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "f2cb6FP4yVHDI+jcu7ghAKv", "GameManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameManager = exports('GameManager', (_dec = ccclass('GameManager'), _dec2 = property({
        type: GameView,
        tooltip: "GameView",
        visible: true
      }), _dec3 = property({
        type: GameController,
        tooltip: "GameController",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameManager, _Component);
        function GameManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "view", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "controller", _descriptor2, _assertThisInitialized(_this));
          _this.currentSelectKey = "";
          _this.gameMode = SudokuGameMode.NORMAL;
          _this.modeData = {};
          return _this;
        }
        var _proto = GameManager.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.onAdded = function onAdded(params) {
          //score: number, difficulty: string, time: number
          console.log("params->", params);
          this.gameMode = params.gameMode != undefined ? params.gameMode : this.gameMode;
          this.modeData = params.data != undefined ? params.data : this.modeData;
        };
        _proto.start = function start() {
          this.initMVC();
          oops.message.dispatchEvent(EventType.RESET_GAME, {
            data: {
              isGenerate: true
            }
          });
        };
        _proto.initMVC = function initMVC() {
          this.view.init();
          this.controller.init(this.view);
        }

        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.INPUT_NUMBER, this.onInputNumber, this);
          oops.message.on(EventType.INPUT_NOTE_NUMBER, this.onInputNoteNumber, this);
          oops.message.on(EventType.UNDO, this.onUndo, this);
          oops.message.on(EventType.RESET_GAME, this.onResetGame, this);
          oops.message.on(EventType.SELECT_CELL, this.onSelectCell, this);
          oops.message.on(EventType.TOUCH_NUMBERBTN, this.onTouchNumberbtn, this);
          oops.message.on(EventType.GAME_END, this.onGameEnd, this);
          oops.message.on(EventType.RESURRECTION_GAME, this.onResurrectionGame, this);
          oops.message.on(EventType.REFRESH_SETTING, this.onRefreshSetting, this);
          oops.message.on(EventType.REFRESH_HINT, this.onRefreshHint, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.INPUT_NUMBER, this.onInputNumber, this);
          oops.message.off(EventType.INPUT_NOTE_NUMBER, this.onInputNoteNumber, this);
          oops.message.off(EventType.UNDO, this.onUndo, this);
          oops.message.off(EventType.RESET_GAME, this.onResetGame, this);
          oops.message.off(EventType.SELECT_CELL, this.onSelectCell, this);
          oops.message.off(EventType.TOUCH_NUMBERBTN, this.onTouchNumberbtn, this);
          oops.message.off(EventType.GAME_END, this.onGameEnd, this);
          oops.message.off(EventType.RESURRECTION_GAME, this.onResurrectionGame, this);
          oops.message.off(EventType.REFRESH_SETTING, this.onRefreshSetting, this);
          oops.message.off(EventType.REFRESH_HINT, this.onRefreshHint, this);
        };
        _proto.pushUndoRecord = function pushUndoRecord(row, col) {
          var _this$view$model;
          if (!this.view.model) {
            return;
          }
          (_this$view$model = this.view.model) == null || _this$view$model.pushUndoRecord(row, col, [{
            row: row,
            col: col
          }], [{
            row: row,
            col: col
          }]);
          this.view.refreshOperateBtnsStatus([{
            name: "btn_undo",
            interactable: this.view.model.getUndoRecordLength() > 0
          }]);
        };
        _proto.onInputNumber = function onInputNumber(event, args) {
          var row = args.row;
          var col = args.col;
          var isUndo = args.isUndo;
          if (!isUndo) {
            this.pushUndoRecord(row, col);
          }
          this.controller.inputNumber(args);
        };
        _proto.onInputNoteNumber = function onInputNoteNumber(event, args) {
          var row = args.row;
          var col = args.col;
          var isUndo = args.isUndo;
          if (!isUndo) {
            this.pushUndoRecord(row, col);
          }
          this.controller.inputNoteNumber(args);
        };
        _proto.onUndo = function onUndo(event, args) {
          if (!this.view.model) {
            return;
          }
          var data = this.view.model.popUndoRecord();
          if (data) {
            this.view.undoRecord(data);
          }
          this.view.refreshOperateBtnsStatus([{
            name: "btn_undo",
            interactable: this.view.model.getUndoRecordLength() > 0
          }]);
        };
        _proto.onResetGame = function onResetGame(event, args) {
          this.gameMode = args.gameMode != undefined ? args.gameMode : this.gameMode;
          this.modeData = _extends({}, this.modeData, args.data || {});
          var isGenerate = this.modeData.isGenerate != undefined ? this.modeData.isGenerate : true;
          var isReset = this.modeData.isReset != undefined ? this.modeData.isReset : false;
          this.controller.resetGame(this.gameMode, this.modeData, isGenerate, isReset);
          this.view.refreshGameMode(this.gameMode, this.modeData);
          this.view.refreshOperateBtnsStatus([{
            name: "btn_undo",
            interactable: false
          }]);
        };
        _proto.onSelectCell = function onSelectCell(event, args) {
          var row = args.row;
          var col = args.col;
          var canFill = args.canFill;
          var isFinish = args.isFinish;
          this.currentSelectKey = row + "-" + col;
          this.view.refreshOperateBtnsStatus([{
            name: "btn_erase",
            interactable: canFill && !isFinish
          }]);
          this.view.refreshHint();
          this.view.setNumberBtnsInteractable(canFill && !isFinish);
        };
        _proto.onTouchNumberbtn = function onTouchNumberbtn(event, args) {
          var _this$view$model2,
            _this2 = this;
          var _this$currentSelectKe = this.currentSelectKey.split('-').map(Number),
            row = _this$currentSelectKe[0],
            col = _this$currentSelectKe[1];
          var gameData = (_this$view$model2 = this.view.model) == null ? void 0 : _this$view$model2.gameData;
          if (gameData) {
            var conflicts = GameLogic.checkConflicts(row, col, args, gameData.puzzleStr, gameData.userInputs);
            console.log("conflicts->", conflicts);
            if (!this.view.sudoGrid.checkInputIsExists(row, col, args)) {
              conflicts.forEach(function (_ref) {
                var row = _ref[0],
                  col = _ref[1];
                _this2.view.sudoGrid.playComboWarningSafe(row, col);
              });
            }
            oops.message.dispatchEvent(EventType.CHECK_TOUCH_NUMBERBTN_FINISH, {
              isError: conflicts.length > 0,
              value: args
            });
          }
        }

        // 游戏结束
        ;

        _proto.onGameEnd = function onGameEnd(event, args) {
          Logger.logModel(args, "游戏结束");
          if (args) {
            this.view.showSuccessPopup();
          } else {
            this.view.showFailPopup();
          }
        };
        _proto.onResurrectionGame = function onResurrectionGame(event, args) {
          Logger.logModel(args, "复活玩家1颗心");
          this.view.resurrectionGame();
        };
        _proto.onRefreshSetting = function onRefreshSetting(event, args) {
          var appSettings = SettingsManager.getInstance().getSettings();
          this.view.refreshSetting(appSettings);
        };
        _proto.onRefreshHint = function onRefreshHint(event, args) {
          if (!SettingsManager.getInstance().getSettings().debug.infiniteHints) {
            this.controller.updateHintLimit();
          }
        };
        return GameManager;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "controller", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameModel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './Configuration.ts', './EventType.ts', './GameLogic.ts', './SolverUtils.ts', './DailyChallengeManager.ts', './HistoryManager.ts', './SettingsManager.ts', './Oops.ts'], function (exports) {
  var _extends, _createClass, cclegacy, GameState, SudokuGameMode, Configuration, EventType, GameLogic, SolverUtils, DailyChallengeManager, HistoryManager, SettingsManager, oops;
  return {
    setters: [function (module) {
      _extends = module.extends;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameState = module.GameState;
      SudokuGameMode = module.SudokuGameMode;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      DailyChallengeManager = module.DailyChallengeManager;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      SettingsManager = module.SettingsManager;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e358e/fR/NI7olfvcTsGTfJ", "GameModel", undefined);
      var GameModel = exports('GameModel', /*#__PURE__*/function () {
        /**
         * 构造器重载：支持两种初始化方式
         * @param source 数据源：新游戏数据或缓存状态
         * @param difficulty 可选，仅在新游戏时需要
         * @param GameData 可选，仅在恢复游戏时需要
         */
        function GameModel(source, gameMode, modeData, displayDifficulty, actualDifficulty, GameData) {
          /**
           * 游戏状态存储对象
           * 
           * 结构说明：
           * - puzzle: 原始题目矩阵（0表示空白格）
           * - solution: 完整答案矩阵
           * - userInputs: 用户输入存储（仅记录可编辑单元格）
           *   - 键：单元格坐标字符串（格式"row-col"）
           *   - 值：用户输入的数字（0表示未填）
           * - difficulty: 当前游戏难度级别
           * - errorCount: 累计错误次数
           * - timeElapsed: 已消耗时间（秒）
           * - score: 当前得分
           */
          this.data = void 0;
          this.solution = [];
          this.gameMode = SudokuGameMode.NORMAL;
          this.modeData = {};
          // 玩家的操作记录
          this.undoRecords = [];
          this.lastSelectKey = "0-0";
          this.candidates = [];
          this.state = GameState.Ready;
          this.gameMode = gameMode;
          this.modeData = modeData;
          this.undoRecords = [];
          if (GameData) {
            // 从缓存状态恢复
            try {
              this.data = this.validateCache(GameData);
              console.log("成功加载缓存数据");
            } catch (error) {
              console.warn("缓存数据损坏，创建新游戏:", error);
              this.data = this.initNewGame(source, displayDifficulty, actualDifficulty);
            }
          } else {
            // 初始化新游戏
            this.data = this.initNewGame(source, displayDifficulty, actualDifficulty);
            if (this.gameMode === SudokuGameMode.DAILY_CHALLENGE) {
              DailyChallengeManager.getInstance().updateCurrentGame(this.data, this.modeData.date);
            } else if (this.gameMode === SudokuGameMode.NORMAL) {
              HistoryManager.getInstance().setCurrentGame(this.data);
            }
          }
          this.candidates = this.getValidCandidates();
          console.log("初始化->", this.deepCopyCandidates(this.candidates));
          console.log("数独题目", this.data);
        }

        // ================= 数据验证方法 =================

        /**
         * 缓存状态验证
         * @param data 待验证的缓存数据
         * @throws 当数据不完整或格式错误时
         */
        var _proto = GameModel.prototype;
        _proto.validateCache = function validateCache(data) {
          var requiredKeys = ['puzzleStr', 'solutionStr', 'userInputs', 'userInputNotes', 'displayDifficulty', 'actualDifficulty', 'errorCount', 'timeElapsed', 'score'];

          // 基础字段检查
          requiredKeys.forEach(function (key) {
            if (!(key in data)) {
              throw new Error("Invalid cache: Missing field " + key);
            }
          });

          // 矩阵维度验证
          if (data.puzzleStr.length !== 81 || data.solutionStr.length !== 81) {
            throw new Error("Invalid cache: Puzzle/Solution matrix must be 9x9");
          }
          this.solution = GameLogic.parseSudokuString(data.solutionStr);

          // 上局失败，重新复活
          if (data.hp < 0) {
            data.hp = Configuration.getInstance().getDifficultyConfig().maxErrors;
          }
          return _extends({}, data, {
            userInputs: new Map(data.userInputs),
            userInputNotes: new Map(data.userInputNotes)
          });
        }

        // ================= 初始化方法 =================

        /**
         * 初始化新游戏状态
         * @param data 数独基础数据
         * @param difficulty 难度级别
         */;
        _proto.initNewGame = function initNewGame(data, displayDifficulty, actualDifficulty) {
          this.solution = GameLogic.parseSudokuString(data.solutionStr);
          return {
            id: this.guid(),
            puzzleStr: data.puzzleStr,
            solutionStr: data.solutionStr,
            userInputs: new Map(data.blanks.map(function (_ref) {
              var row = _ref.row,
                col = _ref.col;
              return [row + "-" + col, 0];
            })),
            userInputNotes: new Map(data.blanks.map(function (_ref2) {
              var row = _ref2.row,
                col = _ref2.col;
              return [row + "-" + col, ""];
            })),
            displayDifficulty: displayDifficulty,
            actualDifficulty: actualDifficulty,
            errorCount: 0,
            hp: Configuration.getInstance().getDifficultyConfig().maxErrors,
            timeElapsed: 0,
            score: 0,
            hintLimit: Configuration.getInstance().getDifficultyConfig().hintLimit,
            progress: 0
          };
        }

        // ================= 数据访问方法 =================

        /**
         * 获取当前游戏状态的只读副本
         * @returns 冻结的深拷贝状态对象
         * 
         * 安全机制：
         * - 使用对象展开运算符创建副本
         * - Object.freeze防止意外修改
         * - 返回Map的浅拷贝（值类型为number可安全使用）
         */;
        _proto.getState = function getState() {
          return Object.freeze(_extends({}, this.data, {
            userInputs: new Map(this.data.userInputs)
          }));
        }

        // ================= 受控更新方法 =================

        /**
         * 更新指定单元格的用户输入
         * @param row 行号（0-8）
         * @param col 列号（0-8）
         * @param value 输入数字（0表示清除）
         * @param idUndo 是否是撤销操作
         * 
         * 注意事项：
         * - 不验证输入合法性（由控制器负责）
         * - 直接覆盖原有值
         */;
        _proto.updateInput = function updateInput(row, col, value, idUndo) {
          var cellKey = row + "-" + col;
          var previousValue = this.data.userInputs.get(cellKey);

          // 如果是擦除操作（value为0）
          if (value === 0) {
            this.data.userInputs["delete"](cellKey);
            this.updateScore(); // 更新分数
            return;
          }

          // 如果新值与旧值相同，不做任何处理
          if (previousValue === value) {
            return;
          }

          // 更新用户输入
          this.data.userInputs.set(cellKey, value);
          this.data.progress = this.calculateProgress();

          // 检查是否是错误答案
          if (value !== this.solution[row][col] && !idUndo) {
            this.data.errorCount++; // 错误次数累加
            //非无限生命值时计算hp
            if (!SettingsManager.getInstance().getSettings().debug.infiniteLives) {
              this.data.hp--;
              if (this.data.hp <= 0) {
                this.state = GameState.GameOver;
                if (this.gameMode === SudokuGameMode.NORMAL) {
                  HistoryManager.getInstance().setCurrentGame(this.data);
                  HistoryManager.getInstance().clearCurrentGame();
                }
                oops.message.dispatchEvent(EventType.GAME_END, false);
              }
            }
          }
          this.updateScore(); // 更新分数

          var currentSudokuString = this.getCurrentSudokuString();
          if (currentSudokuString === this.data.solutionStr) {
            this.state = GameState.GameOver;
            if (this.gameMode === SudokuGameMode.NORMAL) {
              HistoryManager.getInstance().completeCurrentGame(this.data);
            }
            oops.message.dispatchEvent(EventType.GAME_END, true);
          }
          if (this.data.hp > 0) {
            if (this.gameMode === SudokuGameMode.NORMAL) {
              HistoryManager.getInstance().updateCurrentGame(this.data);
            }
          }
          if (this.gameMode === SudokuGameMode.DAILY_CHALLENGE) {
            DailyChallengeManager.getInstance().updateCurrentGame(this.data, this.modeData.date);
          }
        }

        // 单独提取的分数计算逻辑
        ;

        _proto.updateScore = function updateScore() {
          var _this = this;
          var correctCount = 0;

          // 遍历所有用户输入，统计正确答案数量
          this.data.userInputs.forEach(function (value, cellKey) {
            var _cellKey$split$map = cellKey.split('-').map(Number),
              row = _cellKey$split$map[0],
              col = _cellKey$split$map[1];
            if (value === _this.solution[row][col]) {
              correctCount++;
            }
          });

          // 直接更新为当前正确数量（避免重复计分问题）
          this.data.score = correctCount;
        };
        _proto.updateHintLimit = function updateHintLimit() {
          if (this.data.hintLimit != undefined) {
            this.data.hintLimit = this.data.hintLimit - 1;
          }
          if (this.gameMode === SudokuGameMode.NORMAL) {
            HistoryManager.getInstance().updateCurrentGame(this.data);
          } else if (this.gameMode === SudokuGameMode.DAILY_CHALLENGE) {
            DailyChallengeManager.getInstance().updateCurrentGame(this.data, this.modeData.date);
          }
        };
        _proto.getInput = function getInput(row, col) {
          var cellKey = row + "-" + col;
          return this.data.userInputs.get(cellKey);
        }

        /**
         * 更新指定单元格的用户输入的笔记
         * @param row 行号（0-8）
         * @param col 列号（0-8）
         * @param value 输入数字（0表示清除）
         * @param idUndo 是否是撤销操作
         * 
         * 注意事项：
         * - 不验证输入合法性（由控制器负责）
         * - 直接覆盖原有值
         */;
        _proto.updateInputNote = function updateInputNote(row, col, value, idUndo) {
          var cellKey = row + "-" + col;
          this.data.userInputNotes.set(cellKey, value);
          if (this.gameMode === SudokuGameMode.NORMAL) {
            HistoryManager.getInstance().updateCurrentGame(this.data);
          } else if (this.gameMode === SudokuGameMode.DAILY_CHALLENGE) {
            DailyChallengeManager.getInstance().updateCurrentGame(this.data, this.modeData.date);
          }
        };
        _proto.getInputNote = function getInputNote(row, col) {
          var cellKey = row + "-" + col;
          return this.data.userInputNotes.get(cellKey);
        }

        /**
         * 生成有效数独状态字符串
         * 
         * 算法逻辑：
         * 1. 遍历9x9网格所有单元格
         * 2. 优先保留题目预设数字
         * 3. 验证用户输入与答案一致性
         * 4. 自动过滤错误输入
         * 5. 空位补0生成标准81位字符串
         */;
        _proto.getValidSudokuString = function getValidSudokuString() {
          var _this2 = this;
          // 预分配数组提升性能
          var grid = new Array(81).fill('0');

          // 先填充题目预设数字
          for (var i = 0; i < 81; i++) {
            if (this.data.puzzleStr[i] !== '0') {
              grid[i] = this.data.puzzleStr[i];
            }
          }

          // 合并验证用户输入
          this.data.userInputs.forEach(function (value, key) {
            // 解析行列坐标
            var _key$split$map = key.split('-').map(Number),
              row = _key$split$map[0],
              col = _key$split$map[1];
            var idx = row * 9 + col;

            // 跳过预设单元格（双重校验确保数据安全）
            if (_this2.data.puzzleStr[idx] !== '0') return;

            // 答案验证
            if (value.toString() === _this2.data.solutionStr[idx]) {
              grid[idx] = value.toString();
            }
          });
          return grid.join('');
        }

        /**
         * 获取当前完整数独状态（包含所有用户输入）
         * 
         * 逻辑说明：
         * 1. 克隆原始题目作为基础
         * 2. 用用户输入覆盖可编辑单元格
         * 3. 不验证输入正确性
         * 4. 始终返回81字符
         * 
         * 示例输入：
         * - puzzle:   "003000600..."
         * - userInputs: [ ['0-0',5], ['0-1',3] ]
         * 输出："530000600..."
         */;
        _proto.getCurrentSudokuString = function getCurrentSudokuString() {
          // 克隆题目作为初始状态
          var grid = [].concat(this.data.puzzleStr);

          // 覆盖用户输入（无论对错）
          this.data.userInputs.forEach(function (value, key) {
            var _key$split$map2 = key.split('-').map(Number),
              row = _key$split$map2[0],
              col = _key$split$map2[1];
            // 验证是否为可编辑单元格
            if (row < 0 || row > 8 || col < 0 || col > 8) return;
            var idx = row * 9 + col;
            if (grid[idx] === '0') {
              // 仅覆盖可编辑单元格
              grid[idx] = value.toString();
            }
          });
          return grid.join('');
        };
        _proto.update = function update(deltaTime) {
          if (this.state === GameState.Playing) {
            this.data.timeElapsed = this.data.timeElapsed + deltaTime;
            return true;
          }
          return false;
        };
        _proto.resurrectionGame = function resurrectionGame() {
          this.data.hp++;
          if (this.data.hp === 0) {
            this.data.hp = 1;
          }
          this.state = GameState.Playing;
        };
        _proto.guid = function guid() {
          return Date.now().toString(36) + Math.random().toString(36).substring(2);
        }

        /**
         * 计算当前游戏进度（0-1之间的小数）
         * @returns 当前完成度百分比（基于有效填写的数字）
         */;
        _proto.calculateProgress = function calculateProgress() {
          var _this3 = this;
          // 获取所有需要填写的空白格数量（初始时）
          var totalBlanks = this.data.puzzleStr.split('0').length - 1;

          // 统计当前已正确填写的数字数量
          var correctFilled = 0;
          this.data.userInputs.forEach(function (value, cellKey) {
            var _cellKey$split$map2 = cellKey.split('-').map(Number),
              row = _cellKey$split$map2[0],
              col = _cellKey$split$map2[1];
            if (value === _this3.solution[row][col]) {
              correctFilled++;
            }
          });

          // 计算完成度（避免除以零）
          return totalBlanks > 0 ? Math.min(1, correctFilled / totalBlanks) : 1;
        };
        _proto.pushUndoRecord = function pushUndoRecord(row, col, oldCellNumber, oldNotesStr) {
          var _this4 = this;
          var oldCellNumberRecord = {};
          oldCellNumber.forEach(function (element) {
            var key = element.row + "-" + element.col;
            oldCellNumberRecord[key] = _this4.getInput(element.row, element.col) || 0;
          });
          var oldNotesStrRecord = {};
          var candidates = {};
          oldNotesStr.forEach(function (element) {
            var key = element.row + "-" + element.col;
            oldNotesStrRecord[key] = _this4.getInputNote(element.row, element.col) || "";
            var set = _this4.getCandidateSet(element.row, element.col);
            if (set.size > 0) {
              candidates[key] = Array.from(set).join('');
            } else {
              candidates[key] = "";
            }
          });
          this.undoRecords.push({
            lastSelectKey: this.lastSelectKey,
            oldCellNumber: oldCellNumberRecord,
            oldNotesStr: oldNotesStrRecord,
            candidates: candidates
          });
          this.lastSelectKey = row + "-" + col;
          console.log("记录操作数据->", candidates);
        };
        _proto.getUndoRecordLength = function getUndoRecordLength() {
          return this.undoRecords.length;
        };
        _proto.popUndoRecord = function popUndoRecord() {
          var data = this.undoRecords.pop();
          if (data != null && data.candidates) {
            this.refreshCandidates(data.candidates);
          }
          return data;
        }

        /**
        * 获取有效候选数（处理重置后的空状态）
        */;
        _proto.getValidCandidates = function getValidCandidates() {
          var board = SolverUtils.gridStrToArray(this.getValidSudokuString());
          // 如果维护的候选数未初始化或为空，使用实时计算
          if (this.candidates.length === 0 || this.candidates.flat().every(function (set) {
            return set.size === 0;
          })) {
            return SolverUtils.getCandidates(board);
          }

          // 否则使用合并后的候选数
          return SolverUtils.getMergedCandidates(board, this.candidates);
        }

        /**
         * 将用户笔记转换为候选数集合
         * @param userInputNotes 用户笔记的Map，键为"row-col"，值为数字字符串（如"123"）
         * @returns 9x9的候选数集合数组
         */;
        _proto.convertNotesToCandidates = function convertNotesToCandidates() {
          var userInputNotes = this.data.userInputNotes;
          // 初始化9x9的空候选数数组
          var candidates = Array(9).fill(null).map(function () {
            return Array(9).fill(null).map(function () {
              return new Set();
            });
          });

          // 遍历所有笔记条目
          userInputNotes.forEach(function (notesStr, cellKey) {
            // 解析行列坐标
            var _cellKey$split$map3 = cellKey.split('-').map(Number),
              row = _cellKey$split$map3[0],
              col = _cellKey$split$map3[1];

            // 验证坐标有效性
            if (row >= 0 && row < 9 && col >= 0 && col < 9) {
              // 将笔记字符串转换为数字数组
              var numbers = notesStr.split('').map(Number).filter(function (n) {
                return !isNaN(n) && n >= 1 && n <= 9;
              }); // 过滤无效数字

              // 更新候选数集合
              candidates[row][col] = new Set(numbers);
            }
          });
          return candidates;
        };
        _proto.refreshCandidates = function refreshCandidates(candidates) {
          var _this5 = this;
          console.log("替换数据->", candidates);
          console.log("修改前->", this.deepCopyCandidates(this.candidates));
          Object.entries(candidates).forEach(function (_ref3) {
            var cellKey = _ref3[0],
              candidatesStr = _ref3[1];
            var _cellKey$split$map4 = cellKey.split('-').map(Number),
              row = _cellKey$split$map4[0],
              col = _cellKey$split$map4[1];

            // 确保坐标合法（0~8）
            if (row >= 0 && row < 9 && col >= 0 && col < 9) {
              // 将字符串 "357" 转换为 Set<number>
              var numbers = candidatesStr.split('').map(Number).filter(function (n) {
                return !isNaN(n) && n >= 1 && n <= 9;
              }); // 过滤无效数字

              _this5.candidates[row][col] = new Set(numbers);
            }
          });
          console.log("修改后->", this.deepCopyCandidates(this.candidates));
        }

        // 安全访问方法
        ;

        _proto.getCandidateSet = function getCandidateSet(row, col) {
          // 检查 candidates 是否已初始化且行列索引有效
          if (!this.candidates || row < 0 || row >= this.candidates.length || col < 0 || !this.candidates[row] || col >= this.candidates[row].length) {
            return new Set(); // 返回空 Set 避免崩溃
          }

          return this.candidates[row][col];
        };
        _proto.deepCopyCandidates = function deepCopyCandidates(candidates) {
          return candidates.map(function (row) {
            return row.map(function (set) {
              return set ? new Set(set) : new Set();
            });
          });
        };
        _createClass(GameModel, [{
          key: "gameData",
          get: function get() {
            return this.data;
          }
        }, {
          key: "gameState",
          get: function get() {
            return this.state;
          },
          set: function set(state) {
            this.state = state;
          }
        }]);
        return GameModel;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameQueryConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './StringUtil.ts'], function (exports) {
  var _createClass, cclegacy, sys, oops, StringUtil;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      StringUtil = module.StringUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d09acUxcU5Hg4kUjKxVEWLy", "GameQueryConfig", undefined);

      /**
       * 获取和处理浏览器地址栏参数
       * @example
       * config.query.data.username
       */
      var GameQueryConfig = exports('GameQueryConfig', /*#__PURE__*/function () {
        /** 构造函数 */
        function GameQueryConfig() {
          this._data = null;
          if (!sys.isBrowser) {
            this._data = {};
            return;
          }
          this._data = this.parseUrl();
          if (!this._data["username"]) {
            this._data["username"] = StringUtil.guid();
          }
          oops.log.logConfig(this._data, "查询参数");
        }
        var _proto = GameQueryConfig.prototype;
        _proto.parseUrl = function parseUrl() {
          if (typeof window !== "object") return {};
          if (!window.document) return {};
          var url = window.document.location.href.toString();
          var u = url.split("?");
          if (typeof u[1] == "string") {
            u = u[1].split("&");
            var get = {};
            for (var i = 0, l = u.length; i < l; ++i) {
              var j = u[i];
              var x = j.indexOf("=");
              if (x < 0) {
                continue;
              }
              var key = j.substring(0, x);
              var value = j.substring(x + 1);
              get[decodeURIComponent(key)] = value && decodeURIComponent(value);
            }
            return get;
          } else {
            return {};
          }
        };
        _createClass(GameQueryConfig, [{
          key: "debug",
          get: /** 调试模式开关 */
          function get() {
            return this._data["debug"];
          }

          /** 玩家帐号名 */
        }, {
          key: "username",
          get: function get() {
            return this._data["username"];
          }

          /** 语言 */
        }, {
          key: "lang",
          get: function get() {
            return this._data["lang"] || "zh";
          }
        }, {
          key: "data",
          get: /** 浏览器地址栏原始参数 */
          function get() {
            return this._data;
          }
        }]);
        return GameQueryConfig;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameStatistics.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "15ea1XMf/RHhJjPVobqSCiD", "GameStatistics", undefined); // ========== 接口定义 ==========
      /**
       * 游戏统计数据接口
       */
      /**
       * 难度统计数据接口
       */
      /**
       * 难度统计数据实现类
       */
      var DifficultyStatisticsImpl = exports('DifficultyStatisticsImpl', function DifficultyStatisticsImpl() {
        this.gamesPlayed = 0;
        this.gamesCompleted = 0;
        this.perfectGames = 0;
        this.bestTime = 0;
        this.totalTime = 0;
        this.currentStreak = 0;
        this.longestStreak = 0;
        this.winRate = 0;
        /** 获取平均用时（秒）- 基于已完成的局数*/
        this.averageTime = 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './Configuration.ts', './EventType.ts', './UIConfig.ts', './GameLogic.ts', './SudokuSolverEngine.ts', './HistoryManager.ts', './SettingsManager.ts', './HintBtn.ts', './HintPageView.ts', './NumberBtn.ts', './SudokuGrid.ts', './Logger.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, Button, Label, Toggle, Component, SudokuGameMode, Config, GameState, Configuration, EventType, UIID, GameLogic, SudokuSolverEngine, HistoryManager, SettingsManager, HintBtn, HintPageView, NumberBtn, SudokuGrid, Logger, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      Toggle = module.Toggle;
      Component = module.Component;
    }, function (module) {
      SudokuGameMode = module.SudokuGameMode;
      Config = module.default;
      GameState = module.GameState;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      SudokuSolverEngine = module.SudokuSolverEngine;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      SettingsManager = module.SettingsManager;
    }, function (module) {
      HintBtn = module.HintBtn;
    }, function (module) {
      HintPageView = module.HintPageView;
    }, function (module) {
      NumberBtn = module.NumberBtn;
    }, function (module) {
      SudokuGrid = module.SudokuGrid;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;
      cclegacy._RF.push({}, "52b92ZFaKxEG5TXjXfRtuP7", "GameView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameView = exports('GameView', (_dec = ccclass('GameView'), _dec2 = property({
        type: SudokuGrid,
        tooltip: "SudokuGrid",
        visible: true
      }), _dec3 = property({
        type: [NumberBtn],
        tooltip: "NumberBtn",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "operateBtnRoot",
        visible: true
      }), _dec5 = property({
        type: Button,
        tooltip: "btn_reset",
        visible: true
      }), _dec6 = property({
        type: Button,
        tooltip: "btn_resume",
        visible: true
      }), _dec7 = property({
        type: Node,
        tooltip: "btn_suspend",
        visible: true
      }), _dec8 = property({
        type: Node,
        tooltip: "cellRoot",
        visible: true
      }), _dec9 = property({
        type: Label,
        tooltip: "关卡难度描述",
        visible: true
      }), _dec10 = property({
        type: Label,
        tooltip: "分数",
        visible: true
      }), _dec11 = property({
        type: Label,
        tooltip: "生命值",
        visible: true
      }), _dec12 = property({
        type: Label,
        tooltip: "计时器",
        visible: true
      }), _dec13 = property({
        type: HintPageView,
        tooltip: "提示导航",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameView, _Component);
        function GameView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sudoGrid", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "numberBtns", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "operateBtnRoot", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_reset", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_resume", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggle_suspend", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cellRoot", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "difficulty", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "score", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hp", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "timer", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hintPageView", _descriptor12, _assertThisInitialized(_this));
          _this.model = void 0;
          _this.gameMode = SudokuGameMode.NORMAL;
          _this.modeData = void 0;
          _this.operateBtnRootStatus = new Map();
          return _this;
        }
        var _proto = GameView.prototype;
        _proto.init = function init() {
          this.sudoGrid.init();
          this.refreshSetting(SettingsManager.getInstance().getSettings());
        };
        _proto.refreshGameModel = function refreshGameModel(model) {
          this.model = model;
        };
        _proto.refreshGameMode = function refreshGameMode(gameMode, data) {
          this.gameMode = gameMode;
          this.modeData = data;
        };
        _proto.refreshDifficulty = function refreshDifficulty() {
          if (!this.model) {
            return;
          }
          this.difficulty.node.active = true;
          if (this.gameMode === SudokuGameMode.DAILY_CHALLENGE) {
            this.difficulty.string = GameLogic.toISOMonthDay(this.modeData.date);
            this.btn_reset.node.active = false;
          } else {
            this.btn_reset.node.active = true;
            var difficultyConfig = Config.difficulty[this.model.gameData.displayDifficulty];
            this.difficulty.string = oops.language.getLangByID(difficultyConfig.label);
          }
        };
        _proto.refreshNumberBtnCount = function refreshNumberBtnCount() {
          if (!this.model) return;
          var counts = new Array(9).fill(0);
          var currentSudokuString = this.model.getCurrentSudokuString();

          // 统计阶段：O(n) 时间复杂度
          for (var i = 0; i < currentSudokuString.length; i++) {
            var num = parseInt(currentSudokuString[i], 10);
            if (num >= 1 && num <= 9) {
              counts[num - 1]++; // 数组索引从0开始对应数字1-9
            }
          }

          // 更新阶段：O(m) 时间复杂度 
          this.numberBtns.forEach(function (element, index) {
            var number = index + 1;
            element.refresh(number, 9 - counts[index]); // 直接使用预统计结果
          });
        };

        _proto.refreshScoreAndHP = function refreshScoreAndHP() {
          if (this.model) {
            this.score.string = this.model.gameData.score.toString();
            if (SettingsManager.getInstance().getSettings().debug.infiniteLives) {
              this.hp.string = "∞";
            } else {
              this.hp.string = this.model.gameData.hp.toString();
            }
          }
        };
        _proto.undoRecord = function undoRecord(data) {
          this.sudoGrid.undoRecord(data);
        };
        _proto.resetGame = /*#__PURE__*/function () {
          var _resetGame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (this.model) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  this.btn_resume.node.active = false;
                  this.cellRoot.active = true;
                  this.hintPageView.node.active = false;
                  this.sudoGrid.refreshSudokuData(this.model.gameData);
                  this.refreshDifficulty();
                  this.refreshNumberBtnCount();
                  this.refreshScoreAndHP();
                  this.refreshHint();
                  SudokuSolverEngine.getInstance().reset();
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function resetGame() {
            return _resetGame.apply(this, arguments);
          }
          return resetGame;
        }();
        _proto.onStartGame = function onStartGame() {
          oops.message.dispatchEvent(EventType.RESET_GAME, {
            data: {
              isGenerate: true
            }
          });
        };
        _proto.update = function update(deltaTime) {
          if (this.model) {
            var isModify = this.model.update(deltaTime);
            if (isModify) {
              this.timer.string = GameLogic.formatTimeDisplay(this.model.gameData.timeElapsed);
            }
          }
        };
        _proto.pauseGame = function pauseGame() {
          if (this.model) {
            this.model.gameState = GameState.Paused;
          }
          this.setNumberBtnsInteractable(false);
          var child = this.operateBtnRoot.children;
          child.forEach(function (element, index) {
            var btn = element.getComponent(Button);
            if (btn) {
              btn.interactable = false;
            }
          });
          this.btn_resume.node.active = true;
          this.cellRoot.active = false;
        };
        _proto.resumeGame = function resumeGame() {
          var _this2 = this;
          if (this.model) {
            this.model.gameState = GameState.Playing;
          }
          this.refreshNumberBtnCount();
          this.operateBtnRootStatus.forEach(function (interactable, name) {
            var btnNode = _this2.operateBtnRoot.getChildByName(name);
            var btn = btnNode == null ? void 0 : btnNode.getComponent(Button);
            if (btn) {
              btn.interactable = interactable;
            }
          });
          this.btn_resume.node.active = false;
          this.cellRoot.active = true;
        };
        _proto.setNumberBtnsInteractable = function setNumberBtnsInteractable(interactable) {
          if (interactable) {
            this.refreshNumberBtnCount();
          } else {
            this.numberBtns.forEach(function (element, index) {
              element.setDisable();
            });
          }
        };
        _proto.refreshSuspend = function refreshSuspend(target, isResume) {
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle == null ? void 0 : toggle.isChecked;
          var img_pauseTimer = target.getChildByName("img_pauseTimer");
          if (img_pauseTimer) {
            img_pauseTimer.active = false;
          }
          var img_resumeTimer = target.getChildByName("img_resumeTimer");
          if (img_resumeTimer) {
            img_resumeTimer.active = false;
          }
          if (isResume === true) {
            if (img_pauseTimer) {
              img_pauseTimer.active = true;
              this.resumeGame();
            }
          } else {
            if (!isChecked) {
              if (img_pauseTimer) {
                img_pauseTimer.active = true;
                this.resumeGame();
              }
            } else {
              if (img_resumeTimer) {
                img_resumeTimer.active = true;
                this.pauseGame();
              }
            }
          }
        };
        _proto.resurrectionGame = function resurrectionGame() {
          if (this.model) {
            this.model.resurrectionGame();
            this.refreshScoreAndHP();
          }
        };
        _proto.refreshSetting = function refreshSetting(appSettings) {
          var btn_quickNotes = this.operateBtnRoot.getChildByName("btn_quickNotes");
          if (btn_quickNotes) {
            var difficultyConfig = Configuration.getInstance().getDifficultyConfig();
            btn_quickNotes.active = appSettings.notes.autoNotes || difficultyConfig.isShowAutoNote ? true : false;
          }

          // 更新阶段：O(m) 时间复杂度 
          this.numberBtns.forEach(function (element, index) {
            element.setCountLabelVisible(appSettings.other.unsolvedDigitsCount); // 直接使用预统计结果
          });

          this.refreshHint();
          this.refreshScoreAndHP();
        };
        _proto.refreshHint = function refreshHint() {
          if (!this.model) {
            return;
          }
          var btnNode = this.operateBtnRoot.getChildByName("btn_hint");
          var hintBtn = btnNode == null ? void 0 : btnNode.getComponent(HintBtn);
          if (hintBtn) {
            hintBtn.setCount(this.model.gameData.hintLimit);
          }
          this.refreshOperateBtnsStatus([{
            name: "btn_hint",
            interactable: this.model.gameData.hintLimit == undefined || this.model.gameData.hintLimit > 0 || SettingsManager.getInstance().getSettings().debug.infiniteHints
          }]);
        }

        // 刷新各个按钮的点击状态
        ;

        _proto.refreshOperateBtnsStatus = function refreshOperateBtnsStatus(status) {
          var _this3 = this;
          // console.log("status->", status);
          status.forEach(function (element) {
            var btnNode = _this3.operateBtnRoot.getChildByName(element.name);
            var btn = btnNode == null ? void 0 : btnNode.getComponent(Button);
            if (btn) {
              btn.interactable = element.interactable;
              _this3.operateBtnRootStatus.set(element.name, element.interactable);
            }
          });
        };
        _proto.refreshHintStep = function refreshHintStep(step) {
          var _step$highlights,
            _this4 = this,
            _step$highlightNotes;
          this.sudoGrid.resetHint();
          (_step$highlights = step.highlights) == null || _step$highlights.forEach(function (highlight) {
            _this4.sudoGrid.refreshHintHighlightCell(highlight);
          });
          (_step$highlightNotes = step.highlightNotes) == null || _step$highlightNotes.forEach(function (highlightNote) {
            _this4.sudoGrid.refreshHintHighlightNoteCell(highlightNote);
          });
          this.sudoGrid.setHintNumber(step.position.row, step.position.col, step.value);
        };
        _proto.showSuccessPopup = function showSuccessPopup() {
          var _this$model;
          oops.gui.openAsync(UIID.SuccessPopup, {
            gameData: (_this$model = this.model) == null ? void 0 : _this$model.gameData,
            difficulty: this.difficulty.string
          });
        };
        _proto.showFailPopup = function showFailPopup() {
          var _this$model2;
          oops.gui.openAsync(UIID.FailPopup, {
            gameData: (_this$model2 = this.model) == null ? void 0 : _this$model2.gameData
          });
        };
        _proto.onResumeGame = function onResumeGame() {
          this.refreshSuspend(this.toggle_suspend, true);
          var toggle = this.toggle_suspend.getComponent(Toggle);
          if (toggle) {
            toggle.isChecked = true;
          }
        };
        _proto.onBack = function onBack() {
          oops.gui.replaceAsync(UIID.Game, UIID.Lobby);
        };
        _proto.onReset = function onReset() {
          HistoryManager.getInstance().setCurrentGame();
          this.onResumeGame();
          this.onStartGame();
        };
        _proto.onSuspend = function onSuspend(event, customEventData) {
          var target = event.currentTarget;
          this.refreshSuspend(target);
        };
        _proto.onUndo = function onUndo() {
          oops.message.dispatchEvent(EventType.UNDO);
          this.refreshNumberBtnCount();
        };
        _proto.onErase = function onErase() {
          oops.message.dispatchEvent(EventType.ERASE_NUMBER);
          this.refreshNumberBtnCount();
        };
        _proto.onNote = function onNote(event, customEventData) {
          var target = event.currentTarget;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle == null ? void 0 : toggle.isChecked;
          var label_on = target.getChildByName("label_on");
          if (label_on) {
            label_on.active = false;
          }
          var label_off = target.getChildByName("label_off");
          if (label_off) {
            label_off.active = false;
          }
          if (isChecked) {
            if (label_on) {
              label_on.active = true;
            }
          } else {
            if (label_off) {
              label_off.active = true;
            }
          }
          oops.message.dispatchEvent(EventType.SWITCH_NOTE, isChecked);
        };
        _proto.onQuickNote = function onQuickNote() {
          if (this.model) {
            var candidates = GameLogic.getCandidates(this.model.getValidSudokuString());
            Logger.logModel(candidates, "k快速笔记数据->");
            if (candidates) {
              this.sudoGrid.refreshQuickNote(candidates);
            }
          }
        };
        _proto.onHint = function onHint() {
          var _this$model3,
            _this$model4,
            _this5 = this;
          if (!this.model) {
            return;
          }
          if (SettingsManager.getInstance().getSettings().debug.infiniteHints || ((_this$model3 = this.model) == null ? void 0 : _this$model3.gameData.hintLimit) == undefined || (_this$model4 = this.model) != null && _this$model4.gameData.hintLimit && this.model.gameData.hintLimit > 0) {
            var _this$model5;
            var grid = (_this$model5 = this.model) == null ? void 0 : _this$model5.getValidSudokuString();
            if (grid) {
              var steps = SudokuSolverEngine.getInstance().getNextStep(grid, this.model.convertNotesToCandidates(), this.model.gameData.solutionStr);
              console.log("提示步骤", steps);
              if (!steps) {
                oops.message.dispatchEvent(EventType.HINT_NUMBER);
              } else {
                this.hintPageView.node.active = true;
                this.hintPageView.initData(steps, function (step) {
                  return _this5.refreshHintStep(step);
                }, function (step) {
                  return _this5.onHintComplete(step);
                });
              }
            }
          }
        };
        _proto.onHintComplete = function onHintComplete(step) {
          var _step$highlights2,
            _this$model6,
            _step$highlights3,
            _this6 = this;
          if (!this.model) {
            return;
          }
          this.hintPageView.node.active = false;
          var oldNotesStr = [];
          var candidates = {};
          (_step$highlights2 = step.highlights) == null || _step$highlights2.forEach(function (highlight) {
            oldNotesStr.push({
              row: highlight.position.row,
              col: highlight.position.col
            });
            if (highlight.candidates) {
              var key = highlight.position.row + "-" + highlight.position.col;
              candidates[key] = highlight.candidates.join('');
            }
          });
          (_this$model6 = this.model) == null || _this$model6.pushUndoRecord(step.position.row, step.position.col, [{
            row: step.position.row,
            col: step.position.col
          }], oldNotesStr);
          this.refreshOperateBtnsStatus([{
            name: "btn_undo",
            interactable: this.model.getUndoRecordLength() > 0
          }]);
          (_step$highlights3 = step.highlights) == null || _step$highlights3.forEach(function (highlight) {
            _this6.sudoGrid.hintNoteComplete(highlight);
          });
          this.sudoGrid.hintComplete(step.position.row, step.position.col, step.value);
          this.model.refreshCandidates(candidates);
          oops.message.dispatchEvent(EventType.REFRESH_HINT);
        };
        _proto.onShowSetting = function onShowSetting() {
          oops.gui.openAsync(UIID.SettingPopup);
        };
        return GameView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sudoGrid", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "numberBtns", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "operateBtnRoot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_reset", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btn_resume", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "toggle_suspend", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "cellRoot", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "difficulty", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "score", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "hp", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "timer", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "hintPageView", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HiddenSinglesStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, _extends, cclegacy, HighlightConfig, BLANK_CHAR, HighlightAreaType, BaseStrategy, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
      HighlightAreaType = module.HighlightAreaType;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "312f0Gj6oZEi412tJ9oHgdx", "HiddenSinglesStrategy", undefined);
      var HiddenSinglesStrategy = exports('HiddenSinglesStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(HiddenSinglesStrategy, _BaseStrategy);
        function HiddenSinglesStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 2;
          return _this;
        }
        var _proto = HiddenSinglesStrategy.prototype;
        /**
         * 执行策略，每次只返回一个最优解的多步骤推理过程
         * @param board 当前数独棋盘状态
         * @param candidates 每个单元格的候选数字集合
         * @returns 返回解决步骤数组，如果没有找到隐藏单数则返回null
         */
        _proto.execute = function execute(board, candidates) {
          // 1. 最后检查宫中的隐藏单数
          var boxStep = this.findSingleInBoxes(board, candidates);
          if (boxStep) return boxStep;

          // 2. 首先检查行中的隐藏单数
          var rowStep = this.findSingleInRows(board, candidates);
          if (rowStep) return rowStep;

          // 3. 然后检查列中的隐藏单数
          var colStep = this.findSingleInColumns(board, candidates);
          if (colStep) return colStep;
          return null;
        }

        /**
         * 在行中寻找隐藏单数
         * @param board 当前数独棋盘状态
         * @param candidates 候选数字集合
         * @returns 返回解决步骤数组或null
         */;
        _proto.findSingleInRows = function findSingleInRows(board, candidates) {
          for (var row = 0; row < 9; row++) {
            var rowCandidates = this.getRowCandidates(row, candidates);
            var hiddenSingle = this.findHiddenSingle(rowCandidates);
            if (hiddenSingle) {
              var value = hiddenSingle.value,
                col = hiddenSingle.pos;
              if (board[row][col] === BLANK_CHAR) {
                return this.buildDetailedSteps(board, row, col, value, HighlightAreaType.ROW, candidates);
              }
            }
          }
          return null;
        }

        /**
         * 在列中寻找隐藏单数
         * @param board 当前数独棋盘状态
         * @param candidates 候选数字集合
         * @returns 返回解决步骤数组或null
         */;
        _proto.findSingleInColumns = function findSingleInColumns(board, candidates) {
          for (var col = 0; col < 9; col++) {
            var colCandidates = this.getColCandidates(col, candidates);
            var hiddenSingle = this.findHiddenSingle(colCandidates);
            if (hiddenSingle) {
              var value = hiddenSingle.value,
                row = hiddenSingle.pos;
              if (board[row][col] === BLANK_CHAR) {
                return this.buildDetailedSteps(board, row, col, value, HighlightAreaType.COLUMN, candidates);
              }
            }
          }
          return null;
        }

        /**
         * 在宫中寻找隐藏单数
         * @param board 当前数独棋盘状态
         * @param candidates 候选数字集合
         * @returns 返回解决步骤数组或null
         */;
        _proto.findSingleInBoxes = function findSingleInBoxes(board, candidates) {
          for (var box = 0; box < 9; box++) {
            var boxCandidates = this.getBoxCandidates(box, candidates);
            var hiddenSingle = this.findHiddenSingle(boxCandidates);
            if (hiddenSingle) {
              var value = hiddenSingle.value,
                index = hiddenSingle.pos;
              var row = Math.floor(box / 3) * 3 + Math.floor(index / 3);
              var col = box % 3 * 3 + index % 3;
              if (board[row][col] === BLANK_CHAR) {
                return this.buildDetailedSteps(board, row, col, value, HighlightAreaType.BOX, candidates);
              }
            }
          }
          return null;
        }

        /**
         * 从候选位置映射中查找隐藏单数
         * @param valPositions 数字到位置数组的映射
         * @returns 返回找到的隐藏单数信息或null
         */;
        _proto.findHiddenSingle = function findHiddenSingle(valPositions) {
          for (var _iterator = _createForOfIteratorHelperLoose(valPositions.entries()), _step; !(_step = _iterator()).done;) {
            var _step$value = _step.value,
              value = _step$value[0],
              positions = _step$value[1];
            if (positions.length === 1) {
              return {
                value: value,
                pos: positions[0]
              };
            }
          }
          return null;
        }

        /**
         * 构建详细的解决步骤
         * @param board 当前数独棋盘状态
         * @param row 目标单元格行号
         * @param col 目标单元格列号
         * @param value 要填入的数字
         * @param areaType 高亮区域类型(行、列或宫)
         * @returns 返回详细的解决步骤数组
         */;
        _proto.buildDetailedSteps = function buildDetailedSteps(board, row, col, value, areaType, candidates) {
          var steps = [];

          // 步骤1: 高亮目标区域(行/列/宫)
          steps.push(this.createHighlightAreaStep(board, row, col, value, areaType));

          // 步骤2: 显示区域内各单元格的候选数字
          steps.push(this.createShowCandidatesStep(board, row, col, value, areaType, candidates));

          // 步骤3: 确定唯一可能位置并填入数字
          steps.push(this.createFinalDecisionStep(board, row, col, value, areaType, candidates));
          return steps;
        };
        _proto.createHighlightAreaStep = function createHighlightAreaStep(board, row, col, value, areaType) {
          var _this2 = this;
          // 获取目标区域的所有单元格
          var areaCells = this.getAreaCells(row, col, areaType);
          var generateDescription = function generateDescription() {
            return _this2.buildAreaHighlightExplanation(row, col, value, areaType);
          };
          return {
            technique: this.name,
            stepId: 1,
            position: {
              row: row,
              col: col
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: areaCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor
              };
            })
          };
        };
        _proto.createShowCandidatesStep = function createShowCandidatesStep(board, row, col, value, areaType, candidates) {
          var _this3 = this;
          var areaCells = this.getAreaCells(row, col, areaType);
          var sameNumbersOnBoard = this.findAllSameNumbersOnBoard(board, value);
          var candidatesInArea = this.getCandidatesInArea(board, row, col, areaType, candidates);
          // 使用封装函数
          var _this$buildHighlights = this.buildHighlightsMap(areaType, areaCells, sameNumbersOnBoard, {
              row: row,
              col: col
            }, board, candidatesInArea, value),
            highlights = _this$buildHighlights.highlights,
            highlightNotes = _this$buildHighlights.highlightNotes;
          var generateDescription = function generateDescription() {
            return _this3.buildCandidatesExplanation(row, col, value, areaType);
          };
          return {
            technique: this.name,
            stepId: 2,
            position: {
              row: row,
              col: col
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: highlights,
            highlightNotes: highlightNotes
          };
        };
        _proto.createFinalDecisionStep = function createFinalDecisionStep(board, row, col, value, areaType, candidates) {
          var _this4 = this;
          var areaCells = this.getAreaCells(row, col, areaType);
          var candidatesInArea = this.getCandidatesInArea(board, row, col, areaType, candidates);
          var sameNumbersOnBoard = this.findAllSameNumbersOnBoard(board, value);
          var affectedCells = this.getAffectedCells(row, col, value, board);

          // 使用封装函数
          var _this$buildHighlights2 = this.buildHighlightsMap(areaType, areaCells, sameNumbersOnBoard, {
              row: row,
              col: col
            }, board, candidatesInArea, value),
            highlights = _this$buildHighlights2.highlights,
            highlightNotes = _this$buildHighlights2.highlightNotes;
          var generateDescription = function generateDescription() {
            return _this4.buildFinalDecisionExplanation(row, col, value, areaType);
          };
          return {
            technique: this.name,
            stepId: 3,
            position: {
              row: row,
              col: col
            },
            value: value,
            get description() {
              return generateDescription();
            },
            highlights: highlights,
            highlightNotes: highlightNotes
          };
        }

        /**
         * 构建高亮单元格映射
         */;
        _proto.buildHighlightsMap = function buildHighlightsMap(areaType, areaCells, sameNumbersOnBoard, targetCell, board, candidatesInArea, value) {
          var _this5 = this;
          // 初始化已检查单元格集合
          var checkedCells = new Set();
          // 使用Map存储高亮单元格（自动去重）
          var highlightsMap = new Map();
          var highlightNotes = [];
          // 获取所有非空单元格（去重）
          var nonEmptyCells = new Set();

          // 辅助函数：添加或更新高亮单元格（保留原有未修改的属性）
          var addHighlight = function addHighlight(cell) {
            var key = cell.position.row + "," + cell.position.col;
            if (!highlightsMap.has(key)) {
              // 如果单元格不存在，直接添加
              highlightsMap.set(key, cell);
            } else {
              // 如果单元格已存在，合并属性（新值优先，保留原有未修改的属性）
              var existingCell = highlightsMap.get(key);
              highlightsMap.set(key, _extends({}, existingCell, cell));
            }
          };

          // 1. 高亮基础区域所有单元格（默认背景）
          areaCells.forEach(function (pos) {
            addHighlight({
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor
            });
          });
          // 2. 显示候选数字并标记与目标值相同的候选
          candidatesInArea.forEach(function (candidates, index) {
            var pos = areaCells[index];
            if (board[pos.row][pos.col] === BLANK_CHAR) {
              var candidatesArray = Array.from(candidates);
              addHighlight({
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: candidatesArray
              });

              // 检查候选数字中是否包含目标值
              if (candidates.has(value)) {
                highlightNotes.push({
                  position: pos,
                  backgroundColor: HighlightConfig.sameNumber.background,
                  textColor: HighlightConfig.sameNumber.textColor,
                  value: value
                });
              }
            }
          });

          // 2. 处理相同数字及其关联区域
          sameNumbersOnBoard.forEach(function (pos) {
            // 确定关联区域类型（行→宫/列，列→宫/行，宫→行/列）
            var relatedAreas = [];
            switch (areaType) {
              case HighlightAreaType.ROW:
                relatedAreas.push(HighlightAreaType.BOX, HighlightAreaType.COLUMN);
                break;
              case HighlightAreaType.COLUMN:
                relatedAreas.push(HighlightAreaType.BOX, HighlightAreaType.ROW);
                break;
              case HighlightAreaType.BOX:
                relatedAreas.push(HighlightAreaType.ROW, HighlightAreaType.COLUMN);
                break;
            }

            // 处理每个关联区域
            relatedAreas.forEach(function (relatedArea) {
              var relatedAreaCells = _this5.getAreaCells(pos.row, pos.col, relatedArea);

              // 找出未检查过的相交单元格
              var newIntersections = areaCells.filter(function (areaPos) {
                var posKey = areaPos.row + "," + areaPos.col;
                var isIntersection = relatedAreaCells.some(function (relatedPos) {
                  return relatedPos.row === areaPos.row && relatedPos.col === areaPos.col;
                });
                if (isIntersection && !checkedCells.has(posKey)) {
                  checkedCells.add(posKey);
                  return true;
                }
                return false;
              });

              // 检查是否需要显示笔记

              // 添加相交单元格
              newIntersections.forEach(function (interPos) {
                var key = interPos.row + "," + interPos.col;
                if (board[interPos.row][interPos.col] === BLANK_CHAR) {
                  nonEmptyCells.add(key);
                }
              });

              // 添加基础区域中的非空单元格
              areaCells.forEach(function (areaPos) {
                var key = areaPos.row + "," + areaPos.col;
                if (board[areaPos.row][areaPos.col] != BLANK_CHAR) {
                  nonEmptyCells.add(key);
                }
              });

              // 高亮整个关联区域
              if (newIntersections.length > 0) {
                relatedAreaCells.forEach(function (relatedPos) {
                  addHighlight({
                    position: relatedPos,
                    backgroundColor: HighlightConfig.relatedArea.background,
                    textColor: HighlightConfig.relatedArea.textColor
                  });
                });
              }
            });

            // 高亮相同数字本身（覆盖之前的高亮）
            addHighlight({
              position: pos,
              backgroundColor: HighlightConfig.sameNumber.background,
              textColor: HighlightConfig.sameNumber.textColor
            });
          });

          // 3. 特别高亮目标单元格（最高优先级）
          addHighlight({
            position: targetCell,
            backgroundColor: HighlightConfig.targetCell.background,
            textColor: HighlightConfig.targetCell.textColor
          });

          // 如果总数不等于8，显示笔记
          if (nonEmptyCells.size === 8) {
            highlightNotes = [];
            highlightsMap.forEach(function (highlights) {
              highlights.candidates = undefined;
            });
          }

          // 返回结果
          return {
            highlights: Array.from(highlightsMap.values()),
            highlightNotes: highlightNotes,
            checkedCells: checkedCells
          };
        }

        /**
         * 获取受相同数字影响的单元格
         * @param row 目标单元格行号
         * @param col 目标单元格列号
         * @param value 数字值
         * @param board 数独棋盘
         * @returns 返回受影响单元格的位置数组
         */;
        _proto.getAffectedCells = function getAffectedCells(row, col, value, board) {
          // 获取同行、同列、同宫的所有单元格
          var rowCells = this.getAreaCells(row, col, HighlightAreaType.ROW);
          var colCells = this.getAreaCells(row, col, HighlightAreaType.COLUMN);
          var boxCells = this.getAreaCells(row, col, HighlightAreaType.BOX);

          // 合并所有相关单元格（去重）
          var allRelatedCells = [].concat(new Set([].concat(rowCells, colCells, boxCells).map(function (pos) {
            return pos.row + "," + pos.col;
          }))).map(function (str) {
            var _str$split$map = str.split(',').map(Number),
              r = _str$split$map[0],
              c = _str$split$map[1];
            return {
              row: r,
              col: c
            };
          });

          // 排除已经填入数字的单元格和目标单元格本身
          return allRelatedCells.filter(function (pos) {
            return !(pos.row === row && pos.col === col) && board[pos.row][pos.col] === BLANK_CHAR;
          });
        }

        /**
         * 查找整个棋盘中所有与指定值相同的数字位置
         * @param board 数独棋盘
         * @param value 要查找的数字
         * @returns 返回所有匹配的位置数组
         */;
        _proto.findAllSameNumbersOnBoard = function findAllSameNumbersOnBoard(board, value) {
          var positions = [];
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (Number(board[row][col]) === value) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          return positions;
        };
        _proto.getAreaCells = function getAreaCells(row, col, areaType) {
          switch (areaType) {
            case HighlightAreaType.ROW:
              return Array.from({
                length: 9
              }, function (_, i) {
                return {
                  row: row,
                  col: i
                };
              });
            case HighlightAreaType.COLUMN:
              return Array.from({
                length: 9
              }, function (_, i) {
                return {
                  row: i,
                  col: col
                };
              });
            case HighlightAreaType.BOX:
              var boxRow = Math.floor(row / 3) * 3;
              var boxCol = Math.floor(col / 3) * 3;
              var cells = [];
              for (var r = 0; r < 3; r++) {
                for (var c = 0; c < 3; c++) {
                  cells.push({
                    row: boxRow + r,
                    col: boxCol + c
                  });
                }
              }
              return cells;
            default:
              return [];
          }
        };
        _proto.getCandidatesInArea = function getCandidatesInArea(board, row, col, areaType, candidates) {
          var areaCells = this.getAreaCells(row, col, areaType);
          var candidatesInArea = [];
          areaCells.forEach(function (pos) {
            if (board[pos.row][pos.col] === BLANK_CHAR) {
              // 直接从传入的 candidates 数组中获取
              candidatesInArea.push(new Set(candidates[pos.row][pos.col]));
            } else {
              candidatesInArea.push(new Set());
            }
          });
          return candidatesInArea;
        };
        _proto.buildAreaHighlightExplanation = function buildAreaHighlightExplanation(row, col, value, areaType) {
          var _areaNames;
          row = row + 1;
          col = col + 1;
          var areaNames = (_areaNames = {}, _areaNames[HighlightAreaType.ROW] = oops.language.getLangByID("HiddenSinglesStrategy.areaRow", {
            row: row
          }), _areaNames[HighlightAreaType.COLUMN] = oops.language.getLangByID("HiddenSinglesStrategy.areaColumn", {
            col: col
          }), _areaNames[HighlightAreaType.BOX] = oops.language.getLangByID("HiddenSinglesStrategy.areaBox"), _areaNames);
          return oops.language.getLangByID("HiddenSinglesStrategy.areaHighlightExplanation", {
            name: this.name,
            row: row,
            col: col,
            description: this.description,
            areaName: areaNames[areaType]
          });
        };
        _proto.buildCandidatesExplanation = function buildCandidatesExplanation(row, col, value, areaType) {
          var _areaNames2;
          var areaNames = (_areaNames2 = {}, _areaNames2[HighlightAreaType.ROW] = oops.language.getLangByID("HiddenSinglesStrategy.areaRow", {
            row: row + 1
          }), _areaNames2[HighlightAreaType.COLUMN] = oops.language.getLangByID("HiddenSinglesStrategy.areaColumn", {
            col: col + 1
          }), _areaNames2[HighlightAreaType.BOX] = oops.language.getLangByID("HiddenSinglesStrategy.areaBox"), _areaNames2);
          return oops.language.getLangByID("HiddenSinglesStrategy.candidatesExplanation", {
            name: this.name,
            areaName: areaNames[areaType],
            value: value
          });
        };
        _proto.buildFinalDecisionExplanation = function buildFinalDecisionExplanation(row, col, value, areaType) {
          var _areaNames3;
          var areaNames = (_areaNames3 = {}, _areaNames3[HighlightAreaType.ROW] = oops.language.getLangByID("HiddenSinglesStrategy.areaRow", {
            row: row + 1
          }), _areaNames3[HighlightAreaType.COLUMN] = oops.language.getLangByID("HiddenSinglesStrategy.areaColumn", {
            col: col + 1
          }), _areaNames3[HighlightAreaType.BOX] = oops.language.getLangByID("HiddenSinglesStrategy.areaBox"), _areaNames3);
          return oops.language.getLangByID("HiddenSinglesStrategy.finalDecisionExplanation", {
            name: this.name,
            areaName: areaNames[areaType],
            value: value,
            row: row + 1,
            col: col + 1
          });
        }

        /**
         * 获取行中所有数字的候选位置
         * @param row 行号
         * @param candidates 候选数字集合
         * @returns 返回数字到列索引数组的映射
         */;
        _proto.getRowCandidates = function getRowCandidates(row, candidates) {
          var valPositions = new Map();
          for (var col = 0; col < 9; col++) {
            for (var _iterator2 = _createForOfIteratorHelperLoose(candidates[row][col]), _step2; !(_step2 = _iterator2()).done;) {
              var val = _step2.value;
              if (!valPositions.has(val)) {
                valPositions.set(val, []);
              }
              valPositions.get(val).push(col);
            }
          }
          return valPositions;
        }

        /**
         * 获取列中所有数字的候选位置
         * @param col 列号
         * @param candidates 候选数字集合
         * @returns 返回数字到行索引数组的映射
         */;
        _proto.getColCandidates = function getColCandidates(col, candidates) {
          var valPositions = new Map();
          for (var row = 0; row < 9; row++) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(candidates[row][col]), _step3; !(_step3 = _iterator3()).done;) {
              var val = _step3.value;
              if (!valPositions.has(val)) {
                valPositions.set(val, []);
              }
              valPositions.get(val).push(row);
            }
          }
          return valPositions;
        }

        /**
         * 获取宫中所有数字的候选位置
         * @param box 宫号(0-8)
         * @param candidates 候选数字集合
         * @returns 返回数字到宫内相对位置索引的映射
         */;
        _proto.getBoxCandidates = function getBoxCandidates(box, candidates) {
          var valPositions = new Map();
          var boxRow = Math.floor(box / 3) * 3;
          var boxCol = box % 3 * 3;
          for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 3; j++) {
              var row = boxRow + i;
              var col = boxCol + j;
              for (var _iterator4 = _createForOfIteratorHelperLoose(candidates[row][col]), _step4; !(_step4 = _iterator4()).done;) {
                var val = _step4.value;
                if (!valPositions.has(val)) {
                  valPositions.set(val, []);
                }
                valPositions.get(val).push(i * 3 + j); // 保存宫内的相对位置索引
              }
            }
          }

          return valPositions;
        }

        /**
         * 获取两个单元格所在的行/列/宫的所有单元格
         * @param pos1 第一个单元格位置
         * @param pos2 第二个单元格位置
         * @returns 返回共享的行/列/宫的所有单元格，如果没有共享区域则返回空数组
         */;
        _proto.getSharedAreaCells = function getSharedAreaCells(pos1, pos2) {
          // 检查是否在同一行
          if (pos1.row === pos2.row) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: pos1.row,
                col: col
              };
            });
          }

          // 检查是否在同一列
          if (pos1.col === pos2.col) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: pos1.col
              };
            });
          }

          // 检查是否在同一宫
          var boxRow1 = Math.floor(pos1.row / 3);
          var boxCol1 = Math.floor(pos1.col / 3);
          var boxRow2 = Math.floor(pos2.row / 3);
          var boxCol2 = Math.floor(pos2.col / 3);
          if (boxRow1 === boxRow2 && boxCol1 === boxCol2) {
            var boxStartRow = boxRow1 * 3;
            var boxStartCol = boxCol1 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxStartRow + r,
                  col: boxStartCol + c
                });
              }
            }
            return cells;
          }

          // 没有任何共享区域
          return [];
        };
        _createClass(HiddenSinglesStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("HiddenSinglesStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("HiddenSinglesStrategy.description");
          }
        }]);
        return HiddenSinglesStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HiddenSubsetStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cdb540DNe9P37rQ6SBwhBV5", "HiddenSubsetStrategy", undefined);
      /**
       * 隐藏对/三元组/四元组策略
       */
      var HiddenSubsetStrategy = exports('HiddenSubsetStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(HiddenSubsetStrategy, _BaseStrategy);
        function HiddenSubsetStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 4;
          return _this;
        }
        var _proto = HiddenSubsetStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          // 检查2-4个数字的组合
          for (var subsetSize = 2; subsetSize <= 4; subsetSize++) {
            var result = this.checkHiddenSubsets(board, candidates, subsetSize);
            if (result) return result;
          }
          return null;
        }

        /**
         * 检查指定大小的隐藏子集
         */;
        _proto.checkHiddenSubsets = function checkHiddenSubsets(board, candidates, subsetSize) {
          // 检查行、列、宫
          for (var _iterator = _createForOfIteratorHelperLoose([HighlightAreaType.ROW, HighlightAreaType.COLUMN, HighlightAreaType.BOX]), _step; !(_step = _iterator()).done;) {
            var areaType = _step.value;
            for (var areaIndex = 0; areaIndex < 9; areaIndex++) {
              var subsetInfo = this.findHiddenSubsetInArea(board, candidates, areaType, areaIndex, subsetSize);
              if (subsetInfo) {
                return this.createHiddenSubsetSteps(board, candidates, subsetInfo, areaType);
              }
            }
          }
          return null;
        }

        /**
         * 在指定区域查找隐藏子集
         */;
        _proto.findHiddenSubsetInArea = function findHiddenSubsetInArea(board, candidates, areaType, areaIndex, subsetSize) {
          var areaCells = this.getAreaCells(areaType, areaIndex);
          var blankCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] === BLANK_CHAR;
          });

          // 获取区域内所有候选数字
          var allValues = new Set();
          blankCells.forEach(function (pos) {
            candidates[pos.row][pos.col].forEach(function (v) {
              return allValues.add(v);
            });
          });

          // 检查所有可能的数字组合
          var _loop = function _loop() {
              var values = _step2.value;
              var valueSet = new Set(values);
              var candidateCells = blankCells.filter(function (pos) {
                var cellCands = candidates[pos.row][pos.col];
                return [].concat(valueSet).some(function (v) {
                  return cellCands.has(v);
                });
              });

              // 检查是否是隐藏子集：这些数字只出现在这些单元格中
              if (candidateCells.length === subsetSize) {
                // 检查这些单元格是否包含其他数字
                var hasOtherValues = candidateCells.some(function (pos) {
                  var cellCands = candidates[pos.row][pos.col];
                  return [].concat(cellCands).some(function (v) {
                    return !valueSet.has(v);
                  });
                });
                if (hasOtherValues) {
                  return {
                    v: {
                      cells: candidateCells,
                      values: valueSet,
                      affectedCells: candidateCells,
                      // 影响的是这些单元格本身
                      areaType: areaType,
                      areaIndex: areaIndex
                    }
                  };
                }
              }
            },
            _ret;
          for (var _iterator2 = _createForOfIteratorHelperLoose(SolverUtils.getCombinations([].concat(allValues), subsetSize)), _step2; !(_step2 = _iterator2()).done;) {
            _ret = _loop();
            if (_ret) return _ret.v;
          }
          return null;
        }

        /**
         * 创建解题步骤
         */;
        _proto.createHiddenSubsetSteps = function createHiddenSubsetSteps(board, candidates, subsetInfo, highlightAreaType) {
          var steps = [];
          var cells = subsetInfo.cells,
            values = subsetInfo.values;
          var subsetName = this.getSubsetName(values.size);

          // 步骤1：发现隐藏子集
          steps.push(this.createDiscoveryStep(board, candidates, cells, values, highlightAreaType));

          // 步骤2：解释隐藏子集规则
          steps.push(this.createRuleExplanationStep(board, candidates, cells, values, highlightAreaType));

          // 步骤3：展示隐藏子集影响
          steps.push(this.createImpactDemonstrationStep(board, candidates, cells, values, highlightAreaType));

          // 步骤4：执行候选数移除
          steps.push(this.createRemovalExecutionStep(board, candidates, cells, values, highlightAreaType));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, subsetCells, values, areaType) {
          var _this2 = this;
          var areaName = this.getAreaName(areaType);
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("HiddenSubsetStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), this.getOtherCellsInArea(board, areaCells, subsetCells).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined,
                value: board[pos.row][pos.col] !== BLANK_CHAR ? board[pos.row][pos.col] : undefined
              };
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, subsetCells, values, areaType) {
          var _this3 = this;
          var valueList = [].concat(values).sort();
          var areaName = this.getAreaName(areaType);
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("HiddenSubsetStrategy.ruleExplanationDes", {
              name: _this3.name,
              valueListStr: valueList.join(','),
              areaName: areaName,
              subsetCellsLength: subsetCells.length
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), this.getOtherCellsInArea(board, areaCells, subsetCells).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined,
                value: board[pos.row][pos.col] !== BLANK_CHAR ? board[pos.row][pos.col] : undefined
              };
            })),
            highlightNotes: [].concat(subsetCells.flatMap(function (pos) {
              return [].concat(candidates[pos.row][pos.col]).filter(function (v) {
                return values.has(v);
              }).map(function (v) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: v
                };
              });
            }))
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, subsetCells, values, areaType) {
          var _this4 = this;
          var valueList = [].concat(values).sort();
          var areaName = this.getAreaName(areaType);
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("HiddenSubsetStrategy.ImpactDemonstrationDes", {
              name: _this4.name,
              valueListStr: valueList.join(','),
              areaName: areaName
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), this.getOtherCellsInArea(board, areaCells, subsetCells).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined,
                value: board[pos.row][pos.col] !== BLANK_CHAR ? board[pos.row][pos.col] : undefined
              };
            })),
            highlightNotes: [].concat(subsetCells.flatMap(function (pos) {
              return [].concat(candidates[pos.row][pos.col]).filter(function (v) {
                return !values.has(v);
              }).map(function (v) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintRemoveCell.background,
                  textColor: HighlightConfig.hintRemoveCell.textColor,
                  value: v
                };
              });
            }), subsetCells.flatMap(function (pos) {
              return [].concat(candidates[pos.row][pos.col]).filter(function (v) {
                return values.has(v);
              }).map(function (v) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: v
                };
              });
            }))
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, subsetCells, values, areaType) {
          var _this5 = this;
          var valueList = [].concat(values).sort();
          var areaName = this.getAreaName(areaType);
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);

          // 实际从候选数中移除其他数字
          subsetCells.forEach(function (pos) {
            var cellCandidates = candidates[pos.row][pos.col];
            var toRemove = [].concat(cellCandidates).filter(function (v) {
              return !values.has(v);
            });
            toRemove.forEach(function (v) {
              return cellCandidates["delete"](v);
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("HiddenSubsetStrategy.removalExecutionDes", {
              name: _this5.name,
              valueListStr: valueList.join(',')
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), this.getOtherCellsInArea(board, areaCells, subsetCells).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined,
                value: board[pos.row][pos.col] !== BLANK_CHAR ? board[pos.row][pos.col] : undefined
              };
            })),
            highlightNotes: [].concat(subsetCells.flatMap(function (pos) {
              return [].concat(candidates[pos.row][pos.col]).map(function (v) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: v
                };
              });
            }))
          };
        };
        _proto.getSubsetName = function getSubsetName(size) {
          return {
            2: oops.language.getLangByID("HiddenSubsetStrategy.subsetName2"),
            3: oops.language.getLangByID("HiddenSubsetStrategy.subsetName3"),
            4: oops.language.getLangByID("HiddenSubsetStrategy.subsetName4")
          }[size] || oops.language.getLangByID("HiddenSubsetStrategy.subsetName1");
        };
        _proto.getAreaName = function getAreaName(areaType) {
          var _HighlightAreaType$RO;
          return (_HighlightAreaType$RO = {}, _HighlightAreaType$RO[HighlightAreaType.ROW] = oops.language.getLangByID("strategy.row"), _HighlightAreaType$RO[HighlightAreaType.COLUMN] = oops.language.getLangByID("strategy.col"), _HighlightAreaType$RO[HighlightAreaType.BOX] = oops.language.getLangByID("strategy.box"), _HighlightAreaType$RO)[areaType];
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _proto.getHighlightAreaCells = function getHighlightAreaCells(pos, areaType) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: pos.row,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: pos.col
              };
            });
          } else {
            var boxRow = Math.floor(pos.row / 3) * 3;
            var boxCol = Math.floor(pos.col / 3) * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _proto.getOtherCellsInArea = function getOtherCellsInArea(board, areaCells, subsetCells) {
          return areaCells.filter(function (pos) {
            return !subsetCells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            });
          });
        };
        _createClass(HiddenSubsetStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("HiddenSubsetStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("HiddenSubsetStrategy.description");
          }
        }]);
        return HiddenSubsetStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HintBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SettingsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, Label, Component, SettingsManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SettingsManager = module.SettingsManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "e9d0eNgrqRBN7luZUxlDv14", "HintBtn", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HintBtn = exports('HintBtn', (_dec = ccclass('HintBtn'), _dec2 = property({
        type: CCInteger,
        tooltip: "剩余提示次数",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "剩余提示次数Label",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HintBtn, _Component);
        function HintBtn() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "count", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "countLabel", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = HintBtn.prototype;
        _proto.setCount = function setCount(count) {
          if (SettingsManager.getInstance().getSettings().debug.infiniteHints) {
            this.countLabel.string = "∞";
          } else {
            if (count != undefined) {
              this.count = count;
              this.countLabel.string = count.toString();
            } else {
              this.countLabel.string = "∞";
            }
          }
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return HintBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "count", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "countLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HintConfig.ts", ['cc', './Configuration.ts'], function (exports) {
  var cclegacy, Configuration;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Configuration = module.Configuration;
    }],
    execute: function () {
      cclegacy._RF.push({}, "add6aCq3itPN5BNZogxA5uy", "HintConfig", undefined);
      var HighlightConfig = exports('HighlightConfig', {
        get defaultCell() {
          var theme = Configuration.getInstance().getThemeConfig();
          return {
            background: theme.cellBackground,
            textColor: theme.cellTextColor
          };
        },
        get relatedArea() {
          var theme = Configuration.getInstance().getThemeConfig();
          return {
            background: theme.relatedAreaBackground,
            textColor: theme.relatedAreaTextColor
          };
        },
        get sameNumber() {
          var theme = Configuration.getInstance().getThemeConfig();
          return {
            background: theme.sameNumberBackground,
            textColor: theme.sameNumberTextColor
          };
        },
        get targetCell() {
          var theme = Configuration.getInstance().getThemeConfig();
          return {
            background: theme.selectedCellBackground,
            textColor: theme.selectedCellTextColor
          };
        },
        get hintCell() {
          var theme = Configuration.getInstance().getThemeConfig();
          return {
            background: theme.hintBackground,
            textColor: theme.hintTextColor
          };
        },
        get hintRemoveCell() {
          var theme = Configuration.getInstance().getThemeConfig();
          return {
            background: theme.hintRemoveBackground,
            textColor: theme.hintRemoveTextColor
          };
        },
        // y-wing 配色
        get y_wingABCell() {
          return {
            background: "#FF0000",
            // 纯红色
            textColor: "#FFFFFF"
          };
        },
        get y_wingBCCell() {
          return {
            background: "#00FF00",
            // 纯绿色
            textColor: "#000000"
          };
        },
        get y_wingACCell() {
          return {
            background: "#0000FF",
            // 纯蓝色
            textColor: "#FFFFFF"
          };
        },
        get y_wingAB_X_BCCell() {
          // 红(AB) ∩ 绿(BC) = 黄色
          return {
            background: "#FFFF00",
            // 黄色 (红+绿)
            textColor: "#000000"
          };
        },
        get y_wingAB_X_ACCell() {
          // 红(AB) ∩ 蓝(AC) = 紫色
          return {
            background: "#FF00FF",
            // 紫色 (红+蓝)
            textColor: "#000000"
          };
        },
        get y_wingBC_X_ACCell() {
          // 绿(BC) ∩ 蓝(AC) = 青色
          return {
            background: "#00FFFF",
            // 青色 (绿+蓝)
            textColor: "#000000"
          };
        },
        get sameRelatedAreaCell() {
          // 相同的关联单元格
          return {
            background: "#f7c5c5",
            // 粉色
            textColor: "#000000"
          };
        },
        /**
         * XY链(首尾链)专用配色方案 
         */
        get xyChainStartCell() {
          return {
            background: "#26C6DA",
            // 明亮的蓝绿色(与红色形成强对比)
            textColor: "#000000" // 黑色文字保持清晰
          };
        },

        get xyChainEndCell() {
          return {
            background: "#26C6DA",
            // 明亮的蓝绿色(与红色形成强对比)
            textColor: "#000000" // 黑色文字保持清晰
          };
        },

        /**
         * 翼专用配色方案 
         */
        get wingCell() {
          return {
            background: "#26C6DA",
            // 明亮的蓝绿色(与红色形成强对比)
            textColor: "#000000" // 黑色文字保持清晰
          };
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HintPageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './InfinitePageViewItem.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, InfinitePageViewItem, EventType, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      InfinitePageViewItem = module.InfinitePageViewItem;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "63cfcUXCQdLDJKtxjOiCZ5h", "HintPageItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HintPageItem = exports('HintPageItem', (_dec = ccclass('HintPageItem'), _dec2 = property({
        type: Label,
        tooltip: "描述",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_InfinitePageViewItem) {
        _inheritsLoose(HintPageItem, _InfinitePageViewItem);
        function HintPageItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _InfinitePageViewItem.call.apply(_InfinitePageViewItem, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _this.data = void 0;
          return _this;
        }
        var _proto = HintPageItem.prototype;
        _proto.onLoad = function onLoad() {
          oops.message.on(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        };
        _proto.onDestroy = function onDestroy() {
          oops.message.off(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        };
        _proto.update = function update(deltaTime) {};
        _proto.updateView = function updateView(data) {
          console.log("刷新界面", data);
          // this.label.string = data;
          this.data = data;
          this.label.string = data.description;
        };
        _proto.onRefreshLanguage = function onRefreshLanguage() {
          if (this.data) {
            this.label.string = this.data.description;
          }
        };
        return HintPageItem;
      }(InfinitePageViewItem), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HintPageView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './InfinitePageView.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component, InfinitePageView, InfinitePageViewEvent, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      InfinitePageView = module.InfinitePageView;
      InfinitePageViewEvent = module.InfinitePageViewEvent;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "9c0f3N35lhHfpdin2jkpTDJ", "HintPageView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HintPageView = exports('HintPageView', (_dec = ccclass('HintPageView'), _dec2 = property({
        type: InfinitePageView,
        tooltip: "InfinitePageView",
        visible: true
      }), _dec3 = property({
        type: Button,
        tooltip: "btn_nextPage",
        visible: true
      }), _dec4 = property({
        type: Button,
        tooltip: "btn_prevPage",
        visible: true
      }), _dec5 = property({
        type: Button,
        tooltip: "btn_finish",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HintPageView, _Component);
        function HintPageView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "infinitePageView", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_nextPage", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_prevPage", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn_finish", _descriptor4, _assertThisInitialized(_this));
          _this._stepRenderer = void 0;
          _this._completionHandler = void 0;
          _this._data = [];
          _this._selectedDate = null;
          return _this;
        }
        var _proto = HintPageView.prototype;
        _proto.onLoad = function onLoad() {
          oops.message.on(InfinitePageViewEvent.PAGE_CHANGED, this.onPageChanged, this);
        };
        _proto.onDestroy = function onDestroy() {
          oops.message.off(InfinitePageViewEvent.PAGE_CHANGED, this.onPageChanged, this);
        };
        _proto.onPageChanged = function onPageChanged(event, args) {
          console.log("onPageChanged->", args);
          var pageState = this.infinitePageView.getPageState();
          this.btn_nextPage.node.active = pageState.canNext;
          this.btn_prevPage.node.active = pageState.canPrev;
          this.btn_finish.node.active = !pageState.canNext;
          if (args.currentIndex != undefined) {
            this._selectedDate = this._data[args.currentIndex];
            if (this._stepRenderer && this._selectedDate) {
              this._stepRenderer(this._selectedDate);
            }
          }
        };
        _proto.initData = function initData(steps, onStepRender, onComplete) {
          this._data = steps;
          this._stepRenderer = onStepRender;
          this._completionHandler = onComplete;
          this.infinitePageView.setData(steps, 0);
          this._selectedDate = this._data[0];
          if (this._stepRenderer && this._selectedDate) {
            this._stepRenderer(this._selectedDate);
          }
        }

        /** 切换到上一页 */;
        _proto.onPrevPage = function onPrevPage() {
          this.infinitePageView.prevPage();
        }

        /** 切换到下一页 */;
        _proto.onNextPage = function onNextPage() {
          this.infinitePageView.nextPage();
        }

        /**
         * 开始游戏
         */;
        _proto.onFinish = function onFinish() {
          console.log("完成提示");
          if (this._completionHandler) {
            this._completionHandler(this._data[this._data.length - 1]);
          }
        };
        return HintPageView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "infinitePageView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_nextPage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_prevPage", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_finish", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HistoryDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AItemRenderer.ts', './HistoryItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, UITransform, size, AItemRenderer, HistoryItem;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      UITransform = module.UITransform;
      size = module.size;
    }, function (module) {
      AItemRenderer = module.AItemRenderer;
    }, function (module) {
      HistoryItem = module.HistoryItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "0d96bOUNA1DMIxSnkPOvAWY", "HistoryDayItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HistoryDayItem = exports('HistoryDayItem', (_dec = ccclass('HistoryDayItem'), _dec2 = property({
        type: Node,
        tooltip: "historyItem",
        visible: true
      }), _dec3 = property({
        type: Node,
        tooltip: "头部",
        visible: true
      }), _dec4 = property({
        type: Label,
        tooltip: "日期",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_AItemRenderer) {
        _inheritsLoose(HistoryDayItem, _AItemRenderer);
        function HistoryDayItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _AItemRenderer.call.apply(_AItemRenderer, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "historyItem", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "headNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "key", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = HistoryDayItem.prototype;
        _proto.dataChanged = function dataChanged() {
          this.updateDisplay(this.data);
        };
        _proto.getItemSize = function getItemSize() {
          var viewTrans = this.node.getComponent(UITransform);
          var headTrans = this.headNode.getComponent(UITransform);
          var historyTrans = this.historyItem.getComponent(UITransform);
          if ('key' in this.data) {
            return size(viewTrans == null ? void 0 : viewTrans.width, headTrans == null ? void 0 : headTrans.height);
          }
          return size(viewTrans == null ? void 0 : viewTrans.width, historyTrans == null ? void 0 : historyTrans.height);
        };
        _proto.updateDisplay = function updateDisplay(historyData) {
          // console.log("historyData->",historyData)
          if ('key' in historyData) {
            this.headNode.active = true;
            this.historyItem.active = false;
            this.key.string = historyData.key;
          } else {
            this.headNode.active = false;
            this.historyItem.active = true;
            // historyData 是 { data: GameData } 类型
            var gameData = historyData.data;
            // console.log("Data:", gameData);
            var historyItem = this.historyItem.getComponent(HistoryItem);
            historyItem == null || historyItem.init(gameData);
          }
        };
        return HistoryDayItem;
      }(AItemRenderer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "historyItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "headNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "key", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HistoryItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './UIConfig.ts', './GameLogic.ts', './HistoryManager.ts', './SudokuGrid.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Label, Component, Config, UIID, GameLogic, HistoryManager, SudokuGrid, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Config = module.default;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      SudokuGrid = module.SudokuGrid;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "d4722+TG59KNbXcPPdrTM2d", "HistoryItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HistoryItem = exports('HistoryItem', (_dec = ccclass('HistoryItem'), _dec2 = property({
        type: SudokuGrid,
        tooltip: "SudokuGrid",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "label_difficulty",
        visible: true
      }), _dec4 = property({
        type: Label,
        tooltip: "label_time",
        visible: true
      }), _dec5 = property({
        type: Label,
        tooltip: "label_error",
        visible: true
      }), _dec6 = property({
        type: Label,
        tooltip: "label_process",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HistoryItem, _Component);
        function HistoryItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sudoGrid", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label_difficulty", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label_time", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label_error", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label_process", _descriptor5, _assertThisInitialized(_this));
          _this.data = null;
          _this.isInit = false;
          return _this;
        }
        var _proto = HistoryItem.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.update = function update(deltaTime) {};
        _proto.init = function init(data) {
          if (!this.isInit) {
            this.sudoGrid.init(true);
            this.isInit = true;
          }
          this.data = data;
          this.sudoGrid.refreshSudokuData(data, true);
          this.label_difficulty.string = oops.language.getLangByID(Config.difficulty[data.displayDifficulty].label);
          this.label_time.string = GameLogic.formatTimeDisplay(data.timeElapsed);
          this.label_error.string = data.errorCount.toString();
          this.label_process.string = this.getSudokuProgress(data) + "%";
        };
        _proto.onStartGame = /*#__PURE__*/function () {
          var _onStartGame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!this.data) {
                    _context.next = 7;
                    break;
                  }
                  HistoryManager.getInstance().setCurrentGame(this.data);
                  oops.gui.waitOpen();
                  _context.next = 5;
                  return oops.gui.replaceAsync(UIID.Lobby, UIID.Game);
                case 5:
                  oops.gui.waitClose();
                  oops.gui.remove(UIID.HistoryPopup);
                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onStartGame() {
            return _onStartGame.apply(this, arguments);
          }
          return onStartGame;
        }()
        /**
         * 获取数独游戏完成百分比
         * @param gameData 游戏数据对象
         * @returns 完成百分比 (0-100的整数)
         */;

        _proto.getSudokuProgress = function getSudokuProgress(gameData) {
          // 基础校验
          if (!(gameData != null && gameData.solutionStr) || gameData.solutionStr.length !== 81) return 0;
          var correctCount = 0;

          // 遍历玩家所有已填数字
          gameData.userInputs.forEach(function (value, key) {
            var _key$split$map = key.split('-').map(Number),
              row = _key$split$map[0],
              col = _key$split$map[1];
            var solutionIndex = row * 9 + col;

            // 对比玩家输入与解决方案
            if (gameData.solutionStr[solutionIndex] === value.toString()) {
              correctCount++;
            }
          });

          // 计算百分比（已正确填写的格子占全部空格的比例）
          var totalEmptyCells = 81 - (gameData.puzzleStr.match(/0/g) || []).length;
          var progress = totalEmptyCells > 0 ? Math.round(correctCount / totalEmptyCells * 100) : 100;
          return Math.min(progress, 100); // 确保不超过100%
        };

        return HistoryItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sudoGrid", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label_difficulty", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "label_time", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "label_error", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "label_process", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HistoryManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './DifficultyManager.ts', './Oops.ts'], function (exports) {
  var _extends, cclegacy, SudokuDifficulty, DifficultyManager, oops;
  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      SudokuDifficulty = module.SudokuDifficulty;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "40aa7sDmvdE4bDlW/owMFZ8", "HistoryManager", undefined);

      /**
       * 数独游戏历史记录管理器
       * 
       * 功能：
       * 1. 管理当前游戏状态
       * 2. 按日期分类保存游戏记录
       * 3. 区分已完成和未完成游戏
       * 4. 记录各难度最佳成绩
       * 5. 限制历史记录数量
       */
      var HistoryManager = exports('HistoryManager', /*#__PURE__*/function () {
        function HistoryManager() {}

        /**
         * 获取 HistoryManager 单例实例
         * @returns HistoryManager 实例
         */
        HistoryManager.getInstance = function getInstance() {
          if (!HistoryManager.instance) {
            HistoryManager.instance = new HistoryManager();
          }
          return HistoryManager.instance;
        }

        // ========== 公开方法 ==========

        /**
         * 获取完整历史记录（按天组织）
         * @returns 结构化历史记录对象
         */;
        var _proto = HistoryManager.prototype;
        _proto.getHistory = function getHistory() {
          var historyStr = oops.storage.get(HistoryManager.HISTORY_STORAGE_KEY);
          return historyStr ? JSON.parse(historyStr) : this.getDefaultHistory();
        }

        /**
         * 获取当前游戏状态
         * @returns 当前游戏数据对象，如果没有当前游戏则返回null
         */;
        _proto.getCurrentGame = function getCurrentGame() {
          var currentGameStr = oops.storage.get(HistoryManager.CURRENT_GAME_STORAGE_KEY);
          // console.log("currentGameStr->",currentGameStr);
          if (!currentGameStr) return null;
          return this.convertToGameData(JSON.parse(currentGameStr));
        }

        /**
         * 设置当前游戏（开始新游戏）
         * @param gameData 新游戏数据
         * 
         * 注意：如果已有当前游戏，会自动将其保存为未完成游戏
         */;
        _proto.setCurrentGame = function setCurrentGame(gameData) {
          var prevCurrentGame = this.getCurrentGame();
          if (prevCurrentGame) {
            this.saveUnfinishedGame(prevCurrentGame);
          }
          if (gameData) {
            gameData.createTime = Date.now();
            this.saveCurrentGame(gameData);
          } else {
            this.clearCurrentGame();
          }
        }

        /**
         * 更新当前游戏进度
         * @param gameData 更新后的游戏数据
         */;
        _proto.updateCurrentGame = function updateCurrentGame(gameData) {
          this.saveCurrentGame(gameData);
        }

        /**
          * 完成当前游戏（自动处理新增或更新）
          * @param gameData 完成的游戏数据
          */;
        _proto.completeCurrentGame = function completeCurrentGame(gameData) {
          var history = this.getHistory();
          var today = this.getTodayString();
          gameData.createTime = gameData.createTime || Date.now();
          var storedData = this.convertToStoredData(gameData);
          if (!history.completed[today]) {
            history.completed[today] = [];
          }

          // 查找是否已存在相同id的记录
          var existingIndex = history.completed[today].findIndex(function (game) {
            return game.id === gameData.id;
          });
          if (existingIndex >= 0) {
            // 存在则覆盖
            history.completed[today][existingIndex] = storedData;
          } else {
            // 不存在则新增
            history.completed[today].unshift(storedData);
          }

          // 从未完成列表中移除（如果存在）
          this.removeGameFromUnfinished(gameData.id);
          this.updateBestTime(history, gameData);
          this.limitRecords(history);
          this.saveHistory(history);
          this.clearCurrentGame();
          this.recordForDifficultyAnalysis(gameData, true);
        }

        /**
         * 获取所有未完成游戏列表（按日期分组，并按日期倒序排列）
         * @returns 包含日期key和游戏数据的数组，按日期从新到旧排序
         */;
        _proto.getUnfinishedGames = function getUnfinishedGames() {
          var history = this.getHistory();
          return this.getGamesGroupedByDate(history.unfinished);
        }

        /**
         * 获取所有已完成游戏列表（按日期分组，并按日期倒序排列）
         * @returns 包含日期key和游戏数据的数组，按日期从新到旧排序
         */;
        _proto.getCompletedGames = function getCompletedGames() {
          var history = this.getHistory();
          return this.getGamesGroupedByDate(history.completed);
        }

        /**
         * 获取指定日期的游戏记录
         * @param date 日期字符串（YYYY-MM-DD格式）
         * @returns 包含该日期已完成和未完成游戏的对象
         */;
        _proto.getGamesByDate = function getGamesByDate(date) {
          var _this = this;
          var history = this.getHistory();
          return {
            completed: (history.completed[date] || []).map(function (data) {
              return _this.convertToGameData(data);
            }),
            unfinished: (history.unfinished[date] || []).map(function (data) {
              return _this.convertToGameData(data);
            })
          };
        }

        /**
         * 删除指定游戏记录
         * @param puzzleStr 要删除的游戏谜题字符串标识
         */;
        _proto.deleteGame = function deleteGame(puzzleStr) {
          var history = this.getHistory();
          for (var date in history.completed) {
            history.completed[date] = history.completed[date].filter(function (game) {
              return game.puzzleStr !== puzzleStr;
            });
            if (history.completed[date].length === 0) {
              delete history.completed[date];
            }
          }
          for (var _date in history.unfinished) {
            history.unfinished[_date] = history.unfinished[_date].filter(function (game) {
              return game.puzzleStr !== puzzleStr;
            });
            if (history.unfinished[_date].length === 0) {
              delete history.unfinished[_date];
            }
          }
          this.saveHistory(history);
        }

        /**
         * 清除所有历史记录（保留当前游戏）
         */;
        _proto.clearHistory = function clearHistory() {
          oops.storage.set(HistoryManager.HISTORY_STORAGE_KEY, JSON.stringify(this.getDefaultHistory()));
        }

        /**
         * 清除当前游戏状态
         */;
        _proto.clearCurrentGame = function clearCurrentGame() {
          oops.storage.remove(HistoryManager.CURRENT_GAME_STORAGE_KEY);
        }

        /**
        * 记录游戏结果到难度分析系统
        * @param gameData 游戏数据对象
        * 
        * 注意：
        * - 自动将GameData转换为GameRecord
        * - 通常在保存游戏记录时调用
        */;
        _proto.recordForDifficultyAnalysis = function recordForDifficultyAnalysis(gameData, isCompleted) {
          var record = {
            difficulty: gameData.actualDifficulty,
            progress: gameData.progress,
            isCompleted: isCompleted,
            timestamp: gameData.createTime || Date.now()
          };
          DifficultyManager.getInstance().recordGameResult(record);
        }

        // ========== 私有方法 ==========

        /**
         * 获取默认历史记录结构
         * @returns 初始化的历史记录对象
         */;
        _proto.getDefaultHistory = function getDefaultHistory() {
          var _bestTimes;
          return {
            completed: {},
            unfinished: {},
            bestTimes: (_bestTimes = {}, _bestTimes[SudokuDifficulty.Novice] = 0, _bestTimes[SudokuDifficulty.Beginner] = 0, _bestTimes[SudokuDifficulty.Elementary] = 0, _bestTimes[SudokuDifficulty.Intermediate] = 0, _bestTimes[SudokuDifficulty.Advanced] = 0, _bestTimes[SudokuDifficulty.Expert] = 0, _bestTimes[SudokuDifficulty.Master] = 0, _bestTimes[SudokuDifficulty.Extreme] = 0, _bestTimes),
            lastPlayedDate: this.getTodayString()
          };
        }

        /**
         * 保存当前游戏状态
         * @param gameData 要保存的游戏数据
         */;
        _proto.saveCurrentGame = function saveCurrentGame(gameData) {
          var storedData = this.convertToStoredData(gameData);
          var saveStr = JSON.stringify(storedData);
          // console.log("gameData->",gameData);
          // console.log("storedData->",storedData);
          // console.log("saveStr->",saveStr);
          oops.storage.set(HistoryManager.CURRENT_GAME_STORAGE_KEY, saveStr);
        }

        /**
        * 保存未完成游戏到历史记录（自动处理新增或更新）
        * @param gameData 要保存的未完成游戏数据
        */;
        _proto.saveUnfinishedGame = function saveUnfinishedGame(gameData) {
          var history = this.getHistory();
          var today = this.getTodayString();
          gameData.createTime = gameData.createTime || Date.now();
          var storedData = this.convertToStoredData(gameData);
          if (!history.unfinished[today]) {
            history.unfinished[today] = [];
          }

          // 查找是否已存在相同id的记录
          var existingIndex = history.unfinished[today].findIndex(function (game) {
            return game.id === gameData.id;
          });
          if (existingIndex >= 0) {
            // 存在则覆盖
            history.unfinished[today][existingIndex] = storedData;
          } else {
            // 不存在则新增
            history.unfinished[today].unshift(storedData);
          }
          this.limitRecords(history);
          history.lastPlayedDate = today;
          this.saveHistory(history);
          this.recordForDifficultyAnalysis(gameData, false);
        }

        /**
         * 保存历史记录到存储
         * @param history 要保存的历史记录对象
         */;
        _proto.saveHistory = function saveHistory(history) {
          oops.storage.set(HistoryManager.HISTORY_STORAGE_KEY, JSON.stringify(history));
        }

        /**
         * 将 GameData 转换为可存储的格式
         * @param gameData 游戏数据对象
         * @returns 可存储的游戏数据对象
         */;
        _proto.convertToStoredData = function convertToStoredData(gameData) {
          return _extends({}, gameData, {
            userInputs: this.mapToObject(gameData.userInputs),
            userInputNotes: this.mapToObject(gameData.userInputNotes)
          });
        }

        /**
         * 将存储的数据转换回 GameData 格式
         * @param storedData 存储的游戏数据对象
         * @returns 游戏数据对象
         */;
        _proto.convertToGameData = function convertToGameData(storedData) {
          return _extends({}, storedData, {
            userInputs: this.objectToMap(storedData.userInputs),
            userInputNotes: this.objectToMap(storedData.userInputNotes)
          });
        }

        /**
         * 将 Map 转换为普通对象
         * @param map 要转换的Map对象
         * @returns 转换后的普通对象
         */;
        _proto.mapToObject = function mapToObject(map) {
          var obj = {};
          map.forEach(function (value, key) {
            obj[key] = value;
          });
          return obj;
        }

        /**
         * 将普通对象转换为 Map
         * @param obj 要转换的普通对象
         * @returns 转换后的Map对象
         */;
        _proto.objectToMap = function objectToMap(obj) {
          var map = new Map();
          Object.entries(obj).forEach(function (_ref) {
            var key = _ref[0],
              value = _ref[1];
            map.set(key, value);
          });
          return map;
        }

        /**
         * 更新最佳成绩记录
         * @param history 历史记录对象
         * @param gameData 游戏数据对象
         */;
        _proto.updateBestTime = function updateBestTime(history, gameData) {
          var bestTime = history.bestTimes[gameData.displayDifficulty];
          if (!bestTime || gameData.timeElapsed < bestTime) {
            history.bestTimes[gameData.displayDifficulty] = gameData.timeElapsed;
          }
        }

        /**
         * 获取当前日期字符串
         * @returns YYYY-MM-DD格式的日期字符串
         */;
        _proto.getTodayString = function getTodayString() {
          return new Date().toISOString().split('T')[0];
        }

        /**
         * 展平并按时间排序每日记录
         * @param dailyRecords 每日记录对象
         * @returns 排序后的游戏数据数组
         */;
        _proto.flattenAndSortRecords = function flattenAndSortRecords(dailyRecords) {
          var allGames = [];
          for (var date in dailyRecords) {
            allGames.push.apply(allGames, dailyRecords[date]);
          }
          return allGames.sort(function (a, b) {
            return (b.createTime || 0) - (a.createTime || 0);
          });
        }

        /**
         * 限制历史记录数量（防止存储过多）
         * @param history 历史记录对象
         */;
        _proto.limitRecords = function limitRecords(history) {
          var allCompleted = this.flattenAndSortRecords(history.completed);
          if (allCompleted.length > HistoryManager.MAX_RECORDS_PER_CATEGORY) {
            allCompleted = allCompleted.slice(0, HistoryManager.MAX_RECORDS_PER_CATEGORY);
            history.completed = this.reorganizeByDate(allCompleted);
          }
          var allUnfinished = this.flattenAndSortRecords(history.unfinished);
          if (allUnfinished.length > HistoryManager.MAX_RECORDS_PER_CATEGORY) {
            allUnfinished = allUnfinished.slice(0, HistoryManager.MAX_RECORDS_PER_CATEGORY);
            history.unfinished = this.reorganizeByDate(allUnfinished);
          }
        }

        /**
         * 按日期重新组织游戏数据
         * @param games 游戏数据数组
         * @returns 按日期组织的每日记录对象
         */;
        _proto.reorganizeByDate = function reorganizeByDate(games) {
          var result = {};
          games.forEach(function (game) {
            var date = new Date(game.createTime || Date.now()).toISOString().split('T')[0];
            if (!result[date]) {
              result[date] = [];
            }
            result[date].push(game);
          });
          return result;
        }

        /**
         * 将游戏记录按日期分组并排序（从新到旧）
         * @param dailyRecords 每日记录对象
         * @returns 包含日期key和游戏数据的数组，按日期从新到旧排序
         */;
        _proto.getGamesGroupedByDate = function getGamesGroupedByDate(dailyRecords) {
          var _this2 = this;
          // 获取所有日期并按从新到旧排序
          var sortedDates = Object.keys(dailyRecords).sort(function (a, b) {
            return new Date(b).getTime() - new Date(a).getTime();
          });

          // 构建结果数组
          return sortedDates.map(function (date) {
            return {
              key: date,
              data: dailyRecords[date].map(function (data) {
                return _this2.convertToGameData(data);
              }).sort(function (a, b) {
                return (b.createTime || 0) - (a.createTime || 0);
              })
            };
          });
        }

        /**
         * 从未完成列表中移除指定游戏
         * @param gameId 要移除的游戏ID
         */;
        _proto.removeGameFromUnfinished = function removeGameFromUnfinished(gameId) {
          var history = this.getHistory();
          for (var date in history.unfinished) {
            history.unfinished[date] = history.unfinished[date].filter(function (game) {
              return game.id !== gameId;
            });
            if (history.unfinished[date].length === 0) {
              delete history.unfinished[date];
            }
          }
          this.saveHistory(history);
        };
        return HistoryManager;
      }());
      HistoryManager.instance = void 0;
      HistoryManager.HISTORY_STORAGE_KEY = 'sudoku_history_v8';
      HistoryManager.CURRENT_GAME_STORAGE_KEY = 'sudoku_current_game';
      HistoryManager.MAX_RECORDS_PER_CATEGORY = 50;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HistoryPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIConfig.ts', './HistoryManager.ts', './Oops.ts', './HistoryDayItem.ts', './AVirtualScrollView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, Component, UIID, HistoryManager, oops, HistoryDayItem, AVirtualScrollView;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Component = module.Component;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      HistoryDayItem = module.HistoryDayItem;
    }, function (module) {
      AVirtualScrollView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "a0aa5zeJ3xBO5XkB5NbZgA4", "HistoryPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HistoryPopup = exports('HistoryPopup', (_dec = ccclass('HistoryPopup'), _dec2 = property(AVirtualScrollView), _dec3 = property(AVirtualScrollView), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HistoryPopup, _Component);
        function HistoryPopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "unfinishedList", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "completedList", _descriptor2, _assertThisInitialized(_this));
          _this.unfinishedData = [];
          _this.completedData = [];
          _this.unfinishedListData = [];
          _this.completedListData = [];
          return _this;
        }
        var _proto = HistoryPopup.prototype;
        _proto.start = function start() {
          this.initializeHistoryViews();
          this.showUnfinishedHistory();
        };
        _proto.initializeHistoryViews = function initializeHistoryViews() {
          // 初始化未通关列表
          this.unfinishedData = HistoryManager.getInstance().getUnfinishedGames();
          this.completedData = HistoryManager.getInstance().getCompletedGames();
          this.unfinishedListData = this.splitKeyDataArray(this.unfinishedData);
          this.completedListData = this.splitKeyDataArray(this.completedData);
          this.unfinishedList.refreshData(this.unfinishedListData);
          this.completedList.refreshData(this.completedListData);
        };
        _proto.onUnfinishedListVRender = function onUnfinishedListVRender(item, idx) {
          var historyDayItem = item.getComponent(HistoryDayItem);
          if (historyDayItem) {
            historyDayItem.updateDisplay(this.unfinishedListData[idx]);
          }
        };
        _proto.onCompletedListVRender = function onCompletedListVRender(item, idx) {
          var historyDayItem = item.getComponentInChildren(HistoryDayItem);
          if (historyDayItem) {
            historyDayItem.updateDisplay(this.completedListData[idx]);
          }
        }

        /**
         * 将原始数据拆分为交替的 key 和 data 的数组
         * @param originalData 原始数据格式 Array<{ key: string; data: GameData[] }>
         * @returns 拆分后的数组 [{key: string}, {data: GameData}, {data: GameData}, ...]
         */;
        _proto.splitKeyDataArray = function splitKeyDataArray(originalData) {
          return originalData.flatMap(function (item) {
            return [{
              key: item.key
            }].concat(item.data.map(function (data) {
              return {
                data: data
              };
            }));
          });
        };
        _proto.onBack = function onBack() {
          oops.gui.remove(UIID.HistoryPopup);
        };
        _proto.onSelectUnfinished = function onSelectUnfinished(event) {
          var toggle = event.target.getComponent(Toggle);
          if (!(toggle != null && toggle.isChecked)) {
            console.log("onSelectUnfinished");
            this.showUnfinishedHistory();
          }
        };
        _proto.onSelectCompleted = function onSelectCompleted(event) {
          var toggle = event.target.getComponent(Toggle);
          if (!(toggle != null && toggle.isChecked)) {
            console.log("onSelectCompleted");
            this.showCompletedHistory();
          }
        };
        _proto.showUnfinishedHistory = function showUnfinishedHistory() {
          this.unfinishedList.node.active = true;
          this.completedList.node.active = false;
        };
        _proto.showCompletedHistory = function showCompletedHistory() {
          this.unfinishedList.node.active = false;
          this.completedList.node.active = true;
        };
        return HistoryPopup;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "unfinishedList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "completedList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './UIConfig.ts', './HistoryManager.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Label, Component, Configuration, EventType, UIID, HistoryManager, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "244b0g1QIRLUI5ZxhnNZHqR", "HomePage", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HomePage = exports('HomePage', (_dec = ccclass('HomePage'), _dec2 = property({
        type: Label,
        tooltip: "关卡难度描述",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomePage, _Component);
        function HomePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = HomePage.prototype;
        _proto.start = function start() {
          this.onRefreshLanguage();
        };
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        }
        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        };
        _proto.onRefreshLanguage = function onRefreshLanguage() {
          var difficultyConfig = Configuration.getInstance().getDifficultyConfig();
          this.label.string = oops.language.getLangByID(difficultyConfig.label);
        };
        _proto.onStartGame = function onStartGame() {
          oops.gui.replaceAsync(UIID.Lobby, UIID.Game);
        };
        _proto.onStartNewGame = function onStartNewGame() {
          HistoryManager.getInstance().setCurrentGame();
          oops.gui.open(UIID.LevelPopup);
        };
        _proto.onHistory = /*#__PURE__*/function () {
          var _onHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return oops.gui.openAsync(UIID.HistoryPopup);
                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function onHistory() {
            return _onHistory.apply(this, arguments);
          }
          return onHistory;
        }();
        _proto.onShowSetting = function onShowSetting() {
          oops.gui.openAsync(UIID.SettingPopup);
        };
        return HomePage;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Hot.ts", ['cc', './Oops.ts'], function (exports) {
  var cclegacy, log, sys, error, native, oops;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
      error = module.error;
      native = module.native;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f6377Ckbb9Cg5R2ygFWMOCv", "Hot", undefined);

      /** 热更参数 */
      var HotOptions = exports('HotOptions', /*#__PURE__*/function () {
        function HotOptions() {
          /** 获取到版本号信息 */
          this.onVersionInfo = null;
          /** 发现新版本，请更新 */
          this.onNeedToUpdate = null;
          /** 和远程版本一致，无须更新 */
          this.onNoNeedToUpdate = null;
          /** 更新失败 */
          this.onUpdateFailed = null;
          /** 更新完成 */
          this.onUpdateSucceed = null;
          /** 更新进度 */
          this.onUpdateProgress = null;
        }
        var _proto = HotOptions.prototype;
        _proto.check = function check() {
          for (var key in this) {
            if (key !== 'check') {
              if (!this[key]) {
                log("\u53C2\u6570HotOptions." + key + "\u672A\u8BBE\u7F6E\uFF01");
                return false;
              }
            }
          }
          return true;
        };
        return HotOptions;
      }());

      /** 热更管理 */
      var Hot = exports('Hot', /*#__PURE__*/function () {
        function Hot() {
          this.assetsMgr = null;
          this.options = null;
          this.state = Hot.State.None;
          this.storagePath = "";
          this.manifest = "";
        }
        var _proto2 = Hot.prototype;
        /** 热更初始化 */
        _proto2.init = function init(opt) {
          var _this = this;
          if (!sys.isNative) {
            return;
          }
          if (!opt.check()) {
            return;
          }
          this.options = opt;
          if (this.assetsMgr) {
            return;
          }
          oops.res.load('project', function (err, res) {
            if (err) {
              error("【热更新界面】缺少热更新配置文件");
              return;
            }
            _this.showSearchPath();
            _this.manifest = res.nativeUrl;
            _this.storagePath = native.fileUtils.getWritablePath() + "oops_framework_remote";
            _this.assetsMgr = new native.AssetsManager(_this.manifest, _this.storagePath, function (versionA, versionB) {
              var _this$options;
              console.log("【热更新】客户端版本: " + versionA + ', 当前最新版本: ' + versionB);
              ((_this$options = _this.options) == null ? void 0 : _this$options.onVersionInfo) && _this.options.onVersionInfo({
                local: versionA,
                server: versionB
              });
              var vA = versionA.split('.');
              var vB = versionB.split('.');
              for (var i = 0; i < vA.length; ++i) {
                var a = parseInt(vA[i]);
                var b = parseInt(vB[i] || '0');
                if (a !== b) {
                  return a - b;
                }
              }
              if (vB.length > vA.length) {
                return -1;
              } else {
                return 0;
              }
            });

            // 设置验证回调，如果验证通过，则返回true，否则返回false
            _this.assetsMgr.setVerifyCallback(function (path, asset) {
              // 压缩资源时，我们不需要检查其md5，因为zip文件已被删除
              var compressed = asset.compressed;
              // 检索正确的md5值
              var expectedMD5 = asset.md5;
              // 资源路径是相对路径，路径是绝对路径
              var relativePath = asset.path;
              // 资源文件的大小，但此值可能不存在
              var size = asset.size;
              return true;
            });
            var localManifest = _this.assetsMgr.getLocalManifest();
            console.log('【热更新】热更资源存放路径: ' + _this.storagePath);
            console.log('【热更新】本地资源配置路径: ' + _this.manifest);
            console.log('【热更新】本地包地址: ' + localManifest.getPackageUrl());
            console.log('【热更新】远程 project.manifest 地址: ' + localManifest.getManifestFileUrl());
            console.log('【热更新】远程 version.manifest 地址: ' + localManifest.getVersionFileUrl());
            _this.checkUpdate();
          });
        }

        /** 删除热更所有存储文件 */;
        _proto2.clearHotUpdateStorage = function clearHotUpdateStorage() {
          native.fileUtils.removeDirectory(this.storagePath);
        }

        // 检查更新
        ;

        _proto2.checkUpdate = function checkUpdate() {
          if (!this.assetsMgr) {
            console.log('【热更新】请先初始化');
            return;
          }
          if (this.assetsMgr.getState() === jsb.AssetsManager.State.UNINITED) {
            error('【热更新】未初始化');
            return;
          }
          if (!this.assetsMgr.getLocalManifest().isLoaded()) {
            console.log('【热更新】加载本地 manifest 失败 ...');
            return;
          }
          this.assetsMgr.setEventCallback(this.onHotUpdateCallBack.bind(this));
          this.state = Hot.State.Check;
          // 下载version.manifest，进行版本比对
          this.assetsMgr.checkUpdate();
        }

        /** 开始更热 */;
        _proto2.hotUpdate = function hotUpdate() {
          if (!this.assetsMgr) {
            console.log('【热更新】请先初始化');
            return;
          }
          this.assetsMgr.setEventCallback(this.onHotUpdateCallBack.bind(this));
          this.state = Hot.State.Update;
          this.assetsMgr.update();
        };
        _proto2.onHotUpdateCallBack = function onHotUpdateCallBack(event) {
          var _this$options2, _this$options3;
          var code = event.getEventCode();
          switch (code) {
            case native.EventAssetsManager.ALREADY_UP_TO_DATE:
              console.log("【热更新】当前版本与远程版本一致且无须更新");
              ((_this$options2 = this.options) == null ? void 0 : _this$options2.onNoNeedToUpdate) && this.options.onNoNeedToUpdate(code);
              break;
            case native.EventAssetsManager.NEW_VERSION_FOUND:
              console.log('【热更新】发现新版本,请更新');
              ((_this$options3 = this.options) == null ? void 0 : _this$options3.onNeedToUpdate) && this.options.onNeedToUpdate(code, this.assetsMgr.getTotalBytes());
              break;
            case native.EventAssetsManager.ASSET_UPDATED:
              console.log('【热更新】资产更新');
              break;
            case native.EventAssetsManager.UPDATE_PROGRESSION:
              if (this.state === Hot.State.Update) {
                var _this$options4;
                // event.getPercent();
                // event.getPercentByFile();
                // event.getDownloadedFiles() + ' / ' + event.getTotalFiles();
                // event.getDownloadedBytes() + ' / ' + event.getTotalBytes();
                console.log('【热更新】更新中...', event.getDownloadedFiles(), event.getTotalFiles(), event.getPercent());
                ((_this$options4 = this.options) == null ? void 0 : _this$options4.onUpdateProgress) && this.options.onUpdateProgress(event);
              }
              break;
            case native.EventAssetsManager.UPDATE_FINISHED:
              this.onUpdateFinished();
              break;
            default:
              this.onUpdateFailed(code);
              break;
          }
        };
        _proto2.onUpdateFailed = function onUpdateFailed(code) {
          var _this$options5;
          this.assetsMgr.setEventCallback(null);
          ((_this$options5 = this.options) == null ? void 0 : _this$options5.onUpdateFailed) && this.options.onUpdateFailed(code);
        };
        _proto2.onUpdateFinished = function onUpdateFinished() {
          var _this$options6;
          this.assetsMgr.setEventCallback(null);
          var searchPaths = native.fileUtils.getSearchPaths();
          var newPaths = this.assetsMgr.getLocalManifest().getSearchPaths();
          Array.prototype.unshift.apply(searchPaths, newPaths);
          localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
          native.fileUtils.setSearchPaths(searchPaths);
          console.log('【热更新】更新成功');
          ((_this$options6 = this.options) == null ? void 0 : _this$options6.onUpdateSucceed) && this.options.onUpdateSucceed();
        };
        _proto2.showSearchPath = function showSearchPath() {
          console.log("========================搜索路径========================");
          var searchPaths = native.fileUtils.getSearchPaths();
          for (var i = 0; i < searchPaths.length; i++) {
            console.log("[" + i + "]: " + searchPaths[i]);
          }
          console.log("======================================================");
        };
        return Hot;
      }());
      Hot.State = {
        None: 0,
        Check: 1,
        Update: 2
      };
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TipsManager.ts', './UIConfig.ts', './Hot.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, game, sys, Component, tips, UIID, Hot, HotOptions, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      tips = module.tips;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      Hot = module.Hot;
      HotOptions = module.HotOptions;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "f64deiQLAhLh5HGqUqaI9oA", "HotUpdate", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 热更新界面控制脚本 */
      var HotUpdate = exports('HotUpdate', (_dec = ccclass('HotUpdate'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HotUpdate, _Component);
        function HotUpdate() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 热更新业务管理对象 */
          _this.hot = new Hot();
          /** 公用加载界面UI做更新提示 */
          _this.lv = null;
          return _this;
        }
        var _proto = HotUpdate.prototype;
        _proto.onLoad = function onLoad() {
          // if (sys.isNative) {
          //     this.lv = this.getComponent(LoadingViewComp)!;
          //     this.lv.data.prompt = oops.language.getLangByID("update_tips_check_update");
          //     this.startHotUpdate();
          // }
        }

        /** 开始热更新 */;
        _proto.startHotUpdate = function startHotUpdate() {
          var _this2 = this;
          var options = new HotOptions();
          options.onVersionInfo = function (data) {
            // console.log(`【热更新界面】本地版本:${data.local},远程版本:${data.server}`);
          };
          options.onUpdateProgress = function (event) {
            // 进度提示字
            var pc = event.getPercent();
            var _total = event.getTotalBytes();
            var _have = event.getDownloadedBytes();
            var total, have;
            if (_total < 1048576) {
              // 小于1m，就显示kb
              _total = Math.ceil(_total / 1024);
              total = _total + 'K';
            } else {
              // 显示m
              total = (_total / (1024 * 1024)).toFixed(1);
              total = total + 'M';
            }
            if (_have < 1048576) {
              // 小于1m，就显示kb
              _have = Math.ceil(_have / 1024);
              have = _have + 'K';
            } else {
              // 显示m
              have = (_have / (1024 * 1024)).toFixed(1);
              have = have + 'M';
            }
            if (total == '0K') {
              _this2.lv.data.prompt = oops.language.getLangByID("update_tips_check_update");
            } else {
              _this2.lv.data.prompt = oops.language.getLangByID("update_tips_update") + have + '/' + total + ' (' + parseInt(pc * 100 + "") + '%)';
            }

            // 进度条
            if (!isNaN(event.getPercent())) {
              _this2.lv.data.finished = event.getDownloadedFiles();
              _this2.lv.data.total = event.getTotalFiles();
              _this2.lv.data.progress = (event.getPercent() * 100).toFixed(2);
            }
          };
          options.onNeedToUpdate = function (data, totalBytes) {
            _this2.lv.data.prompt = oops.language.getLangByID("update_tips_new_version");
            var total = "";
            if (totalBytes < 1048576) {
              // 小于1m，就显示kb
              // totalBytes = Math.ceil(totalBytes / 1024);
              // total = total + 'KB';
              total = Math.ceil(totalBytes / 1024) + 'KB';
            } else {
              total = (totalBytes / (1024 * 1024)).toFixed(1);
              total = total + 'MB';
            }

            // 提示更新
            _this2.checkForceUpdate(function () {
              // 非 WIFI 环境提示玩家
              _this2.showUpdateDialog(total, function () {
                _this2.hot.hotUpdate();
              });
            });
          };
          options.onNoNeedToUpdate = function () {
            _this2.lv.enter();
          };
          options.onUpdateFailed = function () {
            _this2.lv.data.prompt = oops.language.getLangByID("update_tips_update_fail");
            _this2.hot.checkUpdate();
          };
          options.onUpdateSucceed = function () {
            _this2.lv.data.progress = 100;
            _this2.lv.data.prompt = oops.language.getLangByID("update_tips_update_success");
            setTimeout(function () {
              game.restart();
            }, 1000);
          };
          this.hot.init(options);
        }

        /** 检查是否强制更新信息 */;
        _proto.checkForceUpdate = function checkForceUpdate(callback) {
          var _this3 = this;
          var operate = {
            title: 'common_prompt_title_sys',
            content: "update_tips_force",
            okWord: 'common_prompt_ok',
            cancelWord: 'common_prompt_cancal',
            okFunc: function okFunc() {
              _this3.hot.clearHotUpdateStorage();
              callback();
            },
            cancelFunc: function cancelFunc() {
              game.end();
            },
            needCancel: true
          };
          oops.gui.open(UIID.Confirm, operate);
        }

        /** 非 WIFI 环境提示玩家 */;
        _proto.showUpdateDialog = function showUpdateDialog(size, callback) {
          if (sys.getNetworkType() == sys.NetworkType.LAN) {
            callback();
            return;
          }
          tips.alert(oops.language.getLangByID("update_nowifi_tip") + size, callback);
        };
        return HotUpdate;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpRequest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, error, warn;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      warn = module.warn;
    }],
    execute: function () {
      cclegacy._RF.push({}, "806e5t8UetFy4spn89dnuan", "HttpRequest", undefined);

      /**
       * 使用流程文档可参考、简化与服务器对接、使用新版API体验，可进入下面地址获取新版本，替换network目录中的内容
       * https://store.cocos.com/app/detail/5877
       */

      /** 当前请求地址集合 */
      var urls = {};
      /** 请求参数 */
      var reqparams = {};
      /** 请求事件 */
      var HttpEvent = exports('HttpEvent', /*#__PURE__*/function (HttpEvent) {
        HttpEvent["NO_NETWORK"] = "http_request_no_network";
        HttpEvent["UNKNOWN_ERROR"] = "http_request_unknown_error";
        HttpEvent["TIMEOUT"] = "http_request_timout";
        return HttpEvent;
      }({}));

      /**
       * HTTP请求返回值
       */
      var HttpReturn = exports('HttpReturn', function HttpReturn() {
        /** 是否请求成功 */
        this.isSucc = false;
        /** 请求返回数据 */
        this.res = void 0;
        /** 请求错误数据 */
        this.err = void 0;
      });

      /** HTTP请求 */
      var HttpRequest = exports('HttpRequest', /*#__PURE__*/function () {
        function HttpRequest() {
          /** 服务器地址 */
          this.server = "http://127.0.0.1/";
          /** 请求超时时间 */
          this.timeout = 10000;
          /** 自定义请求头信息 */
          this.header = new Map();
        }
        var _proto = HttpRequest.prototype;
        /**
         * 添加自定义请求头信息
         * @param name  信息名
         * @param value 信息值
         */
        _proto.addHeader = function addHeader(name, value) {
          this.header.set(name, value);
        }

        /**
         * HTTP GET请求
         * @param name                  协议名
         * @param onComplete            请求完整回调方法
         * @param params                查询参数
         * @example
        var param = '{"uid":12345}'
        var complete = (ret: HttpReturn) => {
            console.log(ret.res);
        }
        oops.http.getWithParams(name, complete, param);
         */;
        _proto.get = function get(name, onComplete, params) {
          if (params === void 0) {
            params = null;
          }
          this.sendRequest(name, params, false, onComplete);
        }

        /**
         * HTTP GET请求
         * @param name                  协议名
         * @param params                查询参数
         * @example 
        var txt = await oops.http.getAsync(name);
        if (txt.isSucc) {
            console.log(txt.res);
        }
         */;
        _proto.getAsync = function getAsync(name, params) {
          var _this = this;
          if (params === void 0) {
            params = null;
          }
          return new Promise(function (resolve, reject) {
            _this.sendRequest(name, params, false, function (ret) {
              resolve(ret);
            });
          });
        }

        /**
         * HTTP GET请求非文本格式数据
         * @param name                  协议名
         * @param onComplete            请求完整回调方法
         * @param params                查询参数
         */;
        _proto.getByArraybuffer = function getByArraybuffer(name, onComplete, params) {
          if (params === void 0) {
            params = null;
          }
          this.sendRequest(name, params, false, onComplete, 'arraybuffer', false);
        }

        /**
         * HTTP GET请求非文本格式数据
         * @param name                  协议名
         * @param params                查询参数
         * @returns Promise<any>
         */;
        _proto.getAsyncByArraybuffer = function getAsyncByArraybuffer(name, params) {
          var _this2 = this;
          if (params === void 0) {
            params = null;
          }
          return new Promise(function (resolve, reject) {
            _this2.sendRequest(name, params, false, function (ret) {
              resolve(ret);
            }, 'arraybuffer', false);
          });
        }

        /**
         * HTTP POST请求
         * @param name                  协议名
         * @param params                查询参数
         * @param onComplete      请求完整回调方法
         * @example
        var param = '{"LoginCode":"donggang_dev","Password":"e10adc3949ba59abbe56e057f20f883e"}'
        var complete = (ret: HttpReturn) => {
            console.log(ret.res);
        }
        oops.http.post(name, complete, param);
         */;
        _proto.post = function post(name, onComplete, params) {
          if (params === void 0) {
            params = null;
          }
          this.sendRequest(name, params, true, onComplete);
        }

        /**
         * HTTP POST请求
         * @param name                  协议名
         * @param params                查询参数
         */;
        _proto.postAsync = function postAsync(name, params) {
          var _this3 = this;
          if (params === void 0) {
            params = null;
          }
          return new Promise(function (resolve, reject) {
            _this3.sendRequest(name, params, true, function (ret) {
              resolve(ret);
            });
          });
        }

        /**
         * 取消请求中的请求
         * @param name     协议名
         */;
        _proto.abort = function abort(name) {
          var xhr = urls[this.server + name];
          if (xhr) {
            xhr.abort();
          }
        }

        /**
         * 获得字符串形式的参数
         * @param params 参数对象
         * @returns 参数字符串
         */;
        _proto.getParamString = function getParamString(params) {
          var result = "";
          for (var name in params) {
            var data = params[name];
            if (data instanceof Object) {
              for (var key in data) result += key + "=" + data[key] + "&";
            } else {
              result += name + "=" + data + "&";
            }
          }
          return result.substring(0, result.length - 1);
        }

        /** 
         * Http请求 
         * @param name(string)              请求地址
         * @param params(JSON)              请求参数
         * @param isPost(boolen)            是否为POST方式
         * @param callback(function)        请求成功回调
         * @param responseType(string)      响应类型
         * @param isOpenTimeout(boolean)    是否触发请求超时错误
         */;
        _proto.sendRequest = function sendRequest(name, params, isPost, onComplete, responseType, isOpenTimeout) {
          var _this4 = this;
          if (isOpenTimeout === void 0) {
            isOpenTimeout = true;
          }
          if (name == null || name == '') {
            error("请求地址不能为空");
            return;
          }
          var url,
            newUrl,
            paramsStr = "";
          if (name.toLocaleLowerCase().indexOf("http") == 0) {
            url = name;
          } else {
            url = this.server + name;
          }
          if (params) {
            paramsStr = this.getParamString(params);
            if (url.indexOf("?") > -1) newUrl = url + "&" + paramsStr;else newUrl = url + "?" + paramsStr;
          } else {
            newUrl = url;
          }
          if (urls[newUrl] != null && reqparams[newUrl] == paramsStr) {
            warn("\u5730\u5740\u3010" + url + "\u3011\u5DF2\u6B63\u5728\u8BF7\u6C42\u4E2D\uFF0C\u4E0D\u80FD\u91CD\u590D\u8BF7\u6C42");
            return;
          }
          var xhr = new XMLHttpRequest();

          // 防重复请求功能
          urls[newUrl] = xhr;
          reqparams[newUrl] = paramsStr;
          if (isPost) {
            xhr.open("POST", url);
          } else {
            xhr.open("GET", newUrl);
          }

          // 添加自定义请求头信息
          for (var _iterator = _createForOfIteratorHelperLoose(this.header), _step; !(_step = _iterator()).done;) {
            var _step$value = _step.value,
              key = _step$value[0],
              value = _step$value[1];
            xhr.setRequestHeader(key, value);
          }
          // xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
          // xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");

          var responseHeader = localStorage.getItem("X-Requested-From");
          if (responseHeader) {
            xhr.setRequestHeader("X-Requested-From", responseHeader);
          }
          xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
          var data = {};
          data.url = url;
          data.params = params;

          // 请求超时
          if (isOpenTimeout) {
            xhr.timeout = this.timeout;
            xhr.ontimeout = function () {
              _this4.deleteCache(newUrl);
              ret.isSucc = false;
              ret.err = HttpEvent.TIMEOUT; // 超时
              onComplete(data);
            };
          }

          // 响应结果
          var ret = new HttpReturn();
          xhr.onloadend = function () {
            if (xhr.status == 500) {
              _this4.deleteCache(newUrl);
              ret.isSucc = false;
              ret.err = HttpEvent.NO_NETWORK; // 断网
              onComplete(ret);
            }
          };
          xhr.onerror = function () {
            _this4.deleteCache(newUrl);
            ret.isSucc = false;
            if (xhr.readyState == 0 || xhr.readyState == 1 || xhr.status == 0) {
              ret.err = HttpEvent.NO_NETWORK; // 断网
            } else {
              ret.err = HttpEvent.UNKNOWN_ERROR; // 未知错误
            }

            onComplete(ret);
          };
          xhr.onreadystatechange = function () {
            if (xhr.readyState != 4) return;
            _this4.deleteCache(newUrl);
            if (xhr.status == 200 && onComplete) {
              // let responseAllHeader = xhr.getAllResponseHeaders();
              // console.log("所有响应头数据",responseAllHeader);
              var _responseHeader = xhr.getResponseHeader("X-Requested-From");
              if (_responseHeader) {
                console.log("保存X-Requested-From响应头数据", _responseHeader);
                localStorage.setItem("X-Requested-From", _responseHeader);
              }
              ret.isSucc = true;
              if (responseType == 'arraybuffer') {
                xhr.responseType = responseType; // 加载非文本格式
                ret.res = xhr.response;
              } else {
                ret.res = JSON.parse(xhr.response);
              }
              onComplete(ret);
            }
          };

          // 发送请求
          if (params == null || params == "") {
            xhr.send();
          } else {
            xhr.send(paramsStr);
          }
        };
        _proto.deleteCache = function deleteCache(url) {
          delete urls[url];
          delete reqparams[url];
        };
        return HttpRequest;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IControl.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "58450TyE3JB069KO8P5+hl4", "IControl", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-06-21 12:05:14
       * @LastEditors: dgflash
       * @LastEditTime: 2022-07-20 14:04:27
       */
      /** 行为控制接口 */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ImageUtil.ts", ['cc'], function (exports) {
  var cclegacy, Color, Texture2D;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      Texture2D = module.Texture2D;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ebdf3rRnEdIYpKgGdW8gSmZ", "ImageUtil", undefined);

      /**
       * 图像工具
       */
      var ImageUtil = exports('ImageUtil', /*#__PURE__*/function () {
        function ImageUtil() {}
        /**
         * 获取纹理中指定像素的颜色，原点为左上角，从像素 (1, 1) 开始。
         * @param texture 纹理
         * @param x x 坐标
         * @param y y 坐标
         * @example
        // 获取纹理左上角第一个像素的颜色
        const color = ImageUtil.getPixelColor(texture, 1, 1);
        cc.color(50, 100, 123, 255);
         */
        ImageUtil.getPixelColor = function getPixelColor(texture, x, y) {
          var _texture$image;
          var canvas = document.createElement('canvas');
          var ctx = canvas.getContext('2d');
          canvas.width = texture.width;
          canvas.height = texture.height;
          var image = (_texture$image = texture.image) == null ? void 0 : _texture$image.data;
          ctx.drawImage(image, 0, 0, texture.width, texture.height);
          var imageData = ctx.getImageData(0, 0, texture.width, texture.height);
          var pixelIndex = (y - 1) * texture.width * 4 + (x - 1) * 4;
          var pixelData = imageData.data.slice(pixelIndex, pixelIndex + 4);
          var color = new Color(pixelData[0], pixelData[1], pixelData[2], pixelData[3]);
          image.remove();
          canvas.remove();
          return color;
        }

        /**
         * 将图像转为 Base64 字符（仅 png、jpg 或 jpeg 格式资源）（有问题）
         * @param url 图像地址
         * @param callback 完成回调
         */;
        ImageUtil.imageToBase64 = function imageToBase64(url, callback) {
          return new Promise(function (res) {
            var _exec;
            var extname = (_exec = /\.png|\.jpg|\.jpeg/.exec(url)) == null ? void 0 : _exec[0];
            //@ts-ignore
            if (['.png', '.jpg', '.jpeg'].includes(extname)) {
              var canvas = document.createElement('canvas');
              var ctx = canvas.getContext('2d');
              var image = new Image();
              image.src = url;
              image.onload = function () {
                canvas.height = image.height;
                canvas.width = image.width;
                ctx.drawImage(image, 0, 0);
                extname = extname === '.jpg' ? 'jpeg' : extname.replace('.', '');
                var dataURL = canvas.toDataURL("image/" + extname);
                callback && callback(dataURL);
                res(dataURL);
                image.remove();
                canvas.remove();
              };
            } else {
              console.warn('Not a jpg/jpeg or png resource!');
              callback && callback("");
              res("");
            }
          });
        }

        /**
         * 将 Base64 字符转为 cc.Texture2D 资源（有问题）
         * @param base64 Base64 字符
         */;
        ImageUtil.base64ToTexture = function base64ToTexture(base64) {
          var image = document.createElement('img');
          image.src = base64;
          var texture = new Texture2D();
          //@ts-ignore
          texture.initWithElement(image);
          image.remove();
          return texture;
        }

        /**
         * 将 Base64 字符转为二进制数据（有问题）
         * @param base64 Base64 字符
         */;
        ImageUtil.base64ToBlob = function base64ToBlob(base64) {
          var strings = base64.split(',');
          //@ts-ignore
          var type = /image\/\w+|;/.exec(strings[0])[0];
          var data = window.atob(strings[1]);
          var arrayBuffer = new ArrayBuffer(data.length);
          var uint8Array = new Uint8Array(arrayBuffer);
          for (var i = 0; i < data.length; i++) {
            uint8Array[i] = data.charCodeAt(i) & 0xff;
          }
          return new Blob([uint8Array], {
            type: type
          });
        };
        return ImageUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index.ts", ['cc', './BehaviorTree.ts', './BranchNode.ts', './Decorator.ts', './BTreeNode.ts', './Priority.ts', './Sequence.ts', './Task.ts', './Selector.ts'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('BehaviorTree', module.BehaviorTree);
    }, function (module) {
      exports('BranchNode', module.BranchNode);
    }, function (module) {
      exports('Decorator', module.Decorator);
    }, function (module) {
      exports('BTreeNode', module.BTreeNode);
    }, function (module) {
      exports('Priority', module.Priority);
    }, function (module) {
      exports('Sequence', module.Sequence);
    }, function (module) {
      exports('Task', module.Task);
    }, function (module) {
      exports('Selector', module.Selector);
    }],
    execute: function () {
      cclegacy._RF.push({}, "96257XYurdITbWhyEf7Qlbn", "index", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfinitePageView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './InfinitePageViewItem.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, PageView, log, Component, InfinitePageViewItem, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      PageView = module.PageView;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      InfinitePageViewItem = module.InfinitePageViewItem;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "4a8bbBi4OZLsrBYf8Ffk02g", "InfinitePageView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var InfinitePageViewEvent = exports('InfinitePageViewEvent', /*#__PURE__*/function (InfinitePageViewEvent) {
        InfinitePageViewEvent["PAGE_CHANGED"] = "page-changed";
        return InfinitePageViewEvent;
      }({})); // 当前页码变化事件

      // 定义页面状态接口

      var InfinitePageView = exports('InfinitePageView', (_dec = ccclass('InfinitePageView'), _dec2 = property(PageView), _dec3 = property({
        tooltip: '是否启用循环列表模式',
        displayName: '循环模式'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InfinitePageView, _Component);
        function InfinitePageView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "pageView", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loopMode", _descriptor2, _assertThisInitialized(_this));
          _this._data = [];
          _this._currentIndex = 0;
          _this._lastPageIndex = 0;
          _this._centerPageIndex = 0;
          //保证3个page
          _this._currentPageIndex = 0;
          _this._pagesLength = 0;
          return _this;
        }
        var _proto = InfinitePageView.prototype;
        _proto.onLoad = function onLoad() {
          // 初始化时可以留空或做一些基础设置
        };
        _proto.start = function start() {
          this.init();
        }

        /**
         * 设置数据并初始化位置
         * @param data 要显示的数据数组
         * @param initialIndex 初始显示的中心索引（可选，默认为0）
         */;
        _proto.setData = function setData(data, initialIndex) {
          var _this2 = this;
          if (initialIndex === void 0) {
            initialIndex = 0;
          }
          this._data = data;
          this._currentIndex = initialIndex;

          // 确保初始索引在合法范围内
          this._currentIndex = Math.max(0, Math.min(initialIndex, data.length - 1));

          // 延迟一帧执行重置和事件触发
          this.scheduleOnce(function () {
            // 刷新页面显示
            _this2.resetPageIndex();
            _this2.refreshAllPages();
            _this2.emitPageChanged();
          });
        }

        /** 初始化PageView */;
        _proto.init = function init() {
          // 计算中心页面索引
          var list = this.pageView.getPages();
          this._pagesLength = list.length;
          this._centerPageIndex = Math.floor(this._pagesLength / 2);

          // 注册事件
          this.pageView.node.on(PageView.EventType.SCROLL_ENDED, this.onScrollEnded, this);
        }

        /** 重置到中心位置 */;
        _proto.resetToCenter = function resetToCenter() {
          this._currentPageIndex = this._centerPageIndex;
          this.pageView.scrollToPage(this._centerPageIndex, 0);
          this._lastPageIndex = this._centerPageIndex;
        };
        _proto.resetPageIndex = function resetPageIndex() {
          if (this.loopMode) {
            this.resetToCenter();
          } else {
            var pageIndex = 0;
            if (this._currentIndex <= 0) {
              pageIndex = 0;
            } else if (this._currentIndex >= this._data.length - 1) {
              pageIndex = this._pagesLength - 1;
            }
            this._currentPageIndex = pageIndex;
            this.pageView.scrollToPage(pageIndex, 0);
            this._lastPageIndex = pageIndex;
          }
        }

        /** 切换到上一页 */;
        _proto.prevPage = function prevPage() {
          // 只有实际移动时才执行滚动
          var index = this._lastPageIndex - 1;
          if (index < 0 || index > this._pagesLength - 1) {
            console.warn("已经到达pageview边界", index);
            return;
          }
          this.pageView.scrollToPage(index, 0.3);
        }

        /** 切换到下一页 */;
        _proto.nextPage = function nextPage() {
          var index = this._lastPageIndex + 1;
          if (index < 0 || index > this._pagesLength - 1) {
            console.warn("已经到达pageview边界", index);
            return;
          }
          this.pageView.scrollToPage(index, 0.3);
        }

        /**
        * 获取当前页面状态
        */;
        _proto.getPageState = function getPageState() {
          return {
            currentIndex: this._currentIndex,
            currentData: this._data[this._currentIndex],
            totalPages: this._data.length,
            canPrev: this.loopMode || this._currentIndex > 0,
            canNext: this.loopMode || this._currentIndex < this._data.length - 1,
            isAtStart: !this.loopMode && this._currentIndex <= 0,
            isAtEnd: !this.loopMode && this._currentIndex >= this._data.length - 1
          };
        }

        /**
        * 触发页面变化事件
        */;
        _proto.emitPageChanged = function emitPageChanged() {
          oops.message.dispatchEvent(InfinitePageViewEvent.PAGE_CHANGED, {
            currentIndex: this._currentIndex
          });
        };
        _proto.onScrollEnded = function onScrollEnded() {
          if (!this.pageView || !this.pageView.content || this._data.length === 0) {
            return;
          }
          var currentPageIndex = this.pageView.getCurrentPageIndex();
          var isRefresh = true;

          // 更新当前数据索引
          if (currentPageIndex > this._lastPageIndex) {
            this._currentIndex++;
            if (this.loopMode) {
              if (this._currentIndex >= this._data.length) {
                this._currentIndex = 0;
              }
            } else {
              if (this._currentIndex >= this._data.length - 1) {
                this._currentIndex = Math.min(this._data.length - 1, this._currentIndex + 1);
              }
            }
          } else if (currentPageIndex < this._lastPageIndex) {
            this._currentIndex--;
            if (this.loopMode) {
              if (this._currentIndex < 0) {
                this._currentIndex = this._data.length - 1;
              }
            } else {
              if (this._currentIndex == 0) {
                this._currentIndex = Math.max(0, this._currentIndex - 1);
              }
            }
          }
          if ((this._currentIndex === this._data.length - 1 || this._currentIndex == 0) && !this.loopMode) {
            isRefresh = false;
          }
          this._lastPageIndex = currentPageIndex;
          log("测试滑动currentPageIndex->", currentPageIndex, "currentIndex->", this._currentIndex);

          // 如果滑动到边界，重置位置并刷新
          if ((currentPageIndex <= this._centerPageIndex - 1 || currentPageIndex >= this._centerPageIndex + 1) && isRefresh) {
            this.resetToCenter();
            this.refreshAllPages();
          }
          this.emitPageChanged();
        };
        _proto.refreshAllPages = function refreshAllPages() {
          var pages = this.pageView.getPages();
          var pageCount = pages.length;
          var dataLength = this._data.length;
          var halfPageCount = this._currentPageIndex;
          for (var i = 0; i < pageCount; i++) {
            var dataIndex = this._currentIndex - halfPageCount + i;

            // 处理循环索引（仅在循环模式下）
            if (this.loopMode) {
              if (dataIndex < 0) {
                dataIndex += dataLength;
              } else if (dataIndex >= dataLength) {
                dataIndex -= dataLength;
              }
            } else {
              // 非循环模式下，限制在有效范围内
              dataIndex = Math.max(0, Math.min(dataLength - 1, dataIndex));
            }

            // 只更新有效索引的数据
            if (dataIndex >= 0 && dataIndex < dataLength) {
              var page = pages[i];
              var item = page.getComponent(InfinitePageViewItem);
              if (item) {
                // console.log("this._data->", this._data);
                // console.log("this._currentIndex->", this._currentIndex, "halfPageCount->", halfPageCount, "i->", i, "dataIndex->", dataIndex);
                item.updateView(this._data[dataIndex]);
              }
            }
          }
        }

        /** 获取当前中心页面的数据索引 */;
        _proto.getCurrentIndex = function getCurrentIndex() {
          return this._currentIndex;
        }

        /** 获取当前中心页面的数据 */;
        _proto.getCurrentData = function getCurrentData() {
          return this._data[this._currentIndex];
        };
        return InfinitePageView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loopMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfinitePageViewItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "c5bc7E72qVAYITjfTpez14D", "InfinitePageViewItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var InfinitePageViewItem = exports('InfinitePageViewItem', (_dec = ccclass('InfinitePageViewItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InfinitePageViewItem, _Component);
        function InfinitePageViewItem() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = InfinitePageViewItem.prototype;
        // @property(Label)
        // private label: Label = null!;
        _proto.updateView = function updateView(data) {
          console.log("刷新界面", data);
          // this.label.string = data;
        };

        return InfinitePageViewItem;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Init.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './UIConfig.ts', './Oops.ts', './AsyncQueue.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, Config, DEFAULT_LANGUAGE, UIID, oops, AsyncQueue;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Config = module.default;
      DEFAULT_LANGUAGE = module.DEFAULT_LANGUAGE;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      AsyncQueue = module.AsyncQueue;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2ee0c8+7R9EFKQb+OPn9mlk", "Init", undefined);
      var Init = exports('Init', /*#__PURE__*/function () {
        function Init() {}
        Init.startGameInitialization = function startGameInitialization() {
          // 加载多语言包
          this.initializeLanguage();
          // 加载自定义资源
          this.loadCommonResources();
          // 加载游戏内容加载进度提示界面
          this.setupLoadingUI();
          this.queue.play();
        }

        /** 初始化并加载语言包 */;
        Init.initializeLanguage = function initializeLanguage() {
          oops.language.languages = Config.languages;
          oops.language["default"] = DEFAULT_LANGUAGE;
          this.queue.push(function (next, params, args) {
            // 设置默认语言
            var lan = oops.storage.get("language");
            if (lan == null || lan == "") {
              lan = DEFAULT_LANGUAGE;
              oops.storage.set("language", lan);
            }

            // 加载语言包资源
            oops.language.setLanguage(lan, next);
          });
        }

        /** 加载游戏公共资源 */;
        Init.loadCommonResources = function loadCommonResources() {
          this.queue.push(function (next, params, args) {
            oops.res.loadDir("prefabs/common", next);
          });
        }

        /** 设置游戏加载界面 */;
        Init.setupLoadingUI = function setupLoadingUI() {
          this.queue.complete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  oops.gui.open(UIID.Loading);
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
        };
        return Init;
      }());
      Init.queue = new AsyncQueue();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JellyFishStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "adadaiqPRFE47B2uIXjJRPi", "JellyFishStrategy", undefined);
      var JellyFishStrategy = exports('JellyFishStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(JellyFishStrategy, _BaseStrategy);
        function JellyFishStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 20;
          // 比X-Wing/Swordfish更高难度
          _this.JELLYFISH_SIZE = 4;
          return _this;
        }
        var _proto = JellyFishStrategy.prototype;
        // 海蜇固定大小为4
        _proto.execute = function execute(board, candidates) {
          var result = this.findJellyFish(candidates);
          return result ? this.createSteps(board, candidates, result) : null;
        };
        _proto.findJellyFish = function findJellyFish(candidates) {
          return this.findJellyFishInDirection(candidates, HighlightAreaType.ROW) || this.findJellyFishInDirection(candidates, HighlightAreaType.COLUMN);
        };
        _proto.findJellyFishInDirection = function findJellyFishInDirection(candidates, direction) {
          for (var value = 1; value <= 9; value++) {
            // 1. 收集可能成为基集的行/列（候选数数量2-4个）
            var potentialBaseUnits = this.collectPotentialBaseUnits(candidates, value, direction);
            if (potentialBaseUnits.length < this.JELLYFISH_SIZE) continue;

            // 2. 尝试所有可能的4个基集组合
            var combinations = SolverUtils.getCombinations(potentialBaseUnits, this.JELLYFISH_SIZE);
            for (var _iterator = _createForOfIteratorHelperLoose(combinations), _step; !(_step = _iterator()).done;) {
              var baseUnits = _step.value;
              // 3. 获取这些基集的所有候选位置
              var basePositions = this.getBasePositions(candidates, value, baseUnits, direction);

              // 4. 计算覆盖集（必须恰好4个）
              var coverUnits = this.calculateCoverUnits(basePositions, direction);
              if (coverUnits.length !== this.JELLYFISH_SIZE) continue;

              // 5. 查找可消除的候选数
              var eliminations = this.findEliminations(candidates, value, baseUnits, coverUnits, direction);
              if (eliminations.length > 0) {
                return {
                  value: value,
                  baseUnits: baseUnits,
                  coverUnits: coverUnits,
                  eliminations: eliminations,
                  direction: direction
                };
              }
            }
          }
          return null;
        };
        _proto.collectPotentialBaseUnits = function collectPotentialBaseUnits(candidates, value, direction) {
          var units = [];
          var isRowBased = direction === HighlightAreaType.ROW;
          for (var unit = 0; unit < 9; unit++) {
            var count = 0;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                count++;
                if (count > this.JELLYFISH_SIZE) break;
              }
            }
            if (count >= 2 && count <= this.JELLYFISH_SIZE) {
              units.push(unit);
            }
          }
          return units;
        };
        _proto.getBasePositions = function getBasePositions(candidates, value, baseUnits, direction) {
          var positions = [];
          var isRowBased = direction === HighlightAreaType.ROW;
          for (var _iterator2 = _createForOfIteratorHelperLoose(baseUnits), _step2; !(_step2 = _iterator2()).done;) {
            var unit = _step2.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          return positions;
        };
        _proto.calculateCoverUnits = function calculateCoverUnits(positions, direction) {
          var coverUnits = new Set();
          var isRowBased = direction === HighlightAreaType.ROW;
          positions.forEach(function (pos) {
            coverUnits.add(isRowBased ? pos.col : pos.row);
          });
          return coverUnits.size === this.JELLYFISH_SIZE ? Array.from(coverUnits).sort() : [];
        };
        _proto.findEliminations = function findEliminations(candidates, value, baseUnits, coverUnits, direction) {
          var eliminations = [];
          var isRowBased = direction === HighlightAreaType.ROW;
          coverUnits.forEach(function (coverUnit) {
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : coverUnit;
              var col = isRowBased ? coverUnit : pos;

              // 跳过基集中的行/列
              if (isRowBased ? baseUnits.includes(row) : baseUnits.includes(col)) {
                continue;
              }
              if (candidates[row][col].has(value)) {
                eliminations.push({
                  row: row,
                  col: col
                });
              }
            }
          });
          return eliminations;
        };
        _proto.createSteps = function createSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createCoverSetStep(board, candidates, info), this.createEliminationStep(board, candidates, info), this.createRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, info) {
          var _this2 = this;
          var value = info.value,
            baseUnits = info.baseUnits,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var highlights = [].concat(this.highlightJellyFishCells(board, candidates, info), this.highlightBaseUnits(board, candidates, info));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("JellyFishStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: {
              row: baseUnits[0],
              col: 0
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: [].concat(this.highlightBaseNotes(candidates, info))
          };
        };
        _proto.createCoverSetStep = function createCoverSetStep(board, candidates, info) {
          var _this3 = this;
          var value = info.value,
            baseUnits = info.baseUnits,
            coverUnits = info.coverUnits,
            eliminations = info.eliminations,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var highlights = [].concat(this.highlightJellyFishCells(board, candidates, info), this.highlightBaseUnits(board, candidates, info), this.highlightCoverUnits(board, candidates, info));
          var highlightNotes = [].concat(this.highlightBaseNotes(candidates, info), this.highlightCoverNotes(candidates, info));
          var generateDescription = function generateDescription() {
            var baseDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("JellyFishStrategy.coverSetDes", {
              name: _this3.name,
              direction: _this3.description,
              baseDirection: baseDirection,
              value: value,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", ")
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: {
              row: coverUnits[0],
              col: coverUnits[0]
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, info) {
          var _this4 = this;
          var value = info.value,
            baseUnits = info.baseUnits,
            coverUnits = info.coverUnits,
            eliminations = info.eliminations,
            direction = info.direction;
          var highlights = [].concat(this.highlightJellyFishCells(board, candidates, info), this.highlightEliminations(board, candidates, info), this.highlightBaseUnits(board, candidates, info), this.highlightCoverUnits(board, candidates, info));
          var highlightNotes = [].concat(this.highlightEliminationNotes(candidates, info), this.highlightBaseNotes(candidates, info), this.highlightCoverNotes(candidates, info));
          var generateDescription = function generateDescription() {
            var baseDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("JellyFishStrategy.eliminationDes", {
              name: _this4.name,
              direction: _this4.description,
              baseDirection: baseDirection,
              value: value,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              count: eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        };
        _proto.createRemovalStep = function createRemovalStep(board, candidates, info) {
          var _this5 = this;
          var value = info.value,
            baseUnits = info.baseUnits,
            coverUnits = info.coverUnits,
            eliminations = info.eliminations,
            direction = info.direction;
          // 实际执行候选数移除
          info.eliminations.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](info.value);
          });
          var highlights = [].concat(this.highlightJellyFishCells(board, candidates, info), this.highlightRemovedCells(board, candidates, info), this.highlightBaseUnits(board, candidates, info), this.highlightCoverUnits(board, candidates, info));
          var highlightNotes = [].concat(this.highlightBaseNotes(candidates, info), this.highlightCoverNotes(candidates, info));
          var generateDescription = function generateDescription() {
            var baseDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("JellyFishStrategy.removalDes", {
              name: _this5.name,
              direction: _this5.description,
              baseDirection: baseDirection,
              value: value,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              count: eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: info.eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        }

        /* 高亮辅助方法 */;
        _proto.highlightBaseUnits = function highlightBaseUnits(board, candidates, info) {
          var baseUnits = info.baseUnits,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          return baseUnits.flatMap(function (unit) {
            var cells = isRowBased ? SolverUtils.getRowCells(unit) : SolverUtils.getColumnCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightJellyFishCells = function highlightJellyFishCells(board, candidates, info) {
          var baseUnits = info.baseUnits,
            coverUnits = info.coverUnits,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var cells = [];
          baseUnits.forEach(function (baseUnit) {
            coverUnits.forEach(function (coverUnit) {
              var pos = isRowBased ? {
                row: baseUnit,
                col: coverUnit
              } : {
                row: coverUnit,
                col: baseUnit
              };
              cells.push({
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              });
            });
          });
          return cells;
        };
        _proto.highlightCoverUnits = function highlightCoverUnits(board, candidates, info) {
          var coverUnits = info.coverUnits,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          return coverUnits.flatMap(function (unit) {
            var cells = isRowBased ? SolverUtils.getColumnCells(unit) : SolverUtils.getRowCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightEliminations = function highlightEliminations(board, candidates, info) {
          return info.eliminations.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
              textColor: HighlightConfig.sameRelatedAreaCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          });
        };
        _proto.highlightRemovedCells = function highlightRemovedCells(board, candidates, info) {
          return info.eliminations.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
              textColor: HighlightConfig.sameRelatedAreaCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          });
        };
        _proto.highlightBaseNotes = function highlightBaseNotes(candidates, info) {
          var value = info.value,
            baseUnits = info.baseUnits,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];
          baseUnits.forEach(function (unit) {
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                });
              }
            }
          });
          return notes;
        };
        _proto.highlightCoverNotes = function highlightCoverNotes(candidates, info) {
          var value = info.value,
            coverUnits = info.coverUnits,
            direction = info.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];
          coverUnits.forEach(function (unit) {
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : unit;
              var col = isRowBased ? unit : pos;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.sameNumber.background,
                  textColor: HighlightConfig.sameNumber.textColor,
                  value: value
                });
              }
            }
          });
          return notes;
        };
        _proto.highlightEliminationNotes = function highlightEliminationNotes(candidates, info) {
          return info.eliminations.filter(function (pos) {
            return candidates[pos.row][pos.col].has(info.value);
          }).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: info.value
            };
          });
        };
        _createClass(JellyFishStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("JellyFishStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("JellyFishStrategy.description");
          }
        }]);
        return JellyFishStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JsonOb.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "000b00Lx19Ke4hAFc9/Qlnh", "JsonOb", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-09-01 18:00:28
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-06 17:18:05
       */

      /**
       * 实现动态绑定的核心部分，
       * 每次修改属性值，都会调用对应函数，并且获取值的路径
       */
      var OP = Object.prototype;
      var types = {
        obj: '[object Object]',
        array: '[object Array]'
      };
      var OAM = ['push', 'pop', 'shift', 'unshift', 'sort', 'reverse', 'splice'];

      /**
       * 实现属性拦截的类
       */
      var JsonOb = exports('JsonOb', /*#__PURE__*/function () {
        function JsonOb(obj, callback) {
          this._callback = void 0;
          if (OP.toString.call(obj) !== types.obj && OP.toString.call(obj) !== types.array) {
            console.error('请传入一个对象或数组');
          }
          this._callback = callback;
          this.observe(obj);
        }
        var _proto = JsonOb.prototype;
        /**对象属性劫持 */
        _proto.observe = function observe(obj, path) {
          var _this = this;
          if (OP.toString.call(obj) === types.array) {
            this.overrideArrayProto(obj, path);
          }

          // @ts-ignore  注：避免API生成工具报错
          Object.keys(obj).forEach(function (key) {
            var self = _this;
            // @ts-ignore
            var oldVal = obj[key];
            var pathArray = path && path.slice();
            if (pathArray) {
              pathArray.push(key);
            } else {
              pathArray = [key];
            }
            Object.defineProperty(obj, key, {
              get: function get() {
                return oldVal;
              },
              set: function set(newVal) {
                //cc.log(newVal);
                if (oldVal !== newVal) {
                  if (OP.toString.call(newVal) === '[object Object]') {
                    self.observe(newVal, pathArray);
                  }
                  var ov = oldVal;
                  oldVal = newVal;
                  self._callback(newVal, ov, pathArray);
                }
              }
            });

            // @ts-ignore
            if (OP.toString.call(obj[key]) === types.obj || OP.toString.call(obj[key]) === types.array) {
              // @ts-ignore
              _this.observe(obj[key], pathArray);
            }
          }, this);
        }

        /**
         * 对数组类型进行动态绑定
         * @param array 
         * @param path 
         */;
        _proto.overrideArrayProto = function overrideArrayProto(array, path) {
          // 保存原始 Array 原型  
          var originalProto = Array.prototype;
          // 通过 Object.create 方法创建一个对象，该对象的原型是Array.prototype  
          var overrideProto = Object.create(Array.prototype);
          var self = this;
          var result;

          // 遍历要重写的数组方法  
          OAM.forEach(function (method) {
            Object.defineProperty(overrideProto, method, {
              value: function value() {
                var oldVal = this.slice();
                //调用原始原型上的方法  
                result = originalProto[method].apply(this, arguments);
                //继续监听新数组  
                self.observe(this, path);
                self._callback(this, oldVal, path);
                return result;
              }
            });
          });

          // 最后 让该数组实例的 __proto__ 属性指向 假的原型 overrideProto  
          array['__proto__'] = overrideProto;
        };
        return JsonOb;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JsonUtil.ts", ['cc', './ResLoader.ts'], function (exports) {
  var cclegacy, JsonAsset, resLoader;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      JsonAsset = module.JsonAsset;
    }, function (module) {
      resLoader = module.resLoader;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1a24ank4nRC46jfzaIfOmtQ", "JsonUtil", undefined);

      /** 资源路径 */
      var path = "config/";

      /** 数据缓存 */
      var data = new Map();

      /** JSON数据表工具 */
      var JsonUtil = exports('JsonUtil', /*#__PURE__*/function () {
        function JsonUtil() {}
        /**
         * 通知资源名从缓存中获取一个Json数据表
         * @param name  资源名
         */
        JsonUtil.get = function get(name) {
          if (data.has(name)) return data.get(name);
        }

        /**
         * 通知资源名加载Json数据表
         * @param name      资源名
         * @param callback  资源加载完成回调
         */;
        JsonUtil.load = function load(name, callback, bundleName) {
          if (bundleName === void 0) {
            bundleName = 'resources';
          }
          if (data.has(name)) callback(data.get(name));else {
            var url = path + name;
            resLoader.load(bundleName, url, JsonAsset, function (err, content) {
              if (err) {
                console.warn(err.message);
                callback(null);
              } else {
                data.set(name, content.json);
                resLoader.release(url);
                callback(content.json);
              }
            });
          }
        }

        /**
         * 异步加载Json数据表
         * @param name 资源名
         */;
        JsonUtil.loadAsync = function loadAsync(name, bundleName) {
          if (bundleName === void 0) {
            bundleName = 'resources';
          }
          return new Promise(function (resolve, reject) {
            if (data.has(name)) {
              resolve(data.get(name));
            } else {
              var url = path + name;
              resLoader.load(bundleName, url, JsonAsset, function (err, content) {
                if (err) {
                  console.warn(err.message);
                  resolve(null);
                } else {
                  data.set(name, content.json);
                  resLoader.release(url);
                  resolve(content.json);
                }
              });
            }
          });
        }

        /** 加载所有配置表数据到缓存中 */;
        JsonUtil.loadDirAsync = function loadDirAsync() {
          return new Promise(function (resolve, reject) {
            resLoader.loadDir(path, function (err, assets) {
              if (err) {
                console.warn(err.message);
                resolve(false);
              } else {
                assets.forEach(function (asset) {
                  data.set(asset.name, asset.json);
                });
                resLoader.releaseDir(path);
                resolve(true);
              }
            });
          });
        }

        /**
         * 通过指定资源名释放资源内存
         * @param name 资源名
         */;
        JsonUtil.release = function release(name) {
          data["delete"](name);
        }

        /** 清理所有数据 */;
        JsonUtil.clear = function clear() {
          data.clear();
        };
        return JsonUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabelChange.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LabelNumber.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, LabelNumber;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      LabelNumber = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "fff0fLwVNhNe59VirWTCPFJ", "LabelChange", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 数值变化动画标签组件 */
      var LabelChange = exports('LabelChange', (_dec = ccclass("LabelChange"), _dec2 = menu('OopsFramework/Label/LabelChange （数值变化动画标签）'), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_LabelNumber) {
        _inheritsLoose(LabelChange, _LabelNumber);
        function LabelChange() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _LabelNumber.call.apply(_LabelNumber, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "isInteger", _descriptor, _assertThisInitialized(_this));
          _this.duration = 0;
          // 持续时间
          _this.callback = void 0;
          // 完成回调
          _this.isBegin = false;
          // 是否开始
          _this.speed = 0;
          // 变化速度
          _this.end = 0;
          return _this;
        }
        var _proto = LabelChange.prototype;
        // 最终值
        /**
         * 变化到某值,如果从当前开始的begin传入null
         * @param {number} duration 
         * @param {number} end 
         * @param {Function} [callback]
         */
        _proto.changeTo = function changeTo(duration, end, callback) {
          if (duration == 0) {
            if (callback) callback();
            return;
          }
          this.playAnim(duration, this.num, end, callback);
        }

        /**
         * 变化值,如果从当前开始的begin传入null
         * @param {number} duration 
         * @param {number} value 
         * @param {Function} [callback] 
         * @memberof LabelChange
         */;
        _proto.changeBy = function changeBy(duration, value, callback) {
          if (duration == 0) {
            if (callback) callback();
            return;
          }
          this.playAnim(duration, this.num, this.num + value, callback);
        }

        /** 立刻停止 */;
        _proto.stop = function stop(excCallback) {
          if (excCallback === void 0) {
            excCallback = true;
          }
          this.num = this.end;
          this.isBegin = false;
          if (excCallback && this.callback) this.callback();
        }

        /** 播放动画 */;
        _proto.playAnim = function playAnim(duration, begin, end, callback) {
          this.duration = duration;
          this.end = end;
          this.callback = callback;
          this.speed = (end - begin) / duration;
          this.num = begin;
          this.isBegin = true;
        }

        /** 是否已经结束 */;
        _proto.isEnd = function isEnd(num) {
          if (this.speed > 0) {
            return num >= this.end;
          } else {
            return num <= this.end;
          }
        };
        _proto.update = function update(dt) {
          if (this.isBegin) {
            if (this.num == this.end) {
              this.isBegin = false;
              if (this.callback) this.callback();
              return;
            }
            var num = this.num + dt * this.speed;
            if (this.isInteger) {
              if (this.end < this.num) {
                num = Math.floor(num);
              } else {
                num = Math.ceil(num);
              }
            }

            /** 变化完成 */
            if (this.isEnd(num)) {
              num = this.end;
              this.isBegin = false;
              if (this.callback) this.callback();
            }
            this.num = num;
          }
        };
        return LabelChange;
      }(LabelNumber), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isInteger", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabelNumber.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "f7b43F70BhPlrz4IPhZGmsL", "LabelNumber", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 只能显示数字的标签组件 */
      var LabelNumber = exports('default', (_dec = ccclass("LabelNumber"), _dec2 = menu('OopsFramework/Label/LabelNumber （只显示数字的标签）'), _dec3 = property({
        tooltip: "数字"
      }), _dec4 = property({
        tooltip: "数字"
      }), _dec5 = property({
        tooltip: "货币符号"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Label) {
        _inheritsLoose(LabelNumber, _Label);
        function LabelNumber() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Label.call.apply(_Label, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_num", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "symbol", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LabelNumber.prototype;
        _proto.start = function start() {
          this.updateLabel();
        }

        /** 刷新文本 */;
        _proto.updateLabel = function updateLabel() {
          this.string = this.num.toString() + this.symbol;
        };
        _createClass(LabelNumber, [{
          key: "num",
          get: function get() {
            return this._num;
          },
          set: function set(value) {
            this._num = value;
            this.updateLabel();
          }
        }]);
        return LabelNumber;
      }(Label), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_num", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "num", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "num"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "symbol", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabelTime.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './EventMessage.ts', './TimeUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, oops, EventMessage, TimeUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      EventMessage = module.EventMessage;
    }, function (module) {
      TimeUtil = module.TimeUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "57786GMN6RPbaAT9b9RmX18", "LabelTime", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 倒计时标签 */
      var LabelTime = exports('default', (_dec = ccclass("LabelTime"), _dec2 = menu('OopsFramework/Label/LabelTime （倒计时标签）'), _dec3 = property({
        tooltip: "到计时间总时间（单位秒）"
      }), _dec4 = property({
        tooltip: "天数数据格式化"
      }), _dec5 = property({
        tooltip: "时间格式化"
      }), _dec6 = property({
        tooltip: "是否有00"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Label) {
        _inheritsLoose(LabelTime, _Label);
        function LabelTime() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Label.call.apply(_Label, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "countDown", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "dayFormat", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "timeFormat", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "zeroize", _descriptor4, _assertThisInitialized(_this));
          _this.backStartTime = 0;
          // 进入后台开始时间
          _this.dateDisable = void 0;
          // 时间能否由天数显示
          _this.result = void 0;
          // 时间结果字符串
          /** 每秒触发事件 */
          _this.onSecond = null;
          /** 倒计时完成事件 */
          _this.onComplete = null;
          return _this;
        }
        var _proto = LabelTime.prototype;
        _proto.replace = function replace(value) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          return value.replace(/\{(\d+)\}/g, function (m, i) {
            return args[i];
          });
        }

        /** 格式化字符串 */;
        _proto.format = function format() {
          var c = this.countDown;
          var date = Math.floor(c / 86400);
          c = c - date * 86400;
          var hours = Math.floor(c / 3600);
          c = c - hours * 3600;
          var minutes = Math.floor(c / 60);
          c = c - minutes * 60;
          var seconds = c;
          this.dateDisable = this.dateDisable || false;
          if (date == 0 && hours == 0 && minutes == 0 && seconds == 0) {
            if (this.zeroize) {
              this.result = this.replace(this.timeFormat, "00", "00", "00");
            } else {
              this.result = this.replace(this.timeFormat, "0", "0", "0");
            }
          } else if (date > 0 && !this.dateDisable) {
            var dataFormat = this.dayFormat;
            var index = dataFormat.indexOf("{1}");
            if (hours == 0 && index > -1) {
              dataFormat = dataFormat.substring(0, index - 1);
            }
            var df = dataFormat;
            if (date > 1 && dataFormat.indexOf("days") < 0) {
              df = df.replace("day", "days");
            }
            if (date < 2) {
              df = df.replace("days", "day");
            }
            this.result = this.replace(df, date, hours); // 如果天大于1，则显示 "1 Day..."
          } else {
            hours += date * 24;
            if (this.zeroize) {
              this.result = this.replace(this.timeFormat, this.coverString(hours), this.coverString(minutes), this.coverString(seconds)); // 否则显示 "01:12:24"
            } else {
              this.result = this.replace(this.timeFormat, hours, minutes, seconds);
            }
          }
          this.string = this.result;
        }

        /** 个位数的时间数据将字符串补位 */;
        _proto.coverString = function coverString(value) {
          if (value < 10) return "0" + value;
          return value.toString();
        }

        /** 设置时间能否由天数显示 */;
        _proto.setDateDisable = function setDateDisable(flag) {
          this.dateDisable = flag;
        }

        /**
         * 设置倒计时时间
         * @param second        倒计时时间（单位秒）
         */;
        _proto.setTime = function setTime(second) {
          this.countDown = second; // 倒计时，初始化显示字符串
          this.timing_end();
          this.timing_start();
          this.format();
        }

        /**
         * 设置结束时间戳倒计时
         * @param timeStamp     时间戳
         */;
        _proto.setTimeStamp = function setTimeStamp(timeStamp) {
          this.countDown = TimeUtil.secsBetween(oops.timer.getServerTime(), timeStamp);
          this.timing_end();
          this.timing_start();
          this.format();
        };
        _proto.start = function start() {
          oops.message.on(EventMessage.GAME_SHOW, this.onGameShow, this);
          oops.message.on(EventMessage.GAME_HIDE, this.onGameHide, this);
          this.timing_start();
          this.format();
        };
        _proto.onDestroy = function onDestroy() {
          oops.message.off(EventMessage.GAME_SHOW, this.onGameShow, this);
          oops.message.off(EventMessage.GAME_HIDE, this.onGameHide, this);
        };
        _proto.onGameShow = function onGameShow() {
          var interval = Math.floor((oops.timer.getTime() - (this.backStartTime || oops.timer.getTime())) / 1000);
          this.countDown -= interval;
          if (this.countDown < 0) {
            this.countDown = 0;
            this.onScheduleComplete();
          }
        };
        _proto.onGameHide = function onGameHide() {
          this.backStartTime = oops.timer.getTime();
        };
        _proto.onScheduleSecond = function onScheduleSecond() {
          this.countDown--;
          this.format();
          if (this.onSecond) this.onSecond(this.node);
          if (this.countDown == 0) {
            this.onScheduleComplete();
          }
        };
        _proto.onScheduleComplete = function onScheduleComplete() {
          this.timing_end();
          this.format();
          if (this.onComplete) this.onComplete(this.node);
        }

        /** 开始计时 */;
        _proto.timing_start = function timing_start() {
          this.schedule(this.onScheduleSecond, 1);
        };
        _proto.timing_end = function timing_end() {
          this.unscheduleAllCallbacks();
        };
        return LabelTime;
      }(Label), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "countDown", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1000;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dayFormat", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "{0} day";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "timeFormat", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "{0}:{1}:{2}";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "zeroize", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Language.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResLoader.ts', './Logger.ts', './LanguageData.ts', './LanguagePack.ts', './AsyncQueue.ts'], function (exports) {
  var _createClass, cclegacy, assetManager, resLoader, Logger, LanguageData, LanguagePack, AsyncQueue;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      assetManager = module.assetManager;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      LanguageData = module.LanguageData;
    }, function (module) {
      LanguagePack = module.LanguagePack;
    }, function (module) {
      AsyncQueue = module.AsyncQueue;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3757cxZqLZObIdvP/gQ6Yuj", "Language", undefined);

      /** 多语言管理器 */
      var LanguageManager = exports('LanguageManager', /*#__PURE__*/function () {
        function LanguageManager() {
          this._languages = ["zh", "en", "tr"];
          // 支持的语言
          this._languagePack = new LanguagePack();
          // 语言包
          this._defaultLanguage = "zh";
        }
        var _proto = LanguageManager.prototype;
        /**
         * 是否存在指定语言
         * @param lang  语言名
         * @returns 存在返回true,则否false
         */
        _proto.isExist = function isExist(lang) {
          return this.languages.indexOf(lang) > -1;
        }

        /** 获取下一个语种 */;
        _proto.getNextLang = function getNextLang() {
          var supportLangs = this.languages;
          var index = supportLangs.indexOf(LanguageData.current);
          return supportLangs[(index + 1) % supportLangs.length];
        }

        /**
         * 改变语种，会自动下载对应的语种
         * @param language 语言名
         * @param callback 多语言资源数据加载完成回调
         */;
        _proto.setLanguage = function setLanguage(language, callback) {
          var _this = this;
          if (language == null || language == "") {
            language = this._defaultLanguage;
          }
          var index = this.languages.indexOf(language);
          if (index < 0) {
            console.log("\u5F53\u524D\u4E0D\u652F\u6301\u3010" + language + "\u3011\u8BED\u8A00\uFF0C\u5C06\u81EA\u52A8\u5207\u6362\u5230\u3010" + this._defaultLanguage + "\u3011\u8BED\u8A00");
            language = this._defaultLanguage;
          }
          if (language === LanguageData.current) {
            if (callback) {
              callback(false);
            }
            return;
          }
          var queue = new AsyncQueue();
          // 遍历当前已加载的所有 Bundle
          assetManager.bundles.forEach(function (bundle) {
            console.log("已加载的 Bundle 名称：", bundle.name);
            if (bundle.name != "main" && bundle.name != "internal") {
              Logger.logConfig("\u5F53\u524D\u8BED\u8A00\u4E3A\u3010" + language + "\u3011");
              queue.push(function (next, params, args) {
                _this.loadLanguageAssets(language, function (lang) {
                  var oldLanguage = LanguageData.current;
                  LanguageData.current = language;
                  _this._languagePack.updateLanguage(language);
                  _this._languagePack.releaseLanguageAssets(oldLanguage, bundle.name);
                  next();
                }, bundle.name);
              });
            }
          });
          queue.complete = function () {
            if (callback) {
              callback(true);
            }
          };
          queue.play();
        }

        /**
         * 根据data获取对应语种的字符
         * @param labId 
         * @param arr 
         */;
        _proto.getLangByID = function getLangByID(labId, bundleNameOrVars, vars) {
          // 参数解构逻辑
          var actualBundleName;
          var actualVars;
          if (typeof bundleNameOrVars === 'string') {
            actualBundleName = bundleNameOrVars;
            actualVars = vars || {};
          } else {
            actualBundleName = resLoader.defaultBundleName;
            actualVars = bundleNameOrVars || {};
          }
          return LanguageData.getLangByID(labId, actualBundleName, actualVars);
        }

        /**
         * 下载语言包素材资源
         * 包括语言json配置和语言纹理包
         * @param lang 
         * @param callback 
         */;
        _proto.loadLanguageAssets = function loadLanguageAssets(lang, callback, bundleName) {
          // lang = lang.toLowerCase();
          return this._languagePack.loadLanguageAssets(lang, callback, bundleName);
        }

        /**
         * 释放不需要的语言包资源
         * @param lang 
         */;
        _proto.releaseLanguageAssets = function releaseLanguageAssets(lang, bundleName) {
          if (bundleName === void 0) {
            bundleName = resLoader.defaultBundleName;
          }
          // lang = lang.toLowerCase();
          this._languagePack.releaseLanguageAssets(lang, bundleName);
        };
        _proto.loadLanguageAssetsFromBundle = function loadLanguageAssetsFromBundle(lang, callback, bundleName) {
          var _this2 = this;
          Logger.logConfig("\u52A0\u8F7D\u5F53\u524D" + bundleName + "\u56FD\u9645\u5316\u8D44\u6E90");
          this.loadLanguageAssets(lang, function (lang) {
            _this2._languagePack.updateLanguage(lang);
            callback();
          }, bundleName);
        };
        _createClass(LanguageManager, [{
          key: "languages",
          get:
          // 默认语言
          /** 支持的多种语言列表 */
          function get() {
            return this._languages;
          },
          set: function set(languages) {
            this._languages = languages;
          }

          /** 设置的当前语言列表中没有配置时，使用默认语言 */
        }, {
          key: "default",
          set: function set(lang) {
            this._defaultLanguage = lang || "zh";
          }

          /** 获取当前语种 */
        }, {
          key: "current",
          get: function get() {
            return LanguageData.current;
          }

          /** 语言包 */
        }, {
          key: "pack",
          get: function get() {
            return this._languagePack;
          }
        }]);
        return LanguageManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageData.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "27fb3sjD81JlIP2KFTSWUp4", "LanguageData", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-02-11 09:31:52
       * @LastEditors: dgflash
       * @LastEditTime: 2023-08-22 16:37:40
       */
      var LanguageData = exports('LanguageData', /*#__PURE__*/function () {
        function LanguageData() {}
        /** 
         * 通过多语言关键字获取语言文本 
         * 
         * 注：
         * 
         * 1、先获取language/json中的配置数据，如果没有者获取config/game/Language配置表中的多语言数据
         * 
         * 2、config/game/Language配置表可选使用，不用时不创建同名配置表即可
         * 
         * 3、config/game/Language配置表使用oops-plugin-excel-to-json插件生成，点击项目根目录下载update-oops-plugin-framework.bat或update-oops-plugin-framework.sh脚本下载插件
         */
        LanguageData.getLangByID = function getLangByID(labId, bundleName, vars) {
          if (vars === void 0) {
            vars = {};
          }
          var str = labId;
          if (bundleName in this.json && labId in this.json[bundleName]) {
            str = this.json[bundleName][labId] || labId;
          }
          // 次优先使用变量翻译
          if (Object.keys(vars).length > 0) {
            str = this.translate(str, vars);
          }
          return str;
        }

        /**
         * 国际化翻译函数（支持 {{variable}} 格式）
         * @param key 资源键名
         * @param vars 变量键值对（可选）
         * @returns 替换变量后的字符串
         */;
        LanguageData.translate = function translate(template, vars) {
          if (vars === void 0) {
            vars = {};
          }
          // 使用正则替换所有 {{var}} 占位符
          return template.replace(/\{\{(\w+)\}\}/g, function (_, varName) {
            var value = vars[varName];
            return value !== undefined ? String(value) : "[MISSING: " + varName + "]";
          });
        };
        return LanguageData;
      }());
      /** JSON资源目录 */
      LanguageData.path_json = "language/json";
      /** 纹理资源目录 */
      LanguageData.path_texture = "language/texture";
      /** SPINE资源目录 */
      LanguageData.path_spine = "language/spine";
      LanguageData.other_bundle_path = "resources/";
      /** 当前语言 */
      LanguageData.current = "";
      /** 语言JSON配置数据 */
      LanguageData.json = {};
      /** TTF字体 */
      LanguageData.font = new Map();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts', './ResLoader.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, Label, RichText, warn, Component, LanguageData, resLoader;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Label = module.Label;
      RichText = module.RichText;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      LanguageData = module.LanguageData;
    }, function (module) {
      resLoader = module.resLoader;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class4, _class5, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "110c8vEd5NEPL/N9meGQnaX", "LanguageLabel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var LangLabelParamsItem = exports('LangLabelParamsItem', (_dec = ccclass("LangLabelParamsItem"), _dec(_class = (_class2 = function LangLabelParamsItem() {
        _initializerDefineProperty(this, "key", _descriptor, this);
        _initializerDefineProperty(this, "value", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "key", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "value", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      /** 文本多语言 */
      var LanguageLabel = exports('LanguageLabel', (_dec2 = ccclass("LanguageLabel"), _dec3 = menu('OopsFramework/Language/LanguageLabel （文本多语言）'), _dec4 = property({
        type: LangLabelParamsItem,
        displayName: "params"
      }), _dec5 = property({
        type: LangLabelParamsItem,
        displayName: "params"
      }), _dec6 = property({
        tooltip: "语言json所在的bundle,默认是resources"
      }), _dec7 = property({
        serializable: true
      }), _dec8 = property({
        type: CCString,
        serializable: true
      }), _dec2(_class4 = _dec3(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LanguageLabel, _Component);
        function LanguageLabel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_params", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bundleName", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_dataID", _descriptor5, _assertThisInitialized(_this));
          /** 初始字体尺寸 */
          _this.initFontSize = 0;
          _this._needUpdate = false;
          return _this;
        }
        var _proto = LanguageLabel.prototype;
        /** 更新语言 */
        _proto.language = function language() {
          this._needUpdate = true;
        };
        _proto.onLoad = function onLoad() {
          this._needUpdate = true;
        }

        /**
         * 修改多语言参数，采用惰性求值策略
         * @param key 对于i18n表里面的key值
         * @param value 替换的文本
         */;
        _proto.setVars = function setVars(key, value) {
          var haskey = false;
          for (var i = 0; i < this._params.length; i++) {
            var element = this._params[i];
            if (element.key === key) {
              element.value = value;
              haskey = true;
            }
          }
          if (!haskey) {
            var ii = new LangLabelParamsItem();
            ii.key = key;
            ii.value = value;
            this._params.push(ii);
          }
          this._needUpdate = true;
        };
        _proto.update = function update() {
          if (this._needUpdate) {
            this.updateContent();
            this._needUpdate = false;
          }
        };
        _proto.updateContent = function updateContent() {
          var label = this.getComponent(Label);
          var richtext = this.getComponent(RichText);
          var font = LanguageData.font.get(this.bundleName);
          if (label) {
            if (font) {
              label.font = font;
            }
            label.string = this.string;
            this.initFontSize = label.fontSize;
          } else if (richtext) {
            if (font) {
              richtext.font = font;
            }
            this.initFontSize = richtext.fontSize;
            richtext.string = this.string;
            this.initFontSize = richtext.fontSize;
          } else {
            warn("[LanguageLabel], 该节点没有cc.Label || cc.RichText组件");
          }
        };
        _createClass(LanguageLabel, [{
          key: "params",
          get: function get() {
            return this._params || [];
          },
          set: function set(value) {
            this._params = value;
            {
              this._needUpdate = true;
            }
          }
        }, {
          key: "dataID",
          get: function get() {
            return this._dataID || "";
          },
          set: function set(value) {
            this._dataID = value;
            {
              this._needUpdate = true;
            }
          }
        }, {
          key: "string",
          get: function get() {
            var _string = LanguageData.getLangByID(this._dataID, this.bundleName);
            if (_string && this._params.length > 0) {
              this._params.forEach(function (item) {
                _string = _string.replace("%{" + item.key + "}", item.value);
              });
            }
            if (!_string) {
              warn("[LanguageLabel] 未找到语言标识，使用dataID替换");
              _string = this._dataID;
            }
            return _string;
          }
        }]);
        return LanguageLabel;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "_params", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "params", [_dec5], Object.getOwnPropertyDescriptor(_class5.prototype, "params"), _class5.prototype), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "bundleName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return resLoader.defaultBundleName;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "_dataID", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "dataID", [_dec8], Object.getOwnPropertyDescriptor(_class5.prototype, "dataID"), _class5.prototype)), _class5)) || _class4) || _class4));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguagePack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResLoader.ts', './Logger.ts', './LanguageData.ts', './LanguageLabel.ts', './LanguageSpine.ts', './LanguageSprite.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, director, error, TTFFont, JsonAsset, resLoader, Logger, LanguageData, LanguageLabel, LanguageSpine, LanguageSprite;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      error = module.error;
      TTFFont = module.TTFFont;
      JsonAsset = module.JsonAsset;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      LanguageData = module.LanguageData;
    }, function (module) {
      LanguageLabel = module.LanguageLabel;
    }, function (module) {
      LanguageSpine = module.LanguageSpine;
    }, function (module) {
      LanguageSprite = module.LanguageSprite;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2ffebyj59xIc4v4BZty8SDm", "LanguagePack", undefined);
      var LanguagePack = exports('LanguagePack', /*#__PURE__*/function () {
        function LanguagePack() {}
        var _proto = LanguagePack.prototype;
        /**
         * 刷新语言文字
         * @param lang 
         */
        _proto.updateLanguage = function updateLanguage(lang) {
          var rootNodes = director.getScene().children;
          for (var i = 0; i < rootNodes.length; ++i) {
            // 更新所有的LanguageLabel节点
            var labels = rootNodes[i].getComponentsInChildren(LanguageLabel);
            for (var j = 0; j < labels.length; j++) {
              labels[j].language();
            }

            // 更新所有的LanguageSprite节点
            var sprites = rootNodes[i].getComponentsInChildren(LanguageSprite);
            for (var _j = 0; _j < sprites.length; _j++) {
              sprites[_j].language();
            }

            // 更新所有的LanguageSpine节点
            var spines = rootNodes[i].getComponentsInChildren(LanguageSpine);
            for (var _j2 = 0; _j2 < spines.length; _j2++) {
              spines[_j2].language();
            }
          }
        }

        /**
         * 下载对应语言包资源
         * @param lang 语言标识
         * @param callback 下载完成回调
         */;
        _proto.loadLanguageAssets = /*#__PURE__*/
        function () {
          var _loadLanguageAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(lang, callback, bundleName) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (bundleName === void 0) {
                    bundleName = resLoader.defaultBundleName;
                  }
                  _context.next = 3;
                  return this.loadTexture(lang, bundleName);
                case 3:
                  _context.next = 5;
                  return this.loadSpine(lang, bundleName);
                case 5:
                  _context.next = 7;
                  return this.loadJson(lang, bundleName);
                case 7:
                  callback(lang);
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function loadLanguageAssets(_x, _x2, _x3) {
            return _loadLanguageAssets.apply(this, arguments);
          }
          return loadLanguageAssets;
        }() /** 纹理多语言资源 */;
        _proto.loadTexture = function loadTexture(lang, bundleName) {
          return new Promise(function (resolve, reject) {
            var path = "";
            if (bundleName != resLoader.defaultBundleName) {
              path = LanguageData.other_bundle_path;
            }
            path = path + (LanguageData.path_texture + "/" + lang);
            resLoader.loadDir(bundleName, path, function (err, assets) {
              if (err) {
                error(err);
                resolve(null);
                return;
              }
              Logger.logConfig(path, "\u52A0\u8F7D" + bundleName + "\u4E0B\u7684\u8BED\u8A00\u5305 textures \u8D44\u6E90");
              resolve(null);
            });
          });
        }

        /** Json格式多语言资源 */;
        _proto.loadJson = function loadJson(lang, bundleName) {
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var path, jsonAsset;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  path = "";
                  if (bundleName != resLoader.defaultBundleName) {
                    path = LanguageData.other_bundle_path;
                  }
                  path = path + (LanguageData.path_json + "/" + lang);
                  _context2.next = 5;
                  return resLoader.loadAsync(bundleName, path, JsonAsset);
                case 5:
                  jsonAsset = _context2.sent;
                  if (!jsonAsset) {
                    _context2.next = 11;
                    break;
                  }
                  LanguageData.json[bundleName] = jsonAsset.json;
                  Logger.logConfig(path, "\u52A0\u8F7D" + bundleName + "\u4E0B\u7684\u8BED\u8A00\u5305 json \u8D44\u6E90");
                  _context2.next = 13;
                  break;
                case 11:
                  resolve(null);
                  return _context2.abrupt("return");
                case 13:
                  resLoader.load(bundleName, path, TTFFont, function (err, font) {
                    if (err == null) Logger.logConfig(path, "\u52A0\u8F7D" + bundleName + "\u4E0B\u7684\u8BED\u8A00\u5305 ttf \u8D44\u6E90");
                    LanguageData.font.set(bundleName, font);
                    resolve(null);
                  });
                case 14:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        }

        /** SPINE动画多语言资源 */;
        _proto.loadSpine = function loadSpine(lang, bundleName) {
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
            var path;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  path = "";
                  if (bundleName != resLoader.defaultBundleName) {
                    path = LanguageData.other_bundle_path;
                  }
                  path = path + (LanguageData.path_spine + "/" + lang);
                  resLoader.loadDir(bundleName, path, function (err, assets) {
                    if (err) {
                      error(err);
                      resolve(null);
                      return;
                    }
                    Logger.logConfig(path, "\u52A0\u8F7D" + bundleName + "\u4E0B\u7684\u8BED\u8A00\u5305 spine \u8D44\u6E90");
                    resolve(null);
                  });
                case 4:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          })));
        }

        /**
         * 释放某个语言的语言包资源包括json
         * @param lang 
         */;
        _proto.releaseLanguageAssets = function releaseLanguageAssets(lang, bundleName) {
          if (bundleName === void 0) {
            bundleName = resLoader.defaultBundleName;
          }
          Logger.logConfig("\u91CA\u653E\u5F53\u524D" + bundleName + "\u4E0B\u7684" + lang + "\u56FD\u9645\u5316\u8D44\u6E90");
          var path = "";
          if (bundleName != resLoader.defaultBundleName) {
            path = LanguageData.other_bundle_path;
          }
          var langTexture = path + (LanguageData.path_texture + "/" + lang);
          resLoader.releaseDir(langTexture, bundleName);
          var langJson = path + (LanguageData.path_json + "/" + lang);
          var json = resLoader.get(langJson, JsonAsset, bundleName);
          if (json) {
            json.decRef();
          }
          var font = resLoader.get(langJson, TTFFont, bundleName);
          if (font) {
            font.decRef();
          }
          var langSpine = path + (LanguageData.path_spine + "/" + lang);
          resLoader.release(langSpine, bundleName);
        };
        return LanguagePack;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguagePopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIConfig.ts', './LanguageToggle.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Component, UIID, LanguageToggle, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      LanguageToggle = module.LanguageToggle;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "4ecf4t7dwpDNaRt+90YVeZx", "LanguagePopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LanguagePopup = exports('LanguagePopup', (_dec = ccclass('LanguagePopup'), _dec2 = property({
        type: [LanguageToggle],
        tooltip: "语言",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LanguagePopup, _Component);
        function LanguagePopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "languageToggles", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LanguagePopup.prototype;
        _proto.start = function start() {
          this.init();
        };
        _proto.init = function init() {
          var currentLanguage = oops.language.current;
          // 遍历所有 LanguageToggle，找到匹配的并设置为选中
          for (var _iterator = _createForOfIteratorHelperLoose(this.languageToggles), _step; !(_step = _iterator()).done;) {
            var langToggle = _step.value;
            if (langToggle.key === currentLanguage) {
              langToggle.toggle.isChecked = true; // 选中当前语言
              return;
            }
          }
        };
        _proto.onBack = function onBack() {
          oops.gui.remove(UIID.LanguagePopup);
        };
        return LanguagePopup;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "languageToggles", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResLoader.ts', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, sp, Component, resLoader, LanguageData;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      LanguageData = module.LanguageData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "53e25hqV6VEJqayXfz6Qam2", "LanguageSpine", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** Spine 动画多语言 */
      var LanguageSpine = exports('LanguageSpine', (_dec = ccclass("LanguageSpine"), _dec2 = menu('OopsFramework/Language/LanguageSpine （Spine 动画多语言）'), _dec3 = property({
        serializable: true
      }), _dec4 = property({
        tooltip: "spine资源所在的bundle,默认是resources"
      }), _dec5 = property({
        type: CCString,
        serializable: true
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LanguageSpine, _Component);
        function LanguageSpine() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_dataID", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bundleName", _descriptor2, _assertThisInitialized(_this));
          /** 默认动画名 */
          _this._defaultAnimation = "";
          return _this;
        }
        var _proto = LanguageSpine.prototype;
        _proto.onLoad = function onLoad() {
          var spine = this.getComponent(sp.Skeleton);
          this._defaultAnimation = spine.animation;
        };
        _proto.start = function start() {
          this.updateSpine(this.bundleName);
        }

        /** 更新语言 */;
        _proto.language = function language() {
          this.updateSpine(this.bundleName);
        };
        _proto.updateSpine = function updateSpine(bundleName) {
          var path = "";
          if (bundleName != resLoader.defaultBundleName) {
            path = LanguageData.other_bundle_path;
          }

          // 获取语言标记
          path = path + LanguageData.path_spine + ("/" + LanguageData.current + "/" + this.dataID);
          var res = resLoader.get(path, sp.SkeletonData, bundleName);
          if (res) {
            var spine = this.getComponent(sp.Skeleton);
            spine.skeletonData = res;
            spine.setAnimation(0, this._defaultAnimation, true);
          } else {
            console.error("[LanguageSpine] 资源不存在 " + path);
          }
        };
        _createClass(LanguageSpine, [{
          key: "dataID",
          get: function get() {
            return this._dataID || "";
          },
          set: function set(value) {
            this._dataID = value;
            {
              this.updateSpine(this.bundleName);
            }
          }
        }]);
        return LanguageSpine;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_dataID", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bundleName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return resLoader.defaultBundleName;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "dataID", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "dataID"), _class2.prototype)), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResLoader.ts', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, SpriteFrame, Sprite, UITransform, Component, resLoader, LanguageData;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      LanguageData = module.LanguageData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "11b96k/RIZF57Loehxyl6Hs", "LanguageSprite", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 图片多语言 */
      var LanguageSprite = exports('LanguageSprite', (_dec = ccclass("LanguageSprite"), _dec2 = menu('OopsFramework/Language/LanguageSprite （图片多语言）'), _dec3 = property({
        serializable: true
      }), _dec4 = property({
        tooltip: "图片资源所在的bundle,默认是resources"
      }), _dec5 = property({
        type: CCString,
        serializable: true
      }), _dec6 = property({
        tooltip: "是否设置为图片原始资源大小"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LanguageSprite, _Component);
        function LanguageSprite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_dataID", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bundleName", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isRawSize", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LanguageSprite.prototype;
        _proto.start = function start() {
          this.updateSprite(this.bundleName);
        }

        /** 更新语言 */;
        _proto.language = function language() {
          this.updateSprite(this.bundleName);
        };
        _proto.updateSprite = function updateSprite(bundleName) {
          var path = "";
          if (bundleName != resLoader.defaultBundleName) {
            path = LanguageData.other_bundle_path;
          }

          // 获取语言标记
          path = path + LanguageData.path_texture + ("/" + LanguageData.current + "/" + this.dataID + "/spriteFrame");
          var res = resLoader.get(path, SpriteFrame, bundleName);
          if (res) {
            var spcomp = this.getComponent(Sprite);
            spcomp.spriteFrame = res;

            /** 修改节点为原始图片资源大小 */
            if (this.isRawSize) {
              var _spcomp$getComponent;
              //@ts-ignore
              var rawSize = res._originalSize;
              (_spcomp$getComponent = spcomp.getComponent(UITransform)) == null || _spcomp$getComponent.setContentSize(rawSize);
            }
          } else {
            console.error(bundleName, "下[LanguageSprite] 资源不存在 " + path);
          }
        };
        _createClass(LanguageSprite, [{
          key: "dataID",
          get: function get() {
            return this._dataID || "";
          },
          set: function set(value) {
            this._dataID = value;
            {
              this.updateSprite(this.bundleName);
            }
          }
        }]);
        return LanguageSprite;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_dataID", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bundleName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return resLoader.defaultBundleName;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "dataID", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "dataID"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isRawSize", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, Toggle, Component, Language, EventType, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Toggle = module.Toggle;
      Component = module.Component;
    }, function (module) {
      Language = module.Language;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "0522d1wrXtMILCNTVMaVeTR", "LanguageToggle", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      Enum(Language);
      var LanguageToggle = exports('LanguageToggle', (_dec = ccclass('LanguageToggle'), _dec2 = property({
        type: Language,
        tooltip: "语言Key，如 'en', 'zh'",
        visible: true
      }), _dec3 = property({
        type: Toggle,
        tooltip: "对应的Toggle组件"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LanguageToggle, _Component);
        function LanguageToggle() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "key", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggle", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LanguageToggle.prototype;
        _proto.onToggle = function onToggle(event, customEventData) {
          oops.storage.set("language", this.key);
          oops.language.setLanguage(this.key, function () {
            oops.message.dispatchEvent(EventType.REFRESH_LANGUAGE);
          });
        };
        return LanguageToggle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "key", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return Language.ZH_CN;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Defines.ts', './LayerPopup.ts'], function (exports) {
  var _inheritsLoose, cclegacy, ViewParams, LayerPopUp;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ViewParams = module.ViewParams;
    }, function (module) {
      LayerPopUp = module.LayerPopUp;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dcad5w8wHlEDJpIKJ4gUxEP", "LayerDialog", undefined);

      /** 模式弹窗数据 */

      /*
       * 模式弹窗层，该层的窗口同时只能显示一个，删除以后会自动从队列当中取一个弹窗，直到队列为空
       */
      var LayerDialog = exports('LayerDialog', /*#__PURE__*/function (_LayerPopUp) {
        _inheritsLoose(LayerDialog, _LayerPopUp);
        function LayerDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _LayerPopUp.call.apply(_LayerPopUp, [this].concat(args)) || this;
          /** 窗口调用参数队列 */
          _this.params = [];
          return _this;
        }
        var _proto = LayerDialog.prototype;
        _proto.add = function add(config, params, callbacks) {
          // 控制同一时间只能显示一个模式窗口
          if (this.ui_nodes.size > 0) {
            this.params.push({
              config: config,
              params: params,
              callbacks: callbacks
            });
            return;
          }
          this.black.enabled = true;
          this.show(config, params, callbacks);
        }

        /** 显示模式弹窗 */;
        _proto.show = function show(config, params, callbacks) {
          var vp = this.ui_cache.get(config.prefab);
          if (vp == null) {
            vp = new ViewParams();
            vp.valid = true;
            vp.config = config;
          }
          vp.params = params || {};
          vp.callbacks = callbacks != null ? callbacks : {};
          this.ui_nodes.set(vp.config.prefab, vp);
          this.load(vp, config.bundle);
        };
        _proto.onCloseWindow = function onCloseWindow(vp) {
          _LayerPopUp.prototype.onCloseWindow.call(this, vp);
          setTimeout(this.next.bind(this), 0);
        };
        _proto.setBlackDisable = function setBlackDisable() {
          if (this.params.length == 0) {
            this.black.enabled = false;
            this.closeVacancyRemove();
            this.closeMask();
          }
        };
        _proto.next = function next() {
          if (this.params.length > 0) {
            var param = this.params.shift();
            this.show(param.config, param.params, param.callbacks);
          }
        };
        return LayerDialog;
      }(LayerPopUp));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './DelegateComponent.ts', './LayerDialog.ts', './LayerNotify.ts', './LayerPopup.ts', './LayerUI.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, view, screen, ResolutionPolicy, warn, Node, Layers, Widget, Camera, oops, DelegateComponent, LayerDialog, LayerNotify, LayerPopUp, LayerUI;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      view = module.view;
      screen = module.screen;
      ResolutionPolicy = module.ResolutionPolicy;
      warn = module.warn;
      Node = module.Node;
      Layers = module.Layers;
      Widget = module.Widget;
      Camera = module.Camera;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      DelegateComponent = module.DelegateComponent;
    }, function (module) {
      LayerDialog = module.LayerDialog;
    }, function (module) {
      LayerNotify = module.LayerNotify;
    }, function (module) {
      LayerPopUp = module.LayerPopUp;
    }, function (module) {
      LayerUI = module.LayerUI;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7ba675xFGdHqIOykTysNzEu", "LayerManager", undefined);

      /** 屏幕适配类型 */
      var ScreenAdapterType = exports('ScreenAdapterType', /*#__PURE__*/function (ScreenAdapterType) {
        ScreenAdapterType[ScreenAdapterType["Auto"] = 0] = "Auto";
        ScreenAdapterType[ScreenAdapterType["Landscape"] = 1] = "Landscape";
        ScreenAdapterType[ScreenAdapterType["Portrait"] = 2] = "Portrait";
        return ScreenAdapterType;
      }({}));

      /** 界面层类型 */
      var LayerType = exports('LayerType', /*#__PURE__*/function (LayerType) {
        LayerType["Game"] = "LayerGame";
        LayerType["UI"] = "LayerUI";
        LayerType["PopUp"] = "LayerPopUp";
        LayerType["Dialog"] = "LayerDialog";
        LayerType["System"] = "LayerSystem";
        LayerType["Notify"] = "LayerNotify";
        LayerType["Guide"] = "LayerGuide";
        return LayerType;
      }({}));

      /** 
       * 界面配置结构体
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037986&doc_id=2873565
       * @example
      // 界面唯一标识
      export enum UIID {
          Loading = 1,
          Window,
          Netinstable
      }
        // 打开界面方式的配置数据
      export var UIConfigData: { [key: number]: UIConfig } = {
          [UIID.Loading]: { layer: LayerType.UI, prefab: "loading/prefab/loading", bundle: "resources" },
          [UIID.Netinstable]: { layer: LayerType.PopUp, prefab: "prefabs/common/netinstable" },
          [UIID.Window]: { layer: LayerType.Dialog, prefab: "prefabs/common/window" }
      }
       */

      /** 界面层级管理器 */
      var LayerManager = exports('LayerManager', /*#__PURE__*/function () {
        var _proto = LayerManager.prototype;
        _proto.initScreenAdapter = function initScreenAdapter() {
          var drs = view.getDesignResolutionSize();
          var ws = screen.windowSize;
          this.windowAspectRatio = ws.width / ws.height;
          this.designAspectRatio = drs.width / drs.height;
          var finalW = 0;
          var finalH = 0;
          if (this.windowAspectRatio > this.designAspectRatio) {
            finalH = drs.height;
            finalW = finalH * ws.width / ws.height;
            oops.log.logView("适配屏幕高度", "【横屏】");
          } else {
            finalW = drs.width;
            finalH = finalW * ws.height / ws.width;
            oops.log.logView("适配屏幕宽度", "【竖屏】");
          }
          view.setDesignResolutionSize(finalW, finalH, ResolutionPolicy.UNKNOWN);
        }

        /**
         * 构造函数
         * @param root  界面根节点
         */;
        function LayerManager(root) {
          /** 界面根节点 */
          this.root = void 0;
          /** 界面摄像机 */
          this.camera = void 0;
          /** 游戏界面特效层 */
          this.game = void 0;
          /** 新手引导层 */
          this.guide = void 0;
          /** 窗口宽高比例 */
          this.windowAspectRatio = 0;
          /** 设计宽高比例 */
          this.designAspectRatio = 0;
          /** 界面层 */
          this.ui = void 0;
          /** 弹窗层 */
          this.popup = void 0;
          /** 只能弹出一个的弹窗 */
          this.dialog = void 0;
          /** 游戏系统提示弹窗  */
          this.system = void 0;
          /** 消息提示控制器，请使用show方法来显示 */
          this.notify = void 0;
          /** UI配置 */
          this.configs = {};
          this.root = root;
          this.initScreenAdapter();
          this.camera = this.root.getComponentInChildren(Camera);
          this.game = this.create_node(LayerType.Game);
          this.ui = new LayerUI(LayerType.UI);
          this.popup = new LayerPopUp(LayerType.PopUp);
          this.dialog = new LayerDialog(LayerType.Dialog);
          this.system = new LayerDialog(LayerType.System);
          this.notify = new LayerNotify(LayerType.Notify);
          this.guide = this.create_node(LayerType.Guide);
          root.addChild(this.game);
          root.addChild(this.ui);
          root.addChild(this.popup);
          root.addChild(this.dialog);
          root.addChild(this.system);
          root.addChild(this.notify);
          root.addChild(this.guide);
        }

        /**
         * 初始化所有UI的配置对象
         * @param configs 配置对象
         */
        _proto.init = function init(configs) {
          this.configs = configs;
        }

        /**
         * 设置窗口打开失败回调
         * @param callback  回调方法
         */;
        _proto.setOpenFailure = function setOpenFailure(callback) {
          this.ui.onOpenFailure = this.popup.onOpenFailure = this.dialog.onOpenFailure = this.system.onOpenFailure = callback;
        }

        /**
         * 渐隐飘过提示
         * @param content 文本表示
         * @param useI18n 是否使用多语言
         * @example 
         * oops.gui.toast("提示内容");
         */;
        _proto.toast = function toast(content, useI18n) {
          if (useI18n === void 0) {
            useI18n = false;
          }
          this.notify.toast(content, useI18n);
        }

        /** 打开等待提示 */;
        _proto.waitOpen = function waitOpen() {
          this.notify.waitOpen();
        }

        /** 关闭等待提示 */;
        _proto.waitClose = function waitClose() {
          this.notify.waitClose();
        }

        /**
         * 设置界面配置
         * @param uiId   要设置的界面id
         * @param config 要设置的配置
         */;
        _proto.setConfig = function setConfig(uiId, config) {
          this.configs[uiId] = config;
        }

        /**
         * 同步打开一个窗口
         * @param uiId          窗口唯一编号
         * @param uiArgs        窗口参数
         * @param callbacks     回调对象
         * @example
        var uic: UICallbacks = {
            onAdded: (node: Node, params: any) => {
                var comp = node.getComponent(LoadingViewComp) as ecs.Comp;
            }
            onRemoved:(node: Node | null, params: any) => {
                        
            }
        };
        oops.gui.open(UIID.Loading, null, uic);
         */;
        _proto.open = function open(uiId, uiArgs, callbacks) {
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          var config = this.configs[uiId];
          if (config == null) {
            warn("\u6253\u5F00\u7F16\u53F7\u4E3A\u3010" + uiId + "\u3011\u7684\u754C\u9762\u5931\u8D25\uFF0C\u914D\u7F6E\u4FE1\u606F\u4E0D\u5B58\u5728");
            return;
          }
          switch (config.layer) {
            case LayerType.UI:
              this.ui.add(config, uiArgs, callbacks);
              break;
            case LayerType.PopUp:
              this.popup.add(config, uiArgs, callbacks);
              break;
            case LayerType.Dialog:
              this.dialog.add(config, uiArgs, callbacks);
              break;
            case LayerType.System:
              this.system.add(config, uiArgs, callbacks);
              break;
          }
        }

        /**
         * 异步打开一个窗口
         * @param uiId          窗口唯一编号
         * @param uiArgs        窗口参数
         * @example 
         * var node = await oops.gui.openAsync(UIID.Loading);
         */;
        _proto.openAsync = /*#__PURE__*/
        function () {
          var _openAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(uiId, uiArgs) {
            var _this = this;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (uiArgs === void 0) {
                    uiArgs = null;
                  }
                  return _context.abrupt("return", new Promise(function (resolve, reject) {
                    var callbacks = {
                      onAdded: function onAdded(node, params) {
                        resolve(node);
                      },
                      onLoadFailure: function onLoadFailure() {
                        resolve(null);
                      }
                    };
                    _this.open(uiId, uiArgs, callbacks);
                  }));
                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function openAsync(_x, _x2) {
            return _openAsync.apply(this, arguments);
          }
          return openAsync;
        }()
        /**
         * 场景替换
         * @param removeUiId  移除场景编号
         * @param openUiId    新打开场景编号
         * @param uiArgs      新打开场景参数
         */;

        _proto.replace = function replace(removeUiId, openUiId, uiArgs) {
          var _this2 = this;
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          var callbacks = {
            onAdded: function onAdded(node, params) {
              _this2.remove(removeUiId);
            }
          };
          this.open(openUiId, uiArgs, callbacks);
        }

        /**
         * 异步场景替换
         * @param removeUiId  移除场景编号
         * @param openUiId    新打开场景编号
         * @param uiArgs      新打开场景参数
         */;
        _proto.replaceAsync = function replaceAsync(removeUiId, openUiId, uiArgs) {
          var _this3 = this;
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var node;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this3.openAsync(openUiId, uiArgs);
                case 2:
                  node = _context2.sent;
                  if (node) {
                    _this3.remove(removeUiId);
                    resolve(node);
                  } else {
                    resolve(null);
                  }
                case 4:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        }

        /**
         * 缓存中是否存在指定标识的窗口
         * @param uiId 窗口唯一标识
         * @example
         * oops.gui.has(UIID.Loading);
         */;
        _proto.has = function has(uiId) {
          var config = this.configs[uiId];
          if (config == null) {
            warn("\u7F16\u53F7\u4E3A\u3010" + uiId + "\u3011\u7684\u754C\u9762\u914D\u7F6E\u4E0D\u5B58\u5728\uFF0C\u914D\u7F6E\u4FE1\u606F\u4E0D\u5B58\u5728");
            return false;
          }
          var result = false;
          switch (config.layer) {
            case LayerType.UI:
              result = this.ui.has(config.prefab);
              break;
            case LayerType.PopUp:
              result = this.popup.has(config.prefab);
              break;
            case LayerType.Dialog:
              result = this.dialog.has(config.prefab);
              break;
            case LayerType.System:
              result = this.system.has(config.prefab);
              break;
          }
          return result;
        }

        /**
         * 缓存中是否存在指定标识的窗口
         * @param uiId 窗口唯一标识
         * @example
         * oops.gui.has(UIID.Loading);
         */;
        _proto.get = function get(uiId) {
          var config = this.configs[uiId];
          if (config == null) {
            warn("\u7F16\u53F7\u4E3A\u3010" + uiId + "\u3011\u7684\u754C\u9762\u914D\u7F6E\u4E0D\u5B58\u5728\uFF0C\u914D\u7F6E\u4FE1\u606F\u4E0D\u5B58\u5728");
            return null;
          }
          var result = null;
          switch (config.layer) {
            case LayerType.UI:
              result = this.ui.get(config.prefab);
              break;
            case LayerType.PopUp:
              result = this.popup.get(config.prefab);
              break;
            case LayerType.Dialog:
              result = this.dialog.get(config.prefab);
              break;
            case LayerType.System:
              result = this.system.get(config.prefab);
              break;
          }
          return result;
        }

        /**
         * 移除指定标识的窗口
         * @param uiId         窗口唯一标识
         * @param isDestroy    移除后是否释放
         * @example
         * oops.gui.remove(UIID.Loading);
         */;
        _proto.remove = function remove(uiId, isDestroy) {
          var config = this.configs[uiId];
          if (config == null) {
            warn("\u5220\u9664\u7F16\u53F7\u4E3A\u3010" + uiId + "\u3011\u7684\u754C\u9762\u5931\u8D25\uFF0C\u914D\u7F6E\u4FE1\u606F\u4E0D\u5B58\u5728");
            return;
          }
          switch (config.layer) {
            case LayerType.UI:
              this.ui.remove(config.prefab, isDestroy);
              break;
            case LayerType.PopUp:
              this.popup.remove(config.prefab, isDestroy);
              break;
            case LayerType.Dialog:
              this.dialog.remove(config.prefab, isDestroy);
              break;
            case LayerType.System:
              this.system.remove(config.prefab, isDestroy);
              break;
          }
        }

        /**
         * 删除一个通过this框架添加进来的节点
         * @param node          窗口节点
         * @param isDestroy     移除后是否释放资源
         * @example
         * oops.gui.removeByNode(cc.Node);
         */;
        _proto.removeByNode = function removeByNode(node, isDestroy) {
          if (node instanceof Node) {
            var comp = node.getComponent(DelegateComponent);
            if (comp && comp.vp) {
              // 释放显示的界面
              if (node.parent) {
                node.parent.remove(comp.vp.config.prefab, isDestroy);
              }
              // 释放缓存中的界面
              else if (isDestroy) {
                switch (comp.vp.config.layer) {
                  case LayerType.UI:
                    // @ts-ignore 注：不对外使用
                    this.ui.removeCache(comp.vp.config.prefab);
                    break;
                  case LayerType.PopUp:
                    // @ts-ignore 注：不对外使用
                    this.popup.removeCache(comp.vp.config.prefab);
                    break;
                  case LayerType.Dialog:
                    // @ts-ignore 注：不对外使用
                    this.dialog.removeCache(comp.vp.config.prefab);
                    break;
                  case LayerType.System:
                    // @ts-ignore 注：不对外使用
                    this.system.removeCache(comp.vp.config.prefab);
                    break;
                }
              }
            } else {
              warn("\u5F53\u524D\u5220\u9664\u7684node\u4E0D\u662F\u901A\u8FC7\u754C\u9762\u7BA1\u7406\u5668\u6DFB\u52A0\u5230\u821E\u53F0\u4E0A");
              node.destroy();
            }
          }
        }

        /**
         * 清除所有窗口
         * @param isDestroy 移除后是否释放
         * @example
         * oops.gui.clear();
         */;
        _proto.clear = function clear(isDestroy) {
          if (isDestroy === void 0) {
            isDestroy = false;
          }
          this.ui.clear(isDestroy);
          this.popup.clear(isDestroy);
          this.dialog.clear(isDestroy);
          this.system.clear(isDestroy);
        };
        _proto.create_node = function create_node(name) {
          var node = new Node(name);
          node.layer = Layers.Enum.UI_2D;
          var w = node.addComponent(Widget);
          w.isAlignLeft = w.isAlignRight = w.isAlignTop = w.isAlignBottom = true;
          w.left = w.right = w.top = w.bottom = 0;
          w.alignMode = 2;
          w.enabled = true;
          return node;
        };
        return LayerManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerNotify.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ViewUtil.ts', './Notify.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Layers, BlockInputEvents, instantiate, Widget, Node, ViewUtil, Notify;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Layers = module.Layers;
      BlockInputEvents = module.BlockInputEvents;
      instantiate = module.instantiate;
      Widget = module.Widget;
      Node = module.Node;
    }, function (module) {
      ViewUtil = module.ViewUtil;
    }, function (module) {
      Notify = module.Notify;
    }],
    execute: function () {
      cclegacy._RF.push({}, "da14ax+B2xNsL2taQFOh7we", "LayerNotify", undefined);
      var ToastPrefabPath = 'prefabs/common/notify';
      var WaitPrefabPath = 'prefabs/common/wait';

      /*
       * 滚动消息提示层
       */
      var LayerNotify = exports('LayerNotify', /*#__PURE__*/function (_Node) {
        _inheritsLoose(LayerNotify, _Node);
        function LayerNotify(name) {
          var _this;
          _this = _Node.call(this, name) || this;
          _this.black = void 0;
          /** 等待提示资源 */
          _this.wait = null;
          /** 自定义弹出提示资源 */
          _this.notify = null;
          /** 自定义弹出提示内容资源 */
          _this.notifyItem = null;
          var widget = _this.addComponent(Widget);
          widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
          widget.left = widget.right = widget.top = widget.bottom = 0;
          widget.alignMode = 2;
          widget.enabled = true;
          _this.init();
          return _this;
        }
        var _proto = LayerNotify.prototype;
        _proto.init = function init() {
          this.layer = Layers.Enum.UI_2D;
          this.black = this.addComponent(BlockInputEvents);
          this.black.enabled = false;
        }

        /** 打开等待提示 */;
        _proto.waitOpen = function waitOpen() {
          if (this.wait == null) this.wait = ViewUtil.createPrefabNode(WaitPrefabPath);
          if (this.wait.parent == null) {
            this.wait.parent = this;
            this.black.enabled = true;
          }
        }

        /** 关闭等待提示 */;
        _proto.waitClose = function waitClose() {
          if (this.wait && this.wait.parent) {
            this.wait.parent = null;
            this.black.enabled = false;
          }
        }

        /**
         * 渐隐飘过提示
         * @param content 文本表示
         * @param useI18n 是否使用多语言
         */;
        _proto.toast = function toast(content, useI18n) {
          var _this2 = this;
          if (this.notify == null) {
            console.log("ToastPrefabPath->", ToastPrefabPath);
            this.notify = ViewUtil.createPrefabNode(ToastPrefabPath);
            if (this.notify) {
              this.notifyItem = this.notify.children[0];
              this.notifyItem.parent = null;
            } else {
              console.log("toast->创建预制体失败");
            }
          }
          this.notify.parent = this;
          var childNode = instantiate(this.notifyItem);
          var prompt = childNode.getChildByName("prompt");
          var toastCom = prompt.getComponent(Notify);
          childNode.parent = this.notify;
          toastCom.onComplete = function () {
            if (_this2.notify.children.length == 0) {
              _this2.notify.parent = null;
            }
          };
          toastCom.toast(content, useI18n);

          // 超过3个提示，就施放第一个提示
          if (this.notify.children.length > 3) {
            this.notify.children[0].destroy();
          }
        };
        return LayerNotify;
      }(Node));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ViewUtil.ts', './LayerUI.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, Layers, BlockInputEvents, Node, ViewUtil, LayerUI;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Layers = module.Layers;
      BlockInputEvents = module.BlockInputEvents;
      Node = module.Node;
    }, function (module) {
      ViewUtil = module.ViewUtil;
    }, function (module) {
      LayerUI = module.LayerUI;
    }],
    execute: function () {
      cclegacy._RF.push({}, "25d07BQBCFADaSsh/I3GrTX", "LayerPopup", undefined);
      var Mask = 'prefabs/common/mask';

      /* 弹窗层，允许同时弹出多个窗口 */
      var LayerPopUp = exports('LayerPopUp', /*#__PURE__*/function (_LayerUI) {
        _inheritsLoose(LayerPopUp, _LayerUI);
        function LayerPopUp(name) {
          var _this;
          _this = _LayerUI.call(this, name) || this;
          /** 触摸事件阻挡 */
          _this.black = void 0;
          /** 半透明遮罩资源 */
          _this.mask = void 0;
          _this.init();
          return _this;
        }
        var _proto = LayerPopUp.prototype;
        _proto.init = function init() {
          this.layer = Layers.Enum.UI_2D;
          this.black = this.addComponent(BlockInputEvents);
          this.black.enabled = false;
        };
        _proto.showUi = /*#__PURE__*/function () {
          var _showUi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(vp) {
            var r;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _LayerUI.prototype.showUi.call(this, vp);
                case 2:
                  r = _context.sent;
                  if (r) {
                    // 界面加载完成显示时，启动触摸非窗口区域关闭
                    this.openVacancyRemove(vp.config);

                    // 界面加载完成显示时，层级事件阻挡
                    this.black.enabled = true;
                  }
                  return _context.abrupt("return", r);
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function showUi(_x) {
            return _showUi.apply(this, arguments);
          }
          return showUi;
        }();
        _proto.onCloseWindow = function onCloseWindow(vp) {
          _LayerUI.prototype.onCloseWindow.call(this, vp);

          // 界面关闭后，关闭触摸事件阻挡、关闭触摸非窗口区域关闭、关闭遮罩
          this.setBlackDisable();
        }

        /** 设置触摸事件阻挡 */;
        _proto.setBlackDisable = function setBlackDisable() {
          // 所有弹窗关闭后，关闭事件阻挡功能
          if (this.ui_nodes.size == 0) {
            this.black.enabled = false;
            this.closeVacancyRemove();
            this.closeMask();
          }
        }

        /** 关闭遮罩 */;
        _proto.closeMask = function closeMask() {
          if (this.mask == null) return;
          var flag = true;
          for (var _iterator = _createForOfIteratorHelperLoose(this.ui_nodes.values()), _step; !(_step = _iterator()).done;) {
            var value = _step.value;
            if (value.config.mask) {
              flag = false;
              break;
            }
          }
          if (flag) {
            this.mask.parent = null;
          }
        }

        /** 启动触摸非窗口区域关闭 */;
        _proto.openVacancyRemove = function openVacancyRemove(config) {
          if (!this.hasEventListener(Node.EventType.TOUCH_END, this.onTouchEnd, this)) {
            this.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          }

          // 背景半透明遮罩
          if (this.mask == null) {
            this.mask = ViewUtil.createPrefabNode(Mask);
          }
          if (config.mask) {
            this.mask.parent = this;
            this.mask.setSiblingIndex(0);
          }
        }

        /** 关闭触摸非窗口区域关闭 */;
        _proto.closeVacancyRemove = function closeVacancyRemove() {
          var flag = true;
          for (var _iterator2 = _createForOfIteratorHelperLoose(this.ui_nodes.values()), _step2; !(_step2 = _iterator2()).done;) {
            var value = _step2.value;
            if (value.config.vacancy) {
              flag = false;
              break;
            }
          }
          if (flag && this.hasEventListener(Node.EventType.TOUCH_END, this.onTouchEnd, this)) {
            this.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          var _this2 = this;
          if (event.target === this) {
            this.ui_nodes.forEach(function (vp) {
              // 关闭已显示的界面
              if (vp.valid && vp.config.vacancy) {
                _this2.remove(vp.config.prefab, vp.config.destroy);
              }
            });
          }
        };
        _proto.clear = function clear(isDestroy) {
          _LayerUI.prototype.clear.call(this, isDestroy);
          this.black.enabled = false;
          this.closeVacancyRemove();
          this.closeMask();
        };
        return LayerPopUp;
      }(LayerUI));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts', './Defines.ts', './DelegateComponent.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, Widget, Node, instantiate, Prefab, oops, ViewParams, DelegateComponent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Widget = module.Widget;
      Node = module.Node;
      instantiate = module.instantiate;
      Prefab = module.Prefab;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      ViewParams = module.ViewParams;
    }, function (module) {
      DelegateComponent = module.DelegateComponent;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bc8b86Br9dGeKxeLijkyJKE", "LayerUI", undefined);
      /** 界面层对象 */
      var LayerUI = exports('LayerUI', /*#__PURE__*/function (_Node) {
        _inheritsLoose(LayerUI, _Node);
        /**
         * UI基础层，允许添加多个预制件节点
         * @param name 该层名
         */
        function LayerUI(name) {
          var _this;
          _this = _Node.call(this, name) || this;
          /** 全局窗口打开失败 */
          _this.onOpenFailure = null;
          /** 显示界面节点集合 */
          _this.ui_nodes = new Map();
          /** 被移除的界面缓存数据 */
          _this.ui_cache = new Map();
          var widget = _this.addComponent(Widget);
          widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
          widget.left = widget.right = widget.top = widget.bottom = 0;
          widget.alignMode = 2;
          widget.enabled = true;
          return _this;
        }

        /**
         * 添加一个预制件节点到层容器中，该方法将返回一个唯一`uuid`来标识该操作节点
         * @param config     界面配置数据
         * @param params     自定义参数
         * @param callbacks  回调函数对象，可选
         * @returns ture为成功,false为失败
         */
        var _proto = LayerUI.prototype;
        _proto.add = function add(config, params, callbacks) {
          if (this.ui_nodes.has(config.prefab)) {
            console.warn("\u8DEF\u5F84\u4E3A\u3010" + config.prefab + "\u3011\u7684\u9884\u5236\u91CD\u590D\u52A0\u8F7D");
            return;
          }

          // 检查缓存中是否存界面
          var vp = this.ui_cache.get(config.prefab);
          if (vp == null) {
            vp = new ViewParams();
            vp.config = config;
          }
          this.ui_nodes.set(config.prefab, vp);
          vp.params = params != null ? params : {};
          vp.callbacks = callbacks != null ? callbacks : {};
          vp.valid = true;
          this.load(vp, config.bundle);
        }

        /**
         * 加载界面资源
         * @param vp         显示参数
         * @param bundle     远程资源包名，如果为空就是默认本地资源包
         */;
        _proto.load = /*#__PURE__*/
        function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(vp, bundle) {
            var timerId, res, ui, dc;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // 加载界面资源超时提示
                  timerId = setTimeout(this.onLoadingTimeoutGui, oops.config.game.loadingTimeoutGui);
                  if (!(vp && vp.node)) {
                    _context.next = 6;
                    break;
                  }
                  _context.next = 4;
                  return this.showUi(vp);
                case 4:
                  _context.next = 22;
                  break;
                case 6:
                  // 优先加载配置的指定资源包中资源，如果没配置则加载默认资源包资源
                  bundle = bundle || oops.res.defaultBundleName;
                  _context.next = 9;
                  return oops.res.loadAsync(bundle, vp.config.prefab, Prefab);
                case 9:
                  res = _context.sent;
                  if (!res) {
                    _context.next = 20;
                    break;
                  }
                  ui = instantiate(res);
                  vp.node = ui;

                  // 窗口事件委托
                  dc = ui.addComponent(DelegateComponent);
                  dc.vp = vp;
                  dc.onCloseWindow = this.onCloseWindow.bind(this);

                  // 显示界面
                  _context.next = 18;
                  return this.showUi(vp);
                case 18:
                  _context.next = 22;
                  break;
                case 20:
                  console.warn("\u8DEF\u5F84\u4E3A\u3010" + vp.config.prefab + "\u3011\u7684\u9884\u5236\u52A0\u8F7D\u5931\u8D25");
                  this.failure(vp);
                case 22:
                  // 关闭界面资源超时提示
                  oops.gui.waitClose();
                  clearTimeout(timerId);
                case 24:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function load(_x, _x2) {
            return _load.apply(this, arguments);
          }
          return load;
        }() /** 加载超时事件*/;
        _proto.onLoadingTimeoutGui = function onLoadingTimeoutGui() {
          oops.gui.waitOpen();
        }

        /** 窗口关闭事件 */;
        _proto.onCloseWindow = function onCloseWindow(vp) {
          this.ui_nodes["delete"](vp.config.prefab);
        }

        /**
         * 创建界面节点
         * @param vp  视图参数
         */;
        _proto.showUi = /*#__PURE__*/
        function () {
          var _showUi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(vp) {
            var comp, r;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  // 触发窗口添加事件
                  comp = vp.node.getComponent(DelegateComponent);
                  _context2.next = 3;
                  return comp.add();
                case 3:
                  r = _context2.sent;
                  if (r) {
                    vp.node.parent = this;

                    // 标记界面为使用状态
                    vp.valid = true;
                  } else {
                    console.warn("\u8DEF\u5F84\u4E3A\u3010" + vp.config.prefab + "\u3011\u7684\u81EA\u5B9A\u4E49\u9884\u5904\u7406\u903B\u8F91\u5F02\u5E38.\u68C0\u67E5\u9884\u5236\u4E0A\u7ED1\u5B9A\u7684\u7EC4\u4EF6\u4E2D onAdded \u65B9\u6CD5,\u8FD4\u56DEtrue\u624D\u80FD\u6B63\u786E\u5B8C\u6210\u7A97\u53E3\u663E\u793A\u6D41\u7A0B");
                    this.failure(vp);
                  }
                  return _context2.abrupt("return", r);
                case 6:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function showUi(_x3) {
            return _showUi.apply(this, arguments);
          }
          return showUi;
        }() /** 打开窗口失败逻辑 */;
        _proto.failure = function failure(vp) {
          this.onCloseWindow(vp);
          vp.callbacks && vp.callbacks.onLoadFailure && vp.callbacks.onLoadFailure();
          this.onOpenFailure && this.onOpenFailure();
        }

        /**
         * 根据预制件路径删除，预制件如在队列中也会被删除，如果该预制件存在多个也会一起删除
         * @param prefabPath   预制路径
         * @param isDestroy    移除后是否释放
         */;
        _proto.remove = function remove(prefabPath, isDestroy) {
          var release = undefined;
          if (isDestroy !== undefined) release = isDestroy;

          // 界面移出舞台
          var vp = this.ui_nodes.get(prefabPath);
          if (vp) {
            // 优先使用参数中控制的释放条件，如果未传递参数则用配置中的释放条件，默认不缓存关闭的界面
            if (release === undefined) {
              release = vp.config.destroy !== undefined ? vp.config.destroy : true;
            }

            // 不释放界面，缓存起来待下次使用
            if (release === false) {
              this.ui_cache.set(vp.config.prefab, vp);
            }
            var childNode = vp.node;
            var comp = childNode.getComponent(DelegateComponent);
            comp.remove(release);
          }

          // 验证是否删除后台缓存界面
          if (release === true) this.removeCache(prefabPath);
        }

        /** 删除缓存的界面，当缓存界面被移除舞台时，可通过此方法删除缓存界面 */;
        _proto.removeCache = function removeCache(prefabPath) {
          var vp = this.ui_cache.get(prefabPath);
          if (vp) {
            this.onCloseWindow(vp);
            this.ui_cache["delete"](prefabPath);
            var childNode = vp.node;
            childNode.destroy();
          }
        }

        /**
         * 根据预制路径获取已打开界面的节点对象
         * @param prefabPath  预制路径
         */;
        _proto.get = function get(prefabPath) {
          var vp = this.ui_nodes.get(prefabPath);
          if (vp) return vp.node;
          return null;
        }

        /**
         * 判断当前层是否包含 uuid或预制件路径对应的Node节点
         * @param prefabPath 预制件路径或者UUID
         */;
        _proto.has = function has(prefabPath) {
          return this.ui_nodes.has(prefabPath);
        }

        /**
         * 清除所有节点，队列当中的也删除
         * @param isDestroy  移除后是否释放
         */;
        _proto.clear = function clear(isDestroy) {
          var _this2 = this;
          // 清除所有显示的界面
          this.ui_nodes.forEach(function (value, key) {
            _this2.remove(value.config.prefab, isDestroy);
            value.valid = false;
          });
          this.ui_nodes.clear();

          // 清除缓存中的界面
          if (isDestroy) {
            this.ui_cache.forEach(function (value, prefabPath) {
              _this2.removeCache(prefabPath);
            });
          }
        };
        return LayerUI;
      }(Node));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b7a864Zpb5N4Zm7onWE1i9D", "LayerUtil", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-09-01 18:00:28
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-02 12:05:38
       */
      /** 游戏摄像机层数据 */
      var LayerItem = exports('LayerItem', /*#__PURE__*/function () {
        function LayerItem(value, name) {
          this._value = void 0;
          this._name = void 0;
          this._value = value;
          this._name = name;
        }
        _createClass(LayerItem, [{
          key: "value",
          get: function get() {
            return this._value;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "mask",
          get: function get() {
            return 1 << this._value;
          }
        }]);
        return LayerItem;
      }());

      /***
       * 游戏摄像机层管理工具
       */
      var LayerUtil = exports('LayerUtil', /*#__PURE__*/function () {
        function LayerUtil() {}
        /**
         * 设置节点层
         * @param item 层数据
         * @param node 节点
         */
        LayerUtil.setNodeLayer = function setNodeLayer(item, node) {
          node.layer = item.mask;
          node.children.forEach(function (n) {
            n.layer = item.mask;
            LayerUtil.setNodeLayer(item, n);
          });
        };
        return LayerUtil;
      }());
      /** 地图对象层 */
      LayerUtil.MAP = new LayerItem(0, 'MAP');
      /** 替身对象层 */
      LayerUtil.AVATAR = new LayerItem(1, 'AVATAR');
      LayerUtil.IGNORE_RAYCAST = new LayerItem(20, 'IGNORE_RAYCAST');
      LayerUtil.GIZMOS = new LayerItem(21, 'GIZMOS');
      /** 编辑器对象层 */
      LayerUtil.EDITOR = new LayerItem(22, 'EDITOR');
      /** 三维对象层 */
      LayerUtil.UI_3D = new LayerItem(23, 'UI_3D');
      LayerUtil.SCENE_GIZMO = new LayerItem(24, 'SCENE_GIZMO');
      /** 二维对象层 */
      LayerUtil.UI_2D = new LayerItem(25, 'UI_2D');
      /** 引擎分析工具层 */
      LayerUtil.PROFILTER = new LayerItem(28, 'PROFILTER');
      /** 默认对象层 */
      LayerUtil.DEFAULT = new LayerItem(30, 'DEFAULT');
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LevelItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './Configuration.ts', './EventType.ts', './UIConfig.ts', './HistoryManager.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, Label, Component, Config, SudokuGameMode, Configuration, EventType, UIID, HistoryManager, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Config = module.default;
      SudokuGameMode = module.SudokuGameMode;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      HistoryManager = module.HistoryManager;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "42b08UQAl1GE6nwr0ZjBLLM", "LevelItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LevelItem = exports('LevelItem', (_dec = ccclass('LevelItem'), _dec2 = property({
        type: CCInteger,
        tooltip: "关卡难度",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "关卡难度描述",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelItem, _Component);
        function LevelItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sudokuDifficulty", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LevelItem.prototype;
        _proto.start = function start() {
          this.label.string = oops.language.getLangByID(Config.difficulty[this.sudokuDifficulty].label);
        };
        _proto.update = function update(deltaTime) {};
        _proto.onStartNewGame = function onStartNewGame() {
          HistoryManager.getInstance().setCurrentGame();
          Configuration.getInstance().setDifficulty(this.sudokuDifficulty);
          oops.gui.remove(UIID.LevelPopup);
          oops.gui.remove(UIID.SuccessPopup);
          oops.gui.remove(UIID.FailPopup);
          oops.gui.replaceAsync(UIID.Lobby, UIID.Game);
          oops.message.dispatchEvent(EventType.RESET_GAME, {
            gameMode: SudokuGameMode.NORMAL,
            data: {
              isGenerate: true
            }
          });
        };
        return LevelItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sudokuDifficulty", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LevelPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIConfig.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, UIID, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "7e0b9b2fJxK/70lTefTj7OQ", "LevelPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LevelPopup = exports('LevelPopup', (_dec = ccclass('LevelPopup'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelPopup, _Component);
        function LevelPopup() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = LevelPopup.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.onClose = function onClose() {
          oops.gui.remove(UIID.LevelPopup);
        };
        return LevelPopup;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/List.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f4d36IVkDZEFYGJyOy6wiZw", "List", undefined);
      /** 列表 */
      var List = exports('List', /*#__PURE__*/function () {
        function List(only) {
          if (only === void 0) {
            only = true;
          }
          this.element = void 0;
          /** 是否保证元素的唯一性 */
          this.only = false;
          /** 元素数量(内部再增删时会修改这个参数，外部只做计算和绑定使用，切记不可做赋值操作) */
          this.count = 0;
          this.only = only;
          this.element = [];
        }

        /**
         * 添加到末尾(注意如果保证唯一性，那么重复时就直接返回)
         * @param value 
         */
        var _proto = List.prototype;
        _proto.push = function push(value) {
          if (this.only) {
            var index = this.element.indexOf(value);
            if (index >= 0) {
              return false;
            }
          }
          this.element.push(value);
          this.count = this.element.length;
          return true;
        }

        /**
         * 添加到列表头部(注意如果保证唯一性，那么重复时就直接返回)
         * @param value 
         * @returns 
         */;
        _proto.unshift = function unshift(value) {
          if (this.only) {
            var index = this.element.indexOf(value);
            if (index >= 0) {
              return false;
            }
          }
          this.element.unshift(value);
          this.count = this.element.length;
          return true;
        }

        /**
         * 获取并删除最后一个元素
         * @returns 
         */;
        _proto.pop = function pop() {
          if (this.element.length > 0) {
            var result = this.element.pop();
            this.count = this.element.length;
            return result;
          }
          return null;
        }

        /**
         * 获取并删除第一个元素
         * @returns 
         */;
        _proto.shift = function shift() {
          if (this.element.length > 0) {
            var result = this.element.shift();
            this.count = this.element.length;
            return result;
          }
          return null;
        }

        /**
         * 删除指定索引的元素
         * @param index 
         */;
        _proto.removeAt = function removeAt(index) {
          if (index >= this.element.length) {
            throw new Error("删除索引超出范围！");
          }
          var result = this.element[index];
          this.element.splice(index, 1);
          this.count = this.element.length;
          return result;
        }

        /**
         * 删除元素
         * @param value 
         */;
        _proto.remove = function remove(value) {
          var index = this.element.indexOf(value);
          if (index < 0) {
            throw new Error("要删除的内容不在列表中！" + value);
          }
          var result = this.element[index];
          this.element.splice(index, 1);
          this.count = this.element.length;
        }

        /** 移除所有元素 */;
        _proto.clear = function clear() {
          this.count = 0;
          this.element.length = 0;
        }

        /**
         * 判断是否包含
         * @param value 
         * @returns 
         */;
        _proto.has = function has(value) {
          return this.find(value) >= 0;
        }

        /**
         * 查找元素下标
         * @param value 
         * @returns 
         */;
        _proto.find = function find(value) {
          return this.element.indexOf(value);
        }

        /**
         * 查找元素下标
         * @param predicate 
         * @returns 
         */;
        _proto.findIndex = function findIndex(predicate) {
          var index = this.element.findIndex(predicate);
          return index;
        }

        /**
         * 获取指定元素
         * @param index 
         * @returns 
         */;
        _proto.get = function get(index) {
          if (index >= this.element.length) {
            throw new Error("超出索引范围:" + index + "/" + this.element.length);
          }
          return this.element[index];
        }

        /**
         * 源列表数据(注意不要直接进行增删操作，而是通过List.push....等接口进行操作)
         */;
        _createClass(List, [{
          key: "elements",
          get: function get() {
            return this.element;
          }
        }]);
        return List;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingIndicator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "95143M/82NCOLKGzw14JlmS", "LoadingIndicator", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 加载延时提示动画 */
      var LoadingIndicator = exports('LoadingIndicator', (_dec = ccclass("LoadingIndicator"), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingIndicator, _Component);
        function LoadingIndicator() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "loading", _descriptor, _assertThisInitialized(_this));
          _this.loading_rotate = 0;
          return _this;
        }
        var _proto = LoadingIndicator.prototype;
        _proto.update = function update(dt) {
          this.loading_rotate += dt * 220;
          this.loading.setRotationFromEuler(0, 0, -this.loading_rotate % 360);
          if (this.loading_rotate > 360) {
            this.loading_rotate -= 360;
          }
        };
        return LoadingIndicator;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingViewComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIConfig.ts', './Oops.ts', './ECS.ts', './VMParent.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UIID, oops, ecs, VMParent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      ecs = module.ecs;
    }, function (module) {
      VMParent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "92429ykTnxFCrcGyW58JWjj", "LoadingViewComp", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 游戏资源加载 */
      var LoadingViewComp = exports('LoadingViewComp', (_dec = ccclass('LoadingViewComp'), _dec2 = ecs.register('LoadingView', false), _dec(_class = _dec2(_class = /*#__PURE__*/function (_VMParent) {
        _inheritsLoose(LoadingViewComp, _VMParent);
        function LoadingViewComp() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMParent.call.apply(_VMParent, [this].concat(args)) || this;
          /** VM 组件绑定数据 */
          _this.data = {
            /** 加载资源当前进度 */
            finished: 0,
            /** 加载资源最大进度 */
            total: 0,
            /** 加载资源进度比例值 */
            progress: "0",
            /** 加载流程中提示文本 */
            prompt: ""
          };
          _this.progress = 0;
          _this.totalItems = 0;
          _this.loadedItems = 0;
          _this.bundleLoadStatus = new Map();
          return _this;
        }
        var _proto = LoadingViewComp.prototype;
        _proto.start = function start() {
          // if (!sys.isNative) {
          this.enter();
          // }
        };

        _proto.enter = function enter() {
          oops.gui.replaceAsync(UIID.Loading, UIID.Lobby);
        };
        return LoadingViewComp;
      }(VMParent)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "fc824P6sUVOdoyY74eQ2IdN", "LobbyView", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LobbyView = exports('LobbyView', (_dec = ccclass('LobbyView'), _dec2 = property({
        type: Node,
        tooltip: "主页面",
        visible: true
      }), _dec3 = property({
        type: Node,
        tooltip: "每日挑战页面",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "统计页面",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyView, _Component);
        function LobbyView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "homePage", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "dailyChallengePage", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "statisticsPage", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LobbyView.prototype;
        _proto.hideAllPages = function hideAllPages() {
          this.homePage.active = false;
          this.dailyChallengePage.active = false;
          this.statisticsPage.active = false;
        };
        _proto.showHomePage = function showHomePage() {
          this.hideAllPages();
          this.homePage.active = true;
        };
        _proto.showDailyChallengePage = function showDailyChallengePage() {
          this.hideAllPages();
          this.dailyChallengePage.active = true;
        };
        _proto.showStatisticsPage = function showStatisticsPage() {
          this.hideAllPages();
          this.statisticsPage.active = true;
        };
        _proto.start = function start() {
          this.showHomePage();
        };
        return LobbyView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "homePage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dailyChallengePage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "statisticsPage", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalPuzzleService.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './GameLogic.ts', './ResLoader.ts', './Oops.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, JsonAsset, Config, SudokuDifficulty, PuzzleLibraryPath, GameLogic, resLoader, oops;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      JsonAsset = module.JsonAsset;
    }, function (module) {
      Config = module.default;
      SudokuDifficulty = module.SudokuDifficulty;
      PuzzleLibraryPath = module.PuzzleLibraryPath;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cf3e6oTKOhNG4vbXo6op45s", "LocalPuzzleService", undefined);
      var LocalPuzzleService = exports('LocalPuzzleService', /*#__PURE__*/function () {
        function LocalPuzzleService() {
          var _this$pathMapping;
          this.loadedLibraries = new Map();
          this.pathMapping = void 0;
          this.pathMapping = (_this$pathMapping = {}, _this$pathMapping[SudokuDifficulty.Novice] = PuzzleLibraryPath.Novice, _this$pathMapping[SudokuDifficulty.Beginner] = PuzzleLibraryPath.Beginner, _this$pathMapping[SudokuDifficulty.Elementary] = PuzzleLibraryPath.Elementary, _this$pathMapping[SudokuDifficulty.Intermediate] = PuzzleLibraryPath.Intermediate, _this$pathMapping[SudokuDifficulty.Advanced] = PuzzleLibraryPath.Advanced, _this$pathMapping[SudokuDifficulty.Expert] = PuzzleLibraryPath.Expert, _this$pathMapping[SudokuDifficulty.Master] = PuzzleLibraryPath.Master, _this$pathMapping[SudokuDifficulty.Extreme] = PuzzleLibraryPath.Extreme, _this$pathMapping);
        }

        /**
        * 获取 LocalPuzzleService 单例实例
        */
        LocalPuzzleService.getInstance = function getInstance() {
          if (!LocalPuzzleService.instance) {
            LocalPuzzleService.instance = new LocalPuzzleService();
          }
          return LocalPuzzleService.instance;
        }

        /**
         * 从多个题库中按概率随机选择题目
         * @param probConfig 题库概率配置 {难度: 概率}
         * @example 
         * getRandomPuzzleFromLibraries({
         *     [SudokuDifficulty.Novice]: 0.3,
         *     [SudokuDifficulty.Intermediate]: 0.7
         * })
         */;
        var _proto = LocalPuzzleService.prototype;
        _proto.getRandomPuzzleFromLibraries = /*#__PURE__*/
        function () {
          var _getRandomPuzzleFromLibraries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(probConfig) {
            var selectedDifficulty;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  this.validateProbabilityConfig(probConfig);
                  selectedDifficulty = this.selectDifficulty(probConfig);
                  _context.next = 5;
                  return this.getRandomPuzzleByDifficulty(selectedDifficulty);
                case 5:
                  return _context.abrupt("return", _context.sent);
                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](0);
                  console.error("随机选择题库失败:", _context.t0);
                  oops.gui.toast("题库选择失败，由本地生成！", true);
                  return _context.abrupt("return", this.generateFallbackPuzzle(this.getFirstDifficulty(probConfig)));
                case 13:
                case "end":
                  return _context.stop();
              }
            }, _callee, this, [[0, 8]]);
          }));
          function getRandomPuzzleFromLibraries(_x) {
            return _getRandomPuzzleFromLibraries.apply(this, arguments);
          }
          return getRandomPuzzleFromLibraries;
        }()
        /**
         * 从指定难度题库中随机获取题目
         * @param difficulty 指定难度等级
         */;

        _proto.getRandomPuzzleByDifficulty = /*#__PURE__*/
        function () {
          var _getRandomPuzzleByDifficulty = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(difficulty) {
            var puzzles, randomIndex;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  _context2.next = 3;
                  return this.loadLibrary(difficulty);
                case 3:
                  puzzles = _context2.sent;
                  if (!(puzzles.length === 0)) {
                    _context2.next = 6;
                    break;
                  }
                  throw new Error("题库为空");
                case 6:
                  randomIndex = Math.floor(Math.random() * puzzles.length);
                  return _context2.abrupt("return", puzzles[randomIndex]);
                case 10:
                  _context2.prev = 10;
                  _context2.t0 = _context2["catch"](0);
                  console.error("\u83B7\u53D6" + difficulty + "\u96BE\u5EA6\u9898\u76EE\u5931\u8D25:", _context2.t0);
                  oops.gui.toast("题目加载失败，由本地生成！", true);
                  return _context2.abrupt("return", this.generateFallbackPuzzle(difficulty));
                case 15:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this, [[0, 10]]);
          }));
          function getRandomPuzzleByDifficulty(_x2) {
            return _getRandomPuzzleByDifficulty.apply(this, arguments);
          }
          return getRandomPuzzleByDifficulty;
        }()
        /**
         * 加载题库（带缓存）
         */;

        _proto.loadLibrary = /*#__PURE__*/
        function () {
          var _loadLibrary = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(difficulty) {
            var path, jsonAsset, puzzles;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (!this.loadedLibraries.has(difficulty)) {
                    _context3.next = 2;
                    break;
                  }
                  return _context3.abrupt("return", this.loadedLibraries.get(difficulty));
                case 2:
                  _context3.prev = 2;
                  path = this.pathMapping[difficulty];
                  _context3.next = 6;
                  return resLoader.loadAsync(path, JsonAsset);
                case 6:
                  jsonAsset = _context3.sent;
                  puzzles = [];
                  if (Array.isArray(jsonAsset.json)) {
                    puzzles = jsonAsset.json.map(function (item) {
                      return {
                        puzzleStr: item.mission,
                        solutionStr: item.solution,
                        blanks: GameLogic.findBlanks(item.mission)
                      };
                    });
                  }
                  this.loadedLibraries.set(difficulty, puzzles);
                  return _context3.abrupt("return", puzzles);
                case 13:
                  _context3.prev = 13;
                  _context3.t0 = _context3["catch"](2);
                  console.error("\u52A0\u8F7D\u9898\u5E93 " + difficulty + " \u5931\u8D25:", _context3.t0);
                  return _context3.abrupt("return", []);
                case 17:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this, [[2, 13]]);
          }));
          function loadLibrary(_x3) {
            return _loadLibrary.apply(this, arguments);
          }
          return loadLibrary;
        }()
        /**
         * 验证概率配置
         */;

        _proto.validateProbabilityConfig = function validateProbabilityConfig(config) {
          var totalProb = Object.values(config).reduce(function (sum, prob) {
            return sum + prob;
          }, 0);
          if (Math.abs(totalProb - 1) > 0.0001) {
            throw new Error("概率总和必须等于1");
          }
        }

        /**
         * 根据概率随机选择难度
         */;
        _proto.selectDifficulty = function selectDifficulty(config) {
          var random = Math.random();
          var accumProb = 0;
          for (var _i = 0, _Object$entries = Object.entries(config); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _Object$entries[_i],
              difficultyStr = _Object$entries$_i[0],
              prob = _Object$entries$_i[1];
            var difficulty = Number(difficultyStr);
            accumProb += prob;
            if (random < accumProb) {
              return difficulty;
            }
          }
          return this.getFirstDifficulty(config);
        }

        /**
         * 获取配置中的第一个难度
         */;
        _proto.getFirstDifficulty = function getFirstDifficulty(config) {
          return Number(Object.keys(config)[0]);
        }

        /**
         * 生成备用题目
         */;
        _proto.generateFallbackPuzzle = function generateFallbackPuzzle(difficulty) {
          return GameLogic.generate(Config.difficulty[difficulty].prefilledNumbers);
        };
        return LocalPuzzleService;
      }());
      LocalPuzzleService.instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Logger.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "479cdJANP5KaJgU+8z0DdSE", "Logger", undefined);

      /** 日志类型 */
      var LogType = exports('LogType', /*#__PURE__*/function (LogType) {
        LogType[LogType["Net"] = 1] = "Net";
        LogType[LogType["Model"] = 2] = "Model";
        LogType[LogType["Business"] = 4] = "Business";
        LogType[LogType["View"] = 8] = "View";
        LogType[LogType["Config"] = 16] = "Config";
        LogType[LogType["Trace"] = 32] = "Trace";
        return LogType;
      }({}));
      var names = {
        "1": "网络日志",
        "2": "数据日志",
        "4": "业务日志",
        "8": "视图日志",
        "16": "配置日志",
        "32": "标准日志"
      };

      /** 
       * 日志管理 
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037904&doc_id=2873565
       * @example
      oops.log.trace("默认标准日志");
      oops.log.logConfig("灰色配置日志");
      oops.log.logNet("橙色网络日志");
      oops.log.logModel("紫色数据日志");
      oops.log.logBusiness("蓝色业务日志");
      oops.log.logView("绿色视图日志");
       */
      var Logger = exports('Logger', /*#__PURE__*/function () {
        function Logger() {}
        Logger.init = function init() {
          this.tags = LogType.Net | LogType.Model | LogType.Business | LogType.View | LogType.Config | LogType.Trace;
        }

        /** 
         * 设置显示的日志类型，默认值为不显示任何类型日志
         * @example
        oops.log.setTags(LogType.View|LogType.Business)
         */;
        Logger.setTags = function setTags(tag) {
          if (tag === void 0) {
            tag = null;
          }
          if (tag) {
            this.tags = tag;
          }
        }

        /**
         * 记录开始计时
         * @param describe  标题描述
         * @example
        oops.log.start();
        ...
        省略N行代码
        ...
        oops.log.end();
         */;
        Logger.start = function start(describe) {
          if (describe === void 0) {
            describe = "Time";
          }
          console.time(describe);
        }

        /**
         * 打印范围内时间消耗
         * @param describe  标题描述
         * @example
        oops.log.start();
        ...
        省略N行代码
        ...
        oops.log.end();
         */;
        Logger.end = function end(describe) {
          if (describe === void 0) {
            describe = "Time";
          }
          console.timeEnd(describe);
        }

        /**
         * 打印表格
         * @param msg       日志消息
         * @param describe  标题描述
         * @example
        var object:any = {uid:1000, name:"oops"};
        oops.log.table(object);
         */;
        Logger.table = function table(msg, describe) {
          if (!this.isOpen(LogType.Trace)) {
            return;
          }
          console.table(msg);
        }

        /**
         * 打印标准日志
         * @param msg       日志消息
         */;
        Logger.trace = function trace(msg, color) {
          if (color === void 0) {
            color = "color:#ffffff;";
          }
          // 标记没有打开，不打印该日志
          if (!this.isOpen(LogType.Trace)) {
            return;
          }
          var backLog = console.log || log;
          backLog.call(null, "%c%s%s", color, this.getDateString(), msg);
        }

        /**
         * 打印网络层日志
         * @param msg       日志消息
         * @param describe  标题描述
         */;
        Logger.logNet = function logNet(msg, describe) {
          this.orange(LogType.Net, msg, describe);
        }

        /**
         * 打印数据层日志
         * @param msg       日志消息
         * @param describe  标题描述
         */;
        Logger.logModel = function logModel(msg, describe) {
          this.violet(LogType.Model, msg, describe);
        }

        /**
         * 打印业务层日志
         * @param msg       日志消息
         * @param describe  标题描述
         */;
        Logger.logBusiness = function logBusiness(msg, describe) {
          this.blue(LogType.Business, msg, describe);
        }

        /**
         * 打印视图日志
         * @param msg       日志消息
         * @param describe  标题描述
         */;
        Logger.logView = function logView(msg, describe) {
          this.green(LogType.View, msg, describe);
        }

        /** 打印配置日志 */;
        Logger.logConfig = function logConfig(msg, describe) {
          this.gray(LogType.Config, msg, describe);
        }

        // 橙色
        ;

        Logger.orange = function orange(tag, msg, describe) {
          this.print(tag, msg, "color:#ee7700;", describe);
        }

        // 紫色
        ;

        Logger.violet = function violet(tag, msg, describe) {
          this.print(tag, msg, "color:Violet;", describe);
        }

        // 蓝色
        ;

        Logger.blue = function blue(tag, msg, describe) {
          this.print(tag, msg, "color:#3a5fcd;", describe);
        }

        // 绿色
        ;

        Logger.green = function green(tag, msg, describe) {
          this.print(tag, msg, "color:green;", describe);
        }

        // 灰色
        ;

        Logger.gray = function gray(tag, msg, describe) {
          this.print(tag, msg, "color:gray;", describe);
        };
        Logger.isOpen = function isOpen(tag) {
          return (this.tags & tag) != 0;
        }

        /**
         * 输出日志
         * @param tag       日志类型
         * @param msg       日志内容
         * @param color     日志文本颜色
         * @param describe  日志标题描述
         */;
        Logger.print = function print(tag, msg, color, describe) {
          // 标记没有打开，不打印该日志
          if (!this.isOpen(tag)) {
            return;
          }
          var backLog = console.log || log;
          var type = names[tag];
          if (describe) {
            backLog.call(null, "%c%s%s%s:%s%o", color, this.getDateString(), '[' + type + ']', this.stack(5), describe, msg);
          } else {
            backLog.call(null, "%c%s%s%s:%o", color, this.getDateString(), '[' + type + ']', this.stack(5), msg);
          }
        };
        Logger.stack = function stack(index) {
          var e = new Error();
          var lines = e.stack.split("\n");
          var result = [];
          lines.forEach(function (line) {
            line = line.substring(7);
            var lineBreak = line.split(" ");
            if (lineBreak.length < 2) {
              result.push(lineBreak[0]);
            } else {
              var _result$push;
              result.push((_result$push = {}, _result$push[lineBreak[0]] = lineBreak[1], _result$push));
            }
          });
          var list = [];
          var splitList = [];
          if (index < result.length - 1) {
            var value;
            for (var a in result[index]) {
              splitList = a.split(".");
              if (splitList.length == 2) {
                list = splitList.concat();
              } else {
                value = result[index][a];
                var start = value.lastIndexOf("/");
                var end = value.lastIndexOf(".");
                if (start > -1 && end > -1) {
                  var r = value.substring(start + 1, end);
                  list.push(r);
                } else {
                  list.push(value);
                }
              }
            }
          }
          if (list.length == 1) {
            return "[" + list[0] + ".ts]";
          } else if (list.length == 2) {
            return "[" + list[0] + ".ts->" + list[1] + "]";
          }
          return "";
        };
        Logger.getDateString = function getDateString() {
          var d = new Date();
          var str = d.getHours().toString();
          var timeStr = "";
          timeStr += (str.length == 1 ? "0" + str : str) + ":";
          str = d.getMinutes().toString();
          timeStr += (str.length == 1 ? "0" + str : str) + ":";
          str = d.getSeconds().toString();
          timeStr += (str.length == 1 ? "0" + str : str) + ":";
          str = d.getMilliseconds().toString();
          if (str.length == 1) str = "00" + str;
          if (str.length == 2) str = "0" + str;
          timeStr += str;
          timeStr = "[" + timeStr + "]";
          return timeStr;
        };
        return Logger;
      }());

      // @ts-ignore
      Logger.tags = 0;
      Logger.init();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./Main.ts', './SafeAreaAdapter.ts', './TipsManager.ts', './Calendar.ts', './DayItem.ts', './InfinitePageView.ts', './InfinitePageViewItem.ts', './AItemRenderer.ts', './AVirtualScrollView.ts', './VirtualList.ts', './VirtualListItem.ts', './Config.ts', './Configuration.ts', './EventType.ts', './UIConfig.ts', './GameController.ts', './BaseDifficultyStrategy.ts', './BeginnerBasicStrategy.ts', './Hot.ts', './HotUpdate.ts', './AppSettings.ts', './DailyGameRecords.ts', './DifficultyConfig.ts', './DifficultyTypes.ts', './GameConfig2.ts', './GameData.ts', './GameHistoryImpl.ts', './GameStatistics.ts', './StoredGameData.ts', './StructuredDailyChallengeHistory.ts', './StructuredHistory.ts', './SudokuData.ts', './SudokuPlayerData.ts', './ThemeConfig.ts', './UndoRecord.ts', './sudoku.ts', './Init.ts', './LoadingViewComp.ts', './GameLogic.ts', './SolveTypes.ts', './SudokuSolverEngine.ts', './HintConfig.ts', './SolvingStep.ts', './BaseStrategy.ts', './BoxLineReductionStrategy.ts', './CandidateErrorStrategy.ts', './FinnedXWingStrategy.ts', './HiddenSinglesStrategy.ts', './HiddenSubsetStrategy.ts', './JellyFishStrategy.ts', './NakedSubsetStrategy.ts', './PointingPairStrategy.ts', './RectangleEliminationStrategy.ts', './SashimiXWingStrategy.ts', './SingleCandidateStrategy.ts', './SkyscraperStrategy.ts', './SwordFishStrategy.ts', './TwoStringKiteStrategy.ts', './UniqueRectangleType1Strategy.ts', './UniqueRectangleType2Strategy.ts', './WWingStrategy.ts', './WXYZWingStrategy.ts', './XWingStrategy.ts', './XYChainStrategy.ts', './XYWingStrategy.ts', './XYZWingStrategy.ts', './YWingStrategy.ts', './SolverUtils.ts', './DailyChallengeManager.ts', './DifficultyManager.ts', './GameManager2.ts', './HistoryManager.ts', './SettingsManager.ts', './StatisticsManager.ts', './GameModel.ts', './LocalPuzzleService.ts', './NetworkService.ts', './CustomToggle.ts', './DailyChallengePageItem.ts', './HintBtn.ts', './HintPageItem.ts', './HintPageView.ts', './HistoryDayItem.ts', './HistoryItem.ts', './LanguageToggle.ts', './LevelItem.ts', './NoteNumber.ts', './NumberBtn.ts', './RefreshThemeAccentColor.ts', './RefreshThemeBG.ts', './RefreshThemeNeutralColor.ts', './RefreshThemePrimaryColor.ts', './RefreshThemeSecondaryColor.ts', './SettingItem.ts', './SudokuCell.ts', './SudokuGrid.ts', './ThemeToggle.ts', './TimerComponent.ts', './BaseSudokuCell.ts', './BaseSudokuGrid.ts', './DailyChallengePage.ts', './HomePage.ts', './StatisticsPage.ts', './FailPopup.ts', './HistoryPopup.ts', './LanguagePopup.ts', './LevelPopup.ts', './SettingPopup.ts', './SuccessPopup.ts', './ThemePopup.ts', './GameView.ts', './LobbyView.ts', './ObjectPool.ts', './XXHash32.ts', './Oops.ts', './Root.ts', './AudioEffect.ts', './AudioEffectPool.ts', './AudioManager.ts', './AudioMusic.ts', './EventDispatcher.ts', './EventMessage.ts', './MessageManager.ts', './ResLoader.ts', './Logger.ts', './RandomManager.ts', './SeedRandom.ts', './StorageManager.ts', './StorageSecurityCrypto.ts', './StorageSecuritySimple.ts', './Timer.ts', './TimerManager.ts', './GameManager.ts', './Defines.ts', './DelegateComponent.ts', './LayerDialog.ts', './LayerManager.ts', './LayerNotify.ts', './LayerPopup.ts', './LayerUI.ts', './CommonPrompt.ts', './LoadingIndicator.ts', './Notify.ts', './ArrayUtil.ts', './CameraUtil.ts', './DeviceUtil.ts', './EncryptUtil.ts', './ImageUtil.ts', './JsonUtil.ts', './LayerUtil.ts', './MathUtil.ts', './ObjectUtil.ts', './PhysicsUtil.ts', './PlatformUtil.ts', './RegexUtil.ts', './RotateUtil.ts', './StringUtil.ts', './TimeUtils.ts', './Vec3Util.ts', './ViewUtil.ts', './Ambilight.ts', './FlashSpine.ts', './FlashSprite.ts', './SpineFinishedRelease.ts', './Effect2DFollow3D.ts', './EffectDelayRelease.ts', './EffectEvent.ts', './EffectFinishedRelease.ts', './EffectSingleCase.ts', './MoveRigidBody.ts', './MoveTo.ts', './MoveTranslate.ts', './AnimatorAnimation.ts', './AnimatorCustomization.ts', './AnimatorDragonBones.ts', './AnimatorSkeletal.ts', './AnimatorSpine.ts', './AnimatorSpineSecondary.ts', './AnimatorBase.ts', './AnimatorCondition.ts', './AnimatorController.ts', './AnimatorParams.ts', './AnimatorState.ts', './AnimatorStateLogic.ts', './AnimatorTransition.ts', './BTreeNode.ts', './BehaviorTree.ts', './BranchNode.ts', './Decorator.ts', './IControl.ts', './Priority.ts', './Selector.ts', './Sequence.ts', './Task.ts', './index.ts', './FreeFlightCamera.ts', './OrbitCamera.ts', './AsyncQueue.ts', './Collection.ts', './List.ts', './ECS.ts', './ECSComp.ts', './ECSEntity.ts', './ECSGroup.ts', './ECSMask.ts', './ECSMatcher.ts', './ECSModel.ts', './ECSSystem.ts', './ArrayExt.ts', './DateExt.ts', './DirectorExt.ts', './NodeDragExt.ts', './NodeExt.ts', './ButtonEffect.ts', './ButtonSimple.ts', './ButtonTouchLong.ts', './UIButton.ts', './LabelChange.ts', './LabelNumber.ts', './LabelTime.ts', './Language.ts', './LanguageData.ts', './LanguageLabel.ts', './LanguagePack.ts', './LanguageSpine.ts', './LanguageSprite.ts', './JsonOb.ts', './StringFormat.ts', './VMBase.ts', './VMCompsEdit.ts', './VMCustom.ts', './VMEnv.ts', './VMEvent.ts', './VMLabel.ts', './VMModify.ts', './VMParent.ts', './VMProgress.ts', './VMState.ts', './ViewModel.ts', './BhvButtonGroup.ts', './BhvFrameIndex.ts', './BhvRollNumber.ts', './BhvSwitchPage.ts', './HttpRequest.ts', './NetInterface.ts', './NetManager.ts', './NetNode.ts', './NetProtocolPako.ts', './WebSock.ts', './RtToModel.ts', './RtToSprite.ts', './CCComp.ts', './CCVMParentComp.ts', './GameCollision.ts', './GameComponent.ts', './ModuleUtil.ts', './BuildTimeConstants.ts', './Config2.ts', './GameConfig.ts', './GameQueryConfig.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/Main.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIConfig.ts', './Init.ts', './Oops.ts', './Root.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, macro, DynamicAtlasManager, profiler, UIConfigData, Init, oops, Root;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      macro = module.macro;
      DynamicAtlasManager = module.DynamicAtlasManager;
      profiler = module.profiler;
    }, function (module) {
      UIConfigData = module.UIConfigData;
    }, function (module) {
      Init = module.Init;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      Root = module.Root;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0eec0s4qrZF7onPlYBrD+y+", "Main", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      // 禁用图片缓存清理
      macro.CLEANUP_IMAGE_CACHE = false;

      // 配置动态图集管理器
      DynamicAtlasManager.instance.enabled = true;
      DynamicAtlasManager.instance.maxFrameSize = 512;
      var Main = exports('Main', (_dec = ccclass('Main'), _dec(_class = /*#__PURE__*/function (_Root) {
        _inheritsLoose(Main, _Root);
        function Main() {
          return _Root.apply(this, arguments) || this;
        }
        var _proto = Main.prototype;
        _proto.start = /*#__PURE__*/function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // 开发模式下显示性能分析器
                  profiler.showStats();
                // let data = Sudoku.generate("easy",true)
                // console.log("数独-》",data)
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function start() {
            return _start.apply(this, arguments);
          }
          return start;
        }();
        _proto.run = function run() {
          // 启动 Init 类的初始化流程
          Init.startGameInitialization();
        };
        _proto.initGui = function initGui() {
          // 初始化GUI系统
          oops.gui.init(UIConfigData);
        };
        _proto.onDestroy = function onDestroy() {};
        return Main;
      }(Root)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MathUtil.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c615ZS4PRMPKPA9ZqKjiJC", "MathUtil", undefined);
      /** 数学工具 */
      var MathUtil = exports('MathUtil', /*#__PURE__*/function () {
        function MathUtil() {}
        /**
         * 获得随机方向
         * @param x -1为左，1为右
         * @returns 
         */
        MathUtil.sign = function sign(x) {
          if (x > 0) {
            return 1;
          }
          if (x < 0) {
            return -1;
          }
          return 0;
        }

        /**
         * 随时间变化进度值
         * @param start 初始值
         * @param end   结束值
         * @param t     时间
         */;
        MathUtil.progress = function progress(start, end, t) {
          return start + (end - start) * t;
        }

        /**
         * 插值
         * @param numStart 开始数值
         * @param numEnd   结束数值
         * @param t        时间
         */;
        MathUtil.lerp = function lerp(numStart, numEnd, t) {
          if (t > 1) {
            t = 1;
          } else if (t < 0) {
            t = 0;
          }
          return numStart * (1 - t) + numEnd * t;
        }

        /**
         * 角度插值
         * @param current 当前角度
         * @param target  目标角度
         * @param t       时间
         */;
        MathUtil.lerpAngle = function lerpAngle(current, target, t) {
          current %= 360;
          target %= 360;
          var dAngle = target - current;
          if (dAngle > 180) {
            target = current - (360 - dAngle);
          } else if (dAngle < -180) {
            target = current + (360 + dAngle);
          }
          return (MathUtil.lerp(current, target, t) % 360 + 360) % 360;
        }

        /**
         * 按一定的速度从一个角度转向令一个角度
         * @param current 当前角度
         * @param target  目标角度
         * @param speed   速度
         */;
        MathUtil.angleTowards = function angleTowards(current, target, speed) {
          current %= 360;
          target %= 360;
          var dAngle = target - current;
          if (dAngle > 180) {
            target = current - (360 - dAngle);
          } else if (dAngle < -180) {
            target = current + (360 + dAngle);
          }
          var dir = target - current;
          if (speed > Math.abs(dir)) {
            return target;
          }
          return ((current + speed * Math.sign(dir)) % 360 + 360) % 360;
        }

        /**
         * 获取方位内值，超过时获取对应边界值
         * @param value     值
         * @param minLimit  最小值
         * @param maxLimit  最大值
         */;
        MathUtil.clamp = function clamp(value, minLimit, maxLimit) {
          if (value < minLimit) {
            return minLimit;
          }
          if (value > maxLimit) {
            return maxLimit;
          }
          return value;
        }

        /**
         * 获得一个值的概率
         * @param value 值
         */;
        MathUtil.probability = function probability(value) {
          return Math.random() < value;
        };
        return MathUtil;
      }());
      /**
       * 角度转弧度
       */
      MathUtil.deg2Rad = Math.PI / 180;
      /**
       * 弧度转角度
       */
      MathUtil.rad2Deg = 180 / Math.PI;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MessageManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, warn, log;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a401fY+wj9NsqOACoZ7Zy/R", "MessageManager", undefined);
      var EventData = function EventData() {
        this.event = void 0;
        this.listener = void 0;
        this.object = void 0;
      };
      /** 批量注册、移除全局事件对象 */
      var MessageEventData = exports('MessageEventData', /*#__PURE__*/function () {
        function MessageEventData() {
          this.events = new Map();
        }
        var _proto = MessageEventData.prototype;
        /**
         * 注册全局事件
         * @param event      事件名
         * @param listener   处理事件的侦听器函数
         * @param object     侦听函数绑定的作用域对象
         */
        _proto.on = function on(event, listener, object) {
          var eds = this.events.get(event);
          if (eds == null) {
            eds = [];
            this.events.set(event, eds);
          }
          var ed = new EventData();
          ed.event = event;
          ed.listener = listener;
          ed.object = object;
          eds.push(ed);
          message.on(event, listener, object);
        }

        /**
        * 移除全局事件
         * @param event     事件名
         */;
        _proto.off = function off(event) {
          var eds = this.events.get(event);
          if (!eds) return;
          for (var _iterator = _createForOfIteratorHelperLoose(eds), _step; !(_step = _iterator()).done;) {
            var eb = _step.value;
            message.off(event, eb.listener, eb.object);
          }
          this.events["delete"](event);
        }

        /** 
         * 触发全局事件 
         * @param event      事件名
         * @param args       事件参数
         */;
        _proto.dispatchEvent = function dispatchEvent(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          message.dispatchEvent.apply(message, [event].concat(args));
        }

        /** 清除所有的全局事件监听 */;
        _proto.clear = function clear() {
          var keys = Array.from(this.events.keys());
          for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
            var event = _keys[_i];
            this.off(event);
          }
        };
        return MessageEventData;
      }());

      /** 
       * 全局消息管理
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037894&doc_id=2873565
       * @example 
      // 注册持续监听的全局事件
      export class RoleViewComp extends Component{
          onLoad(){
              // 监听全局事件
              oops.message.on(GameEvent.GameServerConnected, this.onHandler, this);
          }
          
          protected onDestroy() {
              // 对象释放时取消注册的全局事件
              oops.message.off(GameEvent.GameServerConnected, this.onHandler, this);
          }
          
          private onHandler(event: string, args: any) {
              switch (event) {
                  case GameEvent.GameServerConnected:
                      console.log("处理游戏服务器连接成功后的逻辑");
                      break;
              }
          }
      }
        // 注册只触发一次的全局事件
      export class RoleViewComp extends Component{
          onLoad(){
              // 监听一次事件，事件响应后，该监听自动移除
              oops.message.once(GameEvent.GameServerConnected, this.onHandler, this);
          }
          
          private onHandler(event: string, args: any) {
              switch (event) {
                  case GameEvent.GameServerConnected:
                      console.log("处理游戏服务器连接成功后的逻辑");
                      break;
              }
          }
      }
       */
      var MessageManager = exports('MessageManager', /*#__PURE__*/function () {
        function MessageManager() {
          this.events = new Map();
        }
        var _proto2 = MessageManager.prototype;
        /**
         * 注册全局事件
         * @param event      事件名
         * @param listener   处理事件的侦听器函数
         * @param object     侦听函数绑定的作用域对象
         */
        _proto2.on = function on(event, listener, object) {
          if (!event || !listener) {
            warn("\u6CE8\u518C\u3010" + event + "\u3011\u4E8B\u4EF6\u7684\u4FA6\u542C\u5668\u51FD\u6570\u4E3A\u7A7A");
            return;
          }
          var eds = this.events.get(event);
          if (eds == null) {
            eds = [];
            this.events.set(event, eds);
          }
          var length = eds.length;
          for (var i = 0; i < length; i++) {
            var bin = eds[i];
            if (bin.listener == listener && bin.object == object) {
              warn("\u540D\u4E3A\u3010" + event + "\u3011\u7684\u4E8B\u4EF6\u91CD\u590D\u6CE8\u518C\u4FA6\u542C\u5668");
            }
          }
          var data = new EventData();
          data.event = event;
          data.listener = listener;
          data.object = object;
          eds.push(data);
        }

        /**
         * 监听一次事件，事件响应后，该监听自动移除
         * @param event     事件名
         * @param listener  事件触发回调方法
         * @param object    侦听函数绑定的作用域对象
         */;
        _proto2.once = function once(event, listener, object) {
          var _this = this;
          var _listener2 = function _listener($event) {
            _this.off(event, _listener2, object);
            _listener2 = null;
            for (var _len2 = arguments.length, $args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              $args[_key2 - 1] = arguments[_key2];
            }
            listener.call(object, $event, $args);
          };
          this.on(event, _listener2, object);
        }

        /**
         * 移除全局事件
         * @param event     事件名
         * @param listener  处理事件的侦听器函数
         * @param object    侦听函数绑定的作用域对象
         */;
        _proto2.off = function off(event, listener, object) {
          var eds = this.events.get(event);
          if (!eds) {
            log("\u540D\u4E3A\u3010" + event + "\u3011\u7684\u4E8B\u4EF6\u4E0D\u5B58\u5728");
            return;
          }
          var length = eds.length;
          for (var i = 0; i < length; i++) {
            var bin = eds[i];
            if (bin.listener == listener && bin.object == object) {
              eds.splice(i, 1);
              break;
            }
          }
          if (eds.length == 0) {
            this.events["delete"](event);
          }
        }

        /** 
         * 触发全局事件 
         * @param event      事件名
         * @param args       事件参数
         */;
        _proto2.dispatchEvent = function dispatchEvent(event) {
          var list = this.events.get(event);
          if (list != null) {
            var eds = list.concat();
            var length = eds.length;
            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }
            for (var i = 0; i < length; i++) {
              var _eventBin$listener;
              var eventBin = eds[i];
              (_eventBin$listener = eventBin.listener).call.apply(_eventBin$listener, [eventBin.object, event].concat(args));
            }
          }
        };
        return MessageManager;
      }());
      var message = exports('message', new MessageManager());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ModuleUtil.ts", ['cc', './Oops.ts', './ViewUtil.ts'], function (exports) {
  var cclegacy, oops, ViewUtil;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      ViewUtil = module.ViewUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "52a6cdAO5tGxaeE1TprZ5VK", "ModuleUtil", undefined);
      var ModuleUtil = exports('ModuleUtil', /*#__PURE__*/function () {
        function ModuleUtil() {}
        /**
         * 添加界面组件
         * @param ent      模块实体
         * @param ctor     界面逻辑组件
         * @param uiId     界面资源编号
         * @param uiArgs   界面参数
         */
        ModuleUtil.addViewUi = function addViewUi(ent, ctor, uiId, uiArgs) {
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          var uic = {
            onAdded: function onAdded(node, params) {
              var comp = node.getComponent(ctor);
              ent.add(comp);
            }
          };
          oops.gui.open(uiId, uiArgs, uic);
        }

        /**
         * 异步添加视图层组件
         * @param ent      模块实体
         * @param ctor     界面逻辑组件
         * @param uiId     界面资源编号
         * @param uiArgs   界面参数
         * @returns 界面节点
         */;
        ModuleUtil.addViewUiAsync = function addViewUiAsync(ent, ctor, uiId, uiArgs) {
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          return new Promise(function (resolve, reject) {
            var uic = {
              onAdded: function onAdded(node, params) {
                var comp = node.getComponent(ctor);
                ent.add(comp);
                resolve(node);
              },
              onLoadFailure: function onLoadFailure() {
                resolve(null);
              }
            };
            oops.gui.open(uiId, uiArgs, uic);
          });
        }

        /**
         * 通过资源内存中获取预制上的组件添加到ECS实体中
         * @param ent      模块实体
         * @param ctor     界面逻辑组件
         * @param parent   显示对象父级
         * @param url      显示资源地址
         */;
        ModuleUtil.addView = function addView(ent, ctor, parent, url) {
          var node = ViewUtil.createPrefabNode(url);
          var comp = node.getComponent(ctor);
          ent.add(comp);
          node.parent = parent;
        }

        /**
         * 业务实体上移除界面组件
         * @param ent        模块实体
         * @param ctor       界面逻辑组件
         * @param uiId       界面资源编号
         * @param isDestroy  是否释放界面缓存（默认为释放界面缓存）
         */;
        ModuleUtil.removeViewUi = function removeViewUi(ent, ctor, uiId, isDestroy) {
          if (isDestroy === void 0) {
            isDestroy = true;
          }
          ent.remove(ctor, isDestroy);
          oops.gui.remove(uiId, isDestroy);
        };
        return ModuleUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveRigidBody.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, RigidBody, EPSILON, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      RigidBody = module.RigidBody;
      EPSILON = module.EPSILON;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "4e8cedkWeJDEZoUMtauac/M", "MoveRigidBody", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var v3_0 = new Vec3();
      var v3_1 = new Vec3();

      /** 
       * 物理方式移动
       * 1. 施加线性数度
       * 2. 施加阻尼
       * 3. 施加重力
       * 4. 控制移动速度或速度比率
       */
      var MoveRigidBody = exports('MoveRigidBody', (_dec = ccclass('MoveRigidBody'), _dec2 = property({
        tooltip: '阻尼'
      }), _dec3 = property({
        tooltip: '重力'
      }), _dec4 = property({
        tooltip: '移动速度'
      }), _dec5 = property({
        tooltip: '速度比率'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveRigidBody, _Component);
        function MoveRigidBody() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "damping", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gravity", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_speed", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_ratio", _descriptor4, _assertThisInitialized(_this));
          _this._rigidBody = null;
          _this._grounded = true;
          // 是否着地
          _this._curMaxSpeed = 0;
          // 当前最大速度
          _this._prevAngleY = 0;
          // 之前的Y角度值
          _this._stateX = 0;
          _this._stateZ = 0;
          _this._velocity = new Vec3();
          return _this;
        }
        var _proto = MoveRigidBody.prototype;
        _proto.start = function start() {
          this._rigidBody = this.getComponent(RigidBody);
          this._prevAngleY = this.node.eulerAngles.y;
        }

        /** 刚体停止移动 */;
        _proto.stop = function stop() {
          this._stateX = 0;
          this._stateZ = 0;
          this._rigidBody.clearVelocity(); // 清除移动速度
        };

        _proto.update = function update(dt) {
          // 施加重力
          this.applyGravity();

          // 施加阻尼
          this.applyDamping(dt);

          // 未落地无法移动
          if (!this.grounded) return;

          // 施加移动
          this.applyLinearVelocity(v3_0, 1);
        }

        /** 施加重力 */;
        _proto.applyGravity = function applyGravity() {
          var g = this.gravity;
          var m = this._rigidBody.mass;
          v3_1.set(0, m * g, 0);
          this._rigidBody.applyForce(v3_1);
        }

        /** 施加阻尼 */;
        _proto.applyDamping = function applyDamping(dt) {
          // 获取线性速度
          this._rigidBody.getLinearVelocity(v3_1);
          if (v3_1.lengthSqr() > EPSILON) {
            v3_1.multiplyScalar(Math.pow(1.0 - this.damping, dt));
            this._rigidBody.setLinearVelocity(v3_1);
          }
        }

        /**
         * 施加移动
         * @param {Vec3} dir        方向
         * @param {number} speed    移动数度
         */;
        _proto.applyLinearVelocity = function applyLinearVelocity(dir, speed) {
          if (this._stateX || this._stateZ) {
            v3_0.set(this._stateX, 0, this._stateZ);
            v3_0.normalize();
            // 获取线性速度
            this._rigidBody.getLinearVelocity(v3_1);
            Vec3.scaleAndAdd(v3_1, v3_1, dir, speed);
            var ms = this._curMaxSpeed;
            var len = v3_1.lengthSqr();
            var ratio = 1;
            if (len > ms) {
              if (Math.abs(this.node.eulerAngles.y - this._prevAngleY) >= 10) {
                ratio = 2;
              }
              this._prevAngleY = this.node.eulerAngles.y;
              v3_1.normalize();
              v3_1.multiplyScalar(ms / ratio);
            }
            this._rigidBody.setLinearVelocity(v3_1);
          }
        };
        _createClass(MoveRigidBody, [{
          key: "speed",
          get: function get() {
            return this._speed;
          },
          set: function set(value) {
            this._speed = value;
            this._curMaxSpeed = value * this.ratio;
          }
        }, {
          key: "ratio",
          get: function get() {
            return this._ratio;
          },
          set: function set(value) {
            this._ratio = value;
            this._curMaxSpeed = this.speed * value;
          }
        }, {
          key: "grounded",
          get: /** 是否着地 */
          function get() {
            return this._grounded;
          }
        }, {
          key: "velocity",
          get: /** 移动方向 */
          function get() {
            return this._velocity;
          },
          set: function set(value) {
            this._velocity = value;
            var x = value.x;
            var z = value.z;
            if (x > 0 && this._stateX < 0 || x < 0 && this._stateX > 0 || z > 0 && this._stateZ < 0 || z < 0 && this._stateZ > 0) {
              this._rigidBody.clearVelocity(); // 当前跟之前方向不一致则清除速度,避免惯性太大
            }

            this._stateX = x;
            this._stateZ = z;
          }
        }]);
        return MoveRigidBody;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "damping", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gravity", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -10;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "speed", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "speed"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_ratio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "ratio", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "ratio"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveTo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Timer.ts', './Vec3Util.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Vec3, Component, Timer, Vec3Util;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Timer = module.Timer;
    }, function (module) {
      Vec3Util = module.Vec3Util;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5e22a+qWUpI6ZHSVRRj2DYT", "MoveTo", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 移动到指定目标位置 */
      var MoveTo = exports('MoveTo', (_dec = ccclass('MoveTo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveTo, _Component);
        function MoveTo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 目标位置 */
          _this.target = null;
          /** 移动方向 */
          _this.velocity = Vec3Util.zero;
          /** 移动速度（每秒移动的像素距离） */
          _this.speed = 0;
          /** 是否计算将 Y 轴带入计算 */
          _this.hasYAxis = true;
          /** 坐标标（默认本地坐标） */
          _this.ns = Node.NodeSpace.LOCAL;
          /** 偏移距离 */
          _this.offset = 0;
          /** 偏移向量 */
          _this.offsetVector = null;
          /** 移动开始 */
          _this.onStart = null;
          /** 移动完成回调 */
          _this.onComplete = null;
          /** 距离变化时 */
          _this.onChange = null;
          /** 延时触发器 */
          _this.timer = new Timer();
          /** 终点备份 */
          _this.end = null;
          return _this;
        }
        var _proto = MoveTo.prototype;
        _proto.onLoad = function onLoad() {
          this.enabled = false;
        };
        _proto.move = function move() {
          this.enabled = true;
        };
        _proto.update = function update(dt) {
          var end;
          console.assert(this.speed > 0, "移动速度必须要大于零");
          if (this.target instanceof Node) {
            end = this.ns == Node.NodeSpace.WORLD ? this.target.worldPosition : this.target.position;
          } else {
            end = this.target;
          }

          // 移动目标节点被释放时
          if (end == null) {
            this.exit();
            return;
          }

          // 目标移动后，重计算移动方向与移动到目标点的速度
          if (this.end == null || !this.end.strictEquals(end)) {
            var _this$onChange;
            var target = end.clone();
            if (this.offsetVector) {
              target = target.add(this.offsetVector);
            }
            if (this.hasYAxis == false) target.y = 0;

            // 移动方向与移动数度
            var start = this.ns == Node.NodeSpace.WORLD ? this.node.worldPosition : this.node.position;
            this.velocity = Vec3Util.sub(target, start).normalize();

            // 移动时间与目标偏位置计算
            var distance = Vec3.distance(start, target) - this.offset;

            // 目标位置修改事件
            (_this$onChange = this.onChange) == null || _this$onChange.call(this);
            if (distance <= 0) {
              this.exit();
              return;
            } else {
              var _this$onStart;
              (_this$onStart = this.onStart) == null || _this$onStart.call(this);
              this.timer.step = distance / this.speed;
              this.end = end.clone();
            }
          }
          if (this.speed > 0) {
            var trans = Vec3Util.mul(this.velocity, this.speed * dt);
            if (this.ns == Node.NodeSpace.WORLD) this.node.worldPosition = Vec3Util.add(this.node.worldPosition, trans);else this.node.position = Vec3Util.add(this.node.position, trans);
          }

          // 移动完成事件
          if (this.timer.update(dt)) {
            if (this.offset == 0) {
              if (this.ns == Node.NodeSpace.WORLD) this.node.worldPosition = this.end;else this.node.position = this.end;
            }
            this.exit();
          }
        };
        _proto.exit = function exit() {
          var _this$onComplete;
          (_this$onComplete = this.onComplete) == null || _this$onComplete.call(this);
          this.enabled = false;
          this.target = null;
          this.velocity = Vec3Util.zero;
          this.speed = 0;
          this.hasYAxis = true;
          this.ns = Node.NodeSpace.LOCAL;
          this.offset = 0;
          this.offsetVector = null;
          this.onStart = null;
          this.onComplete = null;
          this.onChange = null;
          this.timer.reset();
          this.end = null;
        };
        return MoveTo;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveTranslate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Vec3Util.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Node, Component, Vec3Util;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      Vec3Util = module.Vec3Util;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "e626612zClLO4OZDEWvT+fr", "MoveTranslate", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 角色坐标方式移动 */
      var MoveTranslate = exports('MoveTranslate', (_dec = ccclass('MoveTranslate'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveTranslate, _Component);
        function MoveTranslate() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 移动方向 */
          _this.velocity = Vec3Util.zero;
          /** 移动速度 */
          _this.speed = 0;
          _this.vector = new Vec3();
          return _this;
        }
        var _proto = MoveTranslate.prototype;
        _proto.update = function update(dt) {
          if (this.speed > 0) {
            Vec3.multiplyScalar(this.vector, this.velocity, this.speed * dt);
            this.node.translate(this.vector, Node.NodeSpace.WORLD);
          }
        };
        return MoveTranslate;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NakedSubsetStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7ba39FkFdFBCpfFcKlN7JFy", "NakedSubsetStrategy", undefined);
      /**
       * 裸数对/三数/四数策略
       */
      var NakedSubsetStrategy = exports('NakedSubsetStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(NakedSubsetStrategy, _BaseStrategy);
        function NakedSubsetStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 3;
          return _this;
        }
        var _proto = NakedSubsetStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          // 检查2-4个数字的组合
          for (var subsetSize = 2; subsetSize <= 4; subsetSize++) {
            var result = this.checkNakedSubsets(board, candidates, subsetSize);
            if (result) return result;
          }
          return null;
        }

        /**
         * 检查指定大小的裸子集
         */;
        _proto.checkNakedSubsets = function checkNakedSubsets(board, candidates, subsetSize) {
          // 检查行、列、宫
          for (var _iterator = _createForOfIteratorHelperLoose([HighlightAreaType.ROW, HighlightAreaType.COLUMN, HighlightAreaType.BOX]), _step; !(_step = _iterator()).done;) {
            var areaType = _step.value;
            for (var areaIndex = 0; areaIndex < 9; areaIndex++) {
              var subsetInfo = this.findNakedSubsetInArea(board, candidates, areaType, areaIndex, subsetSize);
              if (subsetInfo) {
                return this.createNakedSubsetSteps(board, candidates, subsetInfo, areaType);
              }
            }
          }
          return null;
        }

        /**
         * 在指定区域查找裸子集
         */;
        _proto.findNakedSubsetInArea = function findNakedSubsetInArea(board, candidates, areaType, areaIndex, subsetSize) {
          var areaCells = this.getAreaCells(areaType, areaIndex);
          var blankCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] === BLANK_CHAR;
          });

          // 获取所有候选数组合
          var combinations = this.getCandidateCombinations(blankCells, candidates, subsetSize);
          var _loop = function _loop() {
              var _step2$value = _step2.value,
                cells = _step2$value.cells,
                values = _step2$value.values;
              // 检查是否是裸子集：组合中的单元格正好包含这些候选数
              var isNakedSubset = cells.every(function (cellPos) {
                var cellCandidates = candidates[cellPos.row][cellPos.col];
                return cellCandidates.size <= subsetSize && [].concat(values).every(function (v) {
                  return cellCandidates.has(v);
                });
              });
              if (isNakedSubset) {
                // 找出受影响的单元格（同区域其他单元格包含这些候选数）
                var affectedCells = blankCells.filter(function (pos) {
                  if (cells.some(function (c) {
                    return c.row === pos.row && c.col === pos.col;
                  })) return false;
                  return [].concat(values).some(function (v) {
                    return candidates[pos.row][pos.col].has(v);
                  });
                });
                if (affectedCells.length > 0) {
                  return {
                    v: {
                      cells: cells,
                      values: values,
                      affectedCells: affectedCells,
                      areaType: areaType,
                      areaIndex: areaIndex
                    }
                  };
                }
              }
            },
            _ret;
          for (var _iterator2 = _createForOfIteratorHelperLoose(combinations), _step2; !(_step2 = _iterator2()).done;) {
            _ret = _loop();
            if (_ret) return _ret.v;
          }
          return null;
        }

        /**
         * 创建解题步骤
         */;
        _proto.createNakedSubsetSteps = function createNakedSubsetSteps(board, candidates, subsetInfo, highlightAreaType) {
          var steps = [];
          var cells = subsetInfo.cells,
            values = subsetInfo.values,
            affectedCells = subsetInfo.affectedCells;
          var subsetName = this.getSubsetName(values.size);

          // 步骤1：发现裸子集
          steps.push(this.createDiscoveryStep(board, candidates, cells, values, affectedCells, subsetName, highlightAreaType));

          // 步骤2：解释裸子集规则
          steps.push(this.createRuleExplanationStep(board, candidates, cells, values, affectedCells, subsetName, highlightAreaType));

          // 步骤3：创建裸子集影响展示步骤（详细影响分析）
          steps.push(this.createImpactDemonstrationStep(board, candidates, cells, values, affectedCells, subsetName, highlightAreaType));

          // 步骤3：应用移除候选数
          steps.push(this.createRemovalExecutionStep(board, candidates, cells, values, affectedCells, subsetName, highlightAreaType));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, subsetCells, values, affectedCells, subsetName, areaType) {
          var _this2 = this;
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);

          // 精确分类（互斥）
          var filledCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] !== BLANK_CHAR;
          });
          var otherBlankCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] === BLANK_CHAR && !subsetCells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("NakedSubsetStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), otherBlankCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), filledCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                value: board[pos.row][pos.col]
              };
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, subsetCells, values, affectedCells, subsetName, areaType) {
          var _this3 = this;
          var areaName = this.getAreaName(areaType);
          var valueList = [].concat(values).sort();
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);

          // 精确分类（互斥）
          var filledCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] !== BLANK_CHAR;
          });
          var otherBlankCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] === BLANK_CHAR && !subsetCells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("NakedSubsetStrategy.ruleExplanationDes", {
              name: _this3.name,
              valueListStr: valueList.join(',')
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), otherBlankCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), filledCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                value: board[pos.row][pos.col]
              };
            })),
            highlightNotes: [].concat(subsetCells.flatMap(function (pos) {
              var cellValues = _this3.getPencilMarks(pos, board, candidates);
              return cellValues.map(function (value) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                };
              });
            }))
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, subsetCells, values, affectedCells, subsetName, areaType) {
          var _this4 = this;
          var areaName = this.getAreaName(areaType);
          var valueList = [].concat(values).sort();
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);

          // 精确分类（互斥）
          var filledCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] !== BLANK_CHAR;
          });
          var otherBlankCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] === BLANK_CHAR && !subsetCells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("NakedSubsetStrategy.impactDemonstrationDes", {
              name: _this4.name,
              valueListStr: valueList.join(','),
              areaName: areaName
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), otherBlankCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), filledCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                value: board[pos.row][pos.col]
              };
            })),
            highlightNotes: [].concat(subsetCells.flatMap(function (pos) {
              var cellValues = _this4.getPencilMarks(pos, board, candidates);
              return cellValues.map(function (value) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                };
              });
            }), otherBlankCells.flatMap(function (pos) {
              var cellValues = _this4.getPencilMarks(pos, board, candidates);
              return cellValues.filter(function (value) {
                return valueList.includes(value);
              }) // 只保留valueList中的值
              .map(function (value) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintRemoveCell.background,
                  textColor: HighlightConfig.hintRemoveCell.textColor,
                  value: value
                };
              });
            }))
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, subsetCells, values, affectedCells, subsetName, areaType) {
          var _this5 = this;
          var valueList = [].concat(values).sort();
          var areaName = this.getAreaName(areaType);
          var areaCells = this.getHighlightAreaCells(subsetCells[0], areaType);
          // 精确分类（互斥）
          var filledCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] !== BLANK_CHAR;
          });
          var otherBlankCells = areaCells.filter(function (pos) {
            return board[pos.row][pos.col] === BLANK_CHAR && !subsetCells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            });
          });

          // 实际从候选数中移除指定数字
          affectedCells.forEach(function (pos) {
            values.forEach(function (value) {
              candidates[pos.row][pos.col]["delete"](value);
            });
          });
          console.log("candidates->", candidates);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("NakedSubsetStrategy.removalExecutionDes", {
              name: _this5.name,
              valueListStr: valueList.join(','),
              areaName: areaName
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: subsetCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(subsetCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), otherBlankCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), filledCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                value: board[pos.row][pos.col]
              };
            }))
          };
        }

        /**
         * 获取单元格的预填数字（铅笔标记）
         */;
        _proto.getPencilMarks = function getPencilMarks(pos, board, candidates) {
          // 如果是已填数字单元格，返回实际值
          if (board[pos.row][pos.col] !== BLANK_CHAR) {
            return [Number(board[pos.row][pos.col])];
          }

          // 如果是空白格，返回候选数（可能有多个）
          return [].concat(candidates[pos.row][pos.col]);
        };
        _proto.getSubsetName = function getSubsetName(size) {
          return {
            2: oops.language.getLangByID("NakedSubsetStrategy.subsetName2"),
            3: oops.language.getLangByID("NakedSubsetStrategy.subsetName3"),
            4: oops.language.getLangByID("NakedSubsetStrategy.subsetName4")
          }[size] || oops.language.getLangByID("NakedSubsetStrategy.subsetName1");
        };
        _proto.getAreaName = function getAreaName(areaType) {
          var _HighlightAreaType$RO;
          return (_HighlightAreaType$RO = {}, _HighlightAreaType$RO[HighlightAreaType.ROW] = oops.language.getLangByID("strategy.row"), _HighlightAreaType$RO[HighlightAreaType.COLUMN] = oops.language.getLangByID("strategy.col"), _HighlightAreaType$RO[HighlightAreaType.BOX] = oops.language.getLangByID("strategy.box"), _HighlightAreaType$RO)[areaType];
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _proto.getHighlightAreaCells = function getHighlightAreaCells(pos, areaType) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: pos.row,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: pos.col
              };
            });
          } else {
            var boxRow = Math.floor(pos.row / 3) * 3;
            var boxCol = Math.floor(pos.col / 3) * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _proto.getCandidateCombinations = function getCandidateCombinations(cells, candidates, subsetSize) {
          var result = [];

          // 获取所有候选数
          var allValues = new Set();
          cells.forEach(function (pos) {
            candidates[pos.row][pos.col].forEach(function (v) {
              return allValues.add(v);
            });
          });

          // 生成所有候选数组合
          var valueCombinations = SolverUtils.getCombinations([].concat(allValues), subsetSize);

          // 为每个候选数组合查找可能的单元格组合
          var _loop2 = function _loop2() {
            var values = _step3.value;
            var valueSet = new Set(values);
            var possibleCells = cells.filter(function (pos) {
              var cellCands = candidates[pos.row][pos.col];
              return [].concat(valueSet).every(function (v) {
                return cellCands.has(v);
              });
            });
            if (possibleCells.length >= subsetSize) {
              var cellCombinations = SolverUtils.getCombinations(possibleCells, subsetSize);
              cellCombinations.forEach(function (cells) {
                result.push({
                  cells: cells,
                  values: valueSet
                });
              });
            }
          };
          for (var _iterator3 = _createForOfIteratorHelperLoose(valueCombinations), _step3; !(_step3 = _iterator3()).done;) {
            _loop2();
          }
          return result;
        };
        _createClass(NakedSubsetStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("NakedSubsetStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("NakedSubsetStrategy.description");
          }
        }]);
        return NakedSubsetStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetInterface.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9f8b+CV69FyKwnUdCjOtad", "NetInterface", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-09-01 18:00:28
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-09 18:31:18
       */
      /*
       * 网络相关接口定义
       */
      /** 请求协议 */
      /** 响应协议 */
      /** 回调对象 */
      /** 请求对象 */
      /** 协议辅助接口 */
      /** Socket接口 */
      /** 网络提示接口 */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetManager.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d8cd5el6GBGTYTW+N8b8EuJ", "NetManager", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-09-01 18:00:28
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-09 18:10:50
       */
      /**
       * 使用流程文档可参考、简化与服务器对接、使用新版API体验，可进入下面地址获取新版本，替换network目录中的内容
       * https://store.cocos.com/app/detail/5877
       */
      /*
       * 网络节点管理类
       */
      var NetManager = exports('NetManager', /*#__PURE__*/function () {
        function NetManager() {
          this._channels = {};
        }
        /** 网络管理单例对象 */
        NetManager.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = new NetManager();
          }
          return this._instance;
        }

        /**
         * 添加网络节点
         * @param node       网络节点
         * @param channelId  通道编号
         * @example
        // 游戏服务器心跳协议
        class GameProtocol extends NetProtocolPako { 
            // 自定义心跳协议
            getHearbeat(): NetData { 
                return '{"action":"LoginAction","method":"heart","data":"null","callback":"LoginAction_heart"}';
            }
        }
            
        var net = new NetNodeGame();
        var ws = new WebSock();        // WebSocket 网络连接对象
        var gp = new GameProtocol();   // 网络通讯协议对象
        var gt = new NetGameTips()     // 网络提示对象
        net.init(ws, gp, gt);
        NetManager.getInstance().setNetNode(net, NetChannelType.Game);
         */;
        var _proto = NetManager.prototype;
        _proto.setNetNode = function setNetNode(node, channelId) {
          if (channelId === void 0) {
            channelId = 0;
          }
          this._channels[channelId] = node;
        }

        /** 移除Node */;
        _proto.removeNetNode = function removeNetNode(channelId) {
          delete this._channels[channelId];
        }

        /**
         * 网络节点连接服务器
         * @param options      连接参数
         * @param channelId    通道编号
         * @example
        var options = {
            url: 'ws://127.0.0.1:3000',
            autoReconnect: 0            // -1 永久重连，0不自动重连，其他正整数为自动重试次数
        }
        NetManager.getInstance().connect(options, NetChannelType.Game);
         */;
        _proto.connect = function connect(options, channelId) {
          if (channelId === void 0) {
            channelId = 0;
          }
          if (this._channels[channelId]) {
            return this._channels[channelId].connect(options);
          }
          return false;
        }

        /** 节点连接发送数据*/;
        _proto.send = function send(buf, force, channelId) {
          if (force === void 0) {
            force = false;
          }
          if (channelId === void 0) {
            channelId = 0;
          }
          var node = this._channels[channelId];
          if (node) {
            return node.send(buf, force);
          }
          return -1;
        }

        /**
         * 发起请求，并在在结果返回时调用指定好的回调函数
         * @param reqProtocol 请求协议
         * @param rspObject   回调对象
         * @param showTips    是否触发请求提示
         * @param force       是否强制发送
         * @param channelId   通道编号
         * @example
        let protocol: IRequestProtocol = {
            action: action,
            method: method,
            data: JSON.stringify(data),
            isCompress: this.isCompress,
            channelid: netConfig.channelid
        }
        return this.request(protocol, rspObject, showTips, force);
         */;
        _proto.request = function request(reqProtocol, rspObject, showTips, force, channelId) {
          if (showTips === void 0) {
            showTips = true;
          }
          if (force === void 0) {
            force = false;
          }
          if (channelId === void 0) {
            channelId = 0;
          }
          var node = this._channels[channelId];
          if (node) {
            node.request(reqProtocol, rspObject, showTips, force);
          }
        }

        /**
         * 同request功能一致，但在request之前会先判断队列中是否已有rspCmd，如有重复的则直接返回
         * @param reqProtocol 请求协议
         * @param rspObject   回调对象
         * @param showTips    是否触发请求提示
         * @param force       是否强制发送
         * @param channelId   通道编号
         * @example
        let protocol: IRequestProtocol = {
            action: action,
            method: method,
            data: JSON.stringify(data),
            isCompress: this.isCompress,
            channelid: netConfig.channelid
        }
        return this.request(protocol, rspObject, showTips, force);
         */;
        _proto.requestUnique = function requestUnique(reqProtocol, rspObject, showTips, force, channelId) {
          if (showTips === void 0) {
            showTips = true;
          }
          if (force === void 0) {
            force = false;
          }
          if (channelId === void 0) {
            channelId = 0;
          }
          var node = this._channels[channelId];
          if (node) {
            return node.requestUnique(reqProtocol, rspObject, showTips, force);
          }
          return false;
        }

        /**
         * 节点网络断开
         * @param code        关闭码
         * @param reason      关闭原因
         * @param channelId   通道编号
         * @example 
         * NetManager.getInstance().close(undefined, undefined, NetChannelType.Game);
         */;
        _proto.close = function close(code, reason, channelId) {
          if (channelId === void 0) {
            channelId = 0;
          }
          if (this._channels[channelId]) {
            return this._channels[channelId].closeSocket(code, reason);
          }
        };
        return NetManager;
      }());
      NetManager._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Logger.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, error, warn, Logger;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      warn = module.warn;
    }, function (module) {
      Logger = module.Logger;
    }],
    execute: function () {
      cclegacy._RF.push({}, "57f0fB90kNBUJ98yyu+jxjx", "NetNode", undefined);

      /*
      *   CocosCreator网络节点基类，以及网络相关接口定义
      *   1. 网络连接、断开、请求发送、数据接收等基础功能
      *   2. 心跳机制
      *   3. 断线重连 + 请求重发
      *   4. 调用网络屏蔽层
      */

      var NetNodeStateStrs = ["已关闭", "连接中", "验证中", "可传输数据"];

      /** 网络提示类型枚举 */
      var NetTipsType = exports('NetTipsType', /*#__PURE__*/function (NetTipsType) {
        NetTipsType[NetTipsType["Connecting"] = 0] = "Connecting";
        NetTipsType[NetTipsType["ReConnecting"] = 1] = "ReConnecting";
        NetTipsType[NetTipsType["Requesting"] = 2] = "Requesting";
        return NetTipsType;
      }({}));

      /** 网络状态枚举 */
      var NetNodeState = exports('NetNodeState', /*#__PURE__*/function (NetNodeState) {
        NetNodeState[NetNodeState["Closed"] = 0] = "Closed";
        NetNodeState[NetNodeState["Connecting"] = 1] = "Connecting";
        NetNodeState[NetNodeState["Checking"] = 2] = "Checking";
        NetNodeState[NetNodeState["Working"] = 3] = "Working";
        return NetNodeState;
      }({})); // 可传输数据

      /** 网络连接参数 */

      /** 网络节点 */
      var NetNode = exports('NetNode', /*#__PURE__*/function () {
        function NetNode() {
          this._connectOptions = null;
          this._autoReconnect = 0;
          this._isSocketInit = false;
          // Socket是否初始化过
          this._isSocketOpen = false;
          // Socket是否连接成功过
          this._state = NetNodeState.Closed;
          // 节点当前状态
          this._socket = null;
          // Socket对象（可能是原生socket、websocket、wx.socket...)
          this._networkTips = null;
          // 网络提示ui对象（请求提示、断线重连提示等）
          this._protocolHelper = null;
          // 包解析对象
          this._connectedCallback = null;
          // 连接完成回调
          this._disconnectCallback = null;
          // 断线回调
          this._callbackExecuter = null;
          // 回调执行
          this._keepAliveTimer = null;
          // 心跳定时器
          this._receiveMsgTimer = null;
          // 接收数据定时器
          this._reconnectTimer = null;
          // 重连定时器
          this._heartTime = 10000;
          // 心跳间隔
          this._receiveTime = 6000000;
          // 多久没收到数据断开
          this._reconnetTimeOut = 8000000;
          // 重连间隔
          this._requests = Array();
          // 请求列表
          this._listener = {};
        }
        var _proto = NetNode.prototype;
        // 监听者列表
        /********************** 网络相关处理 *********************/
        _proto.init = function init(socket, protocol, networkTips, execFunc) {
          if (networkTips === void 0) {
            networkTips = null;
          }
          if (execFunc === void 0) {
            execFunc = null;
          }
          Logger.logNet("\u7F51\u7EDC\u521D\u59CB\u5316");
          this._socket = socket;
          this._protocolHelper = protocol;
          this._networkTips = networkTips;
          this._callbackExecuter = execFunc ? execFunc : function (callback, buffer) {
            callback.callback.call(callback.target, buffer);
          };
        }

        /**
         * 请求连接服务器
         * @param options 连接参数
         */;
        _proto.connect = function connect(options) {
          if (this._socket && this._state == NetNodeState.Closed) {
            if (!this._isSocketInit) {
              this.initSocket();
            }
            this._state = NetNodeState.Connecting;
            if (!this._socket.connect(options)) {
              this.updateNetTips(NetTipsType.Connecting, false);
              return false;
            }
            if (this._connectOptions == null && typeof options.autoReconnect == "number") {
              this._autoReconnect = options.autoReconnect;
            }
            this._connectOptions = options;
            this.updateNetTips(NetTipsType.Connecting, true);
            return true;
          }
          return false;
        };
        _proto.initSocket = function initSocket() {
          var _this = this;
          if (this._socket) {
            this._socket.onConnected = function (event) {
              _this.onConnected(event);
            };
            this._socket.onMessage = function (msg) {
              _this.onMessage(msg);
            };
            this._socket.onError = function (event) {
              _this.onError(event);
            };
            this._socket.onClosed = function (event) {
              _this.onClosed(event);
            };
            this._isSocketInit = true;
          }
        };
        _proto.updateNetTips = function updateNetTips(tipsType, isShow) {
          if (this._networkTips) {
            if (tipsType == NetTipsType.Requesting) {
              this._networkTips.requestTips(isShow);
            } else if (tipsType == NetTipsType.Connecting) {
              this._networkTips.connectTips(isShow);
            } else if (tipsType == NetTipsType.ReConnecting) {
              this._networkTips.reconnectTips(isShow);
            }
          }
        }

        /** 网络连接成功 */;
        _proto.onConnected = function onConnected(event) {
          var _this2 = this;
          Logger.logNet("网络已连接");
          this._isSocketOpen = true;
          // 如果设置了鉴权回调，在连接完成后进入鉴权阶段，等待鉴权结束
          if (this._connectedCallback !== null) {
            this._state = NetNodeState.Checking;
            this._connectedCallback(function () {
              _this2.onChecked();
            });
          } else {
            this.onChecked();
          }
          Logger.logNet("\u7F51\u7EDC\u5DF2\u8FDE\u63A5\u5F53\u524D\u72B6\u6001\u4E3A\u3010" + NetNodeStateStrs[this._state] + "\u3011");
        }

        /** 连接验证成功，进入工作状态 */;
        _proto.onChecked = function onChecked() {
          Logger.logNet("连接验证成功，进入工作状态");
          this._state = NetNodeState.Working;
          // 关闭连接或重连中的状态显示
          this.updateNetTips(NetTipsType.Connecting, false);
          this.updateNetTips(NetTipsType.ReConnecting, false);

          // 重发待发送信息
          var requests = this._requests.concat();
          if (requests.length > 0) {
            Logger.logNet("\u8BF7\u6C42\u3010" + this._requests.length + "\u3011\u4E2A\u5F85\u53D1\u9001\u7684\u4FE1\u606F");
            for (var i = 0; i < requests.length;) {
              var req = requests[i];
              this._socket.send(req.buffer);
              if (req.rspObject == null || req.rspCmd != "") {
                requests.splice(i, 1);
              } else {
                ++i;
              }
            }
            // 如果还有等待返回的请求，启动网络请求层
            this.updateNetTips(NetTipsType.Requesting, this._requests.length > 0);
          }
        }

        /** 接收到一个完整的消息包 */;
        _proto.onMessage = function onMessage(msg) {
          // Logger.logNet(`接受消息状态为【${NetNodeStateStrs[this._state]}】`);

          var json = JSON.parse(msg);

          // 进行头部的校验（实际包长与头部长度是否匹配）
          if (!this._protocolHelper.checkResponsePackage(json)) {
            error("\u6821\u9A8C\u63A5\u53D7\u6D88\u606F\u6570\u636E\u5F02\u5E38");
            return;
          }

          // 处理相应包数据
          if (!this._protocolHelper.handlerResponsePackage(json)) {
            if (this._networkTips) this._networkTips.responseErrorCode(json.code);
          }

          // 接受到数据，重新定时收数据计时器
          this.resetReceiveMsgTimer();
          // 重置心跳包发送器
          this.resetHearbeatTimer();
          // 触发消息执行
          var rspCmd = this._protocolHelper.getPackageId(json);
          Logger.logNet("\u63A5\u53D7\u5230\u547D\u4EE4\u3010" + rspCmd + "\u3011\u7684\u6D88\u606F");
          // 优先触发request队列
          if (this._requests.length > 0) {
            for (var reqIdx in this._requests) {
              var req = this._requests[reqIdx];
              if (req.rspCmd == rspCmd && req.rspObject) {
                Logger.logNet("\u89E6\u53D1\u8BF7\u6C42\u547D\u4EE4\u3010" + rspCmd + "\u3011\u7684\u56DE\u8C03");
                this._callbackExecuter(req.rspObject, json.data);
                this._requests.splice(parseInt(reqIdx), 1);
                break;
              }
            }
            if (this._requests.length == 0) {
              this.updateNetTips(NetTipsType.Requesting, false);
            } else {
              Logger.logNet("\u8BF7\u6C42\u961F\u5217\u4E2D\u8FD8\u6709\u3010" + this._requests.length + "\u3011\u4E2A\u8BF7\u6C42\u5728\u7B49\u5F85");
            }
          }
          var listeners = this._listener[rspCmd];
          if (null != listeners) {
            for (var _iterator = _createForOfIteratorHelperLoose(listeners), _step; !(_step = _iterator()).done;) {
              var rsp = _step.value;
              Logger.logNet("\u89E6\u53D1\u76D1\u542C\u547D\u4EE4\u3010" + rspCmd + "\u3011\u7684\u56DE\u8C03");
              this._callbackExecuter(rsp, json.data);
            }
          }
        };
        _proto.onError = function onError(event) {
          error(event);
        };
        _proto.onClosed = function onClosed(event) {
          var _this3 = this;
          this.clearTimer();

          // 执行断线回调，返回false表示不进行重连
          if (this._disconnectCallback && !this._disconnectCallback()) {
            Logger.logNet("\u65AD\u5F00\u8FDE\u63A5");
            return;
          }

          // 自动重连
          if (this.isAutoReconnect()) {
            this.updateNetTips(NetTipsType.ReConnecting, true);
            this._reconnectTimer = setTimeout(function () {
              _this3._socket.close();
              _this3._state = NetNodeState.Closed;
              _this3.connect(_this3._connectOptions);
              if (_this3._autoReconnect > 0) {
                _this3._autoReconnect -= 1;
              }
            }, this._reconnetTimeOut);
          } else {
            this._state = NetNodeState.Closed;
          }
        }

        /**
         * 断开网络
         * @param code      关闭码
         * @param reason    关闭原因
         */;
        _proto.close = function close(code, reason) {
          this.clearTimer();
          this._listener = {};
          this._requests.length = 0;
          if (this._networkTips) {
            this._networkTips.connectTips(false);
            this._networkTips.reconnectTips(false);
            this._networkTips.requestTips(false);
          }
          if (this._socket) {
            this._socket.close(code, reason);
          } else {
            this._state = NetNodeState.Closed;
          }
        }

        /**
         * 只是关闭Socket套接字（仍然重用缓存与当前状态）
         * @param code      关闭码
         * @param reason    关闭原因
         */;
        _proto.closeSocket = function closeSocket(code, reason) {
          if (this._socket) {
            this._socket.close(code, reason);
          }
        }

        /**
         * 发起请求，如果当前处于重连中，进入缓存列表等待重连完成后发送
         * @param buf       网络数据
         * @param force     是否强制发送
         */;
        _proto.send = function send(buf, force) {
          if (force === void 0) {
            force = false;
          }
          if (this._state == NetNodeState.Working || force) {
            return this._socket.send(buf);
          } else if (this._state == NetNodeState.Checking || this._state == NetNodeState.Connecting) {
            this._requests.push({
              buffer: buf,
              rspCmd: "",
              rspObject: null
            });
            Logger.logNet("\u5F53\u524D\u72B6\u6001\u4E3A\u3010" + NetNodeStateStrs[this._state] + "\u3011,\u7E41\u5FD9\u5E76\u7F13\u51B2\u53D1\u9001\u6570\u636E");
            return 0;
          } else {
            error("\u5F53\u524D\u72B6\u6001\u4E3A\u3010" + NetNodeStateStrs[this._state] + "\u3011,\u8BF7\u6C42\u9519\u8BEF");
            return -1;
          }
        }

        /**
         * 发起请求，并进入缓存列表
         * @param reqProtocol 请求协议
         * @param rspObject   回调对象
         * @param showTips    是否触发请求提示
         * @param force       是否强制发送
         */;
        _proto.request = function request(reqProtocol, rspObject, showTips, force) {
          if (showTips === void 0) {
            showTips = true;
          }
          if (force === void 0) {
            force = false;
          }
          var rspCmd = this._protocolHelper.handlerRequestPackage(reqProtocol);
          this.base_request(reqProtocol, rspCmd, rspObject, showTips, force);
        }

        /**
         * 唯一request，确保没有同一响应的请求（避免一个请求重复发送，netTips界面的屏蔽也是一个好的方法）
         * @param reqProtocol 请求协议
         * @param rspObject   回调对象
         * @param showTips    是否触发请求提示
         * @param force       是否强制发送
         */;
        _proto.requestUnique = function requestUnique(reqProtocol, rspObject, showTips, force) {
          if (showTips === void 0) {
            showTips = true;
          }
          if (force === void 0) {
            force = false;
          }
          var rspCmd = this._protocolHelper.handlerRequestPackage(reqProtocol);
          for (var i = 0; i < this._requests.length; ++i) {
            if (this._requests[i].rspCmd == rspCmd) {
              Logger.logNet("\u547D\u4EE4\u3010" + rspCmd + "\u3011\u91CD\u590D\u8BF7\u6C42");
              return false;
            }
          }
          this.base_request(reqProtocol, rspCmd, rspObject, showTips, force);
          return true;
        };
        _proto.base_request = function base_request(reqProtocol, rspCmd, rspObject, showTips, force) {
          if (showTips === void 0) {
            showTips = true;
          }
          if (force === void 0) {
            force = false;
          }
          var buf = JSON.stringify(reqProtocol); // 转为二进制流发送

          if (this._state == NetNodeState.Working || force) {
            this._socket.send(buf);
          }
          Logger.logNet("\u961F\u5217\u547D\u4EE4\u4E3A\u3010" + rspCmd + "\u3011\u7684\u8BF7\u6C42\uFF0C\u7B49\u5F85\u8BF7\u6C42\u6570\u636E\u7684\u56DE\u8C03");

          // 进入发送缓存列表
          this._requests.push({
            buffer: buf,
            rspCmd: rspCmd,
            rspObject: rspObject
          });
          // 启动网络请求层
          if (showTips) {
            this.updateNetTips(NetTipsType.Requesting, true);
          }
        }

        /********************** 回调相关处理 *********************/
        /**
         * 设置一个唯一的服务器推送监听
         * @param cmd       命令字串
         * @param callback  回调方法
         * @param target    目标对象
         */;
        _proto.setResponeHandler = function setResponeHandler(cmd, callback, target) {
          if (callback == null) {
            error("\u547D\u4EE4\u4E3A\u3010" + cmd + "\u3011\u8BBE\u7F6E\u54CD\u5E94\u5904\u7406\u7A0B\u5E8F\u9519\u8BEF");
            return false;
          }
          this._listener[cmd] = [{
            target: target,
            callback: callback
          }];
          return true;
        }

        /**
         * 可添加多个同类返回消息的监听
         * @param cmd       命令字串
         * @param callback  回调方法
         * @param target    目标对象
         * @returns 
         */;
        _proto.addResponeHandler = function addResponeHandler(cmd, callback, target) {
          if (callback == null) {
            error("\u547D\u4EE4\u4E3A\u3010" + cmd + "\u3011\u6DFB\u52A0\u54CD\u5E94\u5904\u7406\u7A0B\u5E8F\u9519\u8BEF");
            return false;
          }
          var rspObject = {
            target: target,
            callback: callback
          };
          if (null == this._listener[cmd]) {
            this._listener[cmd] = [rspObject];
          } else {
            var index = this.getNetListenersIndex(cmd, rspObject);
            if (-1 == index) {
              this._listener[cmd].push(rspObject);
            }
          }
          return true;
        }

        /**
         * 删除一个监听中指定子回调
         * @param cmd       命令字串
         * @param callback  回调方法
         * @param target    目标对象
         */;
        _proto.removeResponeHandler = function removeResponeHandler(cmd, callback, target) {
          if (null != this._listener[cmd] && callback != null) {
            var index = this.getNetListenersIndex(cmd, {
              target: target,
              callback: callback
            });
            if (-1 != index) {
              this._listener[cmd].splice(index, 1);
            }
          }
        }

        /**
         * 清除所有监听或指定命令的监听
         * @param cmd  命令字串（默认不填为清除所有）
         */;
        _proto.cleanListeners = function cleanListeners(cmd) {
          if (cmd === void 0) {
            cmd = "";
          }
          if (cmd == "") {
            this._listener = {};
          } else {
            delete this._listener[cmd];
          }
        };
        _proto.getNetListenersIndex = function getNetListenersIndex(cmd, rspObject) {
          var index = -1;
          for (var i = 0; i < this._listener[cmd].length; i++) {
            var iterator = this._listener[cmd][i];
            if (iterator.callback == rspObject.callback && iterator.target == rspObject.target) {
              index = i;
              break;
            }
          }
          return index;
        }

        /********************** 心跳、超时相关处理 *********************/;
        _proto.resetReceiveMsgTimer = function resetReceiveMsgTimer() {
          var _this4 = this;
          if (this._receiveMsgTimer !== null) {
            clearTimeout(this._receiveMsgTimer);
          }
          this._receiveMsgTimer = setTimeout(function () {
            warn("接收消息定时器关闭网络连接");
            _this4._socket.close();
          }, this._receiveTime);
        };
        _proto.resetHearbeatTimer = function resetHearbeatTimer() {
          var _this5 = this;
          if (this._keepAliveTimer !== null) {
            clearTimeout(this._keepAliveTimer);
          }
          this._keepAliveTimer = setTimeout(function () {
            Logger.logNet("网络节点保持活跃发送心跳信息");
            _this5.send(_this5._protocolHelper.getHearbeat());
          }, this._heartTime);
        };
        _proto.clearTimer = function clearTimer() {
          if (this._receiveMsgTimer !== null) {
            clearTimeout(this._receiveMsgTimer);
          }
          if (this._keepAliveTimer !== null) {
            clearTimeout(this._keepAliveTimer);
          }
          if (this._reconnectTimer !== null) {
            clearTimeout(this._reconnectTimer);
          }
        }

        /** 是否自动重连接 */;
        _proto.isAutoReconnect = function isAutoReconnect() {
          return this._autoReconnect != 0;
        }

        /** 拒绝重新连接 */;
        _proto.rejectReconnect = function rejectReconnect() {
          this._autoReconnect = 0;
          this.clearTimer();
        };
        return NetNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetProtocolPako.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "88ae0lIg5BFWb1O1E8/Etwi", "NetProtocolPako", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-04-21 13:45:51
       * @LastEditors: dgflash
       * @LastEditTime: 2022-04-21 13:51:33
       */
      var unzip = function unzip(str) {
        var charData = str.split('').map(function (x) {
          return x.charCodeAt(0);
        });
        var binData = new Uint8Array(charData);
        //@ts-ignore
        var data = pako.inflate(binData, {
          to: 'string'
        });
        return data;
      };
      var zip = function zip(str) {
        //@ts-ignore
        var binaryString = pako.gzip(str, {
          to: 'string'
        });
        return binaryString;
      };

      /** Pako.js 数据压缩协议 */
      var NetProtocolPako = exports('NetProtocolPako', /*#__PURE__*/function () {
        function NetProtocolPako() {}
        var _proto = NetProtocolPako.prototype;
        _proto.getHeadlen = function getHeadlen() {
          return 0;
        };
        _proto.getHearbeat = function getHearbeat() {
          return "";
        };
        _proto.getPackageLen = function getPackageLen(msg) {
          return msg.toString().length;
        };
        _proto.checkResponsePackage = function checkResponsePackage(respProtocol) {
          return true;
        };
        _proto.handlerResponsePackage = function handlerResponsePackage(respProtocol) {
          if (respProtocol.code == 1) {
            if (respProtocol.isCompress) {
              respProtocol.data = unzip(respProtocol.data);
            }
            respProtocol.data = JSON.parse(respProtocol.data);
            return true;
          } else {
            return false;
          }
        };
        _proto.handlerRequestPackage = function handlerRequestPackage(reqProtocol) {
          var rspCmd = reqProtocol.cmd;
          reqProtocol.callback = rspCmd;
          if (reqProtocol.isCompress) {
            reqProtocol.data = zip(reqProtocol.data);
          }
          return rspCmd;
        };
        _proto.getPackageId = function getPackageId(respProtocol) {
          return respProtocol.callback;
        };
        return NetProtocolPako;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkService.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameLogic.ts', './LocalPuzzleService.ts', './Oops.ts', './HttpRequest.ts', './sudoku.ts', './XXHash32.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, GameLogic, LocalPuzzleService, oops, HttpReturn, solve, XXHash32;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      LocalPuzzleService = module.LocalPuzzleService;
    }, function (module) {
      oops = module.oops;
    }, function (module) {
      HttpReturn = module.HttpReturn;
    }, function (module) {
      solve = module.solve;
    }, function (module) {
      XXHash32 = module.XXHash32;
    }],
    execute: function () {
      cclegacy._RF.push({}, "42f0aAutGFC77rrS5D7eL1V", "NetworkService", undefined);

      /**
       *  负责处理网络事件
       */
      var NetworkService = exports('NetworkService', /*#__PURE__*/function () {
        function NetworkService() {}
        /**
         * 通用请求封装函数（带超时默认返回值）
         * @param name 请求名称/路径
         * @param showLoading 是否显示加载界面 (默认true)
         * @param params 请求参数 (默认null)
         * @returns Promise<HttpReturn> 正常响应或超时默认响应
         */
        NetworkService.getAsync = /*#__PURE__*/
        function () {
          var _getAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, showLoading, params) {
            var timeout, timeoutId, timeoutPromise, response;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (showLoading === void 0) {
                    showLoading = true;
                  }
                  if (params === void 0) {
                    params = null;
                  }
                  timeout = 5000; // 默认5秒超时
                  timeoutId = null; // 创建超时Promise
                  timeoutPromise = new Promise(function (resolve) {
                    timeoutId = setTimeout(function () {
                      console.warn("请求超时！");
                      if (showLoading) {
                        oops.gui.waitClose();
                      }
                      // 返回超时默认响应
                      resolve(new HttpReturn());
                    }, timeout);
                  });
                  _context.prev = 5;
                  // 显示加载界面
                  if (showLoading) {
                    oops.gui.waitOpen();
                  }

                  // 使用Promise.race竞争请求和超时
                  _context.next = 9;
                  return Promise.race([oops.http.getAsync(name, params), timeoutPromise]);
                case 9:
                  response = _context.sent;
                  // 清除超时定时器（如果请求先完成）
                  if (timeoutId) {
                    clearTimeout(timeoutId);
                    timeoutId = null;
                  }
                  return _context.abrupt("return", response);
                case 14:
                  _context.prev = 14;
                  _context.t0 = _context["catch"](5);
                  // 处理其他错误
                  console.warn("请求发生错误:", _context.t0);
                  return _context.abrupt("return", new HttpReturn());
                case 18:
                  _context.prev = 18;
                  // 确保关闭加载界面
                  if (showLoading) {
                    oops.gui.waitClose();
                  }
                  // 确保清除定时器
                  if (timeoutId) {
                    clearTimeout(timeoutId);
                    timeoutId = null;
                  }
                  return _context.finish(18);
                case 22:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[5, 14, 18, 22]]);
          }));
          function getAsync(_x, _x2, _x3) {
            return _getAsync.apply(this, arguments);
          }
          return getAsync;
        }()
        /**
         * 生成数独题目
         */;

        NetworkService.generate = /*#__PURE__*/
        function () {
          var _generate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(sudokuDifficulty, unique) {
            var response, res;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 3;
                  return this.getAsync("api/puzzles/level/" + sudokuDifficulty);
                case 3:
                  response = _context2.sent;
                  if (!response.isSucc) {
                    _context2.next = 10;
                    break;
                  }
                  res = response.res; // test
                  // res = this.test_data();
                  // this.checkID(res.mission, res.id);
                  console.log("数独题目", res);
                  return _context2.abrupt("return", {
                    puzzleStr: res.mission,
                    solutionStr: res.solution,
                    blanks: GameLogic.findBlanks(res.mission)
                  });
                case 10:
                  oops.gui.toast("获取题目失败，由本地生成！", true);
                  // return GameLogic.generate(Config.difficulty[sudokuDifficulty].prefilledNumbers);
                  return _context2.abrupt("return", LocalPuzzleService.getInstance().getRandomPuzzleByDifficulty(sudokuDifficulty));
                case 12:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function generate(_x4, _x5) {
            return _generate.apply(this, arguments);
          }
          return generate;
        }();
        NetworkService.generateDailyChallenge = /*#__PURE__*/function () {
          var _generateDailyChallenge = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(sudokuDifficulty, date) {
            var dataStr, response, res;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  dataStr = GameLogic.formatDateToYYYYMMDD(date);
                  console.log("每日挑战时间date->", dataStr);
                  // oops.http.server = "http://10.122.85.251:5091/";
                  // oops.http.server = "http://localhost:8888/";
                  // const response = await oops.http.getAsync("api/puzzles/level/" + sudokuDifficulty);
                  _context3.next = 4;
                  return this.getAsync("api/daily_challenges/" + dataStr);
                case 4:
                  response = _context3.sent;
                  if (!response.isSucc) {
                    _context3.next = 10;
                    break;
                  }
                  res = response.res;
                  return _context3.abrupt("return", {
                    puzzleStr: res.mission,
                    solutionStr: res.solution,
                    blanks: GameLogic.findBlanks(res.mission)
                  });
                case 10:
                  oops.gui.toast("获取题目失败，由本地生成！", true);
                  // return GameLogic.generate(Config.difficulty[sudokuDifficulty].prefilledNumbers);
                  return _context3.abrupt("return", LocalPuzzleService.getInstance().getRandomPuzzleByDifficulty(sudokuDifficulty));
                case 12:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function generateDailyChallenge(_x6, _x7) {
            return _generateDailyChallenge.apply(this, arguments);
          }
          return generateDailyChallenge;
        }();
        NetworkService.test_data = function test_data() {
          // const mission = "700054010063870425504000700270400001400920007000007542852043079390782054047590283";
          // const mission = "081020600042060089056800240693142758428357916175689324510036892230008460860200000";
          // const mission = "697000002001972063003006790912000607374260950865709024148693275709024006006807009";
          // const mission = "970605040531490206064003500306741820040062030000009604020000460480006000600004002";
          var mission = "610020478850740090000080053180357000030260010000190030347010080001870345508439701";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.hiddenSingles_test_data = function hiddenSingles_test_data() {
          var mission = "000000600760090200040008300000000016300056728006080030900002800600001000007004102";
          // const mission = "479000005000000000500700009900000568007015000004003090000801006020040000001000470";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.y_wing_test_data = function y_wing_test_data() {
          return {
            mission: "900240000050690231020050090090700320002935607070002900069020073510079062207086009",
            solution: "931247586754698231628153794195764328482935617376812945869521473513479862247386159"
          };
        };
        NetworkService.w_wing_test_data = function w_wing_test_data() {
          var mission = "078026300630000000050400068890000402300000510005200890006800030500049600003502000";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.skyscraper_test_data = function skyscraper_test_data() {
          // const mission = "364295187820007640001600023682501700407029006903760002248956371030002060006003200";
          // const mission = "002300600060200030173659842200067309600920704007105286320006100046700028781592463";
          var mission = "002946083034008026608372104009705602005620009326091075203007061067000248001260307";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.XYChain_test_data = function XYChain_test_data() {
          var mission = "080103070090506000001408020578241639143659782926837451037905200000304097419782060";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.XY_Wing_test_data = function XY_Wing_test_data() {
          var mission = "004010035001700804608540271189604003400001000267305410012958046006432100840167000";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.XYZ_Wing_test_data = function XYZ_Wing_test_data() {
          var mission = "869453721000921568215800439621534987407610352000200146000102803932785614100340205";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.WXYZ_Wing_test_data = function WXYZ_Wing_test_data() {
          var mission = "000024730540370260237000004700030840003481000084060003300000059070093002006205300";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.Swordfish_Wing_test_data = function Swordfish_Wing_test_data() {
          // const mission = "030200000860030500004870000000390007200608003100027000000086300008050091000003020";
          // const mission = "030260080860030502024870036080390207200608003103527060002086300308052691000003020";
          var mission = "020043069003896200960025030890560013600030000030081026300010070009674302270358090";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.JellyFishStrategy_Wing_test_data = function JellyFishStrategy_Wing_test_data() {
          // const mission = "200000003080030050003402100001205400000090000009308600002506900090020070400000001"
          var mission = "204103580000020341103485600732954168005010900619832400001508200300240000026300004";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.TwoStringKite_test_data = function TwoStringKite_test_data() {
          var mission = "320547906006213050045698230500472000007901025002805700214359678673184592050726143";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.RectangleElimination_test_data = function RectangleElimination_test_data() {
          // const mission = "207000080518420070060087502020618705806702001701903268105860027674231859082070000";
          // const mission = "207000080518420070060087502020618705806702001701003268105860027674231859082070000";
          // const mission = "700054010063870425504000700270400001400920007000007542852043079390782054047590283";
          var mission = "580179003000608975697350000900530728703810500850907130469281357008765000075493000";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.UniqueRectangleType1_test_data = function UniqueRectangleType1_test_data() {
          // const mission = "502008967100700452067500381213657849654891273700004615821900034306000098005083026";
          var mission = "197846532008050719352917648831769425524138976009524183086400001003600007905000064";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.UniqueRectangleType2_test_data = function UniqueRectangleType2_test_data() {
          // const mission = "502008967100700452067500381213657849654891273700004615821900034306000098005083026";
          var mission = "070903082000020000200407001605002109020004060708000205900205006002070000010309020";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.FinnedXWingStrategy_test_data = function FinnedXWingStrategy_test_data() {
          // const mission = "005600100010509063036012945003900001029381650581006390050260400300100020000000500";
          var mission = "052670308030005627670032501280006105060000204714523869827314956090267483346958712";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.SashimiXWingStrategy_test_data = function SashimiXWingStrategy_test_data() {
          var mission = "000000389904002561000090724461927853859364172002000496097010048500008907000009005";
          // const mission = "052670308030005627670032501280006105060000204714523869827314956090267483346958712";
          return {
            mission: mission,
            solution: solve(mission)
          };
        };
        NetworkService.checkID = function checkID(mission, sqliteId) {
          // 假设 mission 是 41 字节的 Uint8Array
          // const mission1 = new TextEncoder().encode(mission); // 这里替换为实际的 mission 数据

          // 计算 XXHash32
          var hash = XXHash32(mission);
          console.log("hash->: " + hash);
          // 去除符号位 (& 0x7FFFFFFF)
          var finalId = hash & 0x7FFFFFFF;
          console.log("\u8BA1\u7B97\u5F97\u5230\u7684ID: " + finalId);

          // 比较两个ID
          if (finalId.toString() === sqliteId) {
            console.log("ID匹配，题目一致");
          } else {
            console.log("ID不匹配，题目不一致");
          }
        };
        return NetworkService;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodeDragExt.ts", ['cc'], function () {
  var cclegacy, Node, js, Vec2, v3;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      js = module.js;
      Vec2 = module.Vec2;
      v3 = module.v3;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1a072/udu9MtbdbyL5xB8iR", "NodeDragExt", undefined);

      /** 节点拖拽功能 */
      //@ts-ignore
      if (!Node.prototype["__$NodeDragExt$__"]) {
        //@ts-ignore
        Node.prototype["__$NodeDragExt$__"] = true;
        var _DragEvent = {
          DRAG_START: "drag_start",
          DRAG_MOVE: "drag_move",
          DRAG_END: "drag_end"
        };
        js.mixin(Node, {
          DragEvent: _DragEvent
        });

        //----------------   Node 添加 拖拽属性 ----------------

        js.mixin(Node.prototype, {
          _draggable: false,
          _dragging: false,
          _dragTesting: false,
          _dragStartPoint: null,
          initDrag: function initDrag() {
            if (this._draggable) {
              this.on(Node.EventType.TOUCH_START, this.onTouchBegin_0, this);
              this.on(Node.EventType.TOUCH_MOVE, this.onTouchMove_0, this);
              this.on(Node.EventType.TOUCH_END, this.onTouchEnd_0, this);
              this.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel_0, this);
            } else {
              this.off(Node.EventType.TOUCH_START, this.onTouchBegin_0, this);
              this.off(Node.EventType.TOUCH_MOVE, this.onTouchMove_0, this);
              this.off(Node.EventType.TOUCH_END, this.onTouchEnd_0, this);
              this.off(Node.EventType.TOUCH_CANCEL, this.onTouchCancel_0, this);
            }
          },
          onTouchBegin_0: function onTouchBegin_0(event) {
            if (this._dragStartPoint == null) {
              this._dragStartPoint = new Vec2();
            }
            // DEV && console.log(`NodeDragExt -> onTouchBegin_0  ${this.name}`);

            // event.preventSwallow = true;
            var pos = event.getUILocation();
            this._dragStartPoint.set(pos);
            this._dragTesting = true;
          },
          onTouchMove_0: function onTouchMove_0(event) {
            if (!this._dragging && this._draggable && this._dragTesting) {
              var sensitivity = 10;
              var pos = event.getUILocation();
              if (Math.abs(this._dragStartPoint.x - pos.x) < sensitivity && Math.abs(this._dragStartPoint.y - pos.y) < sensitivity) {
                return;
              }

              // event.preventSwallow = true;
              this._dragging = true;
              this._dragTesting = false;
              this.emit(Node.DragEvent.DRAG_START, event);
            }
            if (this._dragging) {
              var delta = event.getUIDelta();
              // /** 这里除以 世界缩放，在有缩放的时候拖拽不至于很怪 */
              // this.position = this.position.add(v3(delta.x / this.worldScale.x, delta.y / this.worldScale.y, 0));
              var newPos = v3(delta.x, delta.y, 0).add(this.position);
              this.position = newPos;
              this.emit(Node.DragEvent.DRAG_MOVE, event);
            }
          },
          onTouchEnd_0: function onTouchEnd_0(event) {
            if (this._dragging) {
              this._dragging = false;
              this.emit(Node.DragEvent.DRAG_END, event);
            }
            // DEV && console.log(`NodeDragExt -> onTouchEnd_0  ${this.name}, _dragging: ${this._dragging}`);
          },

          onTouchCancel_0: function onTouchCancel_0(event) {
            if (this._dragging) {
              this._dragging = false;
              this.emit(Node.DragEvent.DRAG_END, event);
            }
            // DEV && console.log(`NodeDragExt -> onTouchCancel_0  ${this.name}, _dragging: ${this._dragging}`);
          },

          startDrag: function startDrag() {
            // 此节点是否在场景中激活
            if (!this.activeInHierarchy) {
              return;
            }
            this.dragBegin();
          },
          dragBegin: function dragBegin() {
            this._dragging = true;
            this._dragTesting = true;
            this.on(Node.EventType.TOUCH_MOVE, this.onTouchMove_0, this);
            this.on(Node.EventType.TOUCH_END, this.onTouchEnd_0, this);
            this.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel_0, this);
          },
          dragEnd: function dragEnd() {
            if (this._dragging) {
              this._dragTesting = false;
              this._dragging = false;
            }
          },
          // 停止拖拽
          stopDrag: function stopDrag() {
            this.dragEnd();
          },
          // 移除 touch 事件
          removeDragEvent: function removeDragEvent() {
            this.off(Node.EventType.TOUCH_START, this.onTouchBegin_0, this);
            this.off(Node.EventType.TOUCH_MOVE, this.onTouchMove_0, this);
            this.off(Node.EventType.TOUCH_END, this.onTouchEnd_0, this);
            this.off(Node.EventType.TOUCH_CANCEL, this.onTouchCancel_0, this);
          }
        });

        // 如果 node 设置 node.draggable = true, 则启用 拖拽
        Object.defineProperty(Node.prototype, "draggable", {
          get: function get() {
            return this._draggable;
          },
          set: function set(value) {
            if (this._draggable != value) {
              this._draggable = value;
              this.initDrag();
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Node.prototype, "dragTesting", {
          get: function get() {
            return this._dragTesting;
          },
          set: function set(value) {
            if (this._dragTesting != value) {
              this._dragTesting = value;
            }
          },
          enumerable: true,
          configurable: true
        });
        //----------------   Node 添加 拖拽属性 ----------------
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodeExt.ts", ['cc'], function () {
  var cclegacy, Node, Graphics, Label, RichText, Sprite, Button, Canvas, EditBox, Layout, PageView, ProgressBar, ScrollView, Slider, Toggle, Widget, UIOpacity, UITransform, Mask, Size, UIRenderer, Color, v3;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Graphics = module.Graphics;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
      Button = module.Button;
      Canvas = module.Canvas;
      EditBox = module.EditBox;
      Layout = module.Layout;
      PageView = module.PageView;
      ProgressBar = module.ProgressBar;
      ScrollView = module.ScrollView;
      Slider = module.Slider;
      Toggle = module.Toggle;
      Widget = module.Widget;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      Mask = module.Mask;
      Size = module.Size;
      UIRenderer = module.UIRenderer;
      Color = module.Color;
      v3 = module.v3;
    }],
    execute: function () {
      cclegacy._RF.push({}, "493a6vtAsNCi7/drbKHIAaL", "NodeExt", undefined);

      // ========= 扩展 cc 提示声明 =========

      /** 扩展节点属性 */
      {
        Object.defineProperty(Node.prototype, "uiGraphics", {
          get: function get() {
            return this.getComponent(Graphics);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiLabel", {
          get: function get() {
            return this.getComponent(Label);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiRichText", {
          get: function get() {
            return this.getComponent(RichText);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiSprite", {
          get: function get() {
            return this.getComponent(Sprite);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiButton", {
          get: function get() {
            return this.getComponent(Button);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiCanvas", {
          get: function get() {
            return this.getComponent(Canvas);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiEditBox", {
          get: function get() {
            return this.getComponent(EditBox);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiLayout", {
          get: function get() {
            return this.getComponent(Layout);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiPageView", {
          get: function get() {
            return this.getComponent(PageView);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiProgressBar", {
          get: function get() {
            return this.getComponent(ProgressBar);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiScrollView", {
          get: function get() {
            return this.getComponent(ScrollView);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiSlider", {
          get: function get() {
            return this.getComponent(Slider);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiToggle", {
          get: function get() {
            return this.getComponent(Toggle);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiWidget", {
          get: function get() {
            return this.getComponent(Widget);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiOpacity", {
          get: function get() {
            return this.getComponent(UIOpacity);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiTransform", {
          get: function get() {
            return this.getComponent(UITransform);
          },
          set: function set(value) {}
        });
        Object.defineProperty(Node.prototype, "uiMask", {
          get: function get() {
            return this.getComponent(Mask);
          },
          set: function set(value) {}
        });

        /** 获取、设置节点的 X 坐标 */
        Object.defineProperty(Node.prototype, "x", {
          get: function get() {
            var self = this;
            return self.position.x;
          },
          set: function set(value) {
            var self = this;
            self.setPosition(value, self.position.y);
          }
        });

        /** 获取、设置节点的 Y 坐标 */
        Object.defineProperty(Node.prototype, "y", {
          get: function get() {
            var self = this;
            return self.position.y;
          },
          set: function set(value) {
            var self = this;
            self.setPosition(self.position.x, value);
          }
        });

        /** 获取、设置节点的 Z 坐标 */
        Object.defineProperty(Node.prototype, "z", {
          get: function get() {
            var self = this;
            return self.position.z;
          },
          set: function set(value) {
            var self = this;
            self.setPosition(self.position.x, self.position.y, value);
          }
        });

        /** 获取、设置节点的宽度 */
        Object.defineProperty(Node.prototype, "w", {
          configurable: true,
          get: function get() {
            var _self$getComponent$wi, _self$getComponent;
            var self = this;
            return (_self$getComponent$wi = (_self$getComponent = self.getComponent(UITransform)) == null ? void 0 : _self$getComponent.width) != null ? _self$getComponent$wi : 0;
          },
          set: function set(value) {
            var self = this;
            (self.getComponent(UITransform) || self.addComponent(UITransform)).width = value;
          }
        });

        /** 获取、设置节点的高度 */
        Object.defineProperty(Node.prototype, "h", {
          configurable: true,
          get: function get() {
            var _self$getComponent$he, _self$getComponent2;
            var self = this;
            return (_self$getComponent$he = (_self$getComponent2 = self.getComponent(UITransform)) == null ? void 0 : _self$getComponent2.height) != null ? _self$getComponent$he : 0;
          },
          set: function set(value) {
            var self = this;
            (self.getComponent(UITransform) || self.addComponent(UITransform)).height = value;
          }
        });

        /** 获取、设置节点的尺寸 */
        Object.defineProperty(Node.prototype, "size", {
          get: function get() {
            var self = this;
            var uiTransform = self.getComponent(UITransform);
            return new Size(uiTransform.width, uiTransform.height);
          },
          set: function set(value) {
            var self = this;
            var uiTransform = self.getComponent(UITransform) || self.addComponent(UITransform);
            uiTransform.width = value.width;
            uiTransform.height = value.height;
          }
        });

        /** 获取、设置节点的透明度 */
        Object.defineProperty(Node.prototype, "opacity", {
          get: function get() {
            var self = this;
            var op = self.getComponent(UIOpacity);
            if (op != null) {
              return op.opacity;
            }
            var render = self.getComponent(UIRenderer);
            if (render) {
              return render.color.a;
            }
            return 255;
          },
          set: function set(value) {
            var self = this;
            var op = self.getComponent(UIOpacity);
            if (op != null) {
              op.opacity = value;
              return;
            }
            var render = self.getComponent(UIRenderer);
            if (render) {
              // 直接通过 color.a 设置透明度会有bug，没能直接生效，需要激活节点才生效
              // (render.color.a as any) = value;

              // 创建一个颜色缓存对象，避免每次都创建新对象
              if (!this.$__color__) {
                this.$__color__ = new Color(render.color.r, render.color.g, render.color.b, value);
              } else {
                this.$__color__.a = value;
              }
              render.color = this.$__color__; // 设置 color 对象则可以立刻生效
            } else {
              self.addComponent(UIOpacity).opacity = value;
            }
          }
        });

        /** 获取、设置节点的颜色 */
        Object.defineProperty(Node.prototype, "color", {
          get: function get() {
            var _self$getComponent3;
            var self = this;
            return (_self$getComponent3 = self.getComponent(UIRenderer)) == null ? void 0 : _self$getComponent3.color;
          },
          set: function set(value) {
            var self = this;
            var render = self.getComponent(UIRenderer);
            render && (render.color = value);
          }
        });

        /** 获取、设置节点的 X 缩放系数 */
        Object.defineProperty(Node.prototype, "scale_x", {
          get: function get() {
            var self = this;
            return self.scale.x;
          },
          set: function set(value) {
            var self = this;
            self.scale = v3(value, self.scale.y, self.scale.z);
          }
        });

        /** 获取、设置节点的 Y 缩放系数 */
        Object.defineProperty(Node.prototype, "scale_y", {
          get: function get() {
            var self = this;
            return self.scale.y;
          },
          set: function set(value) {
            var self = this;
            self.scale = v3(self.scale.x, value, self.scale.z);
          }
        });

        /** 获取、设置节点的 Z 缩放系数 */
        Object.defineProperty(Node.prototype, "scale_z", {
          get: function get() {
            var self = this;
            return self.scale.z;
          },
          set: function set(value) {
            var self = this;
            self.scale = v3(self.scale.x, self.scale.y, value);
          }
        });

        /** 获取、设置节点的水平锚点 */
        Object.defineProperty(Node.prototype, "anchor_x", {
          get: function get() {
            var _self$getComponent$an, _self$getComponent4;
            var self = this;
            return (_self$getComponent$an = (_self$getComponent4 = self.getComponent(UITransform)) == null ? void 0 : _self$getComponent4.anchorX) != null ? _self$getComponent$an : 0.5;
          },
          set: function set(value) {
            var self = this;
            (self.getComponent(UITransform) || self.addComponent(UITransform)).anchorX = value;
          }
        });

        /** 获取、设置节点的垂直锚点 */
        Object.defineProperty(Node.prototype, "anchor_y", {
          get: function get() {
            var _self$getComponent$an2, _self$getComponent5;
            var self = this;
            return (_self$getComponent$an2 = (_self$getComponent5 = self.getComponent(UITransform)) == null ? void 0 : _self$getComponent5.anchorY) != null ? _self$getComponent$an2 : 0.5;
          },
          set: function set(value) {
            var self = this;
            (self.getComponent(UITransform) || self.addComponent(UITransform)).anchorY = value;
          }
        });

        /** 获取、设置节点的 X 欧拉角 */
        Object.defineProperty(Node.prototype, "angle_x", {
          get: function get() {
            var self = this;
            return self.eulerAngles.x;
          },
          set: function set(value) {
            var self = this;
            self.setRotationFromEuler(value, self.eulerAngles.y, self.eulerAngles.z);
          }
        });

        /** 获取、设置节点的 Y 欧拉角 */
        Object.defineProperty(Node.prototype, "angle_y", {
          get: function get() {
            return this.eulerAngles.y;
          },
          set: function set(value) {
            var self = this;
            self.setRotationFromEuler(self.eulerAngles.x, value, self.eulerAngles.z);
          }
        });

        /** 获取、设置节点的 Z 欧拉角 */
        Object.defineProperty(Node.prototype, "angle_z", {
          get: function get() {
            return this.eulerAngles.y;
          },
          set: function set(value) {
            var self = this;
            self.setRotationFromEuler(self.eulerAngles.x, self.eulerAngles.y, value);
          }
        });
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoteNumber.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, CCInteger, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      CCInteger = module.CCInteger;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "6ca15KpGyVCbYpO+M4qSw0W", "NoteNumber", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var NoteNumber = exports('NoteNumber', (_dec = ccclass('NoteNumber'), _dec2 = property({
        type: Sprite,
        tooltip: "背景",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "数字",
        visible: true
      }), _dec4 = property({
        type: CCInteger,
        tooltip: "数字",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NoteNumber, _Component);
        function NoteNumber() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "number", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = NoteNumber.prototype;
        _proto.start = function start() {
          this.label.string = this.number.toString();
          // this.setBGColor();
        };

        _proto.setBGColor = function setBGColor(color) {
          if (color) {
            this.bg.node.active = true;
            this.bg.color = color;
          } else {
            this.bg.node.active = false;
          }
        };
        _proto.setLabelColor = function setLabelColor(color) {
          this.label.color = color;
        };
        return NoteNumber;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "number", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Notify.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageLabel.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Animation, Component, LanguageLabel;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      LanguageLabel = module.LanguageLabel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "01391Mp6X1Gn554rkzavN4K", "Notify", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 滚动消息提示组件  */
      var Notify = exports('Notify', (_dec = ccclass('Notify'), _dec2 = property(Label), _dec3 = property(Animation), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Notify, _Component);
        function Notify() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "lab_content", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "animation", _descriptor2, _assertThisInitialized(_this));
          /** 提示动画完成 */
          _this.onComplete = null;
          return _this;
        }
        var _proto = Notify.prototype;
        _proto.onLoad = function onLoad() {
          if (this.animation) this.animation.on(Animation.EventType.FINISHED, this.onFinished, this);
        };
        _proto.onFinished = function onFinished() {
          this.node.destroy();
          this.onComplete && this.onComplete();
          this.onComplete = null;
        }

        /**
         * 显示提示
         * @param msg       文本
         * @param useI18n   设置为 true 时，使用多语言功能 msg 参数为多语言 key
         */;
        _proto.toast = function toast(msg, useI18n) {
          var label = this.lab_content.getComponent(LanguageLabel);
          if (useI18n) {
            label.enabled = true;
            label.dataID = msg;
          } else {
            label.enabled = false;
            this.lab_content.string = msg;
          }
        };
        return Notify;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lab_content", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NumberBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventType.ts', './Logger.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, CCInteger, Button, Component, EventType, Logger, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      CCInteger = module.CCInteger;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "db7e8JRpqBIMKnilZPd9GCI", "NumberBtn", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var NumberBtn = exports('NumberBtn', (_dec = ccclass('NumberBtn'), _dec2 = property({
        type: Label,
        tooltip: "按钮数字Label",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "数字剩余个数",
        visible: true
      }), _dec4 = property({
        type: CCInteger,
        tooltip: "按钮数字",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NumberBtn, _Component);
        function NumberBtn() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "btnLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "countLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "number", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = NumberBtn.prototype;
        _proto.start = function start() {
          this.btnLabel.string = this.number.toString();
        };
        _proto.refresh = function refresh(number, count) {
          this.number = number;
          this.btnLabel.string = this.number.toString();
          this.countLabel.string = count.toString();
          var btn = this.node.getComponent(Button);
          if (btn) {
            if (count == 0) {
              btn.interactable = false;
            } else {
              btn.interactable = true;
            }
          }
        };
        _proto.setDisable = function setDisable() {
          var btn = this.node.getComponent(Button);
          if (btn) {
            btn.interactable = false;
          }
        };
        _proto.onClickEvent = function onClickEvent() {
          Logger.logView(this.number.toString(), "填写数字");
          oops.message.dispatchEvent(EventType.TOUCH_NUMBERBTN, this.number);
        };
        _proto.setCountLabelVisible = function setCountLabelVisible(isVisible) {
          this.countLabel.node.active = isVisible;
        };
        return NumberBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "countLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "number", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ObjectPool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, instantiate, Node, NodePool;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      Node = module.Node;
      NodePool = module.NodePool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "36301EPjo1CjpAFb4iPZzs4", "ObjectPool", undefined);

      /**
       * Cocos NodePool 要求的组件接口
       * 需要实现 reuse() 和 unuse() 方法
       */

      /**
       * 类型安全的对象池封装
       * 支持两种模式：
       * 1. 直接管理 Node（无组件）
       * 2. 管理实现了 IPoolHandlerComponent 的组件
       */
      var ObjectPool = exports('ObjectPool', /*#__PURE__*/function () {
        /**
         * @param prefab 预制体
         * @param maxSize 缓存池 最大个数
         * @param component 组件类（仅当 T 为 IPoolHandlerComponent 时必需）
         */
        function ObjectPool(prefab, maxSize, component) {
          if (maxSize === void 0) {
            maxSize = 50;
          }
          this._nodePool = void 0;
          this._prefab = void 0;
          this._maxSize = void 0;
          this._component = void 0;
          this._prefab = prefab;
          this._maxSize = maxSize;
          this._component = component;

          // 初始化 NodePool
          if (component) {
            // 组件池模式
            this._nodePool = new NodePool(component);
          } else {
            // 纯节点池模式（需要手动处理生命周期）
            this._nodePool = new NodePool();
          }
        }

        /** 预加载对象 */
        var _proto = ObjectPool.prototype;
        _proto.preload = function preload(count) {
          for (var i = 0; i < count; i++) {
            var node = instantiate(this._prefab);
            this._nodePool.put(node);
          }
        }

        /** 
          * 获取对象（池为空时自动创建，直到达到最大容量）
          * @param parent 自动挂载的父节点（可选）
          */;
        _proto.get = function get(parent) {
          var node = this._nodePool.get();

          // 池为空且未达最大容量时，动态创建新对象
          if (!node && this._nodePool.size() < this._maxSize) {
            var newNode = instantiate(this._prefab);
            this._nodePool.put(newNode); // 将新对象暂存到池中
            node = this._nodePool.get(); // 再次尝试获取
          }

          if (!node) {
            console.warn('Pool is empty and reached max size');
            return null;
          }

          // 初始化节点状态
          if (parent) {
            node.setParent(parent);
            node.active = true;
          }

          // 返回组件或节点
          return this._component ? node.getComponent(this._component) : node;
        }

        /** 回收对象 */;
        _proto.put = function put(item) {
          var node = item instanceof Node ? item : item.node;
          this._nodePool.put(node);
        }

        /** 清空对象池 */;
        _proto.clear = function clear() {
          this._nodePool.clear();
        }

        /** 当前池容量 */;
        _createClass(ObjectPool, [{
          key: "size",
          get: function get() {
            return this._nodePool.size();
          }
        }]);
        return ObjectPool;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ObjectUtil.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "86827QLFSRM7Zojsx0WqWuQ", "ObjectUtil", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-07-26 15:29:57
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-02 12:07:54
       */

      /** 对象工具 */
      var ObjectUtil = exports('ObjectUtil', /*#__PURE__*/function () {
        function ObjectUtil() {}
        /**
         * 判断指定的值是否为对象
         * @param value 值
         */
        ObjectUtil.isObject = function isObject(value) {
          return Object.prototype.toString.call(value) === '[object Object]';
        }

        /**
         * 深拷贝
         * @param target 目标
         */;
        ObjectUtil.deepCopy = function deepCopy(target) {
          if (target == null || typeof target !== 'object') {
            return target;
          }
          var result = null;
          if (target instanceof Date) {
            result = new Date();
            result.setTime(target.getTime());
            return result;
          }
          if (target instanceof Array) {
            result = [];
            for (var i = 0, length = target.length; i < length; i++) {
              result[i] = this.deepCopy(target[i]);
            }
            return result;
          }
          if (target instanceof Object) {
            result = {};
            for (var key in target) {
              if (target.hasOwnProperty(key)) {
                result[key] = this.deepCopy(target[key]);
              }
            }
            return result;
          }
          console.warn("\u4E0D\u652F\u6301\u7684\u7C7B\u578B\uFF1A" + result);
        }

        /**
         * 拷贝对象
         * @param target 目标
         */;
        ObjectUtil.copy = function copy(target) {
          return JSON.parse(JSON.stringify(target));
        };
        return ObjectUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Oops.ts", ['cc', './EffectSingleCase.ts', './ECS.ts', './Language.ts', './ViewModel.ts', './HttpRequest.ts', './NetManager.ts', './Config2.ts', './Logger.ts', './RandomManager.ts'], function (exports) {
  var cclegacy, EffectSingleCase, ecs, LanguageManager, VM, HttpRequest, NetManager, Config, Logger, RandomManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EffectSingleCase = module.EffectSingleCase;
    }, function (module) {
      ecs = module.ecs;
    }, function (module) {
      LanguageManager = module.LanguageManager;
    }, function (module) {
      VM = module.VM;
    }, function (module) {
      HttpRequest = module.HttpRequest;
    }, function (module) {
      NetManager = module.NetManager;
    }, function (module) {
      Config = module.Config;
    }, function (module) {
      Logger = module.Logger;
    }, function (module) {
      RandomManager = module.RandomManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cbae5wzfSZGzZMuyeAetSfg", "Oops", undefined);
      /** 框架版本号 */
      var version = exports('version', "2.0.0.20241118");

      /** 框架核心模块访问入口 */
      var oops = exports('oops', function oops() {});

      // 引入oops全局变量以方便调试
      /** ----------核心模块---------- */
      /** 日志管理 */
      oops.log = Logger;
      /** 游戏配置 */
      oops.config = new Config();
      /** 本地存储 */
      oops.storage = void 0;
      /** 资源管理 */
      oops.res = void 0;
      /** 全局消息 */
      oops.message = void 0;
      /** 随机工具 */
      oops.random = RandomManager.instance;
      /** 游戏时间管理 */
      oops.timer = void 0;
      /** 游戏音乐管理 */
      oops.audio = void 0;
      /** 二维界面管理 */
      oops.gui = void 0;
      /** 三维游戏世界管理 */
      oops.game = void 0;
      /** ----------可选模块---------- */
      /** 多语言模块 */
      oops.language = new LanguageManager();
      /** HTTP */
      oops.http = new HttpRequest();
      // 使用流程文档可参考、简化与服务器对接、使用新版API体验，可进入下面地址获取新版本，替换network目录中的内容(https://store.cocos.com/app/detail/5877)
      /** WebSocket */
      oops.tcp = new NetManager();
      // 使用流程文档可参考、简化与服务器对接、使用新版API体验，可进入下面地址获取新版本，替换network目录中的内容(https://store.cocos.com/app/detail/5877)
      /** ECS */
      oops.ecs = new ecs.RootSystem();
      /** MVVM */
      oops.mvvm = VM;
      /** 对象池 */
      oops.pool = EffectSingleCase.instance;
      {
        //@ts-ignore
        window.oops = oops;
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OrbitCamera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Quat, Node, input, Input, lerp, Component, Vec2;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Node = module.Node;
      input = module.input;
      Input = module.Input;
      lerp = module.lerp;
      Component = module.Component;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
      cclegacy._RF.push({}, "4e454G/OQ1NB7tjzAUf269U", "OrbitCamera", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var tempVec3 = new Vec3();
      var tempVec3_2 = new Vec3();
      var tempQuat = new Quat();
      var DeltaFactor = 1 / 200;

      /** 
       * 轨道摄影机
       * 1、触摸自由旋转
       * 2、镜头远近鼠标滚轮调节
       * 3、固定为第三人称摄像机
       */
      var OrbitCamera = exports('OrbitCamera', (_dec = ccclass('OrbitCamera'), _dec2 = menu('OopsFramework/Camera/OrbitCamera （轨道摄影机）'), _dec3 = property({
        tooltip: "是否启动触摸控制"
      }), _dec4 = property({
        tooltip: "是否开启启用缩放半径（鼠标滚轮控制摄像机与目标距离）"
      }), _dec5 = property({
        tooltip: "摄像机与目标的半径缩放速度",
        visible: function visible() {
          //@ts-ignore
          return this.enableScaleRadius === true;
        }
      }), _dec6 = property({
        tooltip: "摄像机与目标的半径最小值",
        visible: function visible() {
          //@ts-ignore
          return this.enableScaleRadius === true;
        }
      }), _dec7 = property({
        tooltip: "摄像机与目标的半径最大值",
        visible: function visible() {
          //@ts-ignore
          return this.enableScaleRadius === true;
        }
      }), _dec8 = property({
        tooltip: "自动旋转是否开启"
      }), _dec9 = property({
        tooltip: "自动旋转速度",
        visible: function visible() {
          //@ts-ignore
          return this.autoRotate === true;
        }
      }), _dec10 = property({
        tooltip: "旋转速度"
      }), _dec11 = property({
        tooltip: "跟随速度"
      }), _dec12 = property({
        tooltip: "X轴旋转范围（人物上下看的角度控制）"
      }), _dec13 = property({
        tooltip: "摄像机与目标的距离（以玩家为中心环绕球半径）"
      }), _dec14 = property({
        type: Node,
        tooltip: "跟随目标"
      }), _dec15 = property({
        type: Vec3,
        tooltip: "目标旋转偏移量（初始旋转向量）"
      }), _dec16 = property({
        tooltip: "是否跟随目标 Y 轴旋转"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OrbitCamera, _Component);
        function OrbitCamera() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "enableTouch", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "enableScaleRadius", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "radiusScaleSpeed", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "minRadius", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "maxRadius", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "autoRotate", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "autoRotateSpeed", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rotateSpeed", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "followSpeed", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "xRotationRange", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_targetRadius", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_target", _descriptor12, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_startRotation", _descriptor13, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "followTargetRotationY", _descriptor14, _assertThisInitialized(_this));
          _this._center = new Vec3();
          // 摄像机视口方向量
          _this._targetCenter = new Vec3();
          // 摄像机中心点位置（目标位置）
          _this._touched = false;
          // 是否触摸屏幕
          _this._targetRotation = new Vec3();
          // 目标旋转向量
          _this._rotation = new Quat();
          // 摄像机旋转四元素
          _this._radius = 10;
          return _this;
        }
        var _proto = OrbitCamera.prototype;
        // 当前玩家与目标半径距离
        _proto.start = function start() {
          if (this.enableTouch) {
            input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
            input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
            input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          }
          if (this.enableScaleRadius) {
            input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          }
          if (this.target) this.resetTargetRotation();

          // 根据欧拉角信息计算摄像机四元数，旋转顺序为 YZX
          Quat.fromEuler(this._rotation, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);
          if (this.target) {
            this._targetCenter.set(this.target.worldPosition);
            this._center.set(this._targetCenter);
          }
          this._radius = this.radius;
          this.limitRotation();
        }

        /** 重置摄像机到初始位置 */;
        _proto.resetTargetRotation = function resetTargetRotation() {
          var targetRotation = this._targetRotation.set(this._startRotation);
          if (this.followTargetRotationY) {
            targetRotation = tempVec3_2.set(targetRotation);
            Quat.toEuler(tempVec3, this.target.worldRotation);
            targetRotation.add(tempVec3);
          }
        }

        /** 限制 X 轴旋转（上下看） */;
        _proto.limitRotation = function limitRotation() {
          var rotation = this._targetRotation;
          if (rotation.x < this.xRotationRange.x) {
            rotation.x = this.xRotationRange.x;
          } else if (rotation.x > this.xRotationRange.y) {
            rotation.x = this.xRotationRange.y;
          }
          rotation.z = 0;
        }

        //#region Touch
        ;

        _proto.onTouchStart = function onTouchStart() {
          this._touched = true;
        };
        _proto.onTouchMove = function onTouchMove(event) {
          if (!this._touched) return;
          var delta = event.touch.getDelta();
          Quat.fromEuler(tempQuat, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);
          Quat.rotateX(tempQuat, tempQuat, -delta.y * DeltaFactor);
          Quat.rotateY(tempQuat, tempQuat, -delta.x * DeltaFactor);
          Quat.toEuler(this._targetRotation, tempQuat);
          this.limitRotation();
        };
        _proto.onTouchEnd = function onTouchEnd() {
          this._touched = false;
        }
        //#endregion
        ;

        _proto.onMouseWheel = function onMouseWheel(event) {
          var scrollY = event.getScrollY();
          this._targetRadius += this.radiusScaleSpeed * -Math.sign(scrollY); // 滚轮向前为负，滚轮向后为正
          this._targetRadius = Math.min(this.maxRadius, Math.max(this.minRadius, this._targetRadius));
        };
        _proto.update = function update(dt) {
          var targetRotation = this._targetRotation;
          // 是否摄像机围绕 Y 轴自动旋转
          if (this.autoRotate && !this._touched) {
            targetRotation.y += this.autoRotateSpeed * dt;
          }
          if (this.target) {
            // 重置摄像机中心点
            this._targetCenter.set(this.target.worldPosition);

            // 是否跟随 Y 轴目标旋转
            if (this.followTargetRotationY) {
              targetRotation = tempVec3_2.set(targetRotation);
              Quat.toEuler(tempVec3, this.target.worldRotation);
              targetRotation.y += tempVec3.y; // 运行时，只变化 Y 旋转
            }
          }

          Quat.fromEuler(tempQuat, targetRotation.x, targetRotation.y, targetRotation.z); // 获取目标对象的旋转四元素（人物面向与摄像机一至）

          Quat.slerp(this._rotation, this._rotation, tempQuat, dt * 7 * this.rotateSpeed); // 旋转线性插值（平滑摄像机视口旋转）
          Vec3.lerp(this._center, this._center, this._targetCenter, dt * 5 * this.followSpeed); // 摄像机跟随位移线性插值（平滑摄像机节点位置移动）

          this._radius = lerp(this._radius, this._targetRadius, dt * 5); // 摄像机与目标距离半径线性插值（镜头平滑前后移动)

          Vec3.transformQuat(tempVec3, Vec3.FORWARD, this._rotation); // 计算摄像机旋转后的方向量
          Vec3.multiplyScalar(tempVec3, tempVec3, this._radius); // 计算摄像机与目标半径向量
          tempVec3.add(this._center); // 计算摄像机与目标偏移后的位置

          this.node.position = tempVec3; // 设置摄像机位置
          this.node.lookAt(this._center); // 设置摄像机视口方向
        }

        /** 摄像机立即跟随到制定目标的位置 */;
        _proto.follow = function follow() {
          var targetRotation = this._targetRotation;
          if (this.target) {
            // 重置摄像机中心点
            this._targetCenter.set(this.target.worldPosition);

            // 是否跟随 Y 轴目标旋转
            if (this.followTargetRotationY) {
              targetRotation = tempVec3_2.set(targetRotation);
              Quat.toEuler(tempVec3, this.target.worldRotation);
              targetRotation.y += tempVec3.y; // 运行时，只变化 Y 旋转
            }
          }

          Quat.fromEuler(tempQuat, targetRotation.x, targetRotation.y, targetRotation.z); // 获取目标对象的旋转四元素（人物面向与摄像机一至）

          this._rotation = tempQuat;
          this._center = this._targetCenter;
          this._radius = this._targetRadius;
          Vec3.transformQuat(tempVec3, Vec3.FORWARD, this._rotation); // 计算摄像机旋转后的方向量
          Vec3.multiplyScalar(tempVec3, tempVec3, this._radius); // 计算摄像机与目标半径向量
          tempVec3.add(this._center); // 计算摄像机与目标偏移后的位置

          this.node.position = tempVec3; // 设置摄像机位置
          this.node.lookAt(this._center); // 设置摄像机视口方向
        };

        _createClass(OrbitCamera, [{
          key: "radius",
          get: function get() {
            return this._targetRadius;
          },
          set: function set(v) {
            this._targetRadius = v;
          }
        }, {
          key: "target",
          get: function get() {
            return this._target;
          },
          set: function set(v) {
            this._target = v;
            this._targetRotation.set(this._startRotation);
            this._targetCenter.set(v.worldPosition);
          }
        }, {
          key: "targetRotation",
          get: function get() {
            {
              this._startRotation.set(this._targetRotation);
            }
            return this._startRotation;
          },
          set: function set(v) {
            this._targetRotation.set(v);
            this._startRotation.set(v);
          }
        }]);
        return OrbitCamera;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "enableTouch", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "enableScaleRadius", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "radiusScaleSpeed", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "minRadius", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxRadius", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "autoRotate", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "autoRotateSpeed", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 90;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "rotateSpeed", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "followSpeed", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "xRotationRange", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(5, 70);
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_targetRadius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "radius", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "radius"), _class2.prototype), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_target", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "target", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "target"), _class2.prototype), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_startRotation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "targetRotation", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "targetRotation"), _class2.prototype), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "followTargetRotationY", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PhysicsUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c1584nuvI9HtJ5IHcmFEBzR", "PhysicsUtil", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-07-21 17:30:59
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-02 14:40:28
       */
      /** 物理分组数据 */
      var GroupItem = exports('GroupItem', /*#__PURE__*/function () {
        /**
         * 构造函数
         * @param value 分组值
         * @param name  分组名
         */
        function GroupItem(value, name) {
          this._value = void 0;
          this._name = void 0;
          this._value = value;
          this._name = name;
        }
        _createClass(GroupItem, [{
          key: "value",
          get: /** 分组值 */
          function get() {
            return this._value;
          }
        }, {
          key: "name",
          get: /** 分组名 */
          function get() {
            return this._name;
          }

          /** 碰撞掩码 */
        }, {
          key: "mask",
          get: function get() {
            return 1 << this._value;
          }
        }]);
        return GroupItem;
      }());

      /***
       * 为了方便使用，将编辑器中的物理分组定义到代码。如果编辑器中有修改，确保同步到这里。
       */
      var PhysicsUtil = exports('PhysicsUtil', /*#__PURE__*/function () {
        function PhysicsUtil() {}
        PhysicsUtil.setNodeLayer = function setNodeLayer(item, node) {
          node.layer = item.mask;
          node.children.forEach(function (n) {
            n.layer = item.mask;
            PhysicsUtil.setNodeLayer(item, n);
          });
        };
        return PhysicsUtil;
      }());
      /** 默认物理分组 */
      PhysicsUtil.DEFAULT = new GroupItem(0, 'DEFAULT');
      /** 能通过屏幕触摸中发出的射线检查到的游戏对象 */
      PhysicsUtil.GAME_OBJECT_SELECT = new GroupItem(1, 'GAME_OBJECT_SELECT');
      /** 玩家自己 */
      PhysicsUtil.GAME_OWNER = new GroupItem(2, 'GAME_OWNER');
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlatformUtil.ts", ['cc'], function (exports) {
  var cclegacy, sys, native;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      native = module.native;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c08229jnmdPP5vR721N6GG9", "PlatformUtil", undefined);

      /** 平台数据 */
      var PlatformUtil = exports('PlatformUtil', /*#__PURE__*/function () {
        function PlatformUtil() {}
        /** 是否为安卓系统 */
        PlatformUtil.isNativeAndroid = function isNativeAndroid() {
          if (typeof native == "undefined") return false;
          return sys.isNative && sys.platform === sys.Platform.ANDROID;
        }

        /** 是否为苹果系统 */;
        PlatformUtil.isNativeIOS = function isNativeIOS() {
          if (typeof native == "undefined") return false;
          return sys.isNative && sys.os === sys.OS.IOS;
        }

        /** 获取平台名 */;
        PlatformUtil.getPlateform = function getPlateform() {
          if (this.isNativeAndroid()) return 'android';else if (this.isNativeIOS()) return 'ios';else return 'h5';
        }

        // static isIOSWebview() {
        //     //@ts-ignore
        //     if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.sdkLoginOut)
        //         return true
        //     else
        //         return false
        // }

        /** 获取当前设备的网络类型, 如果网络类型无法获取，默认将返回 `sys.NetworkType.LAN` */;
        var _proto = PlatformUtil.prototype;
        _proto.getNetworkType = function getNetworkType() {
          return sys.getNetworkType();
        }

        /**
         * 获取当前设备的电池电量，如果电量无法获取，默认将返回 1
         * @return - 0.0 ~ 1.0
         */;
        _proto.getBatteryLevel = function getBatteryLevel() {
          return sys.getBatteryLevel();
        }

        /** 尝试打开一个 web 页面，并非在所有平台都有效 */;
        _proto.openURL = function openURL(url) {
          sys.openURL(url);
        }

        /** 拷贝字符串到剪切板 */;
        _proto.copyText = function copyText(text) {
          native.copyTextToClipboard(text);
        };
        return PlatformUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PointingPairStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createClass, _createForOfIteratorHelperLoose, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5b960V7nTRJhp21i8AMtqCk", "PointingPairStrategy", undefined);
      /**
       * 指向对策略
       */
      var PointingPairStrategy = exports('PointingPairStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(PointingPairStrategy, _BaseStrategy);
        function PointingPairStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 5;
          return _this;
        }
        var _proto = PointingPairStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkPointingPairs(board, candidates);
          if (result) {
            return this.createPointingPairSteps(board, candidates, result);
          }
          return null;
        }

        /**
         * 检查指向对
         */;
        _proto.checkPointingPairs = function checkPointingPairs(board, candidates) {
          var _this2 = this;
          // 遍历所有3x3宫
          for (var boxRow = 0; boxRow < 3; boxRow++) {
            var _loop = function _loop() {
                var boxIndex = boxRow * 3 + boxCol;
                var boxCells = _this2.getAreaCells(HighlightAreaType.BOX, boxIndex);
                var blankCells = boxCells.filter(function (pos) {
                  return board[pos.row][pos.col] === BLANK_CHAR;
                });

                // 收集宫内所有候选数字及其位置
                var valuePositions = new Map();
                blankCells.forEach(function (pos) {
                  candidates[pos.row][pos.col].forEach(function (val) {
                    if (!valuePositions.has(val)) {
                      valuePositions.set(val, []);
                    }
                    valuePositions.get(val).push(pos);
                  });
                });

                // 检查每个数字
                var _loop2 = function _loop2() {
                    var _step$value = _step.value,
                      val = _step$value[0],
                      positions = _step$value[1];
                    // 只检查2或3个候选数的情况
                    if (positions.length === 2 || positions.length === 3) {
                      // 检查是否在同一行
                      var rows = positions.map(function (p) {
                        return p.row;
                      });
                      var allSameRow = rows.every(function (row) {
                        return row === rows[0];
                      });
                      if (allSameRow) {
                        var row = rows[0];
                        var affectedCells = SolverUtils.getRowCells(row).filter(function (pos) {
                          // 排除宫内的单元格
                          return !boxCells.some(function (boxPos) {
                            return boxPos.row === pos.row && boxPos.col === pos.col;
                          }) && board[pos.row][pos.col] === BLANK_CHAR && candidates[pos.row][pos.col].has(val);
                        });
                        if (affectedCells.length > 0) {
                          return {
                            v: {
                              v: {
                                value: val,
                                cells: positions,
                                affectedCells: affectedCells,
                                direction: HighlightAreaType.ROW,
                                boxIndex: boxIndex
                              }
                            }
                          };
                        }
                      }

                      // 检查是否在同一列
                      var cols = positions.map(function (p) {
                        return p.col;
                      });
                      var allSameCol = cols.every(function (col) {
                        return col === cols[0];
                      });
                      if (allSameCol) {
                        var col = cols[0];
                        var _affectedCells = SolverUtils.getColumnCells(col).filter(function (pos) {
                          // 排除宫内的单元格
                          return !boxCells.some(function (boxPos) {
                            return boxPos.row === pos.row && boxPos.col === pos.col;
                          }) && candidates[pos.row][pos.col].has(val);
                        });
                        if (_affectedCells.length > 0) {
                          return {
                            v: {
                              v: {
                                value: val,
                                cells: positions,
                                affectedCells: _affectedCells,
                                direction: HighlightAreaType.COLUMN,
                                boxIndex: boxIndex
                              }
                            }
                          };
                        }
                      }
                    }
                  },
                  _ret2;
                for (var _iterator = _createForOfIteratorHelperLoose(valuePositions.entries()), _step; !(_step = _iterator()).done;) {
                  _ret2 = _loop2();
                  if (_ret2) return _ret2.v;
                }
              },
              _ret;
            for (var boxCol = 0; boxCol < 3; boxCol++) {
              _ret = _loop();
              if (_ret) return _ret.v;
            }
          }
          return null;
        }

        /**
         * 创建解题步骤
         */;
        _proto.createPointingPairSteps = function createPointingPairSteps(board, candidates, info) {
          var steps = [];
          var value = info.value,
            cells = info.cells,
            affectedCells = info.affectedCells,
            direction = info.direction;

          // 步骤1：发现指向对
          steps.push(this.createDiscoveryStep(board, candidates, value, cells, affectedCells, direction));

          // 步骤2：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, value, cells, affectedCells, direction));

          // 步骤3：展示影响
          steps.push(this.createImpactDemonstrationStep(board, candidates, value, cells, affectedCells, direction));

          // 步骤4：执行移除
          steps.push(this.createRemovalExecutionStep(board, candidates, value, cells, affectedCells, direction));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, value, cells, affectedCells, direction) {
          var _this3 = this;
          var boxCells = this.getBoxCells(cells[0]);
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("PointingPairStrategy.discoveryDes", {
              name: _this3.name,
              description: _this3.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), boxCells.filter(function (pos) {
              return !cells.some(function (c) {
                return c.row === pos.row && c.col === pos.col;
              });
            }).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, value, cells, affectedCells, direction) {
          var _this4 = this;
          var boxCells = this.getBoxCells(cells[0]);
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("PointingPairStrategy.ruleExplanationDes", {
              name: _this4.name,
              value: value,
              directionName: directionName,
              cellsLength: cells.length
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), boxCells.filter(function (pos) {
              return !cells.some(function (c) {
                return c.row === pos.row && c.col === pos.col;
              });
            }).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, value, cells, affectedCells, direction) {
          var _this5 = this;
          var boxCells = this.getBoxCells(cells[0]);

          // 获取整行或整列的单元格
          var lineCells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(cells[0].row) : SolverUtils.getColumnCells(cells[0].col);

          // 创建去重后的高亮数组
          var highlights = [];
          var addedPositions = new Set();

          // 1. 首先添加整行/列背景（低优先级）
          lineCells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            if (!addedPositions.has(key)) {
              highlights.push({
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              });
              addedPositions.add(key);
            }
          });

          // 2. 添加宫内其他单元格（中优先级）
          boxCells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            if (!cells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            }) && !addedPositions.has(key)) {
              highlights.push({
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              });
              addedPositions.add(key);
            }
          });

          // 3. 添加包含候选数的单元格（高优先级）
          cells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            if (!addedPositions.has(key)) {
              highlights.push({
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              });
              addedPositions.add(key);
            }
          });
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("PointingPairStrategy.impactDemonstrationDes", {
              name: _this5.name,
              value: value,
              directionName: directionName
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: highlights,
            highlightNotes: [].concat(cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, value, cells, affectedCells, direction) {
          var _this6 = this;
          var boxCells = this.getBoxCells(cells[0]);
          // 实际从候选数中移除数字
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });

          // 获取整行或整列的单元格
          var lineCells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(cells[0].row) : SolverUtils.getColumnCells(cells[0].col);

          // 创建去重后的高亮数组
          var highlights = [];
          var addedPositions = new Set();

          // 1. 首先添加整行/列背景（低优先级）
          lineCells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            if (!addedPositions.has(key)) {
              highlights.push({
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              });
              addedPositions.add(key);
            }
          });

          // 2. 添加宫内其他单元格（中优先级）
          boxCells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            if (!cells.some(function (c) {
              return c.row === pos.row && c.col === pos.col;
            }) && !addedPositions.has(key)) {
              highlights.push({
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              });
              addedPositions.add(key);
            }
          });

          // 3. 添加包含候选数的单元格（高优先级）
          cells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            if (!addedPositions.has(key)) {
              highlights.push({
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              });
              addedPositions.add(key);
            }
          });
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("PointingPairStrategy.removalExecutionDes", {
              name: _this6.name,
              value: value,
              directionName: directionName
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: highlights,
            highlightNotes: [].concat(cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.getBoxCells = function getBoxCells(pos) {
          var boxRow = Math.floor(pos.row / 3) * 3;
          var boxCol = Math.floor(pos.col / 3) * 3;
          var cells = [];
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              cells.push({
                row: boxRow + r,
                col: boxCol + c
              });
            }
          }
          return cells;
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _createClass(PointingPairStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("PointingPairStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("PointingPairStrategy.description");
          }
        }]);
        return PointingPairStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Priority.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BranchNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, BranchNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BranchNode = module.BranchNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f7555DSpj9LbYpRDi8/UKdN", "Priority", undefined);

      /** 优先 */
      var Priority = exports('Priority', /*#__PURE__*/function (_BranchNode) {
        _inheritsLoose(Priority, _BranchNode);
        function Priority() {
          return _BranchNode.apply(this, arguments) || this;
        }
        var _proto = Priority.prototype;
        _proto.success = function success() {
          _BranchNode.prototype.success.call(this);
          this._control.success();
        };
        _proto.fail = function fail() {
          _BranchNode.prototype.fail.call(this);
          this._actualTask += 1;
          if (this._actualTask < this.children.length) {
            this._run(this._blackboard);
          } else {
            this._control.fail();
          }
        };
        return Priority;
      }(BranchNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RandomManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3e09eJBwfZBsLPqFszZLvMS", "RandomManager", undefined);
      /** 引擎 utils.ts 中有一些基础数学方法 */

      /** 
       * 随机管理 
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037911&doc_id=2873565
       */
      var RandomManager = exports('RandomManager', /*#__PURE__*/function () {
        function RandomManager() {
          this.random = null;
        }
        var _proto = RandomManager.prototype;
        /** 设置第三方随机库 */
        _proto.setRandom = function setRandom(random) {
          this.random = random;
        };
        _proto.getRandom = function getRandom() {
          return this.random();
        }

        /**
         * 生成指定范围的随机浮点数
         * @param min   最小值
         * @param max   最大值
         */;
        _proto.getRandomFloat = function getRandomFloat(min, max) {
          if (min === void 0) {
            min = 0;
          }
          if (max === void 0) {
            max = 1;
          }
          return this.getRandom() * (max - min) + min;
        }

        /**
         * 生成指定范围的随机整数
         * @param min   最小值
         * @param max   最大值
         * @param type  类型
         * @example
        var min = 1;
        var max = 10;
        // [min,max) 得到一个两数之间的随机整数,这个值不小于min（如果min不是整数的话，得到一个向上取整的 min），并且小于（但不等于）max  
        RandomManager.instance.getRandomInt(min, max, 1);
          // [min,max] 得到一个两数之间的随机整数，包括两个数在内,这个值比min大（如果min不是整数，那就不小于比min大的整数），但小于（但不等于）max
        RandomManager.instance.getRandomInt(min, max, 2);
          // (min,max) 得到一个两数之间的随机整数
        RandomManager.instance.getRandomInt(min, max, 3);
         */;
        _proto.getRandomInt = function getRandomInt(min, max, type) {
          if (type === void 0) {
            type = 2;
          }
          min = Math.ceil(min);
          max = Math.floor(max);
          switch (type) {
            case 1:
              // [min,max) 得到一个两数之间的随机整数,这个值不小于min（如果min不是整数的话，得到一个向上取整的 min），并且小于（但不等于）max  
              return Math.floor(this.getRandom() * (max - min)) + min;
            case 2:
              // [min,max] 得到一个两数之间的随机整数，包括两个数在内,这个值比min大（如果min不是整数，那就不小于比min大的整数），但小于（但不等于）max
              return Math.floor(this.getRandom() * (max - min + 1)) + min;
            case 3:
              // (min,max) 得到一个两数之间的随机整数
              return Math.floor(this.getRandom() * (max - min - 1)) + min + 1;
          }
          return 0;
        }

        /**
         * 根据最大值，最小值范围生成随机数数组
         * @param min   最小值
         * @param max   最大值
         * @param n     随机个数
         * @example
        var a = RandomManager.instance.getRandomByMinMaxList(50, 100, 5)
        console.log("随机的数字", a);
         */;
        _proto.getRandomByMinMaxList = function getRandomByMinMaxList(min, max, n) {
          var result = [];
          for (var i = 0; i < n; i++) {
            result.push(this.getRandomInt(min, max));
          }
          return result;
        }

        /**
         * 获取数组中随机对象
         * @param objects 对象数组
         * @param n 随机个数
         * @example
        var b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        var r = RandomManager.instance.getRandomByObjectList(b, 5);
        console.log("原始的对象", b);
        console.log("随机的对象", r);
         */;
        _proto.getRandomByObjectList = function getRandomByObjectList(objects, n) {
          var temp = objects.slice();
          var result = [];
          for (var i = 0; i < n; i++) {
            var index = this.getRandomInt(0, temp.length, 1);
            result.push(temp.splice(index, 1)[0]);
          }
          return result;
        }

        /**
         * 定和随机分配
         * @param n     随机数量
         * @param sum   随机元素合
         * @example
        var c = RandomManager.instance.getRandomBySumList(5, -100);
        console.log("定和随机分配", c);
         */;
        _proto.getRandomBySumList = function getRandomBySumList(n, sum) {
          var residue = sum;
          var value = 0;
          var result = [];
          for (var i = 0; i < n; i++) {
            value = this.getRandomInt(0, residue, 3);
            if (i == n - 1) {
              value = residue;
            } else {
              residue -= value;
            }
            result.push(value);
          }
          return result;
        };
        _createClass(RandomManager, null, [{
          key: "instance",
          get: /** 随机数管理单例对象 */
          function get() {
            if (this._instance == null) {
              this._instance = new RandomManager();
              this._instance.setRandom(Math.random);
            }
            return this._instance;
          }
        }]);
        return RandomManager;
      }());
      RandomManager._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RectangleEliminationStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bf0eavWxWhHNKX8G1CYYDxI", "RectangleEliminationStrategy", undefined);
      //矩形消除
      var RectangleEliminationStrategy = exports('RectangleEliminationStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(RectangleEliminationStrategy, _BaseStrategy);
        function RectangleEliminationStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 9;
          return _this;
        }
        var _proto = RectangleEliminationStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkRectangleElimination(board, candidates);
          if (result) {
            return this.createRectangleEliminationSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkRectangleElimination = function checkRectangleElimination(board, candidates) {
          // 1. 遍历所有数字1-9
          for (var value = 1; value <= 9; value++) {
            // 检查行强链
            for (var _iterator = _createForOfIteratorHelperLoose(this.findStrongLinks(value, HighlightAreaType.ROW, board, candidates)), _step; !(_step = _iterator()).done;) {
              var rowLink = _step.value;
              var result = this.checkRectanglePattern(rowLink, value, board, candidates, HighlightAreaType.COLUMN);
              if (result) return result;
            }

            // 检查列强链
            for (var _iterator2 = _createForOfIteratorHelperLoose(this.findStrongLinks(value, HighlightAreaType.COLUMN, board, candidates)), _step2; !(_step2 = _iterator2()).done;) {
              var colLink = _step2.value;
              var _result = this.checkRectanglePattern(colLink, value, board, candidates, HighlightAreaType.ROW);
              if (_result) return _result;
            }
          }
          return null;
        }

        /**
         * 检查矩形消除模式的核心逻辑
         */;
        _proto.checkRectanglePattern = function checkRectanglePattern(strongLink, value, board, candidates, perpendicularType) {
          var _strongLink$cells = strongLink.cells,
            cellA = _strongLink$cells[0],
            cellB = _strongLink$cells[1];

          // 获取垂直方向的关联单元格
          var oppositeCellsA = this.findPerpendicularLinks(cellA, value, perpendicularType, board, candidates);
          var oppositeCellsB = this.findPerpendicularLinks(cellB, value, perpendicularType, board, candidates);

          // 检查两种可能的矩形组合
          var result = this.checkRectangleCombination(oppositeCellsA, oppositeCellsB, strongLink, value, board, candidates, perpendicularType === HighlightAreaType.ROW ? HighlightAreaType.COLUMN : HighlightAreaType.ROW) || this.checkRectangleCombination(oppositeCellsB, oppositeCellsA, strongLink, value, board, candidates, perpendicularType === HighlightAreaType.ROW ? HighlightAreaType.COLUMN : HighlightAreaType.ROW);
          return result;
        }

        /**
         * 检查特定的矩形组合
         */;
        _proto.checkRectangleCombination = function checkRectangleCombination(sourceCells, targetCells, strongLink, value, board, candidates, searchDirection) {
          var _this2 = this;
          var _loop = function _loop() {
              var sourceCell = _step3.value;
              var relatedCells = _this2.findPerpendicularLinks(sourceCell, value, searchDirection, board, candidates);
              var _loop2 = function _loop2() {
                  var element = _step4.value;
                  var allBlockCells = _this2.findPerpendicularLinks(element, value, HighlightAreaType.BOX, board, candidates);

                  // 获取被排除的单元格（在relatedCells中的）
                  var excludedCells = allBlockCells.filter(function (cell) {
                    return relatedCells.some(function (relatedCell) {
                      return relatedCell.row === cell.row && relatedCell.col === cell.col;
                    });
                  });

                  // 获取有效的目标单元格（不在relatedCells中的）
                  var blockOtherValueCells = allBlockCells.filter(function (cell) {
                    return !excludedCells.some(function (excludedCell) {
                      return excludedCell.row === cell.row && excludedCell.col === cell.col;
                    });
                  });
                  if (blockOtherValueCells.length > 0 && _this2.isSubsetPositions(blockOtherValueCells, targetCells)) {
                    return {
                      v: {
                        v: {
                          value: value,
                          strongLink: strongLink,
                          connectingBlock: [element].concat(excludedCells, blockOtherValueCells),
                          removeCells: [sourceCell]
                        }
                      }
                    };
                  }
                },
                _ret2;
              for (var _iterator4 = _createForOfIteratorHelperLoose(relatedCells), _step4; !(_step4 = _iterator4()).done;) {
                _ret2 = _loop2();
                if (_ret2) return _ret2.v;
              }
            },
            _ret;
          for (var _iterator3 = _createForOfIteratorHelperLoose(sourceCells), _step3; !(_step3 = _iterator3()).done;) {
            _ret = _loop();
            if (_ret) return _ret.v;
          }
          return null;
        }

        /**
         * 查找垂直方向的关联单元格（保持参数风格一致）
         */;
        _proto.findPerpendicularLinks = function findPerpendicularLinks(cell, value, direction, board, candidates) {
          var links = [];
          var searchCells;
          // 根据方向获取搜索范围
          switch (direction) {
            case HighlightAreaType.ROW:
              searchCells = SolverUtils.getRowCells(cell.row);
              break;
            case HighlightAreaType.COLUMN:
              searchCells = SolverUtils.getColumnCells(cell.col);
              break;
            case HighlightAreaType.BOX:
              searchCells = SolverUtils.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBlockIndex(cell));
              break;
            default:
              return links;
          }
          for (var _iterator5 = _createForOfIteratorHelperLoose(searchCells), _step5; !(_step5 = _iterator5()).done;) {
            var pos = _step5.value;
            if ((pos.row !== cell.row || pos.col !== cell.col) && board[pos.row][pos.col] === BLANK_CHAR && candidates[pos.row][pos.col].has(value)) {
              links.push(pos);
            }
          }
          return links;
        };
        _proto.findStrongLinks = function findStrongLinks(value, areaType, board, candidates) {
          var strongLinks = [];
          var areaCount = areaType === HighlightAreaType.ROW ? 9 : 9;
          for (var areaIndex = 0; areaIndex < areaCount; areaIndex++) {
            var cells = areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(areaIndex) : SolverUtils.getColumnCells(areaIndex);
            var candidateCells = cells.filter(function (pos) {
              return board[pos.row][pos.col] === BLANK_CHAR && candidates[pos.row][pos.col].has(value);
            });
            if (candidateCells.length === 2) {
              strongLinks.push({
                areaType: areaType,
                areaIndex: areaIndex,
                cells: [candidateCells[0], candidateCells[1]]
              });
            }
          }
          return strongLinks;
        }

        /**
         * 检查position数组subset是否是position数组superset的子集
         * @param subset 待检查的子集数组
         * @param superset 超集数组
         * @returns 如果subset所有元素都在superset中则返回true
         */;
        _proto.isSubsetPositions = function isSubsetPositions(subset, superset) {
          var _this3 = this;
          // 边界情况处理
          if (subset.length === 0) return true; // 空集是任何集合的子集
          if (superset.length < subset.length) return false; // 超集更小不可能包含子集

          // 检查每个subset元素是否都在superset中
          return subset.every(function (subPos) {
            return superset.some(function (superPos) {
              return _this3.isSamePosition(subPos, superPos);
            });
          });
        };
        _proto.isSamePosition = function isSamePosition(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        };
        _proto.createRectangleEliminationSteps = function createRectangleEliminationSteps(board, candidates, info) {
          var steps = [];

          // 步骤1：发现矩形模式
          steps.push(this.createDiscoveryStep(board, candidates, info));

          // 步骤2：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, info));

          // 步骤3：展示影响
          steps.push(this.createImpactDemonstrationStep(board, candidates, info));

          // 步骤4：执行移除
          steps.push(this.createRemovalExecutionStep(board, candidates, info));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref) {
          var _this4 = this;
          var value = _ref.value,
            strongLink = _ref.strongLink,
            connectingBlock = _ref.connectingBlock,
            removeCells = _ref.removeCells;
          var linkCells = strongLink.areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(strongLink.areaIndex) : SolverUtils.getColumnCells(strongLink.areaIndex);
          var highlights = [].concat(linkCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), strongLink.cells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), SolverUtils.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBlockIndex(connectingBlock[0])).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }));
          var highlightNotes = [].concat(connectingBlock.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              value: value
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              value: value
            };
          }), linkCells.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }) // 只筛选值等于目标value的单元格
          .map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              value: value
            };
          }));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("RectangleEliminationStrategy.discoveryDes", {
              name: _this4.name,
              description: _this4.description,
              value: value
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: removeCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights, "last"),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, _ref2) {
          var _this5 = this;
          var value = _ref2.value,
            strongLink = _ref2.strongLink,
            connectingBlock = _ref2.connectingBlock,
            removeCells = _ref2.removeCells;
          var linkCells = strongLink.areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(strongLink.areaIndex) : SolverUtils.getColumnCells(strongLink.areaIndex);
          var highlights = [].concat(linkCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), strongLink.cells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), SolverUtils.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBlockIndex(connectingBlock[0])).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }));
          var highlightNotes = [].concat(connectingBlock.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }), linkCells.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }) // 只筛选值等于目标value的单元格
          .map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("RectangleEliminationStrategy.ruleExplanationDes", {
              name: _this5.name,
              value: value,
              strongLinkCell1: "R" + (strongLink.cells[0].row + 1) + "C" + (strongLink.cells[0].col + 1),
              strongLinkCell2: "R" + (strongLink.cells[1].row + 1) + "C" + (strongLink.cells[1].col + 1),
              removeCells: "R" + (removeCells[0].row + 1) + "C" + (removeCells[0].col + 1),
              connectingBlock: "" + connectingBlock.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(","),
              block: SolverUtils.getBlockIndex(connectingBlock[0]) + 1
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: connectingBlock[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights, "last"),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, _ref3) {
          var _this6 = this;
          var value = _ref3.value,
            strongLink = _ref3.strongLink,
            connectingBlock = _ref3.connectingBlock,
            removeCells = _ref3.removeCells;
          var rectEnd1 = strongLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this6.isSamePosition(conn, cell);
            });
          });
          var linkCells = strongLink.areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(strongLink.areaIndex) : SolverUtils.getColumnCells(strongLink.areaIndex);
          var highlights = [].concat(linkCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), strongLink.cells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), SolverUtils.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBlockIndex(connectingBlock[0])).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), connectingBlock.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
              textColor: HighlightConfig.sameRelatedAreaCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }));
          var highlightNotes = [].concat(connectingBlock.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: value
            };
          }), linkCells.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }) // 只筛选值等于目标value的单元格
          .map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }));
          var strongLinkCell1 = strongLink.cells.filter(function (cell) {
            return removeCells.some(function (removeCell) {
              return removeCell.row === cell.row || removeCell.col === cell.col;
            });
          });
          var strongLinkCell2 = strongLink.cells.filter(function (cell) {
            return !strongLinkCell1.some(function (removeCell) {
              return removeCell.row === cell.row && removeCell.col === cell.col;
            });
          });
          var connectingBlock2 = connectingBlock.filter(function (cell) {
            return strongLinkCell2.some(function (removeCell) {
              return removeCell.row === cell.row || removeCell.col === cell.col;
            });
          });
          var connectingBlock1 = connectingBlock.filter(function (cell) {
            return !connectingBlock2.some(function (removeCell) {
              return removeCell.row === cell.row && removeCell.col === cell.col;
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("RectangleEliminationStrategy.impactDemonstrationDes", {
              name: _this6.name,
              value: value,
              strongLinkCell1: "R" + (strongLinkCell1[0].row + 1) + "C" + (strongLinkCell1[0].col + 1),
              strongLinkCell2: "R" + (strongLinkCell2[0].row + 1) + "C" + (strongLinkCell2[0].col + 1),
              removeCells: "R" + (removeCells[0].row + 1) + "C" + (removeCells[0].col + 1),
              connectingBlock1: "" + connectingBlock1.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(","),
              connectingBlock2: "" + connectingBlock2.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(","),
              block: SolverUtils.getBlockIndex(connectingBlock[0]) + 1
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: connectingBlock[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights, "last"),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, _ref4) {
          var _this7 = this;
          var value = _ref4.value,
            strongLink = _ref4.strongLink,
            connectingBlock = _ref4.connectingBlock,
            removeCells = _ref4.removeCells;
          // 实际从候选数中移除数字
          removeCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });
          var rectEnd1 = strongLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this7.isSamePosition(conn, cell);
            });
          });
          var linkCells = strongLink.areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(strongLink.areaIndex) : SolverUtils.getColumnCells(strongLink.areaIndex);
          var highlights = [].concat(linkCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), strongLink.cells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), SolverUtils.getAreaCells(HighlightAreaType.BOX, SolverUtils.getBlockIndex(connectingBlock[0])).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), connectingBlock.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
              textColor: HighlightConfig.sameRelatedAreaCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }));
          var highlightNotes = [].concat(connectingBlock.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: value
            };
          }), linkCells.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }) // 只筛选值等于目标value的单元格
          .map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            };
          }));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("RectangleEliminationStrategy.removalExecutionDes", {
              name: _this7.name,
              value: value,
              strongLinkCell1: "R" + (strongLink.cells[0].row + 1) + "C" + (strongLink.cells[0].col + 1),
              strongLinkCell2: "R" + (strongLink.cells[1].row + 1) + "C" + (strongLink.cells[1].col + 1),
              removeCells: "R" + (removeCells[0].row + 1) + "C" + (removeCells[0].col + 1),
              connectingBlock: "" + connectingBlock.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(","),
              block: SolverUtils.getBlockIndex(connectingBlock[0]) + 1
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: connectingBlock[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights, "last"),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _createClass(RectangleEliminationStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("RectangleEliminationStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("RectangleEliminationStrategy.description");
          }
        }]);
        return RectangleEliminationStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RefreshThemeAccentColor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, Label, Component, Configuration, EventType, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "05b3bW7SW9M1IkL2JzzM2cj", "RefreshThemeAccentColor", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RefreshThemeAccentColor = exports('RefreshThemeAccentColor', (_dec = ccclass('RefreshThemeAccentColor'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RefreshThemeAccentColor, _Component);
        function RefreshThemeAccentColor() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = RefreshThemeAccentColor.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.start = function start() {
          this.onRefreshTheme();
        }

        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        };
        _proto.onRefreshTheme = function onRefreshTheme() {
          var sp = this.node.getComponent(Sprite);
          if (sp) {
            var themeConfig = Configuration.getInstance().getThemeConfig();
            sp.color = new Color(themeConfig.gameAccentColor);
          }
          var label = this.node.getComponent(Label);
          if (label) {
            var _themeConfig = Configuration.getInstance().getThemeConfig();
            label.color = new Color(_themeConfig.gameAccentColor);
          }
        };
        return RefreshThemeAccentColor;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RefreshThemeBG.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, Component, Configuration, EventType, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "1be1aI8qNZAg6nY6VOJ/ke8", "RefreshThemeBG", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RefreshThemeBG = exports('RefreshThemeBG', (_dec = ccclass('RefreshThemeBG'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RefreshThemeBG, _Component);
        function RefreshThemeBG() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = RefreshThemeBG.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.start = function start() {
          this.onRefreshTheme();
        }
        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        };
        _proto.onRefreshTheme = function onRefreshTheme() {
          var sp = this.node.getComponent(Sprite);
          if (sp) {
            var themeConfig = Configuration.getInstance().getThemeConfig();
            sp.color = new Color(themeConfig.gameBackgroundColor);
          }
        };
        return RefreshThemeBG;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RefreshThemeNeutralColor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, Label, Component, Configuration, EventType, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "4600aS47PxF37e+kvTDnr5s", "RefreshThemeNeutralColor", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RefreshThemeNeutralColor = exports('RefreshThemeNeutralColor', (_dec = ccclass('RefreshThemeNeutralColor'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RefreshThemeNeutralColor, _Component);
        function RefreshThemeNeutralColor() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = RefreshThemeNeutralColor.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.start = function start() {
          this.onRefreshTheme();
        }

        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        };
        _proto.onRefreshTheme = function onRefreshTheme() {
          var sp = this.node.getComponent(Sprite);
          if (sp) {
            var themeConfig = Configuration.getInstance().getThemeConfig();
            sp.color = new Color(themeConfig.gameNeutralColor);
          }
          var label = this.node.getComponent(Label);
          if (label) {
            var _themeConfig = Configuration.getInstance().getThemeConfig();
            label.color = new Color(_themeConfig.gameNeutralColor);
          }
        };
        return RefreshThemeNeutralColor;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RefreshThemePrimaryColor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, Label, Component, Configuration, EventType, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "8cd17pV3GRG0KqW6wrktOc0", "RefreshThemePrimaryColor", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RefreshThemePrimaryColor = exports('RefreshThemePrimaryColor', (_dec = ccclass('RefreshThemePrimaryColor'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RefreshThemePrimaryColor, _Component);
        function RefreshThemePrimaryColor() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = RefreshThemePrimaryColor.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.start = function start() {
          this.onRefreshTheme();
        }

        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        };
        _proto.onRefreshTheme = function onRefreshTheme() {
          var sp = this.node.getComponent(Sprite);
          if (sp) {
            var themeConfig = Configuration.getInstance().getThemeConfig();
            sp.color = new Color(themeConfig.gamePrimaryColor);
          }
          var label = this.node.getComponent(Label);
          if (label) {
            var _themeConfig = Configuration.getInstance().getThemeConfig();
            label.color = new Color(_themeConfig.gamePrimaryColor);
          }
        };
        return RefreshThemePrimaryColor;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RefreshThemeSecondaryColor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, Label, Component, Configuration, EventType, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "fd567g8SH9AIrS90uvOGBRw", "RefreshThemeSecondaryColor", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RefreshThemeSecondaryColor = exports('RefreshThemeSecondaryColor', (_dec = ccclass('RefreshThemeSecondaryColor'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RefreshThemeSecondaryColor, _Component);
        function RefreshThemeSecondaryColor() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = RefreshThemeSecondaryColor.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.start = function start() {
          this.onRefreshTheme();
        }

        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
        };
        _proto.onRefreshTheme = function onRefreshTheme() {
          var sp = this.node.getComponent(Sprite);
          if (sp) {
            var themeConfig = Configuration.getInstance().getThemeConfig();
            sp.color = new Color(themeConfig.gameSecondaryColor);
          }
          var label = this.node.getComponent(Label);
          if (label) {
            var _themeConfig = Configuration.getInstance().getThemeConfig();
            label.color = new Color(_themeConfig.gameSecondaryColor);
          }
        };
        return RefreshThemeSecondaryColor;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RegexUtil.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dec9bVPigFCmKy5NVk+0y7h", "RegexUtil", undefined);
      /*
       * @Author: dgflash
       * @Date: 2022-07-26 15:29:57
       * @LastEditors: dgflash
       * @LastEditTime: 2022-09-02 12:08:25
       */

      /** 正则工具 */
      var RegexUtil = exports('RegexUtil', /*#__PURE__*/function () {
        function RegexUtil() {}
        /**
         * 判断字符是否为双字节字符（如中文字符）
         * @param string 原字符串
         */
        RegexUtil.isDoubleWord = function isDoubleWord(string) {
          return /[^\x00-\xff]/.test(string);
        };
        return RegexUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ResLoader.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, assetManager, error, warn, Asset, js, resources;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      assetManager = module.assetManager;
      error = module.error;
      warn = module.warn;
      Asset = module.Asset;
      js = module.js;
      resources = module.resources;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1a2e4jFffpHrYjrpxbnC760", "ResLoader", undefined);
      /** 
       * 游戏资源管理
       * 1、加载默认resources文件夹中资源
       * 2、加载默认bundle远程资源
       * 3、主动传递bundle名时，优先加载传递bundle名资源包中的资源
       * 
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037901&doc_id=2873565
       */
      var ResLoader = exports('ResLoader', /*#__PURE__*/function () {
        function ResLoader() {
          //#region 资源配置数据
          /** 全局默认加载的资源包名 */
          this.defaultBundleName = "resources";
          /** 是否使用远程 CDN 资源 */
          this.cdn = false;
          /** 资源包配置 */
          this.bundles = new Map();
        }
        var _proto = ResLoader.prototype;
        //#endregion
        _proto.init = function init(config) {
          this.cdn = config.enable;
          for (var _bundleName in config.packages) {
            this.bundles.set(_bundleName, config.packages[_bundleName]);
          }
        }

        //#region 加载远程资源
        /**
         * 加载远程资源
         * @param url           资源地址
         * @param options       资源参数，例：{ ext: ".png" }
         * @param onComplete    加载完成回调
         * @example
        var opt: IRemoteOptions = { ext: ".png" };
        var onComplete = (err: Error | null, data: ImageAsset) => {
        const texture = new Texture2D();
        texture.image = data;
        
        const spriteFrame = new SpriteFrame();
        spriteFrame.texture = texture;
        
        var sprite = this.sprite.addComponent(Sprite);
        sprite.spriteFrame = spriteFrame;
        }
        oops.res.loadRemote<ImageAsset>(this.url, opt, onComplete);
         */;
        _proto.loadRemote = function loadRemote(url) {
          var options = null;
          var onComplete = null;
          if ((arguments.length <= 1 ? 0 : arguments.length - 1) == 2) {
            options = arguments.length <= 1 ? undefined : arguments[1];
            onComplete = arguments.length <= 2 ? undefined : arguments[2];
          } else {
            onComplete = arguments.length <= 1 ? undefined : arguments[1];
          }
          assetManager.loadRemote(url, options, onComplete);
        }
        //#endregion

        //#region 资源包管理
        /**
         * 加载资源包
         * @param url       资源地址
         * @param v         资源MD5版本号
         * @example
        var serverUrl = "http://192.168.1.8:8080/";         // 服务器地址
        var md5 = "8e5c0";                                  // Cocos Creator 构建后的MD5字符
        await oops.res.loadBundle(serverUrl,md5);
         */;
        _proto.loadBundle = function loadBundle(url, v) {
          return new Promise(function (resolve, reject) {
            assetManager.loadBundle(url, {
              version: v
            }, function (err, bundle) {
              if (err) {
                return error(err);
              }
              resolve(bundle);
            });
          });
        }

        /**
         * 释放资源包与包中所有资源
         * @param bundleName 资源地址
         */;
        _proto.removeBundle = function removeBundle(bundleName) {
          var bundle = assetManager.bundles.get(bundleName);
          if (bundle) {
            bundle.releaseAll();
            assetManager.removeBundle(bundle);
          }
        }
        //#endregion

        //#region 预加载资源
        /**
         * 加载一个资源
         * @param bundleName    远程包名
         * @param paths         资源路径
         * @param type          资源类型
         * @param onProgress    加载进度回调
         * @param onComplete    加载完成回调
         */;
        _proto.preload = function preload(bundleName, paths, type, onProgress, onComplete) {
          var args = null;
          if (typeof paths === "string" || paths instanceof Array) {
            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);
            args.bundle = bundleName;
          } else {
            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);
            args.bundle = this.defaultBundleName;
          }
          args.preload = true;
          this.loadByArgs(args);
        }

        /**
         * 异步加载一个资源
         * @param bundleName    远程包名
         * @param paths         资源路径
         * @param type          资源类型
         */;
        _proto.preloadAsync = function preloadAsync(bundleName, paths, type) {
          var _this = this;
          return new Promise(function (resolve, reject) {
            _this.preload(bundleName, paths, type, function (err, data) {
              if (err) {
                warn(err.message);
              }
              resolve(data);
            });
          });
        }

        /**
         * 预加载文件夹中的资源
         * @param bundleName    远程包名
         * @param dir           文件夹名
         * @param type          资源类型
         * @param onProgress    加载进度回调
         * @param onComplete    加载完成回调
         */;
        _proto.preloadDir = function preloadDir(bundleName, dir, type, onProgress, onComplete) {
          var args = null;
          if (typeof dir === "string") {
            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);
            args.bundle = bundleName;
          } else {
            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);
            args.bundle = this.defaultBundleName;
          }
          args.dir = args.paths;
          args.preload = true;
          this.loadByArgs(args);
        }
        //#endregion

        //#region 资源加载、获取、释放
        /**
         * 加载一个资源
         * @param bundleName    远程包名
         * @param paths         资源路径
         * @param type          资源类型
         * @param onProgress    加载进度回调
         * @param onComplete    加载完成回调
         * @example
        oops.res.load("spine_path", sp.SkeletonData, (err: Error | null, sd: sp.SkeletonData) => {
        });
         */;
        _proto.load = function load(bundleName, paths, type, onProgress, onComplete) {
          var args = null;
          if (typeof paths === "string" || paths instanceof Array) {
            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);
            args.bundle = bundleName;
          } else {
            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);
            args.bundle = this.defaultBundleName;
          }
          this.loadByArgs(args);
        }

        /**
         * 异步加载一个资源
         * @param bundleName    远程包名
         * @param paths         资源路径
         * @param type          资源类型
         */;
        _proto.loadAsync = function loadAsync(bundleName, paths, type) {
          var _this2 = this;
          return new Promise(function (resolve, reject) {
            _this2.load(bundleName, paths, type, function (err, asset) {
              if (err) {
                warn(err.message);
              }
              resolve(asset);
            });
          });
        }

        /**
         * 加载文件夹中的资源
         * @param bundleName    远程包名
         * @param dir           文件夹名
         * @param type          资源类型
         * @param onProgress    加载进度回调
         * @param onComplete    加载完成回调
         * @example
        // 加载进度事件
        var onProgressCallback = (finished: number, total: number, item: any) => {
        console.log("资源加载进度", finished, total);
        }
        // 加载完成事件
        var onCompleteCallback = () => {
        console.log("资源加载完成");
        }
        oops.res.loadDir("game", onProgressCallback, onCompleteCallback);
         */;
        _proto.loadDir = function loadDir(bundleName, dir, type, onProgress, onComplete) {
          var args = null;
          if (typeof dir === "string") {
            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);
            args.bundle = bundleName;
          } else {
            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);
            args.bundle = this.defaultBundleName;
          }
          args.dir = args.paths;
          this.loadByArgs(args);
        }

        /**
         * 通过资源相对路径释放资源
         * @param path          资源路径
         * @param bundleName    远程资源包名
         */;
        _proto.release = function release(path, bundleName) {
          if (bundleName === void 0) {
            bundleName = this.defaultBundleName;
          }
          var bundle = assetManager.getBundle(bundleName);
          if (bundle) {
            var asset = bundle.get(path);
            if (asset) {
              this.releasePrefabtDepsRecursively(asset);
            }
          }
        }

        /**
         * 通过相对文件夹路径删除所有文件夹中资源
         * @param path          资源文件夹路径
         * @param bundleName    远程资源包名
         */;
        _proto.releaseDir = function releaseDir(path, bundleName) {
          var _this3 = this;
          if (bundleName === void 0) {
            bundleName = this.defaultBundleName;
          }
          var bundle = assetManager.getBundle(bundleName);
          if (bundle) {
            var infos = bundle.getDirWithPath(path);
            if (infos) {
              infos.map(function (info) {
                _this3.releasePrefabtDepsRecursively(info.uuid);
              });
            }
            if (path == "" && bundleName != "resources") {
              assetManager.removeBundle(bundle);
            }
          }
        }

        /** 释放预制依赖资源 */;
        _proto.releasePrefabtDepsRecursively = function releasePrefabtDepsRecursively(uuid) {
          if (uuid instanceof Asset) {
            uuid.decRef();
            // assetManager.releaseAsset(uuid);
          } else {
            var asset = assetManager.assets.get(uuid);
            if (asset) {
              asset.decRef();
              // assetManager.releaseAsset(asset);
            }
          }
        }

        /**
         * 获取资源
         * @param path          资源路径
         * @param type          资源类型
         * @param bundleName    远程资源包名
         */;
        _proto.get = function get(path, type, bundleName) {
          if (bundleName === void 0) {
            bundleName = this.defaultBundleName;
          }
          var bundle = assetManager.getBundle(bundleName);
          return bundle.get(path, type);
        }
        //#endregion
        ;

        _proto.parseLoadResArgs = function parseLoadResArgs(paths, type, onProgress, onComplete) {
          var pathsOut = paths;
          var typeOut = type;
          var onProgressOut = onProgress;
          var onCompleteOut = onComplete;
          if (onComplete === undefined) {
            var isValidType = js.isChildClassOf(type, Asset);
            if (onProgress) {
              onCompleteOut = onProgress;
              if (isValidType) {
                onProgressOut = null;
              }
            } else if (onProgress === undefined && !isValidType) {
              onCompleteOut = type;
              onProgressOut = null;
              typeOut = null;
            }
            if (onProgress !== undefined && !isValidType) {
              onProgressOut = type;
              typeOut = null;
            }
          }
          return {
            paths: pathsOut,
            type: typeOut,
            onProgress: onProgressOut,
            onComplete: onCompleteOut
          };
        };
        _proto.loadByBundleAndArgs = function loadByBundleAndArgs(bundle, args) {
          if (args.dir) {
            if (args.preload) {
              bundle.preloadDir(args.paths, args.type, args.onProgress, args.onComplete);
            } else {
              bundle.loadDir(args.paths, args.type, args.onProgress, args.onComplete);
            }
          } else {
            if (args.preload) {
              bundle.preload(args.paths, args.type, args.onProgress, args.onComplete);
            } else {
              bundle.load(args.paths, args.type, args.onProgress, args.onComplete);
            }
          }
        };
        _proto.loadByArgs = /*#__PURE__*/function () {
          var _loadByArgs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {
            var bundle, v;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!args.bundle) {
                    _context.next = 13;
                    break;
                  }
                  bundle = assetManager.bundles.get(args.bundle); // 获取缓存中的资源包
                  if (!bundle) {
                    _context.next = 6;
                    break;
                  }
                  this.loadByBundleAndArgs(bundle, args);
                  _context.next = 11;
                  break;
                case 6:
                  v = this.cdn ? this.bundles.get(args.bundle) : "";
                  _context.next = 9;
                  return this.loadBundle(args.bundle, v);
                case 9:
                  bundle = _context.sent;
                  if (bundle) this.loadByBundleAndArgs(bundle, args);
                case 11:
                  _context.next = 14;
                  break;
                case 13:
                  this.loadByBundleAndArgs(resources, args);
                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function loadByArgs(_x) {
            return _loadByArgs.apply(this, arguments);
          }
          return loadByArgs;
        }() /** 打印缓存中所有资源信息 */;
        _proto.dump = function dump() {
          assetManager.assets.forEach(function (value, key) {
            console.log(assetManager.assets.get(key));
          });
          console.log("\u5F53\u524D\u8D44\u6E90\u603B\u6570:" + assetManager.assets.count);
        };
        _createClass(ResLoader, [{
          key: "maxConcurrency",
          get: /** 下载时的最大并发数 - 项目设置 -> 项目数据 -> 资源下载并发数，设置默认值；初始值为15 */
          function get() {
            return assetManager.downloader.maxConcurrency;
          },
          set: function set(value) {
            assetManager.downloader.maxConcurrency = value;
          }

          /** 下载时每帧可以启动的最大请求数 - 默认值为15 */
        }, {
          key: "maxRequestsPerFrame",
          get: function get() {
            return assetManager.downloader.maxRequestsPerFrame;
          },
          set: function set(value) {
            assetManager.downloader.maxRequestsPerFrame = value;
          }

          /** 失败重试次数 - 默认值为0 */
        }, {
          key: "maxRetryCount",
          get: function get() {
            return assetManager.downloader.maxRetryCount;
          },
          set: function set(value) {
            assetManager.downloader.maxRetryCount = value;
          }

          /** 重试的间隔时间，单位为毫秒 - 默认值为2000毫秒 */
        }, {
          key: "retryInterval",
          get: function get() {
            return assetManager.downloader.retryInterval;
          },
          set: function set(value) {
            assetManager.downloader.retryInterval = value;
          }
        }]);
        return ResLoader;
      }());
      var resLoader = exports('resLoader', new ResLoader());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Root.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConfig.ts', './GameQueryConfig.ts', './Oops.ts', './AudioManager.ts', './EventMessage.ts', './MessageManager.ts', './ResLoader.ts', './StorageManager.ts', './StorageSecuritySimple.ts', './TimerManager.ts', './GameManager.ts', './LayerManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, game, Game, sys, screen, director, Component, JsonAsset, GameConfig, GameQueryConfig, version, oops, AudioManager, EventMessage, message, resLoader, StorageManager, StorageSecuritySimple, TimerManager, GameManager, LayerManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      game = module.game;
      Game = module.Game;
      sys = module.sys;
      screen = module.screen;
      director = module.director;
      Component = module.Component;
      JsonAsset = module.JsonAsset;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      GameQueryConfig = module.GameQueryConfig;
    }, function (module) {
      version = module.version;
      oops = module.oops;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      EventMessage = module.EventMessage;
    }, function (module) {
      message = module.message;
    }, function (module) {
      resLoader = module.resLoader;
    }, function (module) {
      StorageManager = module.StorageManager;
    }, function (module) {
      StorageSecuritySimple = module.StorageSecuritySimple;
    }, function (module) {
      TimerManager = module.TimerManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      LayerManager = module.LayerManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "90b9cOmlmBCnpCpEpgvdrQr", "Root", undefined);
      var property = _decorator.property;
      var isInited = false;

      /** 框架显示层根节点 */
      var Root = exports('Root', (_dec = property({
        type: Node,
        tooltip: "游戏层"
      }), _dec2 = property({
        type: Node,
        tooltip: "界面层"
      }), (_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Root, _Component);
        function Root() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 游戏层节点 */
          _initializerDefineProperty(_this, "game", _descriptor, _assertThisInitialized(_this));
          // 可使用多摄像机自定义二维或三维游戏场景
          /** 界面层节点 */
          _initializerDefineProperty(_this, "gui", _descriptor2, _assertThisInitialized(_this));
          /** 框架常驻节点 */
          _this.persist = null;
          return _this;
        }
        var _proto = Root.prototype;
        _proto.onLoad = function onLoad() {
          if (!isInited) {
            isInited = true; // 注：这里是规避cc3.8在编辑器模式下运行时，关闭游戏会两次初始化报错

            console.log("Oops Framework v" + version);
            this.enabled = false;
            this.iniStart();
            this.loadConfig().then();
          }
        };
        _proto.loadConfig = /*#__PURE__*/function () {
          var _loadConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var config_name, config;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // 创建持久根节点
                  this.persist = new Node("OopsFrameworkPersistNode");
                  director.addPersistRootNode(this.persist);

                  // 资源管理模块
                  oops.res = resLoader;
                  config_name = "config";
                  _context.next = 6;
                  return oops.res.loadAsync(config_name, JsonAsset);
                case 6:
                  config = _context.sent;
                  if (config) {
                    // oops.config.btc = new BuildTimeConstants();
                    oops.config.query = new GameQueryConfig();
                    oops.config.game = new GameConfig(config);

                    // 设置默认资源包
                    oops.res.defaultBundleName = oops.config.game.bundleDefault;
                    oops.res.init(oops.config.game.data.bundle);

                    // 本地存储模块
                    oops.storage = new StorageManager();
                    oops.storage.init(new StorageSecuritySimple());
                    // oops.storage.init(new StorageSecurityCrypto);

                    // 全局消息
                    oops.message = message;

                    // 创建音频模块
                    oops.audio = this.persist.addComponent(AudioManager);
                    oops.audio.load();

                    // 创建时间模块
                    oops.timer = this.persist.addComponent(TimerManager);

                    // 游戏场景管理
                    oops.game = new GameManager(this.game);

                    // 游戏界面管理
                    oops.gui = new LayerManager(this.gui);

                    // 网络模块
                    oops.http.server = oops.config.game.httpServer; // Http 服务器地址
                    oops.http.timeout = oops.config.game.httpTimeout; // Http 请求超时时间

                    game.frameRate = oops.config.game.frameRate; // 初始化每秒传输帧数

                    this.enabled = true;
                    this.init();
                    this.run();
                    oops.res.release(config_name);
                  } else {
                    this.loadConfig().then();
                  }
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function loadConfig() {
            return _loadConfig.apply(this, arguments);
          }
          return loadConfig;
        }();
        _proto.update = function update(dt) {
          oops.ecs.execute(dt);
        }

        /** 初始化开始 */;
        _proto.iniStart = function iniStart() {}

        /** 初始化游戏界面 */;
        _proto.initGui = function initGui() {}

        /** 初始化游戏业务模块 */;
        _proto.initEcsSystem = function initEcsSystem() {}

        /** 加载完引擎配置文件后执行 */;
        _proto.run = function run() {};
        _proto.init = function init() {
          this.initGui();
          this.initEcsSystem();
          oops.ecs.init();

          // 游戏显示事件
          game.on(Game.EVENT_SHOW, this.onShow, this);
          // 游戏隐藏事件
          game.on(Game.EVENT_HIDE, this.onHide, this);

          // 游戏尺寸修改事件
          if (!sys.isMobile) {
            screen.on("window-resize", function () {
              oops.message.dispatchEvent(EventMessage.GAME_RESIZE);
            }, this);
            screen.on("fullscreen-change", function () {
              oops.message.dispatchEvent(EventMessage.GAME_FULL_SCREEN);
            }, this);
          }
          screen.on("orientation-change", function () {
            oops.message.dispatchEvent(EventMessage.GAME_ORIENTATION);
          }, this);
        };
        _proto.onShow = function onShow() {
          oops.timer.load(); // 处理回到游戏时减去逝去时间
          oops.audio.resumeAll(); // 恢复所有暂停的音乐播放
          director.resume(); // 恢复暂停场景的游戏逻辑，如果当前场景没有暂停将没任何事情发生
          game.resume(); // 恢复游戏主循环。包含：游戏逻辑，渲染，事件处理，背景音乐和所有音效
          oops.message.dispatchEvent(EventMessage.GAME_SHOW);
        };
        _proto.onHide = function onHide() {
          oops.timer.save(); // 处理切到后台后记录切出时间
          oops.audio.pauseAll(); // 暂停所有音乐播放
          director.pause(); // 暂停正在运行的场景，该暂停只会停止游戏逻辑执行，但是不会停止渲染和 UI 响应。 如果想要更彻底得暂停游戏，包含渲染，音频和事件
          game.pause(); // 暂停游戏主循环。包含：游戏逻辑、渲染、输入事件派发（Web 和小游戏平台除外）
          oops.message.dispatchEvent(EventMessage.GAME_HIDE);
        };
        return Root;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "game", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "gui", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RotateUtil.ts", ['cc', './Vec3Util.ts'], function (exports) {
  var cclegacy, Quat, Vec3, toRadian, Vec3Util;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      toRadian = module.toRadian;
    }, function (module) {
      Vec3Util = module.Vec3Util;
    }],
    execute: function () {
      cclegacy._RF.push({}, "103324kr75Hi5d7RZCcRt3P", "RotateUtil", undefined);

      /** 旋转工具 */
      var RotateUtil = exports('RotateUtil', /*#__PURE__*/function () {
        function RotateUtil() {}
        /**
         * 自由旋转
         * @param target     旋转目标
         * @param axis       围绕旋转的轴
         * @param rad        旋转弧度
         */
        RotateUtil.rotateAround = function rotateAround(target, axis, rad) {
          var quat = new Quat();
          Quat.rotateAround(quat, target.getRotation(), axis.normalize(), rad);
          target.setRotation(quat);
        }

        /**
         * 参考瞄准目标,使当前物体围绕瞄准目标旋转
         * 1、先通过弧度计算旋转四元数
         * 2、通过旋转中心点或当前目标点向量相减计算出移动方向
         * 3、计算起始向量旋转后的向量
         * 4、计算旋转后的坐标点
         * @param lookAt        瞄准目标
         * @param target        旋转目标
         * @param axis          围绕旋转的轴(例：Vec3.UP为Y轴)
         * @param rad           旋转弧度(例：delta.x * 1e-2)
         */;
        RotateUtil.rotateAroundTarget = function rotateAroundTarget(lookAt, target, axis, rad) {
          // 计算坐标
          var point_lookAt = lookAt.worldPosition; // 锚点坐标
          var point_target = target.worldPosition; // 目标坐标
          var quat = new Quat();
          var vec3 = new Vec3();

          // 算出坐标点的旋转四元数
          Quat.fromAxisAngle(quat, axis, rad);
          // 计算旋转点和现有点的向量
          Vec3.subtract(vec3, point_target, point_lookAt);
          // 计算将向量做旋转操作后的向量
          Vec3.transformQuat(vec3, vec3, quat);
          // 计算目标旋转后的点
          Vec3.add(vec3, point_lookAt, vec3);
          target.setWorldPosition(vec3);

          // 计算目标朝向瞄准点
          Quat.rotateAround(quat, target.worldRotation, axis, rad);
          Quat.normalize(quat, quat);
          target.setWorldRotation(quat);
        }

        /**
         * 获取心半径边上的位置
         * @param center    圆心
         * @param radius    半径
         * @param angle     角度
         */;
        RotateUtil.circularEdgePosition = function circularEdgePosition(center, radius, angle) {
          var edge = Vec3Util.z.multiplyScalar(radius); // 距离圆心Z抽的距离
          var dir = Vec3Util.sub(edge, center); // 初始圆心与目标位置的方向
          var vec3 = new Vec3();
          var quat = new Quat();

          // 算出坐标点的旋转四元数
          Quat.fromAxisAngle(quat, Vec3.UP, toRadian(angle));
          // 计算将向量做旋转操作后的向量
          Vec3.transformQuat(vec3, dir, quat);
          // 计算目标旋转后的点
          Vec3.add(vec3, center, vec3);
          return vec3;
        };
        return RotateUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RtToModel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, MeshRenderer, RenderTexture, view, gfx, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      MeshRenderer = module.MeshRenderer;
      RenderTexture = module.RenderTexture;
      view = module.view;
      gfx = module.gfx;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "dbd7dMQYutDs7I7uj+3zIiU", "RtToModel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 三维摄像机内容显示到模型上 */
      var RtToModel = exports('RtToModel', (_dec = ccclass('RtToModel'), _dec2 = property(Camera), _dec3 = property(MeshRenderer), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RtToModel, _Component);
        function RtToModel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "camara", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "model", _descriptor2, _assertThisInitialized(_this));
          _this.rt = new RenderTexture();
          return _this;
        }
        var _proto = RtToModel.prototype;
        _proto.start = function start() {
          var size = view.getVisibleSize();
          var colorAttachment = new gfx.ColorAttachment();
          var depthStencilAttachment = new gfx.DepthStencilAttachment();
          var pi = new gfx.RenderPassInfo([colorAttachment], depthStencilAttachment);
          this.rt.reset({
            width: size.width,
            height: size.height,
            passInfo: pi
          });
          this.camara.targetTexture = this.rt;
          var mat = this.model.material;
          mat.setProperty('mainTexture', this.rt);
        };
        _proto.onDestroy = function onDestroy() {
          this.rt.destroy();
        };
        return RtToModel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "camara", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RtToSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, Sprite, Node, RenderTexture, UITransform, gfx, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Sprite = module.Sprite;
      Node = module.Node;
      RenderTexture = module.RenderTexture;
      UITransform = module.UITransform;
      gfx = module.gfx;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "f608cdDWBNEKLILVNBcQYvf", "RtToSprite", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 三维模型显示到二维精灵上 */
      var RtToSprite = exports('RtToSprite', (_dec = ccclass('RtToSprite'), _dec2 = property({
        type: Camera,
        tooltip: "渲染模型的三维摄像机"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "显示模型的二维精灵组件"
      }), _dec4 = property({
        tooltip: "是否触摸控制旋转"
      }), _dec5 = property({
        type: Node,
        tooltip: "三维模型",
        visible: function visible() {
          //@ts-ignore
          return this.rotation === true;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RtToSprite, _Component);
        function RtToSprite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "camera", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sprite", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rotation", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "model", _descriptor4, _assertThisInitialized(_this));
          _this.rt = new RenderTexture();
          _this.touched = false;
          return _this;
        }
        var _proto = RtToSprite.prototype;
        // 是否触摸节点
        _proto.start = function start() {
          var size = this.sprite.getComponent(UITransform);
          this.refreshRenderTexture(size.width, size.height);
          if (this.rotation) {
            this.sprite.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
            this.sprite.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
            this.sprite.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
            this.sprite.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
          }
        };
        _proto.onTouchStart = function onTouchStart(event) {
          this.touched = true;
        };
        _proto.onTouchMove = function onTouchMove(event) {
          if (this.touched) {
            var eulerAngles = this.model.eulerAngles;
            var deltaX = event.touch.getDelta().x;
            eulerAngles.y += -deltaX;
            this.model.eulerAngles = eulerAngles;
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          this.touched = false;
        }

        /** 刷新纹理内容 */;
        _proto.refreshRenderTexture = function refreshRenderTexture(w, h) {
          var colorAttachment = new gfx.ColorAttachment();
          var depthStencilAttachment = new gfx.DepthStencilAttachment();
          var pi = new gfx.RenderPassInfo([colorAttachment], depthStencilAttachment);
          this.rt.reset({
            width: w,
            height: h,
            passInfo: pi
          });
          var spriteframe = this.sprite.spriteFrame;
          var sp = new SpriteFrame();
          sp.reset({
            originalSize: spriteframe.originalSize,
            rect: spriteframe.rect,
            offset: spriteframe.offset,
            isRotate: spriteframe.rotated,
            borderTop: spriteframe.insetTop,
            borderLeft: spriteframe.insetLeft,
            borderBottom: spriteframe.insetBottom,
            borderRight: spriteframe.insetRight
          });
          this.camera.targetTexture = this.rt;
          sp.texture = this.rt;
          this.sprite.spriteFrame = sp;
        };
        _proto.onDestroy = function onDestroy() {
          if (this.rotation) {
            this.sprite.node.off(Node.EventType.TOUCH_START, this.onTouchStart, this);
            this.sprite.node.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
            this.sprite.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);
            this.sprite.node.off(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
          }
          this.rt.destroy();
        };
        return RtToSprite;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rotation", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SafeAreaAdapter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DeviceUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, view, UITransform, sys, Component, DeviceUtil;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      UITransform = module.UITransform;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      DeviceUtil = module.DeviceUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "26ea7l8111KMoWxoGvtxz8j", "SafeAreaAdapter", undefined);
      var ccclass = _decorator.ccclass,
        executionOrder = _decorator.executionOrder,
        menu = _decorator.menu,
        property = _decorator.property;

      /**
       * 刘海屏安全区域适配组件
       * @description 自动根据设备安全区域调整节点尺寸和位置
       * @usage 挂载到需要避开刘海/圆角的UI根节点上
       */
      var SafeAreaAdapter = exports('SafeAreaAdapter', (_dec = ccclass('SafeAreaAdapter'), _dec2 = executionOrder(-100), _dec3 = menu('UI/SafeAreaAdapter'), _dec4 = property({
        tooltip: '是否适配顶部安全区域（避开刘海）',
        displayName: '适配顶部'
      }), _dec5 = property({
        tooltip: '是否适配底部安全区域（避开底部指示条）',
        displayName: '适配底部'
      }), _dec6 = property({
        tooltip: '是否适配左右安全区域（避开圆角）',
        displayName: '适配侧边'
      }), _dec7 = property({
        tooltip: '安全区域外边距（像素）',
        displayName: '外边距'
      }), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SafeAreaAdapter, _Component);
        function SafeAreaAdapter() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "adaptTop", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "adaptBottom", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "adaptSides", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "margin", _descriptor4, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SafeAreaAdapter.prototype;
        _proto.start = function start() {
          this.adjustSafeArea();
          // 监听屏幕变化（横竖屏切换）
          view.on('canvas-resize', this.adjustSafeArea, this);
        };
        _proto.onDestroy = function onDestroy() {
          view.off('canvas-resize', this.adjustSafeArea, this);
        }

        /**
         * 调整节点到安全区域内
         */;
        _proto.adjustSafeArea = function adjustSafeArea() {
          var safeArea = DeviceUtil.getSafeAreaRect();
          var uiTransform = this.node.getComponent(UITransform);
          if (!uiTransform) return;

          // 计算安全区域偏移量
          var left = 0,
            right = 0,
            top = 0,
            bottom = 0;
          if (this.adaptSides) {
            left = safeArea.x;
            right = view.getVisibleSize().width - (safeArea.x + safeArea.width);
          }
          if (this.adaptTop) {
            top = safeArea.y;
          }
          if (this.adaptBottom) {
            bottom = view.getVisibleSize().height - (safeArea.y + safeArea.height);
          }

          // 应用外边距
          var margin = Math.max(0, this.margin);
          left = Math.max(0, left - margin);
          right = Math.max(0, right - margin);
          top = Math.max(0, top - margin);
          bottom = Math.max(0, bottom - margin);

          // 设置节点尺寸和位置
          uiTransform.width = view.getVisibleSize().width - left - right;
          uiTransform.height = view.getVisibleSize().height - top - bottom;
          this.node.setPosition(left - (view.getVisibleSize().width - uiTransform.width) / 2, bottom - (view.getVisibleSize().height - uiTransform.height) / 2);
          this.debugLogSafeArea(safeArea);
        }

        /**
         * 调试输出安全区域信息
         */;
        _proto.debugLogSafeArea = function debugLogSafeArea(safeArea) {
          var _this$node$getCompone;
          console.log("[SafeArea] \u8BBE\u5907\u4FE1\u606F: " + sys.os + "/" + sys.platform);
          console.log("[SafeArea] \u5C4F\u5E55\u5C3A\u5BF8: " + view.getVisibleSize().width + "x" + view.getVisibleSize().height);
          console.log("[SafeArea] \u5B89\u5168\u533A\u57DF: x=" + safeArea.x + ", y=" + safeArea.y + ", w=" + safeArea.width + ", h=" + safeArea.height);
          console.log("[SafeArea] \u8282\u70B9\u4F4D\u7F6E: " + this.node.position + ", \u5C3A\u5BF8: " + ((_this$node$getCompone = this.node.getComponent(UITransform)) == null ? void 0 : _this$node$getCompone.contentSize));
        };
        return SafeAreaAdapter;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "adaptTop", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "adaptBottom", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "adaptSides", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "margin", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SashimiXWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0c12crqhApKpJgPa/OitHuQ", "SashimiXWingStrategy", undefined);
      var SashimiXWingStrategy = exports('SashimiXWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(SashimiXWingStrategy, _BaseStrategy);
        function SashimiXWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 15;
          _this.FISH_SIZE = 2;
          return _this;
        }
        var _proto = SashimiXWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.findSashimiXWing(candidates);
          return result ? this.createSteps(board, candidates, result) : null;
        };
        _proto.findSashimiXWing = function findSashimiXWing(candidates) {
          return this.findSashimiXWingInDirection(candidates, HighlightAreaType.ROW) || this.findSashimiXWingInDirection(candidates, HighlightAreaType.COLUMN);
        };
        _proto.findSashimiXWingInDirection = function findSashimiXWingInDirection(candidates, direction) {
          for (var value = 1; value <= 9; value++) {
            // 1. 先找标准X-Wing基集（恰好2个候选数的行/列）
            var perfectBaseUnits = this.findPerfectBaseUnits(candidates, value, direction);
            var potentialBaseUnits = this.findPotentialSashimiBaseUnits(candidates, value, direction);
            if (value === 3 && direction === HighlightAreaType.COLUMN) {
              console.log("1");
            }
            for (var _iterator = _createForOfIteratorHelperLoose(perfectBaseUnits), _step; !(_step = _iterator()).done;) {
              var perfectUnit = _step.value;
              for (var _iterator2 = _createForOfIteratorHelperLoose(potentialBaseUnits), _step2; !(_step2 = _iterator2()).done;) {
                var potentialUnit = _step2.value;
                var baseUnits = [perfectUnit, potentialUnit];
                var result = this.validateSashimiXWing(candidates, value, baseUnits, direction);
                if (result) return result;
              }
            }
          }
          return null;
        }

        // 找完美基集（恰好2个候选数）
        ;

        _proto.findPerfectBaseUnits = function findPerfectBaseUnits(candidates, value, direction) {
          var units = [];
          for (var unit = 0; unit < 9; unit++) {
            var count = 0;
            for (var pos = 0; pos < 9; pos++) {
              var row = direction === HighlightAreaType.ROW ? unit : pos;
              var col = direction === HighlightAreaType.ROW ? pos : unit;
              if (candidates[row][col].has(value)) count++;
            }
            if (count === 2) units.push(unit);
          }
          return units;
        };
        _proto.findPotentialSashimiBaseUnits = function findPotentialSashimiBaseUnits(candidates, value, direction) {
          var units = [];
          var isRowBased = direction === HighlightAreaType.ROW;
          for (var unit = 0; unit < 9; unit++) {
            var positions = [];
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }
            if ((positions.length === 2 || positions.length === 3) && this.isPotentialSashimiUnit(positions)) {
              units.push(unit);
            }
          }
          return units;
        };
        _proto.isPotentialSashimiUnit = function isPotentialSashimiUnit(positions) {
          var boxMap = new Map();
          positions.forEach(function (pos) {
            var boxKey = Math.floor(pos.row / 3) + "-" + Math.floor(pos.col / 3);
            if (!boxMap.has(boxKey)) boxMap.set(boxKey, []);
            boxMap.get(boxKey).push(pos);
          });
          return boxMap.size === 2;
        };
        _proto.validateSashimiXWing = function validateSashimiXWing(candidates, value, baseUnits,
        // [完美基集, 带鳍基集]
        direction) {
          var _this2 = this;
          var isRowBased = direction === HighlightAreaType.ROW;
          var perfectUnit = baseUnits[0],
            finnedUnit = baseUnits[1];

          // 1. 获取完美基集的所有候选位置（应恰好2个）
          var perfectPositions = this.getUnitPositions(candidates, value, perfectUnit, direction);
          if (perfectPositions.length !== 2) return null;

          // 2. 获取带鳍基集的所有候选位置（2或3个）
          var finnedPositions = this.getUnitPositions(candidates, value, finnedUnit, direction);
          if (finnedPositions.length < 2 || finnedPositions.length > 3) return null;

          // 3. 直接确定鱼鳍位置（带鳍基集中不在交叉点上的候选数）
          var fins = finnedPositions.filter(function (pos) {
            return !_this2.isAtPerfectIntersection(pos, perfectPositions, direction);
          });
          if (fins.length === 0) return null; // 如果没有找到鱼鳍

          // 4. 计算理论上的完整交叉点（假设没有缺失）
          var expectedFullIntersections = this.calculateExpectedIntersections(perfectPositions, finnedPositions, direction);

          // 5. 找出实际存在的交叉点（当前棋盘存在的候选数）
          var actualIntersections = expectedFullIntersections.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          });

          // 6. 确定缺失交叉点（理论存在但实际不存在）
          var missingIntersections = expectedFullIntersections.filter(function (pos) {
            return !actualIntersections.some(function (a) {
              return a.row === pos.row && a.col === pos.col;
            });
          });
          if (missingIntersections.length != 1) {
            return null;
          }
          var missingIntersection = missingIntersections[0];
          // 7. 验证鱼鳍与缺失点同宫
          if (!fins.every(function (fin) {
            return _this2.isSameBox(fin, missingIntersection);
          })) return null;

          // 8. 确定覆盖集（完美基集的覆盖单位）
          var coverUnits = [isRowBased ? perfectPositions[0].col : perfectPositions[0].row, isRowBased ? perfectPositions[1].col : perfectPositions[1].row];

          // 9. 查找可消除的候选数
          var eliminations = this.findSashimiEliminations(candidates, value, coverUnits, direction, fins);
          return eliminations.length > 0 ? {
            value: value,
            baseUnits: baseUnits,
            coverUnits: coverUnits,
            eliminations: eliminations,
            intersections: actualIntersections,
            direction: direction,
            fins: fins,
            missingIntersection: missingIntersection
          } : null;
        }

        /**
         * 直接通过基集坐标计算理论交叉点
         * @param perfectPositions 完美基集的所有候选位置（必须2个）
         * @param finnedPositions 带鳍基集的所有候选位置（2-3个）
         * @param direction 检测方向
         */;
        _proto.calculateExpectedIntersections = function calculateExpectedIntersections(perfectPositions, finnedPositions, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var intersections = [];
          var row1 = isRowBased ? perfectPositions[0].row : perfectPositions[0].row;
          var row2 = isRowBased ? finnedPositions[1].row : perfectPositions[1].row;
          var col1 = isRowBased ? perfectPositions[0].col : perfectPositions[0].col;
          var col2 = isRowBased ? perfectPositions[1].col : finnedPositions[0].col;
          intersections.push({
            row: row1,
            col: col1
          });
          intersections.push({
            row: row1,
            col: col2
          });
          intersections.push({
            row: row2,
            col: col1
          });
          intersections.push({
            row: row2,
            col: col2
          });
          return intersections;
        }

        /** 获取行/列的所有候选数位置 */;
        _proto.getUnitPositions = function getUnitPositions(candidates, value, unit, direction) {
          var positions = [];
          var isRowBased = direction === HighlightAreaType.ROW;
          for (var pos = 0; pos < 9; pos++) {
            var row = isRowBased ? unit : pos;
            var col = isRowBased ? pos : unit;
            if (candidates[row][col].has(value)) {
              positions.push({
                row: row,
                col: col
              });
            }
          }
          return positions;
        }

        /** 判断位置是否在完美基集的交叉点上 */;
        _proto.isAtPerfectIntersection = function isAtPerfectIntersection(pos, perfectPositions, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          return perfectPositions.some(function (perfectPos) {
            return isRowBased && pos.col === perfectPos.col || !isRowBased && pos.row === perfectPos.row;
          });
        };
        _proto.findSashimiEliminations = function findSashimiEliminations(candidates, value, coverUnits,
        // 覆盖集单位（列/行索引）
        direction, fins) {
          var _this3 = this;
          var isRowBased = direction === HighlightAreaType.ROW;
          var eliminations = [];

          // 1. 获取所有鱼鳍所在的宫
          var finBoxes = fins.map(function (fin) {
            return _this3.getBoxRange(fin);
          });

          // 2. 遍历两个覆盖单位
          coverUnits.forEach(function (coverUnit) {
            var _loop = function _loop() {
              var row = isRowBased ? pos : coverUnit;
              var col = isRowBased ? coverUnit : pos;
              var currentPos = {
                row: row,
                col: col
              };

              // 跳过条件：
              // - 是鱼鳍本身
              // - 无目标候选数
              // - 在完美基集的交叉点上
              if (fins.some(function (f) {
                return f.row === row && f.col === col;
              }) || !candidates[row][col].has(value) || _this3.isAtCoverIntersection(currentPos, coverUnits, direction)) {
                return 1; // continue
              }

              // 3. 检查是否与任意鱼鳍同宫
              if (finBoxes.some(function (box) {
                return _this3.isInBox(currentPos, box);
              })) {
                eliminations.push(currentPos);
              }
            };
            for (var pos = 0; pos < 9; pos++) {
              if (_loop()) continue;
            }
          });
          return eliminations;
        }

        /** 判断位置是否在覆盖集的交叉点上 */;
        _proto.isAtCoverIntersection = function isAtCoverIntersection(pos, coverUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var unit = isRowBased ? pos.row : pos.col;
          return coverUnits.includes(unit);
        };
        _proto.isSameBox = function isSameBox(a, b) {
          return Math.floor(a.row / 3) === Math.floor(b.row / 3) && Math.floor(a.col / 3) === Math.floor(b.col / 3);
        };
        _proto.getBoxRange = function getBoxRange(pos) {
          return {
            startRow: Math.floor(pos.row / 3) * 3,
            startCol: Math.floor(pos.col / 3) * 3
          };
        };
        _proto.isInBox = function isInBox(pos, box) {
          return pos.row >= box.startRow && pos.row < box.startRow + 3 && pos.col >= box.startCol && pos.col < box.startCol + 3;
        };
        _proto.createSteps = function createSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createFinStep(board, candidates, info), this.createEliminationStep(board, candidates, info), this.createRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref) {
          var _this4 = this;
          var value = _ref.value,
            baseUnits = _ref.baseUnits,
            direction = _ref.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("SashimiXWingStrategy.discoveryDes", {
              name: _this4.name,
              description: _this4.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: {
              row: baseUnits[0],
              col: 0
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: this.highlightBaseUnits(board, candidates, baseUnits, direction),
            highlightNotes: this.highlightNotesBaseUnits(candidates, value, baseUnits, direction)
          };
        };
        _proto.createFinStep = function createFinStep(board, candidates, _ref2) {
          var _this5 = this;
          var value = _ref2.value,
            baseUnits = _ref2.baseUnits,
            coverUnits = _ref2.coverUnits,
            intersections = _ref2.intersections,
            direction = _ref2.direction,
            fins = _ref2.fins,
            missingIntersection = _ref2.missingIntersection;
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = isRowBased ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("SashimiXWingStrategy.visualizationDes", {
              name: _this5.name,
              value: value,
              baseDirection: baseDirection,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              fins: fins.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              missingIntersection: "R" + (missingIntersection.row + 1) + "C" + (missingIntersection.col + 1),
              count: fins.length
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: fins[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.highlightBaseUnits(board, candidates, baseUnits, direction), this.highlightCoverUnits(board, candidates, coverUnits, direction), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[fin.row][fin.col] === BLANK_CHAR ? [].concat(candidates[fin.row][fin.col]) : undefined
              };
            }), intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), [{
              position: missingIntersection,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[missingIntersection.row][missingIntersection.col] === BLANK_CHAR ? [].concat(candidates[missingIntersection.row][missingIntersection.col]) : undefined
            }]),
            highlightNotes: [].concat(intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.sameNumber.background,
                textColor: HighlightConfig.sameNumber.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, _ref3) {
          var _this6 = this;
          var value = _ref3.value,
            baseUnits = _ref3.baseUnits,
            coverUnits = _ref3.coverUnits,
            intersections = _ref3.intersections,
            direction = _ref3.direction,
            fins = _ref3.fins,
            eliminations = _ref3.eliminations,
            missingIntersection = _ref3.missingIntersection;
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = isRowBased ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("SashimiXWingStrategy.eliminationDes", {
              name: _this6.name,
              value: value,
              baseDirection: baseDirection,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              fins: fins.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              eliminations: eliminations.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              count: eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.highlightBaseUnits(board, candidates, baseUnits, direction), this.highlightCoverUnits(board, candidates, coverUnits, direction), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[fin.row][fin.col] === BLANK_CHAR ? [].concat(candidates[fin.row][fin.col]) : undefined
              };
            }), intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), this.highlightEliminations(board, candidates, eliminations), [{
              position: missingIntersection,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[missingIntersection.row][missingIntersection.col] === BLANK_CHAR ? [].concat(candidates[missingIntersection.row][missingIntersection.col]) : undefined
            }]),
            highlightNotes: [].concat(intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.sameNumber.background,
                textColor: HighlightConfig.sameNumber.textColor,
                value: value
              };
            }), this.highlightEliminationNotes(candidates, value, eliminations))
          };
        };
        _proto.createRemovalStep = function createRemovalStep(board, candidates, _ref4) {
          var _this7 = this;
          var value = _ref4.value,
            baseUnits = _ref4.baseUnits,
            coverUnits = _ref4.coverUnits,
            intersections = _ref4.intersections,
            direction = _ref4.direction,
            fins = _ref4.fins,
            eliminations = _ref4.eliminations,
            missingIntersection = _ref4.missingIntersection;
          // 实际删除候选数
          eliminations.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });
          var isRowBased = direction === HighlightAreaType.ROW;
          var generateDescription = function generateDescription() {
            var baseDirection = isRowBased ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = isRowBased ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("SashimiXWingStrategy.removalDes", {
              name: _this7.name,
              value: value,
              baseDirection: baseDirection,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              fins: fins.map(function (f) {
                return "R" + (f.row + 1) + "C" + (f.col + 1);
              }).join(", "),
              count: eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.highlightBaseUnits(board, candidates, baseUnits, direction), this.highlightCoverUnits(board, candidates, coverUnits, direction), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[fin.row][fin.col] === BLANK_CHAR ? [].concat(candidates[fin.row][fin.col]) : undefined
              };
            }), intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), this.highlightEliminations(board, candidates, eliminations), [{
              position: missingIntersection,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: board[missingIntersection.row][missingIntersection.col] === BLANK_CHAR ? [].concat(candidates[missingIntersection.row][missingIntersection.col]) : undefined
            }]),
            highlightNotes: [].concat(intersections.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), fins.map(function (fin) {
              return {
                position: fin,
                backgroundColor: HighlightConfig.sameNumber.background,
                textColor: HighlightConfig.sameNumber.textColor,
                value: value
              };
            }))
          };
        }

        /* 高亮辅助函数 */;
        _proto.highlightBaseUnits = function highlightBaseUnits(board, candidates, baseUnits, direction) {
          return baseUnits.flatMap(function (unit) {
            var cells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(unit) : SolverUtils.getColumnCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightCoverUnits = function highlightCoverUnits(board, candidates, coverUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          return coverUnits.flatMap(function (unit) {
            var cells = isRowBased ? SolverUtils.getColumnCells(unit) : SolverUtils.getRowCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightEliminations = function highlightEliminations(board, candidates, eliminations) {
          return eliminations.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
              textColor: HighlightConfig.sameRelatedAreaCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          });
        };
        _proto.highlightNotesBaseUnits = function highlightNotesBaseUnits(candidates, value, baseUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];
          for (var _iterator3 = _createForOfIteratorHelperLoose(baseUnits), _step3; !(_step3 = _iterator3()).done;) {
            var unit = _step3.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? unit : pos;
              var col = isRowBased ? pos : unit;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.sameNumber.background,
                  textColor: HighlightConfig.sameNumber.textColor,
                  value: value
                });
              }
            }
          }
          return notes;
        };
        _proto.highlightNotesCoverUnits = function highlightNotesCoverUnits(candidates, value, coverUnits, direction) {
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];
          for (var _iterator4 = _createForOfIteratorHelperLoose(coverUnits), _step4; !(_step4 = _iterator4()).done;) {
            var unit = _step4.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : unit;
              var col = isRowBased ? unit : pos;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                });
              }
            }
          }
          return notes;
        };
        _proto.highlightEliminationNotes = function highlightEliminationNotes(candidates, value, eliminations) {
          return eliminations.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: value
            };
          });
        };
        _createClass(SashimiXWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("SashimiXWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("SashimiXWingStrategy.description");
          }
        }]);
        return SashimiXWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SeedRandom.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './RandomManager.ts'], function (exports) {
  var _createClass, cclegacy, RandomManager;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      RandomManager = module.RandomManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9b02bnNwwZEWq9Ft59BRCIB", "SeedRandom", undefined);

      /** 伪随机 */
      var SeedRandom = exports('SeedRandom', /*#__PURE__*/function () {
        function SeedRandom(seed) {
          this.rm = void 0;
          this.sr = void 0;
          //@ts-ignore
          this.sr = new Math.seedrandom(seed);
          this.rm = new RandomManager();
          this.rm.setRandom(this.sr);
        }
        var _proto = SeedRandom.prototype;
        _proto.destroy = function destroy() {
          this.rm = null;
          this.sr = null;
        };
        _createClass(SeedRandom, [{
          key: "random",
          get: function get() {
            return this.rm;
          }
        }]);
        return SeedRandom;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Selector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BranchNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, BranchNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BranchNode = module.BranchNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "90470XqT/FGHo/PRQktLcYy", "Selector", undefined);

      /** 
       * 逻辑或关系
       * 只要子节点有一个返回true，则停止执行其它子节点，并且Selector返回true。如果所有子节点都返回false，则Selector返回false。
       */
      var Selector = exports('Selector', /*#__PURE__*/function (_BranchNode) {
        _inheritsLoose(Selector, _BranchNode);
        function Selector() {
          return _BranchNode.apply(this, arguments) || this;
        }
        var _proto = Selector.prototype;
        _proto.success = function success() {
          _BranchNode.prototype.success.call(this);
          this._control.success();
        };
        _proto.fail = function fail() {
          _BranchNode.prototype.fail.call(this);
          this._actualTask += 1;
          if (this._actualTask < this.children.length) {
            this._run(this._blackboard);
          } else {
            this._control.fail();
          }
        };
        _proto._run = function _run(blackboard) {
          if (this._nodeRunning) {
            this._nodeRunning.run(this._blackboard);
          } else {
            _BranchNode.prototype._run.call(this);
          }
        };
        return Selector;
      }(BranchNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sequence.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BranchNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, BranchNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BranchNode = module.BranchNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1ef80bgYZBPXqCDIpzHpbBJ", "Sequence", undefined);
      /** 
       * 逻辑与关系
       * 只要有一个子节点返回false，则停止执行其它子节点，并且Sequence返回false。如果所有子节点都返回true，则Sequence返回true。
       */
      var Sequence = exports('Sequence', /*#__PURE__*/function (_BranchNode) {
        _inheritsLoose(Sequence, _BranchNode);
        function Sequence(nodes) {
          return _BranchNode.call(this, nodes) || this;
        }
        var _proto = Sequence.prototype;
        _proto.success = function success() {
          _BranchNode.prototype.success.call(this);
          this._actualTask += 1;
          if (this._actualTask < this.children.length) {
            this._run(this._blackboard);
          } else {
            this._control.success();
          }
        };
        _proto.fail = function fail() {
          _BranchNode.prototype.fail.call(this);
          this._control.fail();
        };
        _proto._run = function _run(blackboard) {
          if (this._nodeRunning) {
            this._nodeRunning.run(this._blackboard);
          } else {
            _BranchNode.prototype._run.call(this);
          }
        };
        return Sequence;
      }(BranchNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettingItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "0db3d0sZRhG4LL6SKdEV/22", "SettingItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SettingItem = exports('SettingItem', (_dec = ccclass('SettingItem'), _dec2 = property({
        type: Toggle,
        tooltip: "开关",
        visible: true
      }), _dec3 = property({
        type: Node,
        tooltip: "关",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "开",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SettingItem, _Component);
        function SettingItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "toggle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "switch_close", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "switch_open", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SettingItem.prototype;
        _proto.start = function start() {
          // this.setChecked(true);
        };
        _proto.switchOpen = function switchOpen() {
          this.switch_close.active = false;
          this.switch_open.active = true;
        };
        _proto.switchClose = function switchClose() {
          this.switch_close.active = true;
          this.switch_open.active = false;
        };
        _proto.onToggle = function onToggle(event, customEventData) {
          if (this.toggle.isChecked) {
            this.switchOpen();
          } else {
            this.switchClose();
          }
        };
        _proto.setChecked = function setChecked(isChecked) {
          this.toggle.isChecked = isChecked;
          if (this.toggle.isChecked) {
            this.switchOpen();
          } else {
            this.switchClose();
          }
        };
        return SettingItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "switch_close", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "switch_open", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettingPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventType.ts', './UIConfig.ts', './SettingsManager.ts', './SettingItem.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Toggle, Component, EventType, UIID, SettingsManager, SettingItem, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Toggle = module.Toggle;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      SettingsManager = module.SettingsManager;
    }, function (module) {
      SettingItem = module.SettingItem;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;
      cclegacy._RF.push({}, "a81c2/SITlPv4sjpBzldnNm", "SettingPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Settingpopup = exports('Settingpopup', (_dec = ccclass('Settingpopup'), _dec2 = property({
        type: SettingItem,
        tooltip: "高亮相同数字",
        visible: true
      }), _dec3 = property({
        type: SettingItem,
        tooltip: "高亮笔记中的相同数字",
        visible: true
      }), _dec4 = property({
        type: SettingItem,
        tooltip: "高亮行列",
        visible: true
      }), _dec5 = property({
        type: SettingItem,
        tooltip: "高亮9宫格",
        visible: true
      }), _dec6 = property({
        type: SettingItem,
        tooltip: "高亮所有和选中数字相同的数字的行列",
        visible: true
      }), _dec7 = property({
        type: SettingItem,
        tooltip: "高亮所有和选中数字相同的数字的宫",
        visible: true
      }), _dec8 = property({
        type: SettingItem,
        tooltip: "自动计算",
        visible: true
      }), _dec9 = property({
        type: SettingItem,
        tooltip: "自动侦错",
        visible: true
      }), _dec10 = property({
        type: SettingItem,
        tooltip: "是否显示自动笔记",
        visible: true
      }), _dec11 = property({
        type: SettingItem,
        tooltip: "显示未解数字个数",
        visible: true
      }), _dec12 = property({
        type: SettingItem,
        tooltip: "无限生命",
        visible: true
      }), _dec13 = property({
        type: SettingItem,
        tooltip: "无限提示",
        visible: true
      }), _dec14 = property({
        type: SettingItem,
        tooltip: "导入游戏按钮",
        visible: true
      }), _dec15 = property({
        type: SettingItem,
        tooltip: "导出当局游戏按钮",
        visible: true
      }), _dec16 = property({
        type: Label,
        tooltip: "当前语言",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Settingpopup, _Component);
        function Settingpopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /*** 高亮配置 ***/
          _initializerDefineProperty(_this, "sameDigitsToggle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "duplicateCandidatesToggle", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rowsColumnsToggle", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "blocksToggle", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "allRowsColumnsToggle", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "allBlocksToggle", _descriptor6, _assertThisInitialized(_this));
          /*** 笔记配置 ***/
          _initializerDefineProperty(_this, "autoCalculateToggle", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "errorDetectionToggle", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "autoNotesToggle", _descriptor9, _assertThisInitialized(_this));
          /*** 其他配置 ***/
          _initializerDefineProperty(_this, "unsolvedDigitsCountToggle", _descriptor10, _assertThisInitialized(_this));
          /*** 调试工具配置 ***/
          _initializerDefineProperty(_this, "infiniteLivesToggle", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "infiniteHintsToggle", _descriptor12, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "importGameToggle", _descriptor13, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "exportGameToggle", _descriptor14, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "currentLanguage", _descriptor15, _assertThisInitialized(_this));
          // 当前设置
          _this.currentSettings = void 0;
          return _this;
        }
        var _proto = Settingpopup.prototype;
        _proto.onLoad = function onLoad() {
          this.currentSettings = SettingsManager.getInstance().getSettings();
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        }
        /**
        * 初始化事件监听
        */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_LANGUAGE, this.onRefreshLanguage, this);
        };
        _proto.start = function start() {
          if (this.currentSettings) {
            this.sameDigitsToggle.setChecked(this.currentSettings.highlight.sameDigits);
            this.duplicateCandidatesToggle.setChecked(this.currentSettings.highlight.duplicateCandidates);
            this.rowsColumnsToggle.setChecked(this.currentSettings.highlight.rowsColumns);
            this.blocksToggle.setChecked(this.currentSettings.highlight.blocks);
            this.allRowsColumnsToggle.setChecked(this.currentSettings.highlight.allRowsColumns);
            this.allBlocksToggle.setChecked(this.currentSettings.highlight.allBlocks);
            this.autoCalculateToggle.setChecked(this.currentSettings.notes.autoCalculate);
            this.errorDetectionToggle.setChecked(this.currentSettings.notes.errorDetection);
            this.autoNotesToggle.setChecked(this.currentSettings.notes.autoNotes);
            this.unsolvedDigitsCountToggle.setChecked(this.currentSettings.other.unsolvedDigitsCount);
            this.infiniteLivesToggle.setChecked(this.currentSettings.debug.infiniteLives);
            this.infiniteHintsToggle.setChecked(this.currentSettings.debug.infiniteHints);
            this.importGameToggle.setChecked(this.currentSettings.debug.importGame);
            this.exportGameToggle.setChecked(this.currentSettings.debug.exportGame);
          }
          this.onRefreshLanguage();
        };
        _proto.onRefreshLanguage = function onRefreshLanguage() {
          this.currentLanguage.string = oops.language.getLangByID("LanguagePopup." + oops.language.current);
        };
        _proto.onSameDigitsToggle = function onSameDigitsToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setHighlightSameDigits(isChecked);
        };
        _proto.onDuplicateCandidatesToggle = function onDuplicateCandidatesToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setHighlightDuplicateCandidates(isChecked);
        };
        _proto.onRowsColumnsToggle = function onRowsColumnsToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setHighlightRowsColumns(isChecked);
        };
        _proto.onBlocksToggle = function onBlocksToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setHighlightBlocks(isChecked);
        };
        _proto.onAllRowsColumnsToggle = function onAllRowsColumnsToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setHighlightAllRowsColumns(isChecked);
        };
        _proto.onAllBlocksToggle = function onAllBlocksToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setHighlightAllBlocks(isChecked);
        };
        _proto.onAutoCalculateToggle = function onAutoCalculateToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setAutoCalculate(isChecked);
        };
        _proto.onErrorDetectionToggle = function onErrorDetectionToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setAutoErrorDetection(isChecked);
        };
        _proto.onAutoNotesToggle = function onAutoNotesToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setAutoNotes(isChecked);
        };
        _proto.onUnsolvedDigitsCountToggle = function onUnsolvedDigitsCountToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setDisplayUnsolvedDigitsCount(isChecked);
        };
        _proto.onInfiniteLivesToggle = function onInfiniteLivesToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setInfiniteLives(isChecked);
        };
        _proto.onInfiniteHintsToggle = function onInfiniteHintsToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().setInfiniteHints(isChecked);
        };
        _proto.onImportGameToggle = function onImportGameToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().importGame(isChecked);
        };
        _proto.onExportGameToggle = function onExportGameToggle(event, customEventData) {
          var target = event.target;
          var toggle = target.getComponent(Toggle);
          var isChecked = toggle != null && toggle.isChecked ? true : false;
          SettingsManager.getInstance().exportCurrentGame(isChecked);
        };
        _proto.onBack = function onBack() {
          oops.gui.remove(UIID.SettingPopup);
        };
        _proto.onShowLanguagePopup = function onShowLanguagePopup() {
          oops.gui.open(UIID.LanguagePopup);
        };
        _proto.onShowThemePopup = function onShowThemePopup() {
          oops.gui.open(UIID.ThemePopup);
        };
        return Settingpopup;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sameDigitsToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "duplicateCandidatesToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rowsColumnsToggle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "blocksToggle", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "allRowsColumnsToggle", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "allBlocksToggle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "autoCalculateToggle", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "errorDetectionToggle", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "autoNotesToggle", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "unsolvedDigitsCountToggle", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "infiniteLivesToggle", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "infiniteHintsToggle", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "importGameToggle", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "exportGameToggle", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "currentLanguage", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettingsManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventType.ts', './Oops.ts'], function (exports) {
  var _extends, cclegacy, EventType, oops;
  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "31a0eR2QR9EtpAhA5GBqBjz", "SettingsManager", undefined);

      /**
       * 设置管理类 (单例模式)
       */
      var SettingsManager = exports('SettingsManager', /*#__PURE__*/function () {
        /**
         * 私有构造函数，防止外部实例化
         */
        function SettingsManager() {
          // 默认设置
          this.defaultSettings = {
            highlight: {
              sameDigits: true,
              duplicateCandidates: true,
              rowsColumns: true,
              blocks: true,
              allRowsColumns: false,
              allBlocks: false
            },
            notes: {
              autoCalculate: true,
              errorDetection: true,
              autoNotes: false
            },
            other: {
              unsolvedDigitsCount: true
            },
            debug: {
              infiniteLives: false,
              infiniteHints: false,
              importGame: false,
              exportGame: false
            }
          };
          // 当前设置
          this.currentSettings = void 0;
          this.currentSettings = this.loadSettings();
        }

        /**
         * 获取单例实例
         */
        SettingsManager.getInstance = function getInstance() {
          if (!SettingsManager.instance) {
            SettingsManager.instance = new SettingsManager();
          }
          return SettingsManager.instance;
        }

        /**
         * 获取默认设置
         */;
        var _proto = SettingsManager.prototype;
        _proto.getDefaultSettings = function getDefaultSettings() {
          return JSON.parse(JSON.stringify(this.defaultSettings));
        }

        /**
         * 重置为默认设置
         */;
        _proto.resetToDefaults = function resetToDefaults() {
          this.currentSettings = this.getDefaultSettings();
          this.saveSettings();
          return this.currentSettings;
        }

        /**
         * 保存当前设置
         */;
        _proto.saveSettings = function saveSettings() {
          try {
            oops.storage.set(SettingsManager.SETTINGS_STORAGE_KEY, JSON.stringify(this.currentSettings));
            oops.message.dispatchEvent(EventType.REFRESH_SETTING);
          } catch (error) {
            console.error('保存设置失败:', error);
          }
        }

        /**
         * 加载设置
         */;
        _proto.loadSettings = function loadSettings() {
          try {
            var savedSettings = oops.storage.get(SettingsManager.SETTINGS_STORAGE_KEY);
            if (savedSettings) {
              var parsedSettings = JSON.parse(savedSettings);
              return {
                highlight: _extends({}, this.defaultSettings.highlight, parsedSettings.highlight || {}),
                notes: _extends({}, this.defaultSettings.notes, parsedSettings.notes || {}),
                other: _extends({}, this.defaultSettings.other, parsedSettings.other || {}),
                debug: _extends({}, this.defaultSettings.debug, parsedSettings.debug || {})
              };
            }
          } catch (error) {
            console.error('加载设置失败:', error);
          }
          return this.getDefaultSettings();
        }

        /**
         * 获取当前设置
         */;
        _proto.getSettings = function getSettings() {
          return this.currentSettings;
        }

        /**
         * 更新设置
         */;
        _proto.updateSettings = function updateSettings(newSettings) {
          this.currentSettings = newSettings;
          this.saveSettings();
        }

        // ========== Highlight Configuration ==========
        ;

        _proto.setHighlightSameDigits = function setHighlightSameDigits(enabled) {
          this.currentSettings.highlight.sameDigits = enabled;
          this.saveSettings();
        };
        _proto.setHighlightDuplicateCandidates = function setHighlightDuplicateCandidates(enabled) {
          this.currentSettings.highlight.duplicateCandidates = enabled;
          this.saveSettings();
        };
        _proto.setHighlightRowsColumns = function setHighlightRowsColumns(enabled) {
          this.currentSettings.highlight.rowsColumns = enabled;
          this.saveSettings();
        };
        _proto.setHighlightBlocks = function setHighlightBlocks(enabled) {
          this.currentSettings.highlight.blocks = enabled;
          this.saveSettings();
        };
        _proto.setHighlightAllRowsColumns = function setHighlightAllRowsColumns(enabled) {
          this.currentSettings.highlight.allRowsColumns = enabled;
          this.saveSettings();
        };
        _proto.setHighlightAllBlocks = function setHighlightAllBlocks(enabled) {
          this.currentSettings.highlight.allBlocks = enabled;
          this.saveSettings();
        }

        // ========== Notes Configuration ==========
        ;

        _proto.setAutoCalculate = function setAutoCalculate(enabled) {
          this.currentSettings.notes.autoCalculate = enabled;
          this.saveSettings();
        };
        _proto.setAutoErrorDetection = function setAutoErrorDetection(enabled) {
          this.currentSettings.notes.errorDetection = enabled;
          this.saveSettings();
        };
        _proto.setAutoNotes = function setAutoNotes(enabled) {
          this.currentSettings.notes.autoNotes = enabled;
          this.saveSettings();
        }

        // ========== Other ==========
        ;

        _proto.setDisplayUnsolvedDigitsCount = function setDisplayUnsolvedDigitsCount(enabled) {
          this.currentSettings.other.unsolvedDigitsCount = enabled;
          this.saveSettings();
        }

        // ========== Debug Tools ==========
        ;

        _proto.setInfiniteLives = function setInfiniteLives(enabled) {
          this.currentSettings.debug.infiniteLives = enabled;
          this.saveSettings();
        };
        _proto.setInfiniteHints = function setInfiniteHints(enabled) {
          this.currentSettings.debug.infiniteHints = enabled;
          this.saveSettings();
        };
        _proto.importGame = function importGame(enabled) {
          this.currentSettings.debug.importGame = enabled;
          this.saveSettings();
        };
        _proto.exportCurrentGame = function exportCurrentGame(enabled) {
          this.currentSettings.debug.exportGame = enabled;
          this.saveSettings();
        };
        return SettingsManager;
      }());
      // 单例实例
      SettingsManager.instance = void 0;
      SettingsManager.SETTINGS_STORAGE_KEY = 'APP_SETTINGS';
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SingleCandidateStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, HighlightAreaType, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
      HighlightAreaType = module.HighlightAreaType;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "125a26GhrtKxpf2Oo5xTGNv", "SingleCandidateStrategy", undefined);

      /**
       * 唯一候选数策略
       */
      var SingleCandidateStrategy = exports('SingleCandidateStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(SingleCandidateStrategy, _BaseStrategy);
        function SingleCandidateStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 1;
          return _this;
        }
        var _proto = SingleCandidateStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR && candidates[row][col].size === 1) {
                var value = Array.from(candidates[row][col])[0];
                return this.createHintSteps(board, row, col, value);
              }
            }
          }
          return null;
        };
        _proto.isApplicable = function isApplicable(board, candidates) {
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR && candidates[row][col].size === 1) {
                return true;
              }
            }
          }
          return false;
        };
        _proto.findSameNumbers = function findSameNumbers(board, value) {
          var positions = [];
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === value) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          return positions;
        }

        /**
        * 获取高亮区域（优先级逻辑）
        */;
        _proto.getHighlightAreas = function getHighlightAreas(board, row, col, value) {
          // 1. 检查整行
          var rowCells = this.getFilledCellsExcludingValueInRow(board, row, value);
          if (rowCells.length === 8) {
            return {
              type: HighlightAreaType.ROW,
              cells: rowCells,
              value: value
            };
          }

          // 2. 检查整列
          var colCells = this.getFilledCellsExcludingValueInColumn(board, col, value);
          if (colCells.length === 8) {
            return {
              type: HighlightAreaType.COLUMN,
              cells: colCells,
              value: value
            };
          }

          // 3. 检查整宫
          var boxCells = this.getFilledCellsExcludingValueInBox(board, row, col, value);
          if (boxCells.length === 8) {
            return {
              type: HighlightAreaType.BOX,
              cells: boxCells,
              value: value
            };
          }

          // 4. 组合模式（返回所有相关单元格）
          return {
            type: HighlightAreaType.COMBINED,
            cells: this.combineAndDeduplicate(board, rowCells, colCells, boxCells),
            value: value
          };
        }
        /**
         * 合并三个位置数组并去重（基于位置和值）
         * @param board 数独棋盘
         * @param rowCells 行相关位置数组
         * @param colCells 列相关位置数组
         * @param boxCells 宫相关位置数组
         * @returns 去重后的位置数组（去除位置重复和值重复）
         */;
        _proto.combineAndDeduplicate = function combineAndDeduplicate(board, rowCells, colCells, boxCells) {
          // 用于去重位置的Map（以"row,col"为key）
          var positionMap = new Map();
          // 用于去重值的Map（以"value"为key）
          var valueMap = new Map();
          // 最终结果数组
          var result = [];

          // 按优先级顺序处理（行 > 列 > 宫）
          var allCells = [].concat(rowCells, colCells, boxCells);
          for (var _iterator = _createForOfIteratorHelperLoose(allCells), _step; !(_step = _iterator()).done;) {
            var cell = _step.value;
            var cellValue = board[cell.row][cell.col];
            var positionKey = cell.row + "," + cell.col;

            // 如果位置未重复且值未重复
            if (!positionMap.has(positionKey) && !valueMap.has(cellValue)) {
              positionMap.set(positionKey, cell);
              valueMap.set(cellValue, cell);
              result.push(cell);
            }
          }
          return result;
        }

        /**
         * 查找行中与目标值不同的已填数字位置
         * @param board 数独棋盘
         * @param row 目标行号 (0-8)
         * @param value 要排除的目标值
         * @returns 该行中所有不等于value且非空的单元格位置数组
         */;
        _proto.getFilledCellsExcludingValueInRow = function getFilledCellsExcludingValueInRow(board, row, value) {
          var cells = [];
          for (var col = 0; col < 9; col++) {
            var cellValue = board[row][col];
            if (cellValue !== BLANK_CHAR && cellValue !== value) {
              cells.push({
                row: row,
                col: col
              });
            }
          }
          return cells;
        }

        /**
         * 查找列中与目标值不同的已填数字位置
         * @param board 数独棋盘
         * @param col 目标列号 (0-8)
         * @param value 要排除的目标值
         * @returns 该列中所有不等于value且非空的单元格位置数组
         */;
        _proto.getFilledCellsExcludingValueInColumn = function getFilledCellsExcludingValueInColumn(board, col, value) {
          var cells = [];
          for (var row = 0; row < 9; row++) {
            var cellValue = board[row][col];
            if (cellValue !== BLANK_CHAR && cellValue !== value) {
              cells.push({
                row: row,
                col: col
              });
            }
          }
          return cells;
        }

        /**
         * 查找宫格中与目标值不同的已填数字位置
         * @param board 数独棋盘
         * @param row 目标单元格行号 (0-8)
         * @param col 目标单元格列号 (0-8)
         * @param value 要排除的目标值
         * @returns 该宫格中所有不等于value且非空的单元格位置数组
         */;
        _proto.getFilledCellsExcludingValueInBox = function getFilledCellsExcludingValueInBox(board, row, col, value) {
          var boxRow = Math.floor(row / 3) * 3;
          var boxCol = Math.floor(col / 3) * 3;
          var cells = [];
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var cellValue = board[boxRow + r][boxCol + c];
              if (cellValue !== BLANK_CHAR && cellValue !== value) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
          }
          return cells;
        };
        _proto.buildExplanation = function buildExplanation(position, value, highlightAreas) {
          var row = position.row,
            col = position.col;
          row = row + 1;
          col = col + 1;
          var reason = '';
          switch (highlightAreas.type) {
            case HighlightAreaType.ROW:
              reason = oops.language.getLangByID("SingleCandidateStrategy.rowExplanation", {
                value: value,
                row: row
              });
              break;
            case HighlightAreaType.COLUMN:
              reason = oops.language.getLangByID("SingleCandidateStrategy.columnExplanation", {
                value: value,
                col: col
              });
              break;
            case HighlightAreaType.BOX:
              reason = oops.language.getLangByID("SingleCandidateStrategy.boxExplanation", {
                value: value
              });
              break;
            default:
              reason = oops.language.getLangByID("SingleCandidateStrategy.defaultExplanation", {
                value: value
              });
          }
          return oops.language.getLangByID("SingleCandidateStrategy.buildExplanation", {
            name: this.name,
            row: row,
            col: col,
            value: value,
            reason: reason
          });
        };
        _proto.createHintSteps = function createHintSteps(board, row, col, value) {
          var relatedCells = SolverUtils.getRelatedCells(row, col);
          var highlightAreas = this.getHighlightAreas(board, row, col, value);
          return [this.createDiscoveryStep(board, row, col, value, relatedCells), this.createReasoningStep(board, row, col, value, relatedCells, highlightAreas), this.createConclusionStep(board, row, col, value, relatedCells, highlightAreas)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, row, col, value, relatedCells) {
          var _this2 = this;
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("SingleCandidateStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description,
              row: row + 1,
              col: col + 1
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: {
              row: row,
              col: col
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(relatedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor
              };
            }), [{
              position: {
                row: row,
                col: col
              },
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor
            }])
          };
        };
        _proto.createReasoningStep = function createReasoningStep(board, row, col, value, relatedCells, highlightAreas) {
          var _this3 = this;
          var generateDescription = function generateDescription() {
            return _this3.buildExplanation({
              row: row,
              col: col
            }, value, highlightAreas);
          };
          return {
            technique: this.name,
            stepId: 2,
            position: {
              row: row,
              col: col
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.mergeHighlightCells(relatedCells, highlightAreas.cells), [{
              position: {
                row: row,
                col: col
              },
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor
            }])
          };
        };
        _proto.createConclusionStep = function createConclusionStep(board, row, col, value, relatedCells, highlightAreas) {
          var _this4 = this;
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("SingleCandidateStrategy.conclusionDes", {
              name: _this4.name,
              value: value,
              row: row + 1,
              col: col + 1
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: {
              row: row,
              col: col
            },
            value: value,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(this.mergeHighlightCells(relatedCells, highlightAreas.cells), [{
              position: {
                row: row,
                col: col
              },
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor
            }])
          };
        };
        _proto.mergeHighlightCells = function mergeHighlightCells(relatedCells, highlightCells) {
          // 使用Map来确保后添加的单元格会覆盖先添加的
          var cellMap = new Map();

          // 先添加关联区域单元格
          relatedCells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            cellMap.set(key, {
              position: pos,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor
            });
          });

          // 再添加高亮区域单元格（会覆盖相同位置的关联单元格）
          highlightCells.forEach(function (pos) {
            var key = pos.row + "," + pos.col;
            cellMap.set(key, {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor
            });
          });

          // 返回合并后的数组
          return Array.from(cellMap.values());
        };
        _createClass(SingleCandidateStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("SingleCandidateStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("SingleCandidateStrategy.description");
          }
        }]);
        return SingleCandidateStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkyscraperStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f9e86PTB/FERbzsoZYBFDLr", "SkyscraperStrategy", undefined);
      var SkyscraperStrategy = exports('SkyscraperStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(SkyscraperStrategy, _BaseStrategy);
        function SkyscraperStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 7;
          return _this;
        }
        var _proto = SkyscraperStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkSkyscraper(board, candidates);
          if (result) {
            return this.createSkyscraperSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkSkyscraper = function checkSkyscraper(board, candidates) {
          var _this2 = this;
          var _loop = function _loop(digit) {
              if (digit == 9) {
                console.log("p");
              }
              // 2. 查找所有行和列中的强链（恰好两个候选数的单位）
              var rowStrongLinks = _this2.findStrongLinks(digit, HighlightAreaType.ROW, board, candidates);
              var colStrongLinks = _this2.findStrongLinks(digit, HighlightAreaType.COLUMN, board, candidates);

              // 3. 检查行强链之间的组合（列共享）
              for (var i = 0; i < rowStrongLinks.length; i++) {
                var _loop2 = function _loop2() {
                    var link1 = rowStrongLinks[i];
                    var link2 = rowStrongLinks[j];

                    // 检查是否共享列（地基）
                    var sharedCol = _this2.findSharedColumn(link1.cells, link2.cells);
                    if (sharedCol !== null) {
                      // 找到摩天楼结构
                      var foundation = [{
                        row: link1.areaIndex,
                        col: sharedCol
                      }, {
                        row: link2.areaIndex,
                        col: sharedCol
                      }];

                      // 获取楼顶单元格（非共享端的单元格）
                      var roofCell1 = link1.cells.find(function (cell) {
                        return cell.col !== sharedCol;
                      });
                      var roofCell2 = link2.cells.find(function (cell) {
                        return cell.col !== sharedCol;
                      });

                      // 屋顶不能在同一行或同一列
                      if (roofCell1.row === roofCell2.row || roofCell1.col === roofCell2.col) {
                        return 0; // continue
                        // 跳过X-Wing情况
                      }
                      // 检查楼顶单元格是否共同可见某些单元格
                      var affectedCells = _this2.getSharedVisibleCells(roofCell1, roofCell2, board).filter(function (pos) {
                        return candidates[pos.row][pos.col].has(digit);
                      });
                      if (affectedCells.length > 0) {
                        return {
                          v: {
                            v: {
                              digit: digit,
                              strongLinks: [link1, link2],
                              foundation: foundation,
                              affectedCells: affectedCells
                            }
                          }
                        };
                      }
                    }
                  },
                  _ret2;
                for (var j = i + 1; j < rowStrongLinks.length; j++) {
                  _ret2 = _loop2();
                  if (_ret2 === 0) continue;
                  if (_ret2) return _ret2.v;
                }
              }

              // 4. 检查列强链之间的组合（行共享）
              for (var _i = 0; _i < colStrongLinks.length; _i++) {
                var _loop3 = function _loop3() {
                    var link1 = colStrongLinks[_i];
                    var link2 = colStrongLinks[_j];

                    // 检查是否共享行（地基）
                    var sharedRow = _this2.findSharedRow(link1.cells, link2.cells);
                    if (sharedRow !== null) {
                      // 找到摩天楼结构
                      var foundation = [{
                        row: sharedRow,
                        col: link1.areaIndex
                      }, {
                        row: sharedRow,
                        col: link2.areaIndex
                      }];

                      // 获取楼顶单元格（非共享端的单元格）
                      var roofCell1 = link1.cells.find(function (cell) {
                        return cell.row !== sharedRow;
                      });
                      var roofCell2 = link2.cells.find(function (cell) {
                        return cell.row !== sharedRow;
                      });

                      // 屋顶不能在同一行或同一列
                      if (roofCell1.row === roofCell2.row || roofCell1.col === roofCell2.col) {
                        return 0; // continue
                        // 跳过X-Wing情况
                      }

                      // 检查楼顶单元格是否共同可见某些单元格
                      var affectedCells = _this2.getSharedVisibleCells(roofCell1, roofCell2, board).filter(function (pos) {
                        return candidates[pos.row][pos.col].has(digit);
                      });
                      if (affectedCells.length > 0) {
                        return {
                          v: {
                            v: {
                              digit: digit,
                              strongLinks: [link1, link2],
                              foundation: foundation,
                              affectedCells: affectedCells
                            }
                          }
                        };
                      }
                    }
                  },
                  _ret3;
                for (var _j = _i + 1; _j < colStrongLinks.length; _j++) {
                  _ret3 = _loop3();
                  if (_ret3 === 0) continue;
                  if (_ret3) return _ret3.v;
                }
              }
            },
            _ret;
          // 1. 遍历所有数字1-9
          for (var digit = 1; digit <= 9; digit++) {
            _ret = _loop(digit);
            if (_ret) return _ret.v;
          }
          return null;
        };
        _proto.findStrongLinks = function findStrongLinks(digit, areaType, board, candidates) {
          var strongLinks = [];
          var areaCount = areaType === HighlightAreaType.ROW ? 9 : 9;
          for (var areaIndex = 0; areaIndex < areaCount; areaIndex++) {
            var cells = areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(areaIndex) : SolverUtils.getColumnCells(areaIndex);

            // 查找该行/列中指定数字的候选格
            var candidateCells = cells.filter(function (pos) {
              return board[pos.row][pos.col] === BLANK_CHAR && candidates[pos.row][pos.col].has(digit);
            });

            // 如果恰好有两个候选格，则形成强链
            if (candidateCells.length === 2) {
              strongLinks.push({
                areaType: areaType,
                areaIndex: areaIndex,
                cells: [candidateCells[0], candidateCells[1]]
              });
            }
          }
          return strongLinks;
        };
        _proto.findSharedColumn = function findSharedColumn(cells1, cells2) {
          var cols1 = cells1.map(function (cell) {
            return cell.col;
          });
          var cols2 = cells2.map(function (cell) {
            return cell.col;
          });

          // 查找共享的列（地基）
          for (var _iterator = _createForOfIteratorHelperLoose(cols1), _step; !(_step = _iterator()).done;) {
            var col1 = _step.value;
            for (var _iterator2 = _createForOfIteratorHelperLoose(cols2), _step2; !(_step2 = _iterator2()).done;) {
              var col2 = _step2.value;
              if (col1 === col2) {
                return col1;
              }
            }
          }
          return null;
        };
        _proto.findSharedRow = function findSharedRow(cells1, cells2) {
          var rows1 = cells1.map(function (cell) {
            return cell.row;
          });
          var rows2 = cells2.map(function (cell) {
            return cell.row;
          });

          // 查找共享的行（地基）
          for (var _iterator3 = _createForOfIteratorHelperLoose(rows1), _step3; !(_step3 = _iterator3()).done;) {
            var row1 = _step3.value;
            for (var _iterator4 = _createForOfIteratorHelperLoose(rows2), _step4; !(_step4 = _iterator4()).done;) {
              var row2 = _step4.value;
              if (row1 === row2) {
                return row1;
              }
            }
          }
          return null;
        };
        _proto.createSkyscraperSteps = function createSkyscraperSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createColorMappingStep(board, candidates, info), this.createMarkRemovalStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref) {
          var _this3 = this;
          var digit = _ref.digit,
            strongLinks = _ref.strongLinks,
            foundation = _ref.foundation;
          var firstLinkRowOrColIndex = strongLinks[0].areaType === HighlightAreaType.ROW ? strongLinks[0].cells[0].row : strongLinks[0].cells[0].col;
          var secondLinkRowOrColIndex = strongLinks[1].areaType === HighlightAreaType.ROW ? strongLinks[1].cells[0].row : strongLinks[1].cells[0].col;
          var firstLinkAreaCells = this.getAreaCells(strongLinks[0].areaType, firstLinkRowOrColIndex);
          var secondLinkAreaCells = this.getAreaCells(strongLinks[1].areaType, secondLinkRowOrColIndex);
          var strongLinkHighlights = strongLinks.flatMap(function (link) {
            return [{
              position: link.cells[0],
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[link.cells[0].row][link.cells[0].col])
            }, {
              position: link.cells[1],
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[link.cells[1].row][link.cells[1].col])
            }];
          });
          var areaHighlights = [].concat(firstLinkAreaCells.map(function (cell) {
            return {
              position: cell,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: [].concat(candidates[cell.row][cell.col])
            };
          }), secondLinkAreaCells.map(function (cell) {
            return {
              position: cell,
              backgroundColor: HighlightConfig.relatedArea.background,
              textColor: HighlightConfig.relatedArea.textColor,
              candidates: [].concat(candidates[cell.row][cell.col])
            };
          }));
          var digitHighlights = [].concat(strongLinks.flatMap(function (link) {
            return [{
              position: link.cells[0],
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: digit
            }, {
              position: link.cells[1],
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: digit
            }];
          }), foundation.map(function (cell) {
            return {
              position: cell,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: digit
            };
          }));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("SkyscraperStrategy.discoveryDes", {
              name: _this3.name,
              description: _this3.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: strongLinks[0].cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([areaHighlights, strongLinkHighlights]),
            highlightNotes: digitHighlights
          };
        };
        _proto.createColorMappingStep = function createColorMappingStep(board, candidates, _ref2) {
          var _this4 = this;
          var digit = _ref2.digit,
            strongLinks = _ref2.strongLinks,
            foundation = _ref2.foundation,
            affectedCells = _ref2.affectedCells;
          var roofCell1 = strongLinks[0].cells.find(function (cell) {
            return !foundation.some(function (roof) {
              return _this4.isSamePosition(roof, cell);
            });
          });
          var roofCell2 = strongLinks[1].cells.find(function (cell) {
            return !foundation.some(function (roof) {
              return _this4.isSamePosition(roof, cell);
            });
          });
          var firstLinkRowOrColIndex = strongLinks[0].areaType === HighlightAreaType.ROW ? strongLinks[0].cells[0].row : strongLinks[0].cells[0].col;
          var secondLinkRowOrColIndex = strongLinks[1].areaType === HighlightAreaType.ROW ? strongLinks[1].cells[0].row : strongLinks[1].cells[0].col;
          var firstLinkAreaCells = this.getAreaCells(strongLinks[0].areaType, firstLinkRowOrColIndex);
          var secondLinkAreaCells = this.getAreaCells(strongLinks[1].areaType, secondLinkRowOrColIndex);
          var directionIndex = foundation[0].row === foundation[1].row ? foundation[0].row + 1 : foundation[0].col + 1;
          var generateDescription = function generateDescription() {
            var directionName = foundation[0].row === foundation[1].row ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("SkyscraperStrategy.colorMappingDes", {
              name: _this4.name,
              digit: digit,
              firstLinkA: "" + _this4.getAreaName(strongLinks[0].areaType) + (strongLinks[0].areaIndex + 1) + " (R" + (strongLinks[0].cells[0].row + 1) + "C" + (strongLinks[0].cells[0].col + 1),
              firstLinkB: "R" + (strongLinks[0].cells[1].row + 1) + "C" + (strongLinks[0].cells[1].col + 1) + ")",
              secondLinkA: "" + _this4.getAreaName(strongLinks[1].areaType) + (strongLinks[1].areaIndex + 1) + " (R" + (strongLinks[1].cells[0].row + 1) + "C" + (strongLinks[1].cells[0].col + 1),
              secondLinkB: "R" + (strongLinks[1].cells[1].row + 1) + "C" + (strongLinks[1].cells[1].col + 1) + ")",
              directionName: directionName,
              directionIndex: directionIndex
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: strongLinks[0].cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([firstLinkAreaCells.map(function (cell) {
              return {
                position: cell,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[cell.row][cell.col])
              };
            }), secondLinkAreaCells.map(function (cell) {
              return {
                position: cell,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[cell.row][cell.col])
              };
            }), this.getSharedVisibleCells(foundation[0], foundation[1], board).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), strongLinks.flatMap(function (link) {
              return [{
                position: link.cells[0],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[link.cells[0].row][link.cells[0].col])
              }, {
                position: link.cells[1],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[link.cells[1].row][link.cells[1].col])
              }];
            })]),
            highlightNotes: [].concat(strongLinks.flatMap(function (link) {
              return [{
                position: link.cells[0],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              }, {
                position: link.cells[1],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              }];
            }), foundation.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              };
            }))
          };
        };
        _proto.createMarkRemovalStep = function createMarkRemovalStep(board, candidates, _ref3) {
          var _this5 = this;
          var digit = _ref3.digit,
            strongLinks = _ref3.strongLinks,
            foundation = _ref3.foundation,
            affectedCells = _ref3.affectedCells;
          var roofCell1 = strongLinks[0].cells.find(function (cell) {
            return !foundation.some(function (roof) {
              return _this5.isSamePosition(roof, cell);
            });
          });
          var roofCell2 = strongLinks[1].cells.find(function (cell) {
            return !foundation.some(function (roof) {
              return _this5.isSamePosition(roof, cell);
            });
          });
          var firstLinkRowOrColIndex = strongLinks[0].areaType === HighlightAreaType.ROW ? strongLinks[0].cells[0].row : strongLinks[0].cells[0].col;
          var secondLinkRowOrColIndex = strongLinks[1].areaType === HighlightAreaType.ROW ? strongLinks[1].cells[0].row : strongLinks[1].cells[0].col;
          var firstLinkAreaCells = this.getAreaCells(strongLinks[0].areaType, firstLinkRowOrColIndex);
          var secondLinkAreaCells = this.getAreaCells(strongLinks[1].areaType, secondLinkRowOrColIndex);
          var directionIndex = foundation[0].row === foundation[1].row ? foundation[0].row + 1 : foundation[0].col + 1;
          var generateDescription = function generateDescription() {
            var directionName = foundation[0].row === foundation[1].row ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("SkyscraperStrategy.markRemovalDes", {
              name: _this5.name,
              digit: digit,
              roofCell1: "R" + (roofCell1.row + 1) + "C" + (roofCell1.col + 1),
              roofCell2: "R" + (roofCell2.row + 1) + "C" + (roofCell2.col + 1),
              directionName: directionName,
              directionIndex: directionIndex
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: strongLinks[0].cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([firstLinkAreaCells.map(function (cell) {
              return {
                position: cell,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[cell.row][cell.col])
              };
            }), secondLinkAreaCells.map(function (cell) {
              return {
                position: cell,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[cell.row][cell.col])
              };
            }), this.getSharedVisibleCells(foundation[0], foundation[1], board).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), strongLinks.flatMap(function (link) {
              return [{
                position: link.cells[0],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[link.cells[0].row][link.cells[0].col])
              }, {
                position: link.cells[1],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[link.cells[1].row][link.cells[1].col])
              }];
            }), this.getSharedVisibleCells(roofCell1, roofCell2, board).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })]),
            highlightNotes: [].concat(strongLinks.flatMap(function (link) {
              return [{
                position: link.cells[0],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              }, {
                position: link.cells[1],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              }];
            }), foundation.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: digit
              };
            }))
          };
        };
        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref4) {
          var _this6 = this;
          var digit = _ref4.digit,
            strongLinks = _ref4.strongLinks,
            foundation = _ref4.foundation,
            affectedCells = _ref4.affectedCells;
          // 实际移除操作
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](digit);
          });
          var roofCell1 = strongLinks[0].cells.find(function (cell) {
            return !foundation.some(function (roof) {
              return _this6.isSamePosition(roof, cell);
            });
          });
          var roofCell2 = strongLinks[1].cells.find(function (cell) {
            return !foundation.some(function (roof) {
              return _this6.isSamePosition(roof, cell);
            });
          });
          var firstLinkRowOrColIndex = strongLinks[0].areaType === HighlightAreaType.ROW ? strongLinks[0].cells[0].row : strongLinks[0].cells[0].col;
          var secondLinkRowOrColIndex = strongLinks[1].areaType === HighlightAreaType.ROW ? strongLinks[1].cells[0].row : strongLinks[1].cells[0].col;
          var firstLinkAreaCells = this.getAreaCells(strongLinks[0].areaType, firstLinkRowOrColIndex);
          var secondLinkAreaCells = this.getAreaCells(strongLinks[1].areaType, secondLinkRowOrColIndex);
          var generateDescription = function generateDescription() {
            var directionName = foundation[0].row === foundation[1].row ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("SkyscraperStrategy.removalDes", {
              name: _this6.name,
              digit: digit
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: affectedCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([firstLinkAreaCells.map(function (cell) {
              return {
                position: cell,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[cell.row][cell.col])
              };
            }), secondLinkAreaCells.map(function (cell) {
              return {
                position: cell,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[cell.row][cell.col])
              };
            }), this.getSharedVisibleCells(foundation[0], foundation[1], board).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), strongLinks.flatMap(function (link) {
              return [{
                position: link.cells[0],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[link.cells[0].row][link.cells[0].col])
              }, {
                position: link.cells[1],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[link.cells[1].row][link.cells[1].col])
              }];
            }), this.getSharedVisibleCells(roofCell1, roofCell2, board).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })]),
            highlightNotes: [].concat(strongLinks.flatMap(function (link) {
              return [{
                position: link.cells[0],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              }, {
                position: link.cells[1],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              }];
            }), foundation.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: digit
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: digit
              };
            }))
          };
        };
        _proto.getSharedVisibleCells = function getSharedVisibleCells(cell1, cell2, board) {
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) visible.push({
              row: cell.row,
              col: col
            });
          }
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) visible.push({
              row: row,
              col: cell.col
            });
          }
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        };
        _proto.isSamePosition = function isSamePosition(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        };
        _proto.getAreaName = function getAreaName(areaType) {
          var _HighlightAreaType$RO;
          return (_HighlightAreaType$RO = {}, _HighlightAreaType$RO[HighlightAreaType.ROW] = oops.language.getLangByID("strategy.row"), _HighlightAreaType$RO[HighlightAreaType.COLUMN] = oops.language.getLangByID("strategy.col"), _HighlightAreaType$RO[HighlightAreaType.BOX] = oops.language.getLangByID("strategy.box"), _HighlightAreaType$RO)[areaType];
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _createClass(SkyscraperStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("SkyscraperStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("SkyscraperStrategy.description");
          }
        }]);
        return SkyscraperStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SolverUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SolveTypes.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, _extends, cclegacy, NR_SQUARES, DIGITS, BLANK_CHAR, HighlightAreaType;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NR_SQUARES = module.NR_SQUARES;
      DIGITS = module.DIGITS;
      BLANK_CHAR = module.BLANK_CHAR;
      HighlightAreaType = module.HighlightAreaType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3a873Ggvk9MA6dPxF8fK04u", "SolverUtils", undefined);
      var SolverUtils = exports('SolverUtils', /*#__PURE__*/function () {
        function SolverUtils() {}
        /**
         * 获取与指定单元格相关的所有唯一关联单元格位置
         * @param row 行号 (0-8)
         * @param col 列号 (0-8)
         * @returns 去重后的相关单元格位置数组（不包含自身）
         */
        SolverUtils.getRelatedCells = function getRelatedCells(row, col) {
          // 使用Set进行去重（基于位置字符串"row,col"）
          var positionSet = new Set();

          // 计算所在宫格的起始位置
          var boxRow = Math.floor(row / 3) * 3;
          var boxCol = Math.floor(col / 3) * 3;

          // 收集行关联单元格（排除自身）
          for (var c = 0; c < 9; c++) {
            if (c !== col) {
              positionSet.add(row + "," + c);
            }
          }

          // 收集列关联单元格（排除自身）
          for (var r = 0; r < 9; r++) {
            if (r !== row) {
              positionSet.add(r + "," + col);
            }
          }

          // 收集宫格关联单元格（排除行列已包含的和自身）
          for (var _r = 0; _r < 3; _r++) {
            for (var _c = 0; _c < 3; _c++) {
              var actualRow = boxRow + _r;
              var actualCol = boxCol + _c;
              // 只添加既不在同行也不在同列的单元格
              if (actualRow !== row && actualCol !== col) {
                positionSet.add(actualRow + "," + actualCol);
              }
            }
          }

          // 转换回Position数组
          return Array.from(positionSet).map(function (str) {
            var _str$split$map = str.split(',').map(Number),
              r = _str$split$map[0],
              c = _str$split$map[1];
            return {
              row: r,
              col: c
            };
          });
        }

        /**
         * 获取指定单元格所在的方块索引
         * @param row 行号
         * @param col 列号
         * @returns 方块索引（0-8）
         */;
        SolverUtils.getBoxIndex = function getBoxIndex(row, col) {
          return Math.floor(row / 3) * 3 + Math.floor(col / 3);
        }

        /**
         * 获取指定方块的所有单元格位置
         * @param boxIndex 方块索引（0-8）
         * @returns 方块内所有单元格位置数组
         */;
        SolverUtils.getBoxCells = function getBoxCells(boxIndex) {
          var positions = [];
          var boxRow = Math.floor(boxIndex / 3) * 3;
          var boxCol = boxIndex % 3 * 3;
          for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 3; j++) {
              positions.push({
                row: boxRow + i,
                col: boxCol + j
              });
            }
          }
          return positions;
        }

        /**
         * 检查两个位置是否相同
         * @param pos1 位置1
         * @param pos2 位置2
         * @returns 是否相同
         */;
        SolverUtils.isSamePosition = function isSamePosition(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        }

        /**
         * 检查位置是否在数组中
         * @param pos 位置
         * @param positions 位置数组
         * @returns 是否在数组中
         */;
        SolverUtils.isPositionInArray = function isPositionInArray(pos, positions) {
          var _this = this;
          return positions.some(function (p) {
            return _this.isSamePosition(p, pos);
          });
        }

        /**
         * 验证数独板格式有效性
         * @param board - 待验证的板字符串
         * @returns 验证通过返回true，否则返回错误信息
         */;
        SolverUtils.validateBoard = function validateBoard(board) {
          if (!board) {
            console.warn("空数独");
            return false;
          }
          if (board.length !== NR_SQUARES) {
            console.warn("\u65E0\u6548\u7684\u6570\u72EC\u957F\u5EA6\uFF0C\u5FC5\u987B\u6B63\u597D\u5305\u542B" + NR_SQUARES + "\u4E2A\u65B9\u683C");
            return false;
          }
          for (var i = 0; i < board.length; i++) {
            if (DIGITS.indexOf(board[i]) == -1 && board[i] !== BLANK_CHAR) {
              console.warn("\u4F4D\u7F6E" + i + "\u53D1\u73B0\u975E\u6CD5\u5B57\u7B26: " + board[i]);
              return false;
            }
          }
          return true;
        };
        SolverUtils.gridStrToArray = function gridStrToArray(grid) {
          // 初始化棋盘
          var board = Array(9).fill(null).map(function () {
            return Array(9).fill(BLANK_CHAR);
          });
          for (var i = 0; i < 81; i++) {
            var row = Math.floor(i / 9);
            var col = i % 9;
            board[row][col] = grid[i];
          }
          return board;
        }

        /**
         * 获取候选数字
         * @param board 数独棋盘
         * @returns 候选数字矩阵
         */;
        SolverUtils.getCandidates = function getCandidates(board) {
          var cands = Array(9).fill(null).map(function () {
            return Array(9).fill(null).map(function () {
              return new Set();
            });
          });
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR) {
                // 获取行、列和3x3方块中的数字
                var usedNumbers = new Set();

                // 检查行
                for (var c = 0; c < 9; c++) {
                  var value = board[row][c];
                  if (value !== BLANK_CHAR) {
                    usedNumbers.add(Number(value));
                  }
                }

                // 检查列
                for (var r = 0; r < 9; r++) {
                  var _value = board[r][col];
                  if (_value !== BLANK_CHAR) {
                    usedNumbers.add(Number(_value));
                  }
                }

                // 检查3x3方块
                var startRow = Math.floor(row / 3) * 3;
                var startCol = Math.floor(col / 3) * 3;
                for (var i = 0; i < 3; i++) {
                  for (var j = 0; j < 3; j++) {
                    var _value2 = board[startRow + i][startCol + j];
                    if (_value2 !== BLANK_CHAR) {
                      usedNumbers.add(Number(_value2));
                    }
                  }
                }

                // 添加未使用的数字作为候选
                for (var num = 1; num <= 9; num++) {
                  if (!usedNumbers.has(num)) {
                    cands[row][col].add(num);
                  }
                }
              }
            }
          }
          return cands;
        }

        /**
         * 生成去重后的高亮单元格数组（完全基于HighlightCell类型）
         * @param highlightLayers 高亮图层数组，按优先级从低到高排序
         * @param mergeStrategy 可选，自定义合并策略
         */;
        SolverUtils.createDeduplicatedHighlights = function createDeduplicatedHighlights(highlightLayers, mergeStrategy) {
          var _this2 = this;
          var highlights = [];
          var positionMap = new Map(); // 记录位置对应的索引

          highlightLayers.forEach(function (layer) {
            layer.forEach(function (cell) {
              var key = cell.position.row + "," + cell.position.col;
              var existingIndex = positionMap.get(key);
              if (existingIndex === undefined) {
                // 新单元格直接添加
                positionMap.set(key, highlights.length);
                highlights.push(cell);
              } else {
                // 已存在单元格，应用合并策略
                highlights[existingIndex] = mergeStrategy ? mergeStrategy(highlights[existingIndex], cell) : _this2.defaultMergeStrategy(highlights[existingIndex], cell);
              }
            });
          });
          return highlights;
        }

        /**
         * 默认合并策略（高优先级覆盖低优先级）
         */;
        SolverUtils.defaultMergeStrategy = function defaultMergeStrategy(existing, incoming) {
          // 保留更高优先级的背景色和文字颜色
          var backgroundColor = incoming.backgroundColor || existing.backgroundColor;
          var textColor = incoming.textColor || existing.textColor;

          // 合并候选数和值（新值优先）
          var candidates = incoming.candidates || existing.candidates;
          return {
            position: existing.position,
            backgroundColor: backgroundColor,
            textColor: textColor,
            candidates: candidates
          };
        };
        SolverUtils.getRowCells = function getRowCells(row) {
          return Array.from({
            length: 9
          }, function (_, col) {
            return {
              row: row,
              col: col
            };
          });
        };
        SolverUtils.getColumnCells = function getColumnCells(col) {
          return Array.from({
            length: 9
          }, function (_, row) {
            return {
              row: row,
              col: col
            };
          });
        };
        SolverUtils.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        }

        /**
         * 根据单元格的行列位置计算其所在的宫格索引
         * @param pos 单元格位置 {row, col}
         * @returns 宫格索引 (0-8)
         */;
        SolverUtils.getBlockIndex = function getBlockIndex(pos) {
          // 计算宫格的行索引 (0-2)
          if (!pos) {
            return -1;
          }
          var blockRow = Math.floor(pos.row / 3);
          // 计算宫格的列索引 (0-2)
          var blockCol = Math.floor(pos.col / 3);
          // 转换为线性索引 (0-8)
          return blockRow * 3 + blockCol;
        };
        SolverUtils.getCombinations = function getCombinations(array, size) {
          if (size === 0) return [[]];
          if (array.length === 0) return [];
          var first = array[0],
            rest = array.slice(1);
          var withFirst = this.getCombinations(rest, size - 1).map(function (c) {
            return [first].concat(c);
          });
          var withoutFirst = this.getCombinations(rest, size);
          return [].concat(withFirst, withoutFirst);
        }

        /**
         * 合并两个候选数集合（二维数组）
         * 
         * 合并规则：
         * 1. 如果某个单元格在A中有值但B中无值 → 取A的值
         * 2. 如果某个单元格在B中有值但A中无值 → 取B的值
         * 3. 如果两者都有值 → 取两者的交集
         * 4. 确保返回的候选数不包含矛盾
         * @param board 题目
         * @param candidatesA 第一个候选数集合
         * @param candidatesB 第二个候选数集合
         * @returns 合并后的候选数集合
         */;
        SolverUtils.mergeTwoCandidates = function mergeTwoCandidates(board, candidatesA, candidatesB) {
          var _this3 = this;
          // 首先验证两个数组的维度是否一致
          if (candidatesA.length !== 9 || candidatesB.length !== 9 || candidatesA.some(function (row) {
            return row.length !== 9;
          }) || candidatesB.some(function (row) {
            return row.length !== 9;
          })) {
            throw new Error("候选数数组必须是9x9的二维数组");
          }
          return candidatesA.map(function (row, i) {
            return row.map(function (cellA, j) {
              var cellB = candidatesB[i][j];
              if (board[i][j] !== BLANK_CHAR) {
                // 情况5：该单元格非空格
                return new Set();
              }

              // 情况1：A有值B无值 → 取A
              if (cellA.size > 0 && cellB.size === 0) {
                return new Set(cellA);
              }

              // 情况2：B有值A无值 → 取B
              if (cellB.size > 0 && cellA.size === 0) {
                return new Set(cellB);
              }

              // 情况3：两者都有值 → 取交集
              if (cellA.size > 0 && cellB.size > 0) {
                var intersection = _this3.getIntersection(cellA, cellB);

                // 记录冲突情况（可选）
                if (intersection.size === 0 && (cellA.size > 0 || cellB.size > 0)) {
                  console.warn("\u5019\u9009\u6570\u51B2\u7A81 at (" + i + "," + j + "): \n                    A=[" + [].concat(cellA) + "], B=[" + [].concat(cellB) + "]");
                }
                return intersection;
              }

              // 情况4：两者都无值 → 返回空集合
              return new Set();
            });
          });
        }

        /**
         * 获取智能合并后的候选数（核心方法）
         * 
         * 设计原则：
         * 1. 已填数字的单元格候选数必须为空
         * 2. 取维护候选数与实时计算候选数的交集
         * 3. 确保返回的候选数不包含矛盾
         */;
        SolverUtils.getMergedCandidates = function getMergedCandidates(board, candidates) {
          var _this4 = this;
          var realtimeCandidates = SolverUtils.getCandidates(board);
          return candidates.map(function (row, i) {
            return row.map(function (cell, j) {
              // 原则1：已填数字的单元格候选数必须为空
              if (board[i][j] !== BLANK_CHAR) {
                if (cell.size > 0) {
                  console.log("\u51B2\u7A81\uFF1A\u5355\u5143\u683C(" + i + "," + j + ")\u5DF2\u586B\u4F46\u7EF4\u62A4\u5019\u9009\u6570\u975E\u7A7A");
                }
                return new Set();
              }

              // 原则2：取两者中最严格的候选数（数量更少的可信来源）
              var realtime = realtimeCandidates[i][j];

              // 情况1：维护数据是实时数据的子集 → 优先采用（策略优化结果）
              if (_this4.isSubset(cell, realtime)) {
                return new Set(cell);
              }

              // 情况2：实时数据是维护数据的子集 → 采用实时（反映最新变化）
              if (_this4.isSubset(realtime, cell)) {
                return new Set(realtime);
              }

              // 情况3：两者有冲突 → 取交集 + 警告
              var intersection = _this4.getIntersection(cell, realtime);
              if (intersection.size === 0 && realtime.size > 0) {
                console.warn("\u5019\u9009\u6570\u51B2\u7A81 at (" + i + "," + j + "): \n                    \u7EF4\u62A4=[" + [].concat(cell) + "], \u5B9E\u65F6=[" + [].concat(realtime) + "]");
              }
              return intersection;
            });
          });
        }

        /** 判断setA是否是setB的子集 */;
        SolverUtils.isSubset = function isSubset(setA, setB) {
          if (setA.size > setB.size) return false;
          for (var _iterator = _createForOfIteratorHelperLoose(setA), _step; !(_step = _iterator()).done;) {
            var num = _step.value;
            if (!setB.has(num)) return false;
          }
          return true;
        }

        /** 获取两个集合的交集 */;
        SolverUtils.getIntersection = function getIntersection(setA, setB) {
          var result = new Set();
          var _ref = setA.size <= setB.size ? [setA, setB] : [setB, setA],
            smaller = _ref[0],
            larger = _ref[1];
          for (var _iterator2 = _createForOfIteratorHelperLoose(smaller), _step2; !(_step2 = _iterator2()).done;) {
            var num = _step2.value;
            if (larger.has(num)) result.add(num);
          }
          return result;
        }

        /**
         * 高亮单元格去重合并
         * @param highlights 高亮单元格数组
         * @param priority 优先级模式：'last'（最后出现的优先） | 'first'（第一个出现的优先，默认）
         */;
        SolverUtils.deduplicateHighlights = function deduplicateHighlights(highlights, priority) {
          if (priority === void 0) {
            priority = 'first';
          }
          var uniqueMap = new Map();

          // 根据优先级决定遍历方向
          var start = priority === 'last' ? 0 : highlights.length - 1;
          var end = priority === 'last' ? highlights.length : -1;
          var step = priority === 'last' ? 1 : -1;
          for (var i = start; i !== end; i += step) {
            var cell = highlights[i];
            var key = cell.position.row + "-" + cell.position.col;
            if (!uniqueMap.has(key)) {
              uniqueMap.set(key, _extends({}, cell));
            } else {
              var _existing = uniqueMap.get(key);
              var mergedCandidates = [].concat(new Set([].concat(_existing.candidates || [], cell.candidates || [])));
              uniqueMap.set(key, _extends({}, _existing, cell, {
                candidates: mergedCandidates
              }));
            }
          }
          return Array.from(uniqueMap.values());
        }

        /**
         * 对候选数标记数组进行去重
         * @param highlightNotes 待去重的候选数标记数组
         * @param priority 优先级模式：'first'（保留第一个） | 'last'（保留最后一个，默认）
         * @returns 去重后的候选数标记数组
         * 
         * 去重规则：
         * 1. 相同位置+相同数字的标记只保留一个
         * 2. 样式根据priority参数决定：
         *    - 'last'：以后出现的为准（默认）
         *    - 'first'：以先出现的为准
         */;
        SolverUtils.deduplicateHighlightNotes = function deduplicateHighlightNotes(highlightNotes, priority) {
          if (priority === void 0) {
            priority = 'first';
          }
          var uniqueMap = new Map();

          // 根据优先级决定遍历方向
          var start = priority === 'last' ? 0 : highlightNotes.length - 1;
          var end = priority === 'last' ? highlightNotes.length : -1;
          var step = priority === 'last' ? 1 : -1;
          for (var i = start; i !== end; i += step) {
            var note = highlightNotes[i];
            var key = note.position.row + "-" + note.position.col + "-" + note.value;
            if (!uniqueMap.has(key)) {
              uniqueMap.set(key, _extends({}, note));
            } else {
              // 合并样式（新标记的样式优先）
              var _existing2 = uniqueMap.get(key);
              uniqueMap.set(key, _extends({}, _existing2, note));
            }
          }
          return Array.from(uniqueMap.values());
        }

        /**
         * 获取多个单元格的合集关联单元格（行、列、宫的并集）
         * @param cells 需要查找关联的单元格数组
         * @returns 与任意输入单元格相关联的单元格位置数组（不包含输入单元格）
         */;
        SolverUtils.getUnionRelatedCells = function getUnionRelatedCells(cells) {
          if (cells.length === 0) return [];
          var unionSet = new Set();
          for (var _iterator3 = _createForOfIteratorHelperLoose(cells), _step3; !(_step3 = _iterator3()).done;) {
            var cell = _step3.value;
            // 获取单个单元格的所有关联单元格
            var relatedCells = this.getRelatedCells(cell.row, cell.col);
            for (var _iterator4 = _createForOfIteratorHelperLoose(relatedCells), _step4; !(_step4 = _iterator4()).done;) {
              var pos = _step4.value;
              // 排除输入单元格自身
              if (!this.isPositionInArray(pos, cells)) {
                unionSet.add(pos.row + "," + pos.col);
              }
            }
          }
          return Array.from(unionSet).map(function (str) {
            var _str$split$map2 = str.split(',').map(Number),
              row = _str$split$map2[0],
              col = _str$split$map2[1];
            return {
              row: row,
              col: col
            };
          });
        }
        /**
         * 获取多个单元格的交集关联单元格（行、列、宫的交集）
         * @param cells 需要查找共同关联的单元格数组
         * @returns 同时与所有输入单元格相关联的单元格位置数组（不包含输入单元格）
         */;
        SolverUtils.getIntersectionRelatedCells = function getIntersectionRelatedCells(cells) {
          if (cells.length === 0) return [];

          // 统计每个关联单元格被引用的次数
          var countMap = new Map();
          for (var _iterator5 = _createForOfIteratorHelperLoose(cells), _step5; !(_step5 = _iterator5()).done;) {
            var cell = _step5.value;
            // 获取单个单元格的所有关联单元格
            var relatedCells = this.getRelatedCells(cell.row, cell.col);
            for (var _iterator7 = _createForOfIteratorHelperLoose(relatedCells), _step7; !(_step7 = _iterator7()).done;) {
              var pos = _step7.value;
              // 排除输入单元格自身
              if (!this.isPositionInArray(pos, cells)) {
                var key = pos.row + "," + pos.col;
                var current = countMap.get(key) || {
                  pos: pos,
                  count: 0
                };
                countMap.set(key, {
                  pos: pos,
                  count: current.count + 1
                });
              }
            }
          }

          // 筛选被所有输入单元格引用的位置（count === cells.length）
          var result = [];
          for (var _iterator6 = _createForOfIteratorHelperLoose(countMap.values()), _step6; !(_step6 = _iterator6()).done;) {
            var _step6$value = _step6.value,
              _pos = _step6$value.pos,
              count = _step6$value.count;
            if (count === cells.length) {
              result.push(_pos);
            }
          }
          return result;
        };
        return SolverUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SolveTypes.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6bbd2awislLAaF4DOLERkYH", "SolveTypes", undefined);
      /** 数独题目最少已知数字数（17个） */
      var MIN_GIVENS = exports('MIN_GIVENS', 17);

      /** 数独总方格数（9x9=81） */
      var NR_SQUARES = exports('NR_SQUARES', 81);
      var DIGITS = exports('DIGITS', "123456789");
      var BLANK_CHAR = exports('BLANK_CHAR', "0");

      /**
       * 强类型化的单元格类型
       * - 使用数字字面量联合类型确保类型安全
       * - 通过品牌模式防止类型混淆
       */

      /**
       * 数独棋盘类型
       */

      /**
       * 数独位置类型
       */

      /**
       * 数独高亮区域类型枚举
       * 用于标识数独解题过程中需要高亮显示的区域范围
       */
      var HighlightAreaType = exports('HighlightAreaType', /*#__PURE__*/function (HighlightAreaType) {
        HighlightAreaType["ROW"] = "row";
        HighlightAreaType["COLUMN"] = "column";
        HighlightAreaType["BOX"] = "box";
        HighlightAreaType["COMBINED"] = "combined";
        return HighlightAreaType;
      }({}));

      /**
       * 基础高亮区域类型（排除COMBINED）
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SolvingStep.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "32586n07V5Lq68qP7IeNRIl", "SolvingStep", undefined);
      /**
       * 数独解题步骤详情
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineFinishedRelease.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "9589eKB/RZKXpxoYhz5SyC7", "SpineFinishedRelease", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /** 动画播放完隐藏特效 */
      var SpineFinishedRelease = exports('SpineFinishedRelease', (_dec = ccclass('SpineFinishedRelease'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineFinishedRelease, _Component);
        function SpineFinishedRelease() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "isDestroy", _descriptor, _assertThisInitialized(_this));
          _this.spine = void 0;
          _this.resPath = null;
          return _this;
        }
        var _proto = SpineFinishedRelease.prototype;
        /** 设置路径 */
        _proto.setResPath = function setResPath(path) {
          this.resPath = path;
        };
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          this.spine = this.getComponent(sp.Skeleton);
          this.spine.setCompleteListener(this.onSpineComplete.bind(this));
          if (this.resPath) {
            oops.res.load(this.resPath, sp.SkeletonData, function (err, sd) {
              if (err) {
                console.error("\u52A0\u8F7D\u3010" + _this2.resPath + "\u3011\u7684 SPINE \u8D44\u6E90\u4E0D\u5B58\u5728");
                return;
              }
              _this2.spine.skeletonData = sd;
              _this2.spine.setAnimation(0, "animation", false);
            });
          } else {
            this.spine.setAnimation(0, "animation", false);
          }
        };
        _proto.onSpineComplete = function onSpineComplete() {
          if (this.isDestroy) {
            this.node.destroy();
          } else {
            this.node.removeFromParent();
          }
        };
        return SpineFinishedRelease;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isDestroy", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StatisticsManager.ts", ['cc', './Config.ts', './GameStatistics.ts', './Oops.ts'], function (exports) {
  var cclegacy, SudokuDifficulty, DifficultyStatisticsImpl, oops;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      SudokuDifficulty = module.SudokuDifficulty;
    }, function (module) {
      DifficultyStatisticsImpl = module.DifficultyStatisticsImpl;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65b96vyk3BE8LRsdl6BlnCV", "StatisticsManager", undefined);

      /**
       * 游戏统计管理器
       * 
       * 功能：
       * 1. 记录各难度下的游戏统计数据
       * 2. 提供统计数据的读取接口
       * 3. 支持按难度重置统计数据
       * 4. 自动计算胜率、平均用时等衍生数据
       */
      var StatisticsManager = exports('StatisticsManager', /*#__PURE__*/function () {
        function StatisticsManager() {}

        /**
         * 获取 StatisticsManager 单例实例
         * @returns StatisticsManager 实例
         */
        StatisticsManager.getInstance = function getInstance() {
          if (!StatisticsManager.instance) {
            StatisticsManager.instance = new StatisticsManager();
          }
          return StatisticsManager.instance;
        }

        // ========== 公开方法 ==========

        /**
         * 获取完整统计数据
         * @returns 统计数据对象
         */;
        var _proto = StatisticsManager.prototype;
        _proto.getStatistics = function getStatistics() {
          var statsStr = oops.storage.get(StatisticsManager.STATS_STORAGE_KEY);
          return statsStr ? JSON.parse(statsStr) : this.getDefaultStatistics();
        }

        /**
          * 更新游戏统计数据
          * @param gameData 游戏数据
          * @param isWin 是否赢游戏
          */;
        _proto.updateStatistics = function updateStatistics(gameData, isWin) {
          var stats = this.getStatistics();
          var diff = gameData.displayDifficulty;
          var diffStats = stats.difficultyStats[diff];

          // 更新已玩游戏次数（无论是否完成）
          diffStats.gamesPlayed++;
          if (isWin) {
            // 仅当游戏完成时更新以下数据
            diffStats.gamesCompleted++;
            diffStats.totalTime += gameData.timeElapsed;

            // 更新最快用时（仅计算完成的游戏）
            if (gameData.timeElapsed < diffStats.bestTime || diffStats.bestTime === 0) {
              diffStats.bestTime = gameData.timeElapsed;
            }

            // 更新无误通关
            if (gameData.errorCount === 0) {
              diffStats.perfectGames++;
            }

            // 更新连胜数据（仅计算完成的游戏）
            diffStats.currentStreak++;
            if (diffStats.currentStreak > diffStats.longestStreak) {
              diffStats.longestStreak = diffStats.currentStreak;
            }
          } else {
            // 游戏未完成时重置当前连胜
            diffStats.currentStreak = 0;
          }
          diffStats.winRate = this.getWinRate(diffStats.gamesPlayed, diffStats.gamesCompleted);
          diffStats.averageTime = this.getAverageTime(diffStats.gamesCompleted, diffStats.totalTime);
          this.saveStatistics(stats);
        }

        /**
         * 重置指定难度的统计数据
         * @param difficulty 要重置的难度
         */;
        _proto.resetDifficultyStats = function resetDifficultyStats(difficulty) {
          var stats = this.getStatistics();
          stats.difficultyStats[difficulty] = this.getDefaultDifficultyStats();
          this.saveStatistics(stats);
        }

        /**
         * 重置所有统计数据
         */;
        _proto.resetAllStats = function resetAllStats() {
          oops.storage.set(StatisticsManager.STATS_STORAGE_KEY, JSON.stringify(this.getDefaultStatistics()));
        }

        // ========== 私有方法 ==========

        /**
         * 获取默认统计数据
         * @returns 初始化的统计数据对象
         */;
        _proto.getDefaultStatistics = function getDefaultStatistics() {
          var _difficultyStats;
          return {
            totalGames: 0,
            totalCompleted: 0,
            difficultyStats: (_difficultyStats = {}, _difficultyStats[SudokuDifficulty.Novice] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Beginner] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Elementary] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Intermediate] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Advanced] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Expert] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Master] = this.getDefaultDifficultyStats(), _difficultyStats[SudokuDifficulty.Extreme] = this.getDefaultDifficultyStats(), _difficultyStats),
            lastUpdated: this.getTodayString()
          };
        }

        /**
         * 获取默认难度统计数据
         * @returns 初始化的难度统计数据
         */;
        _proto.getDefaultDifficultyStats = function getDefaultDifficultyStats() {
          return new DifficultyStatisticsImpl();
        }

        /**
         * 保存统计数据
         * @param stats 统计数据对象
         */;
        _proto.saveStatistics = function saveStatistics(stats) {
          stats.lastUpdated = this.getTodayString();
          oops.storage.set(StatisticsManager.STATS_STORAGE_KEY, JSON.stringify(stats));
        }

        /**
         * 获取当前日期字符串
         * @returns YYYY-MM-DD格式的日期字符串
         */;
        _proto.getTodayString = function getTodayString() {
          return new Date().toISOString().split('T')[0];
        };
        _proto.getWinRate = function getWinRate(gamesPlayed, gamesCompleted) {
          return gamesPlayed > 0 ? Math.round(gamesCompleted / gamesPlayed * 100) : 0;
        };
        _proto.getAverageTime = function getAverageTime(gamesCompleted, totalTime) {
          return gamesCompleted > 0 ? Math.round(totalTime / gamesCompleted) : 0;
        };
        return StatisticsManager;
      }());
      StatisticsManager.instance = void 0;
      StatisticsManager.STATS_STORAGE_KEY = 'sudoku_statistics_v2';
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StatisticsPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './GameLogic.ts', './StatisticsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, SudokuDifficulty, GameLogic, StatisticsManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SudokuDifficulty = module.SudokuDifficulty;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      StatisticsManager = module.StatisticsManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "a54bfsJ3TxBg7sMRH+kEx6i", "StatisticsPage", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var StatisticsPage = exports('StatisticsPage', (_dec = ccclass('StatisticsPage'), _dec2 = property({
        type: Label,
        tooltip: "已玩游戏次数",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "已通关游戏次数",
        visible: true
      }), _dec4 = property({
        type: Label,
        tooltip: "胜率",
        visible: true
      }), _dec5 = property({
        type: Label,
        tooltip: "无误通关次数",
        visible: true
      }), _dec6 = property({
        type: Label,
        tooltip: "最快用时",
        visible: true
      }), _dec7 = property({
        type: Label,
        tooltip: "平均用时",
        visible: true
      }), _dec8 = property({
        type: Label,
        tooltip: "当前连胜次数",
        visible: true
      }), _dec9 = property({
        type: Label,
        tooltip: "最长连胜次数",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StatisticsPage, _Component);
        function StatisticsPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "gamesPlayedLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gamesCompletedLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "winRateLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "perfectGamesLabel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bestTimeLabel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "avgTimeLabel", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "currentStreakLabel", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "longestStreakLabel", _descriptor8, _assertThisInitialized(_this));
          _this.difficulty = SudokuDifficulty.Beginner;
          return _this;
        }
        var _proto = StatisticsPage.prototype;
        _proto.onLoad = function onLoad() {
          this.updateUI(this.difficulty);
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.updateUI = function updateUI(difficulty) {
          console.log("刷新统计UI", difficulty);
          var statsManager = StatisticsManager.getInstance();
          // 获取基础数据
          var stats = statsManager.getStatistics().difficultyStats[difficulty];
          this.gamesPlayedLabel.string = stats.gamesPlayed.toString();
          this.gamesCompletedLabel.string = stats.gamesCompleted.toString();
          // 显示胜率（调用getWinRate）
          this.winRateLabel.string = stats.winRate + "%";
          this.perfectGamesLabel.string = stats.perfectGames.toString();
          this.bestTimeLabel.string = GameLogic.formatTimeDisplay(stats.bestTime);
          // 显示平均用时（调用getAverageTime）
          this.avgTimeLabel.string = GameLogic.formatTimeDisplay(stats.averageTime);
          this.currentStreakLabel.string = stats.currentStreak.toString();
          this.longestStreakLabel.string = stats.longestStreak.toString();
        };
        _proto.onToggle = function onToggle(event, customEventData) {
          var difficulty = customEventData;
          if (difficulty === this.difficulty) {
            return;
          }
          this.difficulty = difficulty;
          this.updateUI(difficulty);
        };
        _proto.onResetDifficultyStats = function onResetDifficultyStats(event, customEventData) {
          StatisticsManager.getInstance().resetDifficultyStats(this.difficulty);
          this.updateUI(this.difficulty);
        };
        return StatisticsPage;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gamesPlayedLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gamesCompletedLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "winRateLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "perfectGamesLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bestTimeLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "avgTimeLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "currentStreakLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "longestStreakLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StorageManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, sys;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed226gLF85Oyr+WhA9TJZLX", "StorageManager", undefined);
      /** 
       * 本地存储 
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037957&doc_id=2873565
       */
      var StorageManager = exports('StorageManager', /*#__PURE__*/function () {
        function StorageManager() {
          this.id = null;
          this.iss = null;
        }
        var _proto = StorageManager.prototype;
        /** 本地存储数据加密方式初始化 */
        _proto.init = function init(iis) {
          this.iss = iis;
        }

        /**
         * 设置用户唯一标识
         * @param id 
         */;
        _proto.setUser = function setUser(id) {
          this.id = id;
        }

        /**
         * 存储本地数据
         * @param key 存储key
         * @param value 存储值
         * @returns 
         */;
        _proto.set = function set(key, value) {
          var keywords = this.getKey(key);
          if (null == key) {
            console.error("存储的key不能为空");
            return;
          }
          if (this.encrypted) {
            keywords = this.iss.encryptKey(keywords);
          }
          if (null == value) {
            console.warn("存储的值为空，则直接移除该存储");
            this.remove(key);
            return;
          }
          if (typeof value === 'function') {
            console.error("储存的值不能为方法");
            return;
          }
          if (typeof value === 'object') {
            try {
              value = JSON.stringify(value);
            } catch (e) {
              console.error("\u89E3\u6790\u5931\u8D25\uFF0Cstr = " + value);
              return;
            }
          } else if (typeof value === 'number') {
            value = value + "";
          }
          if (this.encrypted) {
            value = this.iss.encrypt(value);
          }
          sys.localStorage.setItem(keywords, value);
        }

        /**
         * 获取指定关键字的数据
         * @param key          获取的关键字
         * @param defaultValue 获取的默认值
         * @returns 
         */;
        _proto.get = function get(key, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = "";
          }
          if (null == key) {
            console.error("存储的key不能为空");
            return null;
          }
          key = this.getKey(key);
          if (this.encrypted) {
            key = this.iss.encryptKey(key);
          }
          var str = sys.localStorage.getItem(key);
          if (null != str && '' !== str && this.encrypted) {
            str = this.iss.decrypt(str);
          }
          if (null === str) {
            return defaultValue;
          }
          return str;
        }

        /** 获取指定关键字的数值 */;
        _proto.getNumber = function getNumber(key, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = 0;
          }
          var r = this.get(key);
          if (r == "0") {
            return Number(r);
          }
          return Number(r) || defaultValue;
        }

        /** 获取指定关键字的布尔值 */;
        _proto.getBoolean = function getBoolean(key) {
          var r = this.get(key);
          return r.toLowerCase() === 'true';
        }

        /** 获取指定关键字的JSON对象 */;
        _proto.getJson = function getJson(key, defaultValue) {
          var r = this.get(key);
          return r && JSON.parse(r) || defaultValue;
        }

        /**
         * 删除指定关键字的数据
         * @param key 需要移除的关键字
         * @returns 
         */;
        _proto.remove = function remove(key) {
          if (null == key) {
            console.error("存储的key不能为空");
            return;
          }
          var keywords = this.getKey(key);
          if (this.encrypted) {
            keywords = this.iss.encryptKey(keywords);
          }
          sys.localStorage.removeItem(keywords);
        }

        /** 清空整个本地存储 */;
        _proto.clear = function clear() {
          sys.localStorage.clear();
        }

        /** 获取数据分组关键字 */;
        _proto.getKey = function getKey(key) {
          if (this.id == null || this.id == "") {
            return key;
          }
          return this.id + "_" + key;
        };
        _createClass(StorageManager, [{
          key: "encrypted",
          get: /** 数据加密开关 */
          function get() {
            // return !PREVIEW;
            return false;
          }
        }]);
        return StorageManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StorageSecurityCrypto.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      // import { oops } from "../../Oops";
      cclegacy._RF.push({}, "fbbbdioMCNOmI7KMEU46FfN", "StorageSecurityCrypto", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StorageSecuritySimple.ts", ['cc', './Oops.ts'], function (exports) {
  var cclegacy, oops;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "386e3+fu+RJB5VSgow0kwS4", "StorageSecuritySimple", undefined);
      /** 
       * 本地存储加密
       * 优点：
       * 1、代码体积小
       * 2、不依赖第三方库，使用这套方案可删除 
       *    StorageSecurityCrypto.ts
       *    EncryptUtil.ts
       *    package.json 中的crypto依赖减小包体
       * 
       * 缺点：
       * 1、加密强度小
       */
      var StorageSecuritySimple = exports('StorageSecuritySimple', /*#__PURE__*/function () {
        function StorageSecuritySimple() {
          this.secretkey = null;
          var key = oops.config.game.localDataKey;
          var iv = oops.config.game.localDataIv;
          this.secretkey = key + iv;
        }
        var _proto = StorageSecuritySimple.prototype;
        _proto.encrypt = function encrypt(str) {
          var er = '';
          for (var i = 0; i < str.length; i++) {
            er += String.fromCharCode(str.charCodeAt(i) ^ this.secretkey.charCodeAt(i % this.secretkey.length));
          }
          return er;
        };
        _proto.decrypt = function decrypt(str) {
          var dr = '';
          for (var i = 0; i < str.length; i++) {
            dr += String.fromCharCode(str.charCodeAt(i) ^ this.secretkey.charCodeAt(i % this.secretkey.length));
          }
          return dr;
        };
        _proto.encryptKey = function encryptKey(str) {
          return this.encrypt(str);
        };
        return StorageSecuritySimple;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StoredGameData.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "37fa1NPsYZJeLUIZFfJjKfn", "StoredGameData", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringFormat.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85fe8Gc6h5Ava+JsdbBs8cR", "StringFormat", undefined);
      /**
       * 数值格式化函数, 通过语义解析自动设置值的范围
       *     //整数
       * 1:def(0)//显示一个默认值
       */
      var StringFormat = /*#__PURE__*/function () {
        function StringFormat() {}
        var _proto = StringFormat.prototype;
        _proto.deal = function deal(value, format) {
          if (format === '') return value;
          format = format.toLowerCase().trim(); // 不区分大小
          var match_func = format.match(/^[a-z|A-Z]+/gi); // 匹配到 format 中的 函数名
          var match_num = format.match(/\d+$/gi); // 匹配到 format 中的参数
          var func = '';
          var num = 0;
          var res = '';
          if (match_func) func = match_func[0];
          if (match_num) num = parseInt(match_num[0]);
          if (typeof value == 'number') {
            switch (func) {
              case 'int':
                res = this["int"](value);
                break;
              case 'fix':
                res = this.fix(value, num);
                break;
              case 'kmbt':
                res = this.KMBT(value);
                break;
              case 'per':
                res = this.per(value, num);
                break;
              case 'sep':
                res = this.sep(value);
                break;
            }
          } else {
            switch (func) {
              case 'limit':
                res = this.limit(value, num);
                break;
            }
            res = value;
          }
          return res;
        }

        // 将数字按分号显示
        ;

        _proto.sep = function sep(value) {
          var num = Math.round(value).toString();
          return num.replace(new RegExp('(\\d)(?=(\\d{3})+$)', 'ig'), "$1,");
        }

        // 将数字按分显示 00:00 显示 （ms制）
        ;

        _proto.time_m = function time_m(value) {
          //todo
        }

        // 将数字按秒显示 00:00:00 显示 （ms制）
        ;

        _proto.time_s = function time_s(value) {
          //todo
        }

        // 将数字按 0:00:00:000 显示 （ms制）
        ;

        _proto.time_ms = function time_ms(value) {
          //todo
        }

        // 将时间戳显示为详细的内容
        ;

        _proto.timeStamp = function timeStamp(value) {
          //todo
          return new Date(value).toString();
        }

        /** [value:int] 将取值0~1 变成 1~100,可以指定修饰的小数位数 */;
        _proto.per = function per(value, fd) {
          return Math.round(value * 100).toFixed(fd);
        }

        /** [value:int] 将取值变成整数 */;
        _proto["int"] = function int(value) {
          return Math.round(value);
        }

        /** [value:fix2]数值转换为小数*/;
        _proto.fix = function fix(value, fd) {
          return value.toFixed(fd);
        }

        /** [value:limit3]字符串长度限制 */;
        _proto.limit = function limit(value, count) {
          return value.substring(0, count);
        }

        /** 将数字缩短显示为KMBT单位 大写,目前只支持英文 */;
        _proto.KMBT = function KMBT(value, lang) {
          //10^4=万, 10^8=亿,10^12=兆,10^16=京，
          var counts = [1000, 1000000, 1000000000, 1000000000000];
          var units = ['', 'K', 'M', 'B', 'T'];
          return this.compressUnit(value, counts, units, 2);
        }

        //压缩任意单位的数字，后缀加上单位文字
        ;

        _proto.compressUnit = function compressUnit(value, valueArr, unitArr, fixNum) {
          if (fixNum === void 0) {
            fixNum = 2;
          }
          var counts = valueArr;
          var units = unitArr;
          var res = "";
          var index;
          for (index = 0; index < counts.length; index++) {
            var e = counts[index];
            if (value < e) {
              if (index > 0) {
                res = (value / counts[index - 1]).toFixed(fixNum);
              } else {
                res = value.toFixed(0);
              }
              break;
            }
          }
          return res + units[index];
        };
        return StringFormat;
      }();
      /**格式化处理函数 */
      var StringFormatFunction = exports('StringFormatFunction', new StringFormat());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringUtil.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "aa8435LSBtAR5HPsje6IJ2w", "StringUtil", undefined);
      /** 字符串工具 */
      var StringUtil = exports('StringUtil', /*#__PURE__*/function () {
        function StringUtil() {}
        /** 获取一个唯一标识的字符串 */
        StringUtil.guid = function guid() {
          var guid = "";
          for (var i = 1; i <= 32; i++) {
            var n = Math.floor(Math.random() * 16.0).toString(16);
            guid += n;
            if (i == 8 || i == 12 || i == 16 || i == 20) guid += "-";
          }
          return guid;
        }

        /**
         * 转美式计数字符串
         * @param value 数字
         * @example
         * 123456789 = 123,456,789
         */;
        StringUtil.numberTotPermil = function numberTotPermil(value) {
          return value.toLocaleString();
        }

        /**
         * 转英文单位计数
         * @param value 数字
         * @param fixed 保留小数位数
         * @example
         * 12345 = 12.35K
         */;
        StringUtil.numberToThousand = function numberToThousand(value, fixed) {
          if (fixed === void 0) {
            fixed = 2;
          }
          var k = 1000;
          var sizes = ['', 'K', 'M', 'G'];
          if (value < k) {
            return value.toString();
          } else {
            var i = Math.floor(Math.log(value) / Math.log(k));
            var r = value / Math.pow(k, i);
            return r.toFixed(fixed) + sizes[i];
          }
        }

        /**
         * 转中文单位计数
         * @param value 数字
         * @param fixed 保留小数位数
         * @example
         * 12345 = 1.23万
         */;
        StringUtil.numberToTenThousand = function numberToTenThousand(value, fixed) {
          if (fixed === void 0) {
            fixed = 2;
          }
          var k = 10000;
          var sizes = ['', '万', '亿', '万亿'];
          if (value < k) {
            return value.toString();
          } else {
            var i = Math.floor(Math.log(value) / Math.log(k));
            return (value / Math.pow(k, i)).toFixed(fixed) + sizes[i];
          }
        }

        /**
         * "," 分割字符串成数组
         * @param str 字符串
         */;
        StringUtil.stringToArray1 = function stringToArray1(str) {
          if (str == "") {
            return [];
          }
          return str.split(",");
        }

        /**
         * "|" 分割字符串成数组
         * @param str 字符串
         */;
        StringUtil.stringToArray2 = function stringToArray2(str) {
          if (str == "") {
            return [];
          }
          return str.split("|");
        }

        /**
         * ":" 分割字符串成数组
         * @param str 字符串
         */;
        StringUtil.stringToArray3 = function stringToArray3(str) {
          if (str == "") {
            return [];
          }
          return str.split(":");
        }

        /**
         * ";" 分割字符串成数组
         * @param str 字符串
         */;
        StringUtil.stringToArray4 = function stringToArray4(str) {
          if (str == "") {
            return [];
          }
          return str.split(";");
        }

        /**
         * 字符串截取
         * @param str     字符串
         * @param n       截取长度
         * @param showdot 是否把截取的部分用省略号代替
         */;
        StringUtil.sub = function sub(str, n, showdot) {
          if (showdot === void 0) {
            showdot = false;
          }
          var r = /[^\x00-\xff]/g;
          if (str.replace(r, "mm").length <= n) {
            return str;
          }
          var m = Math.floor(n / 2);
          for (var i = m; i < str.length; i++) {
            if (str.substr(0, i).replace(r, "mm").length >= n) {
              if (showdot) {
                return str.substr(0, i) + "...";
              } else {
                return str.substr(0, i);
              }
            }
          }
          return str;
        }

        /**
         * 计算字符串长度，中文算两个字节
         * @param str 字符串
         */;
        StringUtil.stringLen = function stringLen(str) {
          var realLength = 0,
            len = str.length,
            charCode = -1;
          for (var i = 0; i < len; i++) {
            charCode = str.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128) realLength += 1;else realLength += 2;
          }
          return realLength;
        }

        /**
         * 是否为空
         * @param str
         */;
        StringUtil.IsEmpty = function IsEmpty(str) {
          return str == null || str == undefined || str.length == 0;
        }

        /**
         * 参数替换
         * @param  str
         * @param  rest
         *
         * @example
         *
         * var str:string = "here is some info '{0}' and {1}";
         * StringUtil.substitute(str, 15.4, true);
         *
         * "here is some info '15.4' and true"
         */;
        StringUtil.substitute = function substitute(str) {
          if (str == null) return '';
          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }
          var len = rest.length;
          var args;
          if (len == 1 && rest[0] instanceof Array) {
            args = rest[0];
            len = args.length;
          } else {
            args = rest;
          }
          for (var i = 0; i < len; i++) {
            str = str.replace(new RegExp("\\{" + i + "\\}", "g"), args[i]);
          }
          return str;
        };
        return StringUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StructuredDailyChallengeHistory.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "75613fhGk9GzJtVUezAE43b", "StructuredDailyChallengeHistory", undefined); // interfaces/StructuredDailyChallengeHistory.ts
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StructuredHistory.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a1b81F+vnND+Kf9LTtFcMCS", "StructuredHistory", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SuccessPopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIConfig.ts', './GameLogic.ts', './StatisticsManager.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, UIID, GameLogic, StatisticsManager, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      StatisticsManager = module.StatisticsManager;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "46a03Cxo89ISrit8elP4vjV", "SuccessPopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SuccessPopup = exports('SuccessPopup', (_dec = ccclass('SuccessPopup'), _dec2 = property({
        type: Label,
        tooltip: "分数",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "难度",
        visible: true
      }), _dec4 = property({
        type: Label,
        tooltip: "耗时",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SuccessPopup, _Component);
        function SuccessPopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "scoreLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "levelLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "timeLabel", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SuccessPopup.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.onAdded = function onAdded(params) {
          //score: number, difficulty: string, time: number
          console.log("params->", params);
          this.scoreLabel.string = params.gameData.score.toString();
          this.levelLabel.string = params.difficulty;
          this.timeLabel.string = GameLogic.formatTimeDisplay(params.gameData.timeElapsed);
          StatisticsManager.getInstance().updateStatistics(params.gameData, true);
        };
        _proto.onStartNewGame = function onStartNewGame() {
          oops.gui.open(UIID.LevelPopup);
        };
        _proto.onBack = function onBack() {
          oops.gui.remove(UIID.SuccessPopup);
          oops.gui.replaceAsync(UIID.Game, UIID.Lobby);
        };
        return SuccessPopup;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scoreLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "levelLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "timeLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sudoku.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        board_grid_to_string: board_grid_to_string,
        board_string_to_grid: board_string_to_grid,
        generate: generate,
        get_candidates: get_candidates,
        print_board: print_board,
        solve: solve,
        validate_board: validate_board
      });
      cclegacy._RF.push({}, "37aafd7LdBHm4OTb3XNBZfW", "sudoku", undefined);
      /* 
          Sudoku.ts
          ---------
           A Sudoku puzzle generator and solver TypeScript library.
      */
      /** 从方格标识符（如 "A1"）到候选数字字符串的映射 */
      /** 数独允许的数字（1-9） */
      var DIGITS = exports('DIGITS', "123456789");

      /** 行标签（A-I） */
      var ROWS = "ABCDEFGHI";

      /** 列标签（同DIGITS） */
      var COLS = DIGITS;

      /** 所有方格的ID数组（如 ["A1", "A2", ..., "I9"]） */
      var SQUARES;

      /** 所有单位（行、列、宫）的集合，每个单位是方格ID的数组 */
      var UNITS;

      /** 方格到其所属单位的映射（每个单位是方格ID数组） */
      var SQUARE_UNITS_MAP;

      /** 方格到其关联方格（同行/列/宫）的映射 */
      var SQUARE_PEERS_MAP;

      /** 数独题目最少已知数字数（17个） */
      var MIN_GIVENS = 17;

      /** 数独总方格数（9x9=81） */
      var NR_SQUARES = 81;

      /** 难度等级与已知数字数的映射 */
      var DIFFICULTY = {
        easy: 62,
        // 简单
        medium: 53,
        // 中等
        hard: 44,
        // 困难
        "very-hard": 35,
        // 极难
        insane: 26,
        // 疯狂
        inhuman: 17 // 非人类
      };

      /** 空白格占位符 */
      var BLANK_CHAR = exports('BLANK_CHAR', "0");

      /** 空白数独板（81个0） */
      var BLANK_BOARD = exports('BLANK_BOARD', "000000000" + "000000000" + "000000000" + "000000000" + "000000000" + "000000000" + "000000000" + "000000000" + "000000000");

      /**
       * 初始化数独库：
       * 1. 生成所有方格ID（SQUARES）
       * 2. 计算所有单位（UNITS）
       * 3. 建立方格到单位/关联方格的映射
       */
      function initialize() {
        SQUARES = _cross(ROWS, COLS); // 生成所有方格ID（如 "A1"），长度为9*9 = 81
        UNITS = _get_all_units(ROWS, COLS); // 计算所有行、列、宫，长度为 9+9+9 = 27
        SQUARE_UNITS_MAP = _get_square_units_map(SQUARES, UNITS); // 每个方格对应的行、列、宫（key为单元格下标，值为2维数组，分别是行数组、列数组、宫数组，数组的值都是对应的单元格下标）
        SQUARE_PEERS_MAP = _get_square_peers_map(SQUARES, SQUARE_UNITS_MAP); // key为单元格下标，如A1，值为该单元格对应的行、列、宫剩下数据下标组成的数组，长度为9+6+6-1=20
      }

      //────────────────────────────────────────────────────────────────────────────
      // Core API Functions
      //────────────────────────────────────────────────────────────────────────────

      /**
       * 生成指定难度的数独题目
       * @param difficulty 难度等级（字符串或数字，默认"easy"）
       * @param unique 是否要求唯一解（暂未实现）
       * @returns 81字符的题目字符串（如 "530070000600195000..."）
       */
      function generate(difficulty, unique) {
        if (difficulty === void 0) {
          difficulty = "easy";
        }
        // 如果难度是一个字符串或未定义，使用难度映射将其转换为一个数字。
        if (typeof difficulty === "string" || typeof difficulty === "undefined") {
          difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;
        }

        // 强制难度介于MIN_GIVENS和NR_SQUARES之间(含)。
        difficulty = _force_range(difficulty, NR_SQUARES + 1, MIN_GIVENS);

        // 创建一个空白板
        var blank_board = BLANK_CHAR.repeat(NR_SQUARES);
        var candidates = _get_candidates_map(blank_board);
        if (!candidates) {
          throw new Error("Failed to generate candidate map for blank board.");
        }

        // 迭代经过洗牌的方块列表.
        for (var _i = 0, _shuffle2 = _shuffle(SQUARES); _i < _shuffle2.length; _i++) {
          var _square = _shuffle2[_i];
          var rand_candidate_idx = _rand_range(candidates[_square].length);
          var rand_candidate = candidates[_square][rand_candidate_idx];
          if (!_assign(candidates, _square, rand_candidate)) {
            break;
          }

          // 建立一个只有一个候选人的正方形列表.
          var single_candidates = [];
          for (var _iterator = _createForOfIteratorHelperLoose(SQUARES), _step; !(_step = _iterator()).done;) {
            var _sq = _step.value;
            if (candidates[_sq].length === 1) {
              single_candidates.push(candidates[_sq]);
            }
          }

          // 如果我们至少有“难度”给定值和足够的唯一数字，请构建棋盘。
          if (single_candidates.length >= Number(difficulty) && _strip_dups(single_candidates).length >= 8) {
            var board = "";
            var givens_idxs = [];
            for (var i = 0; i < SQUARES.length; i++) {
              var sq = SQUARES[i];
              if (candidates[sq].length === 1) {
                board += candidates[sq];
                givens_idxs.push(i);
              } else {
                board += BLANK_CHAR;
              }
            }

            // 如果我们的给定值比预期的要多，请删除随机给定值，直到完全剩余“困难”为止。
            var nr_givens = givens_idxs.length;
            if (nr_givens > Number(difficulty)) {
              var shuffledGivens = _shuffle(givens_idxs);
              for (var _i2 = 0; _i2 < nr_givens - Number(difficulty); _i2++) {
                var target = shuffledGivens[_i2];
                board = board.substring(0, target) + BLANK_CHAR + board.substring(target + 1);
              }
            }

            // 如果该板是可解的，则将其返回。
            if (solve(board)) {
              return board;
            }
          }
        }

        // 如果没有生成有效的电路板，请再次迭代。
        return generate(difficulty);
      }

      /**
      * 解决数独谜题。
      *
      * @param board -代表谜题的81个字符串。
      * @param reverse-是否按相反顺序搜索解决方案空间。默认为假。
      * @returns 已解决的棋盘为81个字符的字符串，如果不存在解决方案，则返回false。
      * @throws 如果谜题无效或给予的数字太少。
      */
      function solve(board, reverse) {
        if (reverse === void 0) {
          reverse = false;
        }
        var report = validate_board(board);
        if (report !== true) {
          throw new Error(report);
        }

        // 计算谜题已填入的数字数量
        var nr_givens = 0;
        for (var i = 0; i < board.length; i++) {
          if (board[i] !== BLANK_CHAR && _in(board[i], DIGITS)) {
            nr_givens++;
          }
        }
        // 数量小于最小可解题数
        if (nr_givens < MIN_GIVENS) {
          throw new Error("Too few givens. Minimum givens is " + MIN_GIVENS);
        }
        var candidates = _get_candidates_map(board);
        var result = _search(candidates, reverse);
        if (result) {
          var solution = "";
          for (var _square2 in result) {
            solution += result[_square2];
          }
          return solution;
        }
        return false;
      }

      /**
      * 以网格形式返回每个方格的所有可能候选项。
      *
      * @param board -81个字符的board字符串。
      * @returns  report每个平方的候选字符串的二维数组，如果遇到矛盾，则返回false。
      * @throws 如果谜题无效。
      */
      function get_candidates(board) {
        var report = validate_board(board);
        if (report !== true) {
          throw new Error(report);
        }
        var candidates_map = _get_candidates_map(board);
        if (!candidates_map) {
          return false;
        }
        var rows = [];
        var cur_row = [];
        var i = 0;
        for (var _square3 in candidates_map) {
          cur_row.push(candidates_map[_square3]);
          if (i % 9 === 8) {
            rows.push(cur_row);
            cur_row = [];
          }
          i++;
        }
        return rows;
      }

      //────────────────────────────────────────────────────────────────────────────
      // Internal (helper) Functions
      //────────────────────────────────────────────────────────────────────────────

      /**
       * 生成所有方格的候选值映射表
       * @param board - 81字符的数独板字符串
       * @returns 候选值映射表，若出现矛盾返回false
       */
      function _get_candidates_map(board) {
        var report = validate_board(board);
        if (report !== true) {
          throw new Error(report);
        }
        var candidate_map = {};
        var squares_values_map = _get_square_vals_map(board);

        // 初始化所有方格的候选值为1-9
        for (var _iterator2 = _createForOfIteratorHelperLoose(SQUARES), _step2; !(_step2 = _iterator2()).done;) {
          var _square5 = _step2.value;
          candidate_map[_square5] = DIGITS;
        }

        // 对已填数字进行约束传播
        for (var _square4 in squares_values_map) {
          var val = squares_values_map[_square4];
          if (_in(val, DIGITS)) {
            var new_candidates = _assign(candidate_map, _square4, val);
            if (!new_candidates) {
              return false;
            }
          }
        }
        return candidate_map;
      }

      /**
       * 递归搜索可行解
       * @param candidates - 当前候选值映射表
       * @param reverse - 是否反向搜索（默认正向）
       * @returns 解出的候选值映射表，无解时返回false
       */
      function _search(candidates, reverse) {
        if (reverse === void 0) {
          reverse = false;
        }
        if (!candidates) {
          return false;
        }

        // 如果每个方格都已解决，则返回候选地图。
        var max_nr_candidates = 0;
        for (var _iterator3 = _createForOfIteratorHelperLoose(SQUARES), _step3; !(_step3 = _iterator3()).done;) {
          var _square6 = _step3.value;
          var nr_candidates = candidates[_square6].length;
          if (nr_candidates > max_nr_candidates) {
            max_nr_candidates = nr_candidates;
          }
        }
        if (max_nr_candidates === 1) {
          return candidates;
        }

        // 选择候选项最少（大于1）的空白方块。
        var min_nr_candidates = 10;
        var min_candidates_square = null;
        for (var _iterator4 = _createForOfIteratorHelperLoose(SQUARES), _step4; !(_step4 = _iterator4()).done;) {
          var _square7 = _step4.value;
          var _nr_candidates = candidates[_square7].length;
          if (_nr_candidates < min_nr_candidates && _nr_candidates > 1) {
            min_nr_candidates = _nr_candidates;
            min_candidates_square = _square7;
          }
        }
        if (min_candidates_square === null) {
          return false;
        }
        var min_candidates = candidates[min_candidates_square];
        if (!reverse) {
          for (var _iterator5 = _createForOfIteratorHelperLoose(min_candidates), _step5; !(_step5 = _iterator5()).done;) {
            var val = _step5.value;
            // 使用SON进行深拷贝候选项（对于我们的目的来说是可以接受的）
            var candidates_copy = JSON.parse(JSON.stringify(candidates));
            var candidates_next = _search(_assign(candidates_copy, min_candidates_square, val), reverse);
            if (candidates_next) {
              return candidates_next;
            }
          }
        } else {
          for (var vi = min_candidates.length - 1; vi >= 0; vi--) {
            var _val = min_candidates[vi];
            var _candidates_copy = JSON.parse(JSON.stringify(candidates));
            var _candidates_next = _search(_assign(_candidates_copy, min_candidates_square, _val), reverse);
            if (_candidates_next) {
              return _candidates_next;
            }
          }
        }
        return false;
      }

      /**
       * 分配值并传播约束
       * @param candidates - 候选值映射表
       * @param square - 目标方格ID
       * @param val - 要分配的值
       * @returns 更新后的映射表，矛盾时返回false
       */
      function _assign(candidates, square, val) {
        var other_vals = candidates[square].replace(val, "");
        for (var _iterator6 = _createForOfIteratorHelperLoose(other_vals), _step6; !(_step6 = _iterator6()).done;) {
          var other_val = _step6.value;
          var candidates_next = _eliminate(candidates, square, other_val);
          if (!candidates_next) {
            return false;
          }
        }
        return candidates;
      }

      /**
       * 排除同行/列/宫候选数并检查冲突
       * @param candidates - 候选值映射表
       * @param square - 目标方格ID
       * @param val - 要消除的值
       * @returns 更新后的映射表，矛盾时返回false
       */
      function _eliminate(candidates, square, val) {
        if (!_in(val, candidates[square])) {
          return candidates;
        }
        candidates[square] = candidates[square].replace(val, "");
        var nr_candidates = candidates[square].length;
        if (nr_candidates === 1) {
          var target_val = candidates[square];
          for (var _iterator7 = _createForOfIteratorHelperLoose(SQUARE_PEERS_MAP[square]), _step7; !(_step7 = _iterator7()).done;) {
            var peer = _step7.value;
            var candidates_new = _eliminate(candidates, peer, target_val);
            if (!candidates_new) {
              return false;
            }
          }
        } else if (nr_candidates === 0) {
          return false;
        }

        // 检查单位内该值是否唯一可填
        for (var _iterator8 = _createForOfIteratorHelperLoose(SQUARE_UNITS_MAP[square]), _step8; !(_step8 = _iterator8()).done;) {
          var unit = _step8.value;
          var val_places = [];
          for (var _iterator9 = _createForOfIteratorHelperLoose(unit), _step9; !(_step9 = _iterator9()).done;) {
            var unit_square = _step9.value;
            if (_in(val, candidates[unit_square])) {
              val_places.push(unit_square);
            }
          }
          if (val_places.length === 0) {
            return false;
          } else if (val_places.length === 1) {
            var _candidates_new = _assign(candidates, val_places[0], val);
            if (!_candidates_new) {
              return false;
            }
          }
        }
        return candidates;
      }

      /**
       * 从数独板字符串生成方格到值的映射表
       * @param board - 81字符的数独板字符串
       * @returns 返回 {方格ID: 对应值} 的映射表
       * @throws 当板长度与预期方格数不匹配时抛出错误
       */
      function _get_square_vals_map(board) {
        var squares_vals_map = {};
        if (board.length !== SQUARES.length) {
          throw new Error("数独板长度与方格总数不匹配");
        }
        for (var i = 0; i < SQUARES.length; i++) {
          squares_vals_map[SQUARES[i]] = board[i];
        }
        return squares_vals_map;
      }

      /**
       * 生成方格到所属单位的映射表
       * @param squares - 方格ID数组
       * @param units - 所有单位组合数组
       * @returns 返回 {方格ID: [所属单位数组]} 的映射表
       */
      function _get_square_units_map(squares, units) {
        var square_unit_map = {};
        // 遍历每个方格
        for (var _iterator10 = _createForOfIteratorHelperLoose(squares), _step10; !(_step10 = _iterator10()).done;) {
          var cur_square = _step10.value;
          var cur_square_units = [];
          // 检查该方格属于哪些单位
          for (var _iterator11 = _createForOfIteratorHelperLoose(units), _step11; !(_step11 = _iterator11()).done;) {
            var cur_unit = _step11.value;
            if (cur_unit.indexOf(cur_square) !== -1) {
              cur_square_units.push(cur_unit);
            }
          }
          square_unit_map[cur_square] = cur_square_units;
        }
        return square_unit_map;
      }

      /**
       * 生成方格到关联方格的映射表（同行/同列/同宫）
       * @param squares - 方格ID数组
       * @param units_map - 方格到单位的映射表
       * @returns 返回 {方格ID: [关联方格数组]} 的映射表
       */
      function _get_square_peers_map(squares, units_map) {
        var square_peers_map = {};
        // 遍历每个方格
        for (var _iterator12 = _createForOfIteratorHelperLoose(squares), _step12; !(_step12 = _iterator12()).done;) {
          var cur_square = _step12.value;
          var cur_square_units = units_map[cur_square];
          var cur_square_peers = [];
          // 通过所属单位找到所有关联方格
          for (var _iterator13 = _createForOfIteratorHelperLoose(cur_square_units), _step13; !(_step13 = _iterator13()).done;) {
            var unit = _step13.value;
            for (var _iterator14 = _createForOfIteratorHelperLoose(unit), _step14; !(_step14 = _iterator14()).done;) {
              var cur_unit_square = _step14.value;
              // 排除自身并去重
              if (cur_square_peers.indexOf(cur_unit_square) === -1 && cur_unit_square !== cur_square) {
                cur_square_peers.push(cur_unit_square);
              }
            }
          }
          square_peers_map[cur_square] = cur_square_peers;
        }
        return square_peers_map;
      }

      /**
       * 生成所有单位组合（行/列/宫）
       * @param rows - 行标签字符串（如"ABCDEFGHI"）
       * @param cols - 列标签字符串（如"123456789"）
       * @returns 返回包含所有单位的二维数组
       */
      function _get_all_units(rows, cols) {
        var units = [];
        // 生成行单位
        for (var _iterator15 = _createForOfIteratorHelperLoose(rows), _step15; !(_step15 = _iterator15()).done;) {
          var r = _step15.value;
          units.push(_cross(r, cols));
        }
        // 生成列单位
        for (var _iterator16 = _createForOfIteratorHelperLoose(cols), _step16; !(_step16 = _iterator16()).done;) {
          var c = _step16.value;
          units.push(_cross(rows, c));
        }
        // 生成九宫格单位
        var row_squares = ["ABC", "DEF", "GHI"]; // 行分组
        var col_squares = ["123", "456", "789"]; // 列分组
        for (var _i3 = 0, _row_squares = row_squares; _i3 < _row_squares.length; _i3++) {
          var rs = _row_squares[_i3];
          for (var _iterator17 = _createForOfIteratorHelperLoose(col_squares), _step17; !(_step17 = _iterator17()).done;) {
            var cs = _step17.value;
            units.push(_cross(rs, cs));
          }
        }
        return units;
      }

      /**
       * 将数独板字符串转换为二维数组
       * @param board_string - 81字符的数独板字符串
       * @returns 返回9x9的二维数组
       */
      function board_string_to_grid(board_string) {
        var rows = [];
        var cur_row = [];
        // 每9个字符为一行的转换逻辑
        for (var i = 0; i < board_string.length; i++) {
          cur_row.push(board_string[i]);
          if (i % 9 === 8) {
            // 每行结束
            rows.push(cur_row);
            cur_row = [];
          }
        }
        return rows;
      }

      /**
       * 将二维数组转换回数独板字符串
       * @param board_grid - 9x9的二维数组
       * @returns 返回81字符的字符串
       */
      function board_grid_to_string(board_grid) {
        var board_string = "";
        // 按行顺序拼接所有字符
        for (var r = 0; r < 9; r++) {
          for (var c = 0; c < 9; c++) {
            board_string += board_grid[r][c];
          }
        }
        return board_string;
      }

      /**
       * 打印数独板到控制台（带格式）
       * @param board - 81字符的数独板字符串
       * @throws 当板无效时抛出错误
       */
      function print_board(board) {
        var report = validate_board(board);
        if (report !== true) {
          throw new Error(report);
        }
        var V_PADDING = " ";
        var H_PADDING = "\n";
        var V_BOX_PADDING = "  ";
        var H_BOX_PADDING = "\n";
        var display_string = "";
        for (var i = 0; i < board.length; i++) {
          var _square8 = board[i];
          display_string += _square8 + V_PADDING;
          if (i % 3 === 2) {
            display_string += V_BOX_PADDING;
          }
          if (i % 9 === 8) {
            display_string += H_PADDING;
          }
          if (i % 27 === 26) {
            display_string += H_BOX_PADDING;
          }
        }
        console.log(display_string);
      }

      /**
       * 验证数独板格式有效性
       * @param board - 待验证的板字符串
       * @returns 验证通过返回true，否则返回错误信息
       */
      function validate_board(board) {
        if (!board) {
          return "空数独";
        }
        if (board.length !== NR_SQUARES) {
          return "\u65E0\u6548\u7684\u6570\u72EC\u957F\u5EA6\uFF0C\u5FC5\u987B\u6B63\u597D\u5305\u542B" + NR_SQUARES + "\u4E2A\u65B9\u683C";
        }
        for (var i = 0; i < board.length; i++) {
          if (!_in(board[i], DIGITS) && board[i] !== BLANK_CHAR) {
            return "\u4F4D\u7F6E" + i + "\u53D1\u73B0\u975E\u6CD5\u5B57\u7B26: " + board[i];
          }
        }
        return true;
      }

      /**
       * 生成两个字符串的笛卡尔积
       * @param a - 第一个字符串（如"ABC"）
       * @param b - 第二个字符串（如"123"）
       * @returns 返回所有组合的数组（如["A1","A2",...,"C3"]）
       */
      function _cross(a, b) {
        var result = [];
        for (var _iterator18 = _createForOfIteratorHelperLoose(a), _step18; !(_step18 = _iterator18()).done;) {
          var ai = _step18.value;
          for (var _iterator19 = _createForOfIteratorHelperLoose(b), _step19; !(_step19 = _iterator19()).done;) {
            var bi = _step19.value;
            result.push(ai + bi);
          }
        }
        return result;
      }

      /**
       * 检查值是否存在于字符串中
       * @param v - 待检查的值
       * @param seq - 目标字符串
       * @returns 存在返回true，否则false
       */
      function _in(v, seq) {
        return seq.indexOf(v) !== -1;
      }

      /**
       * 数组洗牌算法（Fisher-Yates变种）
       * @param seq - 待洗牌数组
       * @returns 洗牌后的新数组
       */
      function _shuffle(seq) {
        var shuffled = new Array(seq.length).fill(false);
        for (var _iterator21 = _createForOfIteratorHelperLoose(seq), _step21; !(_step21 = _iterator21()).done;) {
          var item = _step21.value;
          var ti = _rand_range(seq.length);
          while (shuffled[ti] !== false) {
            ti = ti + 1 > seq.length - 1 ? 0 : ti + 1;
          }
          shuffled[ti] = item;
        }
        return shuffled;
      }

      /**
       * 生成指定范围内的随机整数
       * @param max - 上限（不包含）
       * @param min - 下限（包含，默认为0）
       * @returns 范围内的随机整数
       * @throws 当max未定义时抛出错误
       */
      function _rand_range(max, min) {
        if (min === void 0) {
          min = 0;
        }
        if (max) {
          return Math.floor(Math.random() * (max - min)) + min;
        } else {
          throw new Error("Range undefined");
        }
      }

      /**
       * 数组去重
       * @param seq - 待处理数组
       * @returns 去重后的新数组
       */
      function _strip_dups(seq) {
        var seq_set = [];
        var dup_map = {};
        for (var _iterator22 = _createForOfIteratorHelperLoose(seq), _step22; !(_step22 = _iterator22()).done;) {
          var e = _step22.value;
          if (!dup_map[String(e)]) {
            seq_set.push(e);
            dup_map[String(e)] = true;
          }
        }
        return seq_set;
      }

      /**
       * 数值范围限制
       * @param nr - 待处理数值
       * @param max - 最大值（不包含）
       * @param min - 最小值（包含，默认为0）
       * @returns 限制后的数值
       */
      function _force_range(nr, max, min) {
        if (min === void 0) {
          min = 0;
        }
        nr = nr || 0;
        if (nr < min) {
          return min;
        }
        if (nr > max) {
          return max;
        }
        return nr;
      }
      initialize();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SudokuCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './GameLogic.ts', './SettingsManager.ts', './NoteNumber.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Node, Color, Vec3, UITransform, size, tween, Component, Configuration, EventType, CellRelationType, AssociationType, SettingsManager, NoteNumber, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      Color = module.Color;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      size = module.size;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      CellRelationType = module.CellRelationType;
      AssociationType = module.AssociationType;
    }, function (module) {
      SettingsManager = module.SettingsManager;
    }, function (module) {
      NoteNumber = module.NoteNumber;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "a3a49W7yzFH5YpNPBFH8yrv", "SudokuCell", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SudokuCell = exports('SudokuCell', (_dec = ccclass('SudokuCell'), _dec2 = property({
        type: Sprite,
        tooltip: "单元格背景",
        visible: true
      }), _dec3 = property({
        type: Label,
        tooltip: "单元格文字",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "笔记节点根节点",
        visible: true
      }), _dec5 = property({
        type: [Node],
        tooltip: "笔记节点",
        visible: true
      }), _dec6 = property(Color), _dec7 = property({
        type: Node,
        tooltip: "遮罩节点",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SudokuCell, _Component);
        function SudokuCell() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cellBG", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cellLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeNoteRoot", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeNotes", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "warningColor", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mask", _descriptor6, _assertThisInitialized(_this));
          _this.row = 0;
          // 行
          _this.col = 0;
          // 列
          _this.cellNumber = 0;
          // 填入的数字
          _this.solutionNumber = 0;
          // 答案数字
          _this.cellSize = 0;
          // 单元格大小
          _this.canFill = false;
          // 是否可填写
          _this.isSwitchNote = false;
          // 是否笔记模式
          /** 与选中单元格的关系 */
          _this.relation = {
            type: CellRelationType.UNRELATED,
            isSameNumber: false
          };
          // 是否选中
          _this.selectNumber = 0;
          //选中的数字
          _this.notesNumber = [0, 0, 0, 0, 0, 0, 0, 0, 0];
          _this.appSettings = void 0;
          _this.isCanTouch = true;
          _this.originalProps = {
            isEnable: false,
            color: new Color(),
            scale: new Vec3(),
            position: new Vec3()
          };
          _this.currentTween = null;
          _this.isAnimating = false;
          _this.isHistoryItem = false;
          _this.isHintNote = false;
          return _this;
        }
        var _proto = SudokuCell.prototype;
        // 标记是否为提示笔记
        _proto.onLoad = function onLoad() {
          // console.log("SudokuCell->onLoad");
          if (!this.isHistoryItem) {
            this.initEventListeners();
            this.registerTouchEvent();
          }
          this.appSettings = SettingsManager.getInstance().getSettings();
        };
        _proto.onDestroy = function onDestroy() {
          if (!this.isHistoryItem) {
            this.cleanup();
          }
        }

        // 初始化方法
        ;

        _proto.init = function init(row, col, cellSize, cellNumber, isHistory) {
          if (cellNumber === void 0) {
            cellNumber = 0;
          }
          if (isHistory === void 0) {
            isHistory = false;
          }
          this.row = row;
          this.col = col;
          this.cellNumber = cellNumber;
          this.cellSize = cellSize;
          this.isHistoryItem = isHistory;
          var uiTransform = this.getComponent(UITransform);
          uiTransform.contentSize = size(cellSize, cellSize);
          this.hideAllNodeNote();
          this.cellLabel.node.active = true;
          this.mask.active = false;
          this.isCanTouch = true;
          if (this.cellNumber == 0) {
            this.cellLabel.string = "";
            this.canFill = true;
          } else {
            this.cellLabel.string = cellNumber.toString();
            this.canFill = false;
          }
          this.refreshCell();
        }

        /**
         * name
         */;
        _proto.initHistoryItem = function initHistoryItem() {
          // console.log("SudokuCell->initHistoryItem");
          this.cellLabel.node.scale = new Vec3(this.cellSize / 77, this.cellSize / 77);
          // this.cellLabel.fontSize = 16;
          this.isHistoryItem = true;
          this.nodeNoteRoot.active = false;
          this.mask.active = false;
          this.isCanTouch = false;
        }
        /**
         * 初始化数字
         */;
        _proto.initNumber = function initNumber(cellNumber, solutionNumber) {
          this.reset();
          this.cellNumber = cellNumber;
          this.solutionNumber = solutionNumber;
          this.cellLabel.node.active = true; // 记得将文字的显示状态重置，否则一下的设置可能不生效
          if (this.cellNumber == 0) {
            this.cellLabel.string = "";
            this.canFill = true;
          } else {
            // console.log(`${this.row}-${this.col}填入的数字`,cellNumber);
            this.cellLabel.string = cellNumber.toString();
            this.canFill = false;
          }
          this.refreshCell();
        }

        /**
         * 初始化笔记数字
         */;
        _proto.hideAllNodeNote = function hideAllNodeNote() {
          this.nodeNoteRoot.active = false;
          this.notesNumber = [0, 0, 0, 0, 0, 0, 0, 0, 0];
          this.nodeNotes.forEach(function (element, index) {
            element.active = false;
          });
        }

        /**
         * reset
         */;
        _proto.reset = function reset() {
          this.hideAllNodeNote();
          this.cellLabel.string = "";
          this.canFill = false;
          this.isCanTouch = true;
          this.mask.active = false;
          this.isHintNote = false;
        };
        _proto.resetHint = function resetHint() {
          this.mask.active = true;
          this.isCanTouch = false;
          this.stopAllAnimations();
          this.applyDefaultStyle();
          var isError = this.cellNumber && this.cellNumber != 0 && !this.checkIsFinish() && this.canFill;
          if (isError) {
            this.applyErrorStyle();
          }
          if (this.isHintNote) {
            this.setNoteNumber({
              number: "000000000",
              isUndo: true,
              isHint: true
            });
          }
          this.setDefaultHintNoteColor();
        };
        _proto.hintComplete = function hintComplete() {
          this.mask.active = false;
          this.isCanTouch = true;
        }
        /**
         * refreshQuickNote
         */;
        _proto.refreshQuickNote = function refreshQuickNote(candidate) {
          var _this2 = this;
          if (this.canFill) {
            this.hideAllNodeNote();
            var array = candidate.split('').map(Number);
            array.forEach(function (element) {
              _this2.setNoteNumber({
                number: element,
                isUndo: true
              });
            });
          }
        }

        /**
         * isSelect
         */;
        _proto.isSelect = function isSelect() {
          return this.relation.type == CellRelationType.SELECTED;
        }

        /**
         * onTouch
         */;
        _proto.onTouch = function onTouch() {
          if (this.isCanTouch) {
            oops.message.dispatchEvent(EventType.SELECT_CELL, {
              row: this.row,
              col: this.col,
              value: this.cellNumber,
              canFill: this.canFill,
              isFinish: this.checkIsFinish()
            });
          }
        }

        /**
         * 初始化事件监听
         */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
          oops.message.on(EventType.CHECK_TOUCH_NUMBERBTN_FINISH, this.onRefreshNumber, this);
          oops.message.on(EventType.ERASE_NUMBER, this.onEraseNumber, this);
          oops.message.on(EventType.SWITCH_NOTE, this.onSwitchNote, this);
          oops.message.on(EventType.HINT_NUMBER, this.onHintNumber, this);
          oops.message.on(EventType.INPUT_NUMBER, this.onRefreshNoteNumber, this);
          oops.message.on(EventType.REFRESH_SETTING, this.onRefreshSetting, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
          oops.message.off(EventType.CHECK_TOUCH_NUMBERBTN_FINISH, this.onRefreshNumber, this);
          oops.message.off(EventType.ERASE_NUMBER, this.onEraseNumber, this);
          oops.message.off(EventType.SWITCH_NOTE, this.onSwitchNote, this);
          oops.message.off(EventType.HINT_NUMBER, this.onHintNumber, this);
          oops.message.off(EventType.INPUT_NUMBER, this.onRefreshNoteNumber, this);
          oops.message.off(EventType.REFRESH_SETTING, this.onRefreshSetting, this);
        }

        // 转换方法
        ;

        _proto.toICellData = function toICellData() {
          return {
            row: this.row,
            col: this.col,
            number: this.cellNumber
          };
        };
        _proto.applyRelation = function applyRelation(relation, cellNumber) {
          // console.log(`行-列${this.row}-${this.col}的状态${relation}`)
          if (relation) {
            this.relation = relation;
          } else {
            this.relation = {
              type: CellRelationType.UNRELATED,
              isSameNumber: false
            };
          }
          this.selectNumber = cellNumber;
          this.refreshCell();
        };
        _proto.saveOriginalProps = function saveOriginalProps() {
          this.originalProps.isEnable = true;
          this.originalProps.color = this.cellLabel.color.clone();
          this.originalProps.scale = this.cellLabel.node.scale.clone();
          this.originalProps.position = this.cellLabel.node.position.clone();
        }

        /** 立即停止动画并重置状态 */;
        _proto.stopAllAnimations = function stopAllAnimations() {
          if (this.currentTween) {
            this.currentTween.stop();
            this.currentTween = null;
          }
          this.resetToOriginal();
          this.isAnimating = false;
          // console.log("stopAllAnimations");
        };

        _proto.resetToOriginal = function resetToOriginal() {
          if (this.originalProps.isEnable) {
            this.cellLabel.color = this.originalProps.color;
            this.cellLabel.node.scale = this.originalProps.scale;
            this.cellLabel.node.position = this.originalProps.position;
          }
        }

        /**
         * 安全播放动画（带状态检查）
         * @returns 是否成功触发动画
         */;
        _proto.playComboWarningSafe = function playComboWarningSafe() {
          var _this$appSettings;
          // console.log("playComboWarningSafe");
          // 当笔记开启且笔记错误警告关闭时，不执行错误提示动画
          if (this.isSwitchNote && !((_this$appSettings = this.appSettings) != null && _this$appSettings.notes.errorDetection)) {
            return false;
          }

          // 状态检查
          if (this.isAnimating) {
            return false;
          }
          this.saveOriginalProps();
          this.playComboWarning();
          return true;
        }

        /**
         * 播放组合动画（摇摆+放大闪烁）
         * @param duration 总持续时间（默认0.8秒）
         * @param intensity 强度系数（0-1）
         */;
        _proto.playComboWarning = function playComboWarning(duration, intensity) {
          var _this3 = this;
          if (duration === void 0) {
            duration = 0.8;
          }
          if (intensity === void 0) {
            intensity = 1;
          }
          this.stopAllAnimations();
          this.isAnimating = true;

          // 动画参数计算
          var shakeDist = 5 * intensity;
          var pulseScale = 1.1 + 0.1 * intensity;
          var halfDuration = duration / 2;

          // 使用相对运动（relative: true）
          this.currentTween = tween(this.cellLabel.node)
          // 第一阶段：放大+右摇+变色
          .parallel(tween().to(halfDuration, {
            scale: new Vec3(pulseScale, pulseScale, 1)
          }, {
            easing: 'sineOut'
          }), tween().to(halfDuration / 3, {
            position: new Vec3(shakeDist, 0, 0)
          }).to(halfDuration / 3, {
            position: new Vec3(-shakeDist * 2, 0, 0)
          }).to(halfDuration / 3, {
            position: new Vec3(shakeDist, 0, 0)
          }), tween().to(halfDuration, {
            color: this.warningColor
          }))
          // 第二阶段：恢复+左摇
          .parallel(tween().to(halfDuration, {
            scale: this.originalProps.scale
          }, {
            easing: 'sineIn'
          }), tween().to(halfDuration / 3, {
            position: new Vec3(-shakeDist, 0, 0)
          }).to(halfDuration / 3, {
            position: new Vec3(shakeDist * 2, 0, 0)
          }).to(halfDuration / 3, {
            position: new Vec3(-shakeDist, 0, 0)
          }), tween().to(halfDuration, {
            color: this.originalProps.color
          })).call(function () {
            _this3.isAnimating = false;
            _this3.resetToOriginal();
            _this3.currentTween = null;
          }).start();
        };
        _proto.checkInputIsExists = function checkInputIsExists(number) {
          return this.cellNumber == number;
        }
        //检测是否完成单元格填入
        ;

        _proto.checkIsFinish = function checkIsFinish() {
          return this.cellNumber === this.solutionNumber;
        };
        _proto.onRefreshTheme = function onRefreshTheme(event, args) {
          this.refreshCell();
        };
        _proto.onRefreshNumber = function onRefreshNumber(event, args) {
          if (this.relation.type == CellRelationType.SELECTED && this.canFill) {
            if (this.isSwitchNote) {
              var _this$appSettings2;
              if ((_this$appSettings2 = this.appSettings) != null && _this$appSettings2.notes.errorDetection) {
                if (!args.isError) {
                  // 只有有效输入才记录到笔记中
                  this.setNoteNumber({
                    number: args.value
                  });
                }
              } else {
                this.setNoteNumber({
                  number: args.value
                });
              }
            } else {
              this.setNumber({
                number: args.value
              });
            }
            this.refreshCell();
          }
        }
        // 当有单元格输入时，触发笔记刷新，笔记所在单元格与输入单元格相关联时，移除笔记中和关联单元相同的数字
        ;

        _proto.onRefreshNoteNumber = function onRefreshNoteNumber(event, args) {
          var _this$appSettings3;
          var row = args.row;
          var col = args.col;
          var cellNumber = args.value;
          // 自动计算的开关
          if (cellNumber == 0 || !((_this$appSettings3 = this.appSettings) != null && _this$appSettings3.notes.autoCalculate)) {
            return;
          }
          if (this.relation.type == CellRelationType.ASSOCIATED && this.relation.spaceRelations.length > 0 && this.canFill) {
            this.setNoteNumber({
              number: cellNumber,
              isVisible: false,
              isUndo: true
            });
          }
        };
        _proto.onEraseNumber = function onEraseNumber(event, args) {
          if (this.relation.type == CellRelationType.SELECTED && this.canFill) {
            if (this.cellNumber != 0) {
              this.setNumber({
                number: 0
              });
            } else {
              this.setNoteNumber({
                number: "000000000"
              });
            }
            this.refreshCell();
          }
        };
        _proto.onSwitchNote = function onSwitchNote(event, args) {
          this.isSwitchNote = args;
        };
        _proto.onHintNumber = function onHintNumber(event, args) {
          if (this.relation.type == CellRelationType.SELECTED && this.canFill) {
            this.setNumber({
              number: this.solutionNumber
            });
            this.refreshCell();
            oops.message.dispatchEvent(EventType.REFRESH_HINT);
          }
        };
        _proto.onRefreshSetting = function onRefreshSetting(event, args) {
          this.appSettings = SettingsManager.getInstance().getSettings();
          this.refreshCell();
        };
        _proto.setNoteColor = function setNoteColor(labelColor) {
          var _this4 = this;
          this.nodeNotes.forEach(function (element, index) {
            var noteNumber = element.getComponent(NoteNumber);
            if (noteNumber) {
              var _this4$appSettings;
              if (noteNumber.number === _this4.selectNumber && (_this4$appSettings = _this4.appSettings) != null && _this4$appSettings.highlight.duplicateCandidates) {
                noteNumber.setBGColor(new Color(Configuration.getInstance().getThemeConfig().sameNumberNoteBackground));
                noteNumber.setLabelColor(new Color(Configuration.getInstance().getThemeConfig().sameNumberNoteTextColor));
              } else {
                noteNumber.setBGColor();
                noteNumber.setLabelColor(labelColor);
              }
            }
          });
        };
        _proto.setHintNoteColor = function setHintNoteColor(value, backgroundColor, textColor) {
          this.nodeNotes.forEach(function (element, index) {
            var noteNumber = element.getComponent(NoteNumber);
            if (noteNumber) {
              if (noteNumber.number === value && backgroundColor && textColor) {
                noteNumber.setBGColor(new Color(backgroundColor));
                noteNumber.setLabelColor(new Color(textColor));
              }
            }
          });
        };
        _proto.setDefaultHintNoteColor = function setDefaultHintNoteColor() {
          this.nodeNotes.forEach(function (element, index) {
            var noteNumber = element.getComponent(NoteNumber);
            if (noteNumber) {
              noteNumber.setBGColor();
              noteNumber.setLabelColor(new Color(Configuration.getInstance().getThemeConfig().noteTextColor));
            }
          });
        };
        _proto.refreshHintHighlightCell = function refreshHintHighlightCell(backgroundColor, textColor) {
          this.mask.active = false;
          this.cellBG.color = new Color(backgroundColor);
          this.cellLabel.color = new Color(textColor);
        };
        _proto.refreshCell = function refreshCell() {
          var _this$appSettings4;
          // console.log("refreshCell")
          this.stopAllAnimations();
          this.setNoteColor(new Color(Configuration.getInstance().getThemeConfig().noteTextColor));
          var isError = this.cellNumber && this.cellNumber != 0 && !this.checkIsFinish() && this.canFill;
          if (isError) {
            this.applyErrorStyle();
          }
          // 判断是否在同一9宫格或行或列
          switch (this.relation.type) {
            case CellRelationType.SELECTED:
              this.applySelectedStyle();
              break;
            case CellRelationType.ASSOCIATED:
              this.applyAssociatedStyle();
              break;
            default:
              this.applyDefaultStyle();
              break;
          }

          // 判断文字是否相同，相同时判断是否无关联
          if (this.relation.isSameNumber && (_this$appSettings4 = this.appSettings) != null && _this$appSettings4.highlight.sameDigits) {
            this.cellBG.color = new Color(Configuration.getInstance().getThemeConfig().sameNumberBackground);
            // this.cellLabel.color = new Color(Configuration.getInstance().getThemeConfig().sameNumberTextColor);
          }

          if (isError) {
            if (this.relation.type == CellRelationType.SELECTED) {
              this.cellLabel.color = new Color(Configuration.getInstance().getThemeConfig().selectedErrorTextColor);
            } else {
              this.cellLabel.color = new Color(Configuration.getInstance().getThemeConfig().errorTextColor);
            }
          }
        }

        // 提取样式应用方法
        ;

        _proto.applyErrorStyle = function applyErrorStyle() {
          var theme = Configuration.getInstance().getThemeConfig();
          this.cellBG.color = new Color(theme.errorBackground);
          this.cellLabel.color = new Color(theme.errorTextColor);
        };
        _proto.applySelectedStyle = function applySelectedStyle() {
          var theme = Configuration.getInstance().getThemeConfig();
          this.cellBG.color = new Color(theme.selectedCellBackground);
          this.cellLabel.color = new Color(theme.selectedCellTextColor);
          this.setNoteColor(new Color(theme.selectedNoteTextColor));
        };
        _proto.applyAssociatedStyle = function applyAssociatedStyle() {
          var _this5 = this;
          if (this.relation.type == CellRelationType.ASSOCIATED) {
            var shouldHighlight = this.relation.spaceRelations.some(function (relation) {
              var _this5$appSettings, _this5$appSettings2;
              return (relation === AssociationType.ROW || relation === AssociationType.COLUMN) && ((_this5$appSettings = _this5.appSettings) == null ? void 0 : _this5$appSettings.highlight.rowsColumns) || relation === AssociationType.BOX && ((_this5$appSettings2 = _this5.appSettings) == null ? void 0 : _this5$appSettings2.highlight.blocks);
            });

            // 判断是否需要高亮数字关联（行/列/宫）
            var highlightNumber = this.relation.numberRelations.some(function (relation) {
              var _this5$appSettings3, _this5$appSettings4;
              return (relation === AssociationType.ROW || relation === AssociationType.COLUMN) && ((_this5$appSettings3 = _this5.appSettings) == null ? void 0 : _this5$appSettings3.highlight.allRowsColumns) || relation === AssociationType.BOX && ((_this5$appSettings4 = _this5.appSettings) == null ? void 0 : _this5$appSettings4.highlight.allBlocks);
            });
            // console.log(`${this.row}-${this.col},shouldHighlight->${shouldHighlight},highlightNumber->${highlightNumber}`)

            if (shouldHighlight || highlightNumber) {
              // console.log(`高亮关联的行-列${this.row}-${this.col}`);
              this.applyHighlightedStyle();
            } else {
              this.applyDefaultStyle();
            }
          }
        };
        _proto.applyHighlightedStyle = function applyHighlightedStyle() {
          var theme = Configuration.getInstance().getThemeConfig();
          this.cellBG.color = new Color(theme.relatedAreaBackground);
          this.applyTextColor();
        };
        _proto.applyDefaultStyle = function applyDefaultStyle() {
          var theme = Configuration.getInstance().getThemeConfig();
          this.cellBG.color = new Color(theme.cellBackground);
          this.applyTextColor();
        };
        _proto.applyTextColor = function applyTextColor() {
          var theme = Configuration.getInstance().getThemeConfig();
          this.cellLabel.color = new Color(this.canFill ? theme.prefilledTextColor : theme.cellTextColor);
        }

        // 注册点击事件
        ;

        _proto.registerTouchEvent = function registerTouchEvent() {
          var _this6 = this;
          this.node.on(Node.EventType.TOUCH_START, function () {
            if (_this6.isCanTouch) {
              oops.message.dispatchEvent(EventType.SELECT_CELL, {
                row: _this6.row,
                col: _this6.col,
                value: _this6.cellNumber,
                canFill: _this6.canFill,
                isFinish: _this6.checkIsFinish()
              });
            }
          });
        };
        _proto.setNumber = function setNumber(_temp) {
          var _ref = _temp === void 0 ? {
              number: undefined
            } : _temp,
            number = _ref.number,
            _ref$isUndo = _ref.isUndo,
            isUndo = _ref$isUndo === void 0 ? false : _ref$isUndo,
            _ref$isHint = _ref.isHint,
            isHint = _ref$isHint === void 0 ? false : _ref$isHint,
            _ref$isErase = _ref.isErase,
            isErase = _ref$isErase === void 0 ? true : _ref$isErase;
          //重复写入为置空
          if (number === this.cellNumber && isErase && !isHint) {
            number = 0;
          }
          if (number === undefined) {
            number = 0;
          }
          this.cellNumber = number;
          this.cellLabel.node.active = true;
          this.nodeNoteRoot.active = false;
          if (this.cellNumber == 0) {
            this.cellLabel.string = "";
            this.nodeNoteRoot.active = true;
          } else {
            this.cellLabel.string = number.toString();
          }
          if (!isHint) {
            oops.message.dispatchEvent(EventType.INPUT_NUMBER, {
              row: this.row,
              col: this.col,
              value: this.cellNumber,
              isUndo: isUndo
            });
          }
        };
        _proto.setNoteNumber = function setNoteNumber(_temp2) {
          var _this7 = this;
          var _ref2 = _temp2 === void 0 ? {
              number: undefined
            } : _temp2,
            number = _ref2.number,
            _ref2$isVisible = _ref2.isVisible,
            isVisible = _ref2$isVisible === void 0 ? true : _ref2$isVisible,
            _ref2$isUndo = _ref2.isUndo,
            isUndo = _ref2$isUndo === void 0 ? false : _ref2$isUndo,
            _ref2$isHint = _ref2.isHint,
            isHint = _ref2$isHint === void 0 ? false : _ref2$isHint;
          if (this.isHistoryItem) {
            return;
          }
          this.isHintNote = isHint;
          if (typeof number === "string") {
            var notesStr = number;
            this.hideAllNodeNote();
            var array = notesStr.split('').map(Number);
            array.forEach(function (element) {
              if (element >= 1 && element <= 9) {
                if (_this7.cellNumber == 0 || isHint) {
                  _this7.cellLabel.node.active = false;
                  _this7.nodeNoteRoot.active = true;
                  _this7.nodeNotes[element - 1].active = true;
                  _this7.notesNumber[element - 1] = element;
                }
              }
            });
          } else {
            if (this.cellNumber != 0) {
              return;
            }
            if (number === undefined) {
              number = 0;
            }
            if (number != 0) {
              var index = number;
              number = isVisible ? number : 0;

              //重复写入为置空
              if (number === this.notesNumber[index - 1]) {
                number = 0;
              }
              this.cellLabel.node.active = false;
              this.nodeNoteRoot.active = true;
              this.notesNumber[index - 1] = number;
              this.nodeNotes[index - 1].active = number != 0;
            } else {
              this.hideAllNodeNote();
            }
          }
          if (!isHint) {
            oops.message.dispatchEvent(EventType.INPUT_NOTE_NUMBER, {
              row: this.row,
              col: this.col,
              value: this.notesNumber.join(''),
              isUndo: isUndo
            });
          }
        };
        return SudokuCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cellBG", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cellLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeNoteRoot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeNotes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "warningColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 100, 100, 255);
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SudokuData.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "45dc1G0u4hJtakYclBPvdG8", "SudokuData", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SudokuGrid.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './EventType.ts', './GameLogic.ts', './SudokuCell.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Graphics, Node, Color, UITransform, tween, Vec2, instantiate, Component, Configuration, EventType, GameLogic, SudokuCell, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      Node = module.Node;
      Color = module.Color;
      UITransform = module.UITransform;
      tween = module.tween;
      Vec2 = module.Vec2;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameLogic = module.GameLogic;
    }, function (module) {
      SudokuCell = module.SudokuCell;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
      cclegacy._RF.push({}, "57bc1fpE4VM0q5GuSnOIeHm", "SudokuGrid", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SudokuGrid = exports('SudokuGrid', (_dec = ccclass('SudokuGrid'), _dec2 = property({
        type: Prefab,
        tooltip: "单元格预制体",
        visible: true
      }), _dec3 = property({
        type: Graphics,
        tooltip: "绘制组件",
        visible: true
      }), _dec4 = property({
        type: Node,
        tooltip: "单元格根节点",
        visible: true
      }), _dec5 = property(Color), _dec6 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SudokuGrid, _Component);
        function SudokuGrid() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cellPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cellRoot", _descriptor3, _assertThisInitialized(_this));
          // 线宽配置
          _initializerDefineProperty(_this, "lineWidth", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "boldLineWidth", _descriptor5, _assertThisInitialized(_this));
          // 颜色配置
          _initializerDefineProperty(_this, "normalColor", _descriptor6, _assertThisInitialized(_this));
          // 细线颜色（默认灰色）
          _initializerDefineProperty(_this, "boldColor", _descriptor7, _assertThisInitialized(_this));
          // 粗线颜色（默认黑色）
          // 新增动画开关
          _initializerDefineProperty(_this, "useAnimation", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "animationDuration", _descriptor9, _assertThisInitialized(_this));
          _this.gridSize = 0;
          _this.cellSize = 0;
          _this.halfSize = 0;
          // 单元格容器
          _this.cells = [];
          return _this;
        }
        var _proto = SudokuGrid.prototype;
        _proto.onLoad = function onLoad() {
          this.initEventListeners();
        };
        _proto.onDestroy = function onDestroy() {
          this.cleanup();
        };
        _proto.start = function start() {
          // // 根据动画开关初始化
          // if (this.useAnimation) {
          //     this.playDrawingAnimation();
          // } else {
          //     this.drawGridLines(false);
          //     this.createSudokuCells();
          // }
        };
        _proto.init = function init(isHistory) {
          if (isHistory === void 0) {
            isHistory = false;
          }
          this.normalColor = new Color(Configuration.getInstance().getThemeConfig().thinLineColor);
          this.boldColor = new Color(Configuration.getInstance().getThemeConfig().boldLineColor);
          var uiTransform = this.getComponent(UITransform);
          this.gridSize = uiTransform.width;
          this.cellSize = this.gridSize / 9;
          this.halfSize = this.gridSize / 2;
          this.graphics.lineCap = Graphics.LineCap.SQUARE;
          this.graphics.lineJoin = Graphics.LineJoin.ROUND;
          this.drawGridLines(false);
          this.createSudokuCells(isHistory);
        };
        _proto.playDrawingAnimation = function playDrawingAnimation() {
          var _this2 = this;
          this.graphics.clear();
          this.graphics.lineWidth = 0;
          tween(this).call(function () {
            return _this2.drawGridLines(true);
          }).to(this.animationDuration, {}, {
            onUpdate: function onUpdate(target, ratio) {
              if (typeof ratio === 'number') {
                _this2.drawAnimatedGrid(ratio);
              }
            }
          }).call(function () {
            _this2.drawGridLines(false);
            _this2.createSudokuCells();
          }).start();
        }

        /**
         * 初始化事件监听
         */;
        _proto.initEventListeners = function initEventListeners() {
          oops.message.on(EventType.REFRESH_THEME, this.onRefreshTheme, this);
          oops.message.on(EventType.SELECT_CELL, this.onSelectCell, this);
        }

        /**
         * 清理
         */;
        _proto.cleanup = function cleanup() {
          oops.message.off(EventType.REFRESH_THEME, this.onRefreshTheme, this);
          oops.message.off(EventType.SELECT_CELL, this.onSelectCell, this);
        };
        _proto.onRefreshTheme = function onRefreshTheme(event, args) {
          this.normalColor = new Color(Configuration.getInstance().getThemeConfig().thinLineColor);
          this.boldColor = new Color(Configuration.getInstance().getThemeConfig().boldLineColor);
          this.drawGridLines(false);
        };
        _proto.onSelectCell = function onSelectCell(event, args) {
          var row = args.row;
          var col = args.col;
          var cellNumber = args.value;
          var selectedData = {
            row: row,
            col: col,
            number: cellNumber
          };

          // 1. 数据转换
          var gridData = this.cells.map(function (row) {
            return row.map(function (cell) {
              return cell.toICellData();
            });
          });

          // 2. 调用纯逻辑计算
          var _GameLogic$getGridRel = GameLogic.getGridRelations(gridData, selectedData),
            relations = _GameLogic$getGridRel.relations;

          // 3. 应用结果到UI（示例）
          this.cells.forEach(function (gridRow) {
            gridRow.forEach(function (cell) {
              var cellData = cell.toICellData();

              // 获取计算好的关系
              var relation = relations.get(cellData.row + "-" + cellData.col);

              // 应用关系（补充参数）
              cell.applyRelation(relation, cellNumber);
            });
          });
        };
        _proto.drawAnimatedGrid = function drawAnimatedGrid(progress) {
          this.graphics.clear();
          var maxRadius = Math.sqrt(2) * this.halfSize;
          var currentRadius = maxRadius * progress;
          this.drawAnimatedLines(progress, currentRadius);
        };
        _proto.drawAnimatedLines = function drawAnimatedLines(progress, radius) {
          var center = Vec2.ZERO;

          // 绘制横线
          for (var i = 0; i <= 9; i++) {
            var y = i * this.cellSize - this.halfSize;
            var isBold = i % 3 === 0;
            var color = isBold ? this.boldColor : this.normalColor;
            this.drawAnimatedLine(new Vec2(-this.halfSize, y), new Vec2(this.halfSize, y), center, radius, isBold ? this.boldLineWidth : this.lineWidth, color);
          }

          // 绘制竖线
          for (var _i = 0; _i <= 9; _i++) {
            var x = _i * this.cellSize - this.halfSize;
            var _isBold = _i % 3 === 0;
            var _color = _isBold ? this.boldColor : this.normalColor;
            this.drawAnimatedLine(new Vec2(x, -this.halfSize), new Vec2(x, this.halfSize), center, radius, _isBold ? this.boldLineWidth : this.lineWidth, _color);
          }
          this.graphics.stroke();
        };
        _proto.drawAnimatedLine = function drawAnimatedLine(start, end, center, radius, lineWidth, color) {
          // 设置线条样式
          var startDist = start.subtract(center).length();
          var endDist = end.subtract(center).length();
          if (startDist > radius && endDist > radius) return;
          if (startDist <= radius && endDist <= radius) {
            this.drawLine(start, end, lineWidth, color);
            return;
          }
          var dir = end.subtract(start).normalize();
          var t = (radius - startDist) / (endDist - startDist);
          var partialEnd = start.add(dir.multiplyScalar(t * this.gridSize / 9));
          this.drawLine(start, partialEnd, lineWidth, color);
        };
        _proto.drawGridLines = function drawGridLines(isBoldOnly) {
          this.graphics.clear();
          if (!isBoldOnly) {
            // 绘制细线
            for (var i = 0; i <= 9; i++) {
              if (i % 3 === 0) continue;
              var pos = i * this.cellSize - this.halfSize;

              // 水平线
              this.drawLine(new Vec2(-this.halfSize, pos), new Vec2(this.halfSize, pos), this.lineWidth, this.normalColor);

              // 垂直线
              this.drawLine(new Vec2(pos, -this.halfSize), new Vec2(pos, this.halfSize), this.lineWidth, this.normalColor);
            }
          }

          // 绘制粗线
          for (var _i2 = 0; _i2 <= 3; _i2++) {
            var _pos = _i2 * 3 * this.cellSize - this.halfSize;

            // 水平线
            this.drawLine(new Vec2(-this.halfSize, _pos), new Vec2(this.halfSize, _pos), this.boldLineWidth, this.boldColor);

            // 垂直线
            this.drawLine(new Vec2(_pos, -this.halfSize), new Vec2(_pos, this.halfSize), this.boldLineWidth, this.boldColor);
          }
        };
        _proto.drawLine = function drawLine(start, end, lineWidth, strokeColor) {
          this.graphics.lineWidth = lineWidth;
          this.graphics.strokeColor = strokeColor;
          this.graphics.moveTo(start.x, start.y);
          this.graphics.lineTo(end.x, end.y);
          this.graphics.stroke();
          this.graphics.fill();
        }

        // 新增方法：创建数独单元格
        ;

        _proto.createSudokuCells = function createSudokuCells(isHistory) {
          if (isHistory === void 0) {
            isHistory = false;
          }
          this.cellRoot.removeAllChildren();
          this.cells = [];
          var cellSize = this.gridSize / 9;
          for (var row = 0; row < 9; row++) {
            this.cells[row] = [];
            for (var col = 0; col < 9; col++) {
              this.createCell(row, col, cellSize, isHistory);
            }
          }
        }

        // 创建单个单元格
        ;

        _proto.createCell = function createCell(row, col, baseSize, isHistory) {
          if (isHistory === void 0) {
            isHistory = false;
          }
          if (!this.cellPrefab) return;

          // 计算实际可用尺寸（扣除线宽）
          var lineWidth = this.getLineWidth(row, col);
          var actualSize = baseSize - (lineWidth.left + lineWidth.right) / 2;

          // 调整位置计算（考虑线宽偏移）
          var posOffsetX = (lineWidth.left - lineWidth.right) / 2;
          var posOffsetY = (lineWidth.bottom - lineWidth.top) / 2;

          // 实例化预制体
          var cell = instantiate(this.cellPrefab);

          // 设置位置（以中心为锚点）
          var posX = col * baseSize - this.halfSize + baseSize / 2 + posOffsetX;
          var posY = this.halfSize - row * baseSize - baseSize / 2 + posOffsetY;
          cell.setPosition(posX, posY);

          // 设置单元格数据（需要自行实现SudokuCell组件）
          var cellComponent = cell.getComponent(SudokuCell);
          if (cellComponent) {
            cellComponent.init(row, col, actualSize, 0, isHistory);
            this.cells[row][col] = cellComponent;
          }
          cell.parent = this.cellRoot;
        }

        // 新增线宽计算方法
        ;

        _proto.getLineWidth = function getLineWidth(row, col) {
          // 判断是否在粗线边界
          var isBoldLeft = col % 3 === 0;
          var isBoldRight = (col + 1) % 3 === 0;
          var isBoldTop = row % 3 === 0;
          var isBoldBottom = (row + 1) % 3 === 0;
          return {
            left: isBoldLeft ? this.boldLineWidth : this.lineWidth,
            right: isBoldRight ? this.boldLineWidth : this.lineWidth,
            top: isBoldTop ? this.boldLineWidth : this.lineWidth,
            bottom: isBoldBottom ? this.boldLineWidth : this.lineWidth
          };
        }

        /**
         * refreshSudokuData
         */;
        _proto.refreshSudokuData = function refreshSudokuData(gameData, isHistory) {
          if (isHistory === void 0) {
            isHistory = false;
          }
          var puzzle = GameLogic.parseSudokuString(gameData.puzzleStr);
          var solution = GameLogic.parseSudokuString(gameData.solutionStr);
          var touchRow = 0;
          var touchCol = 0;
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              this.cells[row][col].initNumber(puzzle[row][col], solution[row][col]);
              if (isHistory) {
                this.cells[row][col].initHistoryItem();
              }
              var cellKey = row + "-" + col;
              var inputNotes = gameData.userInputNotes.get(cellKey);
              if (inputNotes) {
                this.cells[row][col].setNoteNumber({
                  number: inputNotes,
                  isUndo: true
                });
              }
              var input = gameData.userInputs.get(cellKey);
              if (input) {
                this.cells[row][col].setNumber({
                  number: input,
                  isUndo: true
                });
              }
              var isSelect = this.cells[row][col].isSelect();
              if (isSelect) {
                touchRow = row;
                touchCol = col;
              }
            }
          }
          if (!isHistory) {
            this.cells[touchRow][touchCol].onTouch();
          }
        }

        /**
         * reset
         */;
        _proto.reset = function reset() {
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              this.cells[row][col].reset();
            }
          }
        }

        /**
         * refreshQuickNote
         */;
        _proto.refreshQuickNote = function refreshQuickNote(candidates) {
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              this.cells[row][col].refreshQuickNote(candidates[row][col]);
            }
          }
        };
        _proto.undoRecord = function undoRecord(data) {
          var _this3 = this;
          if (data.oldCellNumber) {
            Object.entries(data.oldCellNumber).forEach(function (_ref) {
              var cellKey = _ref[0],
                oldNumber = _ref[1];
              // console.log(`单元格 ${cellKey} 的旧数字是 ${oldNumber}`);
              var _cellKey$split$map = cellKey.split('-').map(Number),
                row = _cellKey$split$map[0],
                col = _cellKey$split$map[1];
              _this3.cells[row][col].setNumber({
                number: oldNumber,
                isUndo: true
              });
            });
          }
          if (data.oldNotesStr) {
            Object.entries(data.oldNotesStr).forEach(function (_ref2) {
              var cellKey = _ref2[0],
                oldNotesStr = _ref2[1];
              // console.log(`单元格 ${cellKey} 的旧数字是 ${oldNumber}`);
              var _cellKey$split$map2 = cellKey.split('-').map(Number),
                row = _cellKey$split$map2[0],
                col = _cellKey$split$map2[1];
              _this3.cells[row][col].setNoteNumber({
                number: oldNotesStr,
                isUndo: true
              });
            });
          }
          var _data$lastSelectKey$s = data.lastSelectKey.split('-').map(Number),
            lastRow = _data$lastSelectKey$s[0],
            lastCol = _data$lastSelectKey$s[1];
          if (lastRow && lastCol) {
            this.cells[lastRow][lastCol].onTouch();
          }
        };
        _proto.playComboWarningSafe = function playComboWarningSafe(row, col) {
          if (this.cells[row][col]) {
            this.cells[row][col].playComboWarningSafe();
          }
        };
        _proto.checkInputIsExists = function checkInputIsExists(row, col, cellNumber) {
          if (this.cells[row][col]) {
            return this.cells[row][col].checkInputIsExists(cellNumber);
          }
          return false;
        };
        _proto.resetHint = function resetHint() {
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              this.cells[row][col].resetHint();
            }
          }
        };
        _proto.refreshHintHighlightCell = function refreshHintHighlightCell(highlight) {
          var position = highlight.position;
          if (this.cells[position.row][position.col]) {
            this.cells[position.row][position.col].refreshHintHighlightCell(highlight.backgroundColor, highlight.textColor);
            if (highlight.candidates) {
              this.cells[position.row][position.col].setNoteNumber({
                number: highlight.candidates.join(""),
                isVisible: true,
                isUndo: true,
                isHint: true
              });
            }
          }
        };
        _proto.refreshHintHighlightNoteCell = function refreshHintHighlightNoteCell(highlightNoteCell) {
          var position = highlightNoteCell.position;
          if (this.cells[position.row][position.col]) {
            this.cells[position.row][position.col].setHintNoteColor(highlightNoteCell.value, highlightNoteCell.backgroundColor, highlightNoteCell.textColor);
          }
        };
        _proto.hintComplete = function hintComplete(selectRow, selectCol, cellNumber) {
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              this.cells[row][col].hintComplete();
            }
          }
          this.cells[selectRow][selectCol].onTouch();
          this.cells[selectRow][selectCol].setNumber({
            number: cellNumber,
            isUndo: true,
            isErase: false
          });
        };
        _proto.hintNoteComplete = function hintNoteComplete(highlight) {
          var position = highlight.position;
          if (this.cells[position.row][position.col]) {
            if (highlight.candidates) {
              this.cells[position.row][position.col].setNoteNumber({
                number: highlight.candidates.join(""),
                isVisible: true,
                isUndo: true,
                isHint: false
              });
            }
          }
        };
        _proto.setHintNumber = function setHintNumber(selectRow, selectCol, cellNumber) {
          var _this$cells$selectRow;
          (_this$cells$selectRow = this.cells[selectRow][selectCol]) == null || _this$cells$selectRow.setNumber({
            number: cellNumber,
            isUndo: false,
            isHint: true
          });
        };
        return SudokuGrid;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cellPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cellRoot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lineWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "boldLineWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "normalColor", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(150, 150, 150, 255);
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "boldColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(0, 0, 0, 255);
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "useAnimation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "animationDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.5;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SudokuPlayerData.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "12ffdMzRNZBnopaSqldT4+s", "SudokuPlayerData", undefined);
      /**
       * 数独玩家数据
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SudokuSolverEngine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SolveTypes.ts', './BoxLineReductionStrategy.ts', './CandidateErrorStrategy.ts', './FinnedXWingStrategy.ts', './HiddenSinglesStrategy.ts', './HiddenSubsetStrategy.ts', './JellyFishStrategy.ts', './NakedSubsetStrategy.ts', './PointingPairStrategy.ts', './RectangleEliminationStrategy.ts', './SashimiXWingStrategy.ts', './SingleCandidateStrategy.ts', './SkyscraperStrategy.ts', './SwordFishStrategy.ts', './TwoStringKiteStrategy.ts', './UniqueRectangleType1Strategy.ts', './UniqueRectangleType2Strategy.ts', './WWingStrategy.ts', './WXYZWingStrategy.ts', './XWingStrategy.ts', './XYChainStrategy.ts', './XYWingStrategy.ts', './XYZWingStrategy.ts', './YWingStrategy.ts', './SolverUtils.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, BLANK_CHAR, BoxLineReductionStrategy, CandidateErrorStrategy, FinnedXWingStrategy, HiddenSinglesStrategy, HiddenSubsetStrategy, JellyFishStrategy, NakedSubsetStrategy, PointingPairStrategy, RectangleEliminationStrategy, SashimiXWingStrategy, SingleCandidateStrategy, SkyscraperStrategy, SwordFishStrategy, TwoStringKiteStrategy, UniqueRectangleType1Strategy, UniqueRectangleType2Strategy, WWingStrategy, WXYZWingStrategy, XWingStrategy, XYChainStrategy, XYWingStrategy, XYZWingStrategy, YWingStrategy, SolverUtils;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BoxLineReductionStrategy = module.BoxLineReductionStrategy;
    }, function (module) {
      CandidateErrorStrategy = module.CandidateErrorStrategy;
    }, function (module) {
      FinnedXWingStrategy = module.FinnedXWingStrategy;
    }, function (module) {
      HiddenSinglesStrategy = module.HiddenSinglesStrategy;
    }, function (module) {
      HiddenSubsetStrategy = module.HiddenSubsetStrategy;
    }, function (module) {
      JellyFishStrategy = module.JellyFishStrategy;
    }, function (module) {
      NakedSubsetStrategy = module.NakedSubsetStrategy;
    }, function (module) {
      PointingPairStrategy = module.PointingPairStrategy;
    }, function (module) {
      RectangleEliminationStrategy = module.RectangleEliminationStrategy;
    }, function (module) {
      SashimiXWingStrategy = module.SashimiXWingStrategy;
    }, function (module) {
      SingleCandidateStrategy = module.SingleCandidateStrategy;
    }, function (module) {
      SkyscraperStrategy = module.SkyscraperStrategy;
    }, function (module) {
      SwordFishStrategy = module.SwordFishStrategy;
    }, function (module) {
      TwoStringKiteStrategy = module.TwoStringKiteStrategy;
    }, function (module) {
      UniqueRectangleType1Strategy = module.UniqueRectangleType1Strategy;
    }, function (module) {
      UniqueRectangleType2Strategy = module.UniqueRectangleType2Strategy;
    }, function (module) {
      WWingStrategy = module.WWingStrategy;
    }, function (module) {
      WXYZWingStrategy = module.WXYZWingStrategy;
    }, function (module) {
      XWingStrategy = module.XWingStrategy;
    }, function (module) {
      XYChainStrategy = module.XYChainStrategy;
    }, function (module) {
      XYWingStrategy = module.XYWingStrategy;
    }, function (module) {
      XYZWingStrategy = module.XYZWingStrategy;
    }, function (module) {
      YWingStrategy = module.YWingStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bedc9v/D/ROFI/U47mG7SZp", "SudokuSolverEngine", undefined);

      // 策略执行引擎
      var SudokuSolverEngine = exports('SudokuSolverEngine', /*#__PURE__*/function () {
        function SudokuSolverEngine() {
          this.strategies = void 0;
          // 维护的候选数状态（跨策略调用持久化）
          this.maintainedCandidates = [];
          this.candidateErrorStrategy = new CandidateErrorStrategy();
          this.strategies = [new SingleCandidateStrategy(),
          //唯一候选数策略
          new HiddenSinglesStrategy(),
          //隐藏单数(Hidden Single)
          new NakedSubsetStrategy(),
          //裸数对/三数/四数策略
          new HiddenSubsetStrategy(),
          //隐藏对/三元组/四元组策略
          new PointingPairStrategy(),
          //指向对策略
          new BoxLineReductionStrategy(),
          //方块/行/列消减策略
          new SkyscraperStrategy(),
          //摩天楼策略
          new TwoStringKiteStrategy(),
          //双线风筝
          new RectangleEliminationStrategy(),
          //矩形消除
          new XWingStrategy(),
          //X-Wing策略
          new YWingStrategy(),
          //Y-Wing策略
          new WWingStrategy(),
          //W-Wing策略
          new XYWingStrategy(),
          //XY-Wing策略
          new XYZWingStrategy(),
          //XYZ-Wing策略
          new WXYZWingStrategy(),
          //WXYZ-Wing策略
          new SwordFishStrategy(),
          //剑鱼策略
          new JellyFishStrategy(),
          //水母策略
          new FinnedXWingStrategy(),
          //Finned X-Wing策略
          new SashimiXWingStrategy(),
          //Sashimi X-Wing策略
          new UniqueRectangleType1Strategy(),
          //唯一矩形 type1
          new UniqueRectangleType2Strategy(),
          //唯一矩形 type2
          new XYChainStrategy() //XY链策略
          ];
        }

        /**
         * 获取 SudokuSolverEngine 单例实例
         * @returns SudokuSolverEngine 实例
         */
        SudokuSolverEngine.getInstance = function getInstance() {
          if (!SudokuSolverEngine.instance) {
            SudokuSolverEngine.instance = new SudokuSolverEngine();
          }
          return SudokuSolverEngine.instance;
        }

        /**
         * 获取数独解题的下一步提示
         * @param grid 当前数独状态字符串（9x9，空格用'.'或'0'表示）
         * @param userCandidates 可选参数，用户输入的候选数集合（可能包含错误）
         * @param solution 可选参数，数独题目的完整答案
         * @returns SolvingStep[] 解题步骤数组 | null 无提示时返回null
         */;
        var _proto = SudokuSolverEngine.prototype;
        _proto.getNextStep = function getNextStep(grid, userCandidates, solution) {
          if (SolverUtils.validateBoard(grid)) {
            var board = SolverUtils.gridStrToArray(grid);
            var correctCandidates = SolverUtils.getCandidates(board); //绝对正确的候选数集合
            var validCandidates = userCandidates ? SolverUtils.mergeTwoCandidates(board, userCandidates, correctCandidates) : correctCandidates;
            for (var _iterator = _createForOfIteratorHelperLoose(this.strategies), _step; !(_step = _iterator()).done;) {
              var strategy = _step.value;
              var steps = strategy.execute(board, validCandidates);
              if (steps && steps.length > 0) {
                // 策略已直接修改candidates，只需同步到maintainedCandidates
                this.maintainedCandidates = validCandidates;
                // 验证解题步骤是否正确
                if (solution) {
                  var errorSteps = this.validateAndHandleErrorSteps(steps, board, solution, userCandidates, correctCandidates);
                  if (errorSteps) {
                    return errorSteps;
                  }
                }
                return steps;
              }
            }
          }
          return null;
        }

        /**
         * 验证解题步骤是否正确，如果发现错误则返回候选数错误提示
         * @param steps 解题步骤数组
         * @param board 当前棋盘状态
         * @param solution 数独题目的完整答案
         * @param userCandidates 用户输入的候选数集合
         * @param correctCandidates 正确的候选数集合
         * @returns 错误提示步骤数组 | null 如果步骤正确则返回null
         */;
        _proto.validateAndHandleErrorSteps = function validateAndHandleErrorSteps(steps, board, solution, userCandidates, correctCandidates) {
          var _resultStep$highlight;
          if (!solution || steps.length === 0) return null;
          var resultStep = steps[steps.length - 1];
          var solutionBoard = SolverUtils.gridStrToArray(solution);
          var position = resultStep.position;
          var candidates = {};
          var notSolutionCell = false;

          // 收集所有高亮单元格的候选数
          (_resultStep$highlight = resultStep.highlights) == null || _resultStep$highlight.forEach(function (highlight) {
            if (highlight.candidates) {
              var key = highlight.position.row + "-" + highlight.position.col;
              candidates[key] = highlight.candidates.join('');

              // 检查高亮候选数是否包含正确答案
              var solutionCell = solutionBoard[highlight.position.row][highlight.position.col];
              if (!highlight.candidates.includes(Number(solutionCell)) && board[highlight.position.row][highlight.position.col] == BLANK_CHAR) {
                notSolutionCell = true;
              }
            }
          });

          // 验证步骤是否正确
          var isValueIncorrect = resultStep.value !== 0 && Number(solutionBoard[position.row][position.col]) !== resultStep.value;
          var hasInvalidCandidate = notSolutionCell;
          if (isValueIncorrect || hasInvalidCandidate) {
            // 推理结果出错，用户传入userCandidates数据有问题，提示修改userCandidates数据
            return this.candidateErrorStrategy.buildErrorSteps(board, solutionBoard, userCandidates, candidates, correctCandidates, position);
          }
          return null;
        }

        /**
        * 获取有效候选数（处理重置后的空状态）
        */;
        _proto.getValidCandidates = function getValidCandidates(board) {
          // 如果维护的候选数未初始化或为空，使用实时计算
          if (this.maintainedCandidates.length === 0 || this.maintainedCandidates.flat().every(function (set) {
            return set.size === 0;
          })) {
            return SolverUtils.getCandidates(board);
          }

          // 否则使用合并后的候选数
          return SolverUtils.getMergedCandidates(board, this.maintainedCandidates);
        }

        /**
         * 完全重置引擎状态（开始新游戏时调用）
         * 
         * 作用：
         * 1. 清空当前维护的候选数
         * 2. 重置策略执行状态（如有）
         * 3. 确保新游戏不受上局数据影响
         * 
         * 使用场景：
         * - 开始全新游戏时
         * - 重新加载题目时
         */;
        _proto.reset = function reset() {
          // 重置候选数为空数组（保持9x9结构）
          this.maintainedCandidates = Array(9).fill(null).map(function () {
            return Array(9).fill(null).map(function () {
              return new Set();
            });
          });

          // 可选：重置策略内部状态（如有需要）
          this.strategies.forEach(function (strategy) {
            if ('reset' in strategy) {
              strategy.reset();
            }
          });
          console.log('引擎状态已完全重置');
        };
        _proto.deepCopyCandidates = function deepCopyCandidates(candidates) {
          return candidates.map(function (row) {
            return row.map(function (set) {
              return set ? new Set(set) : new Set();
            });
          });
        };
        return SudokuSolverEngine;
      }());
      SudokuSolverEngine.instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwordFishStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9c6debKe5AgrCn+twh+9FN", "SwordFishStrategy", undefined);
      var SwordFishStrategy = exports('SwordFishStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(SwordFishStrategy, _BaseStrategy);
        function SwordFishStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 16;
          _this.SWORDFISH_SIZE = 3;
          return _this;
        }
        var _proto = SwordFishStrategy.prototype;
        // 剑鱼固定大小为3
        _proto.execute = function execute(board, candidates) {
          var result = this.findSwordfish(candidates);
          return result ? this.createSteps(board, candidates, result) : null;
        };
        _proto.findSwordfish = function findSwordfish(candidates) {
          // 检查行方向和列方向的剑鱼
          return this.findFishInDirection(candidates, HighlightAreaType.ROW) || this.findFishInDirection(candidates, HighlightAreaType.COLUMN);
        };
        _proto.findFishInDirection = function findFishInDirection(candidates, direction) {
          for (var value = 1; value <= 9; value++) {
            // 1. 收集所有包含该候选数的行/列（基集候选）
            var potentialBaseUnits = this.collectPotentialBaseUnits(candidates, value, direction);

            // 2. 寻找3个行/列作为基集，满足剑鱼条件
            for (var i = 0; i < potentialBaseUnits.length - 2; i++) {
              for (var j = i + 1; j < potentialBaseUnits.length - 1; j++) {
                for (var k = j + 1; k < potentialBaseUnits.length; k++) {
                  var baseUnits = [potentialBaseUnits[i], potentialBaseUnits[j], potentialBaseUnits[k]];

                  // 3. 获取这些基集的所有候选位置
                  var baseCandidates = this.getBaseCandidates(candidates, value, baseUnits, direction);

                  // 4. 寻找覆盖所有基候选的3个覆盖集
                  var coverUnits = this.findCoverUnits(baseCandidates, direction);
                  if (coverUnits.length === this.SWORDFISH_SIZE) {
                    // 5. 确定可消除的候选数
                    var eliminations = this.findEliminations(candidates, value, baseUnits, coverUnits, direction);
                    if (eliminations.length > 0) {
                      return {
                        value: value,
                        baseUnits: baseUnits,
                        coverUnits: coverUnits,
                        eliminations: eliminations,
                        direction: direction
                      };
                    }
                  }
                }
              }
            }
          }
          return null;
        };
        _proto.collectPotentialBaseUnits = function collectPotentialBaseUnits(candidates, value, direction) {
          var units = [];
          for (var unit = 0; unit < 9; unit++) {
            var count = 0;
            for (var pos = 0; pos < 9; pos++) {
              var row = direction === HighlightAreaType.ROW ? unit : pos;
              var col = direction === HighlightAreaType.ROW ? pos : unit;
              if (candidates[row][col].has(value)) {
                count++;
                if (count > this.SWORDFISH_SIZE) break; // 优化：跳过候选过多的行/列
              }
            }

            if (count >= 2 && count <= this.SWORDFISH_SIZE) {
              units.push(unit);
            }
          }
          return units;
        };
        _proto.getBaseCandidates = function getBaseCandidates(candidates, value, baseUnits, direction) {
          var positions = [];
          for (var _iterator = _createForOfIteratorHelperLoose(baseUnits), _step; !(_step = _iterator()).done;) {
            var unit = _step.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = direction === HighlightAreaType.ROW ? unit : pos;
              var col = direction === HighlightAreaType.ROW ? pos : unit;
              if (candidates[row][col].has(value)) {
                positions.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          return positions;
        };
        _proto.findCoverUnits = function findCoverUnits(baseCandidates, direction) {
          // 收集所有覆盖候选的列/行（与基集方向相反）
          var coverCandidates = new Set();
          for (var _iterator2 = _createForOfIteratorHelperLoose(baseCandidates), _step2; !(_step2 = _iterator2()).done;) {
            var _step2$value = _step2.value,
              row = _step2$value.row,
              col = _step2$value.col;
            coverCandidates.add(direction === HighlightAreaType.ROW ? col : row);
          }

          // 检查是否恰好有3个覆盖集
          return coverCandidates.size === this.SWORDFISH_SIZE ? Array.from(coverCandidates) : [];
        };
        _proto.findEliminations = function findEliminations(candidates, value, baseUnits, coverUnits, direction) {
          var eliminations = [];
          var isRowBased = direction === HighlightAreaType.ROW;

          // 检查每个覆盖集中的非基候选
          for (var _iterator3 = _createForOfIteratorHelperLoose(coverUnits), _step3; !(_step3 = _iterator3()).done;) {
            var coverUnit = _step3.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : coverUnit;
              var col = isRowBased ? coverUnit : pos;

              // 跳过基集中的行/列
              if (isRowBased ? baseUnits.includes(row) : baseUnits.includes(col)) {
                continue;
              }
              if (candidates[row][col].has(value)) {
                eliminations.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          return eliminations;
        };
        _proto.createSteps = function createSteps(board, candidates, fishInfo) {
          var steps = [];

          // 步骤1：发现剑鱼模式
          steps.push(this.createDiscoveryStep(board, candidates, fishInfo));

          // 步骤2：展示覆盖集（在步骤1基础上高亮覆盖集）
          steps.push(this.createCoverSetStep(board, candidates, fishInfo));

          // 步骤3：标记待删除候选数（保留前序高亮，新增删除标记）
          steps.push(this.createEliminationStep(board, candidates, fishInfo));

          // 步骤4：执行移除
          steps.push(this.createRemovalStep(board, candidates, fishInfo));
          return steps;
        }

        /**
         * 步骤1：发现剑鱼结构（高亮基集和剑鱼单元格）
         */;
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, fishInfo) {
          var _this2 = this;
          var value = fishInfo.value,
            baseUnits = fishInfo.baseUnits,
            coverUnits = fishInfo.coverUnits,
            eliminations = fishInfo.eliminations,
            direction = fishInfo.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var highlights = [].concat(this.highlightSwordfishCells(board, candidates, fishInfo), this.highlightBaseUnits(board, candidates, fishInfo));
          var highlightNotes = [].concat(this.highlightNotesBaseUnits(candidates, fishInfo));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("SwordFishStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description,
              value: value,
              units: baseUnits.map(function (u) {
                return u + 1;
              }).join(", ")
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: {
              row: baseUnits[0],
              col: 0
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        }

        /**
         * 步骤2：展示覆盖集（在步骤1基础上高亮覆盖集）
         */;
        _proto.createCoverSetStep = function createCoverSetStep(board, candidates, fishInfo) {
          var _this3 = this;
          var value = fishInfo.value,
            baseUnits = fishInfo.baseUnits,
            coverUnits = fishInfo.coverUnits,
            eliminations = fishInfo.eliminations,
            direction = fishInfo.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var highlights = [].concat(this.highlightSwordfishCells(board, candidates, fishInfo), this.highlightBaseUnits(board, candidates, fishInfo), this.highlightCoverUnits(board, candidates, fishInfo));
          var highlightNotes = [].concat(this.highlightNotesBaseUnits(candidates, fishInfo), this.highlightNotesCoverUnits(candidates, fishInfo));
          var generateDescription = function generateDescription() {
            var baseDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("SwordFishStrategy.coverSetDes", {
              name: _this3.name,
              direction: _this3.description,
              baseDirection: baseDirection,
              value: value,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", ")
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: {
              row: coverUnits[0],
              col: coverUnits[0]
            },
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        }

        /**
         * 步骤3：标记待删除候选数（保留前序高亮，新增删除标记）
         */;
        _proto.createEliminationStep = function createEliminationStep(board, candidates, fishInfo) {
          var _this4 = this;
          var value = fishInfo.value,
            baseUnits = fishInfo.baseUnits,
            coverUnits = fishInfo.coverUnits,
            eliminations = fishInfo.eliminations,
            direction = fishInfo.direction;
          var highlights = [].concat(this.highlightSwordfishCells(board, candidates, fishInfo), this.highlightBaseUnits(board, candidates, fishInfo), this.highlightCoverUnits(board, candidates, fishInfo), this.highlightEliminations(board, candidates, fishInfo));
          var highlightNotes = [].concat(this.highlightNotesBaseUnits(candidates, fishInfo), this.highlightEliminationNotes(candidates, fishInfo), this.highlightNotesCoverUnits(candidates, fishInfo));
          var generateDescription = function generateDescription() {
            var baseDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("SwordFishStrategy.eliminationDes", {
              name: _this4.name,
              direction: _this4.description,
              baseDirection: baseDirection,
              value: value,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", ")
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        }
        //"剑鱼消除候选：\n可从{{coverDirection}} {{coverUnits}} 的其他单元格中删除 {{value}}（共{{count}}处）"
        /**
         * 步骤4：执行删除（保持步骤3的高亮状态）
         */;
        _proto.createRemovalStep = function createRemovalStep(board, candidates, fishInfo) {
          var _this5 = this;
          var value = fishInfo.value,
            baseUnits = fishInfo.baseUnits,
            coverUnits = fishInfo.coverUnits,
            eliminations = fishInfo.eliminations,
            direction = fishInfo.direction;
          // 实际删除候选数
          fishInfo.eliminations.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](fishInfo.value);
          });
          var highlights = [].concat(this.highlightSwordfishCells(board, candidates, fishInfo), this.highlightBaseUnits(board, candidates, fishInfo), this.highlightCoverUnits(board, candidates, fishInfo), this.highlightEliminations(board, candidates, fishInfo));
          var highlightNotes = [].concat(this.highlightNotesBaseUnits(candidates, fishInfo), this.highlightNotesCoverUnits(candidates, fishInfo));
          var generateDescription = function generateDescription() {
            var baseDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var coverDirection = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.col") : oops.language.getLangByID("strategy.row");
            return oops.language.getLangByID("SwordFishStrategy.removalDes", {
              name: _this5.name,
              direction: _this5.description,
              baseDirection: baseDirection,
              value: value,
              baseUnits: baseUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              coverDirection: coverDirection,
              coverUnits: coverUnits.map(function (u) {
                return u + 1;
              }).join(", "),
              count: fishInfo.eliminations.length
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: fishInfo.eliminations[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes)
          };
        }

        /* 高亮辅助函数 */;
        _proto.highlightBaseUnits = function highlightBaseUnits(board, candidates, _ref) {
          var baseUnits = _ref.baseUnits,
            direction = _ref.direction;
          return baseUnits.flatMap(function (unit) {
            var cells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(unit) : SolverUtils.getColumnCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightSwordfishCells = function highlightSwordfishCells(board, candidates, _ref2) {
          var value = _ref2.value,
            baseUnits = _ref2.baseUnits,
            coverUnits = _ref2.coverUnits,
            direction = _ref2.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          return baseUnits.flatMap(function (baseUnit) {
            return coverUnits.map(function (coverUnit) {
              var pos = isRowBased ? {
                row: baseUnit,
                col: coverUnit
              } : {
                row: coverUnit,
                col: baseUnit
              };
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightCoverUnits = function highlightCoverUnits(board, candidates, _ref3) {
          var coverUnits = _ref3.coverUnits,
            direction = _ref3.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          return coverUnits.flatMap(function (unit) {
            var cells = isRowBased ? SolverUtils.getColumnCells(unit) : SolverUtils.getRowCells(unit);
            return cells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            });
          });
        };
        _proto.highlightEliminations = function highlightEliminations(board, candidates, _ref4) {
          var eliminations = _ref4.eliminations,
            value = _ref4.value;
          return eliminations.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          });
        }

        /**
         * 高亮基集候选数（所有相关格子的特定数字）
         */;
        _proto.highlightNotesBaseUnits = function highlightNotesBaseUnits(candidates, _ref5) {
          var value = _ref5.value,
            baseUnits = _ref5.baseUnits,
            coverUnits = _ref5.coverUnits,
            direction = _ref5.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];

          // 基集中的候选数
          for (var _iterator4 = _createForOfIteratorHelperLoose(baseUnits), _step4; !(_step4 = _iterator4()).done;) {
            var baseUnit = _step4.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? baseUnit : pos;
              var col = isRowBased ? pos : baseUnit;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.sameNumber.background,
                  textColor: HighlightConfig.sameNumber.textColor,
                  value: value
                });
              }
            }
          }
          return notes;
        }

        /**
         * 高亮覆盖集候选数（所有相关格子的特定数字）
         */;
        _proto.highlightNotesCoverUnits = function highlightNotesCoverUnits(candidates, _ref6) {
          var value = _ref6.value,
            baseUnits = _ref6.baseUnits,
            coverUnits = _ref6.coverUnits,
            direction = _ref6.direction;
          var isRowBased = direction === HighlightAreaType.ROW;
          var notes = [];

          // 覆盖集中的候选数
          for (var _iterator5 = _createForOfIteratorHelperLoose(coverUnits), _step5; !(_step5 = _iterator5()).done;) {
            var coverUnit = _step5.value;
            for (var pos = 0; pos < 9; pos++) {
              var row = isRowBased ? pos : coverUnit;
              var col = isRowBased ? coverUnit : pos;
              if (candidates[row][col].has(value)) {
                notes.push({
                  position: {
                    row: row,
                    col: col
                  },
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                });
              }
            }
          }
          return notes;
        }

        /**
         * 高亮待删除的候选数
         */;
        _proto.highlightEliminationNotes = function highlightEliminationNotes(candidates, _ref7) {
          var value = _ref7.value,
            eliminations = _ref7.eliminations;
          return eliminations.filter(function (pos) {
            return candidates[pos.row][pos.col].has(value);
          }).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: value
            };
          });
        };
        _createClass(SwordFishStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("SwordFishStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("SwordFishStrategy.description");
          }
        }]);
        return SwordFishStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Task.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BTreeNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, BTreeNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BTreeNode = module.BTreeNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "95087QhEU1G1LWnM2D7haTQ", "Task", undefined);

      /** 任务行为节点 */
      var Task = exports('Task', /*#__PURE__*/function (_BTreeNode) {
        _inheritsLoose(Task, _BTreeNode);
        function Task() {
          return _BTreeNode.apply(this, arguments) || this;
        }
        var _proto = Task.prototype;
        _proto.run = function run(blackboard) {};
        return Task;
      }(BTreeNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ThemeConfig.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "aa356Zg2DRB+pVgucDgRvM9", "ThemeConfig", undefined);
      /**
       * 主题配置接口
       * 说明：定义单个主题的全部视觉参数
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ThemePopup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Configuration.ts', './UIConfig.ts', './ThemeToggle.ts', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, Configuration, UIID, ThemeToggle, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      ThemeToggle = module.ThemeToggle;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "70bc6fVTRBEiYLGDmpf/Tip", "ThemePopup", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ThemePopup = exports('ThemePopup', (_dec = ccclass('ThemePopup'), _dec2 = property({
        type: [ThemeToggle],
        tooltip: "ThemeToggle",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ThemePopup, _Component);
        function ThemePopup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "themeToggles", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ThemePopup.prototype;
        _proto.start = function start() {
          var theme = Configuration.getInstance().getCurrentTheme();
          this.themeToggles.forEach(function (element) {
            if (element.theme === theme) {
              element.setSelect();
              return;
            }
          });
        };
        _proto.onBack = function onBack() {
          oops.gui.remove(UIID.ThemePopup);
        };
        return ThemePopup;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "themeToggles", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ThemeToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Config.ts', './Configuration.ts', './BaseSudokuGrid.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, Toggle, Component, ThemeName, SudokuDifficulty, Config, Configuration, BaseSudokuGrid;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Toggle = module.Toggle;
      Component = module.Component;
    }, function (module) {
      ThemeName = module.ThemeName;
      SudokuDifficulty = module.SudokuDifficulty;
      Config = module.default;
    }, function (module) {
      Configuration = module.Configuration;
    }, function (module) {
      BaseSudokuGrid = module.BaseSudokuGrid;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "91a7cJc54VPVKIPfaJnbJbF", "ThemeToggle", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      Enum(ThemeName);
      var ThemeToggle = exports('ThemeToggle', (_dec = ccclass('ThemeToggle'), _dec2 = property({
        type: BaseSudokuGrid,
        tooltip: "BaseSudokuGrid",
        visible: true
      }), _dec3 = property({
        type: ThemeName,
        tooltip: "ThemeName",
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ThemeToggle, _Component);
        function ThemeToggle() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "baseSudokuGrid", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "theme", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ThemeToggle.prototype;
        _proto.start = function start() {
          var gameData = {
            id: "1",
            //唯一标识
            puzzleStr: "000809462890046003740000091250068014060092735934751628621000000075914206489620000",
            solutionStr: "513879462892146573746235891257368914168492735934751628621587349375914286489623157",
            userInputs: new Map(),
            userInputNotes: new Map(),
            displayDifficulty: SudokuDifficulty.Novice,
            // 显示给玩家的难度
            actualDifficulty: SudokuDifficulty.Novice,
            // 实际计算难度
            errorCount: 0,
            hp: 0,
            timeElapsed: 0,
            score: 0,
            hintLimit: 0,
            progress: 0 //游戏进度
          };

          gameData.userInputs.set("0-0", 5);
          this.baseSudokuGrid.init(Config.theme[this.theme], gameData);
        };
        _proto.onToggle = function onToggle(event, customEventData) {
          Configuration.getInstance().setTheme(this.theme);
        };
        _proto.setSelect = function setSelect() {
          var toggle = this.node.getComponent(Toggle);
          if (toggle) {
            toggle.isChecked = true;
          }
        };
        return ThemeToggle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseSudokuGrid", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "theme", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ThemeName.Default;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Timer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6021fct1uhJsImEuhdFWC0f", "Timer", undefined);
      /*
       * @Author: dgflash
       * @Date: 2023-01-19 11:09:38
       * @LastEditors: dgflash
       * @LastEditTime: 2023-01-19 14:28:05
       */

      /** 
       * 定时触发组件 
       * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037964&doc_id=2873565
       * @example
          export class Test extends Component {
              // 创建一个定时跳动组件
              private timer: Timer = new Timer(1);
                update(dt: number) {
                  if (this.timer.update(this.dt)) {
                      console.log(每一秒触发一次);
                  }
              }
          }
       */
      var Timer = exports('Timer', /*#__PURE__*/function () {
        /**
         * 定时触发组件
         * @param step  触发间隔时间（秒）
         */
        function Timer(step) {
          if (step === void 0) {
            step = 0;
          }
          this.callback = null;
          this._elapsedTime = 0;
          this._step = -1;
          this.step = step;
        }
        var _proto = Timer.prototype;
        _proto.update = function update(dt) {
          if (this.step <= 0) return false;
          this._elapsedTime += dt;
          if (this._elapsedTime >= this._step) {
            var _this$callback;
            this._elapsedTime -= this._step;
            (_this$callback = this.callback) == null || _this$callback.call(this);
            return true;
          }
          return false;
        };
        _proto.reset = function reset() {
          this._elapsedTime = 0;
        };
        _proto.stop = function stop() {
          this._elapsedTime = 0;
          this.step = -1;
        };
        _createClass(Timer, [{
          key: "elapsedTime",
          get: function get() {
            return this._elapsedTime;
          }
        }, {
          key: "step",
          get: /** 触发间隔时间（秒） */
          function get() {
            return this._step;
          },
          set: function set(step) {
            this._step = step; // 每次修改时间
            this._elapsedTime = 0; // 逝去时间
          }
        }, {
          key: "progress",
          get: function get() {
            return this._elapsedTime / this._step;
          }
        }]);
        return Timer;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimerComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "bd704rXSFlMi7G9k+JxH/TD", "TimerComponent", undefined);

      // TimerComponent.ts
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TimerComponent = exports('TimerComponent', (_dec = ccclass('TimerComponent'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TimerComponent, _Component);
        function TimerComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "timeLabel", _descriptor, _assertThisInitialized(_this));
          // 绑定显示时间的Label组件
          _this._elapsedTime = 0;
          // 累计时间（秒）
          _this._isPaused = true;
          // 初始为暂停状态
          _this._startTimestamp = 0;
          return _this;
        }
        var _proto = TimerComponent.prototype;
        // 当前计时段的开始时间戳
        _proto.onLoad = function onLoad() {
          // 注册游戏事件
          GameController.event.on('game_start', this.startTimer, this);
          GameController.event.on('game_pause', this.pauseTimer, this);
          GameController.event.on('game_resume', this.resumeTimer, this);
          GameController.event.on('game_over', this.stopTimer, this);
        };
        _proto.update = function update(dt) {
          if (this._isPaused) return;

          // 增量时间模式（避免帧率影响精度）
          this._elapsedTime += dt;
          this.updateDisplay();
        };
        _proto.startTimer = function startTimer() {
          this._isPaused = false;
          this._startTimestamp = Date.now();
          this.schedule(this.autoSaveTime, 30); // 每30秒自动保存
        };

        _proto.pauseTimer = function pauseTimer() {
          this._isPaused = true;
          this.unschedule(this.autoSaveTime);
        };
        _proto.resumeTimer = function resumeTimer() {
          if (!this._isPaused) return;

          // 补偿暂停期间的时间误差
          var pausedDuration = (Date.now() - this._startTimestamp) / 1000;
          this._elapsedTime -= pausedDuration;
          this._isPaused = false;
        };
        _proto.stopTimer = function stopTimer() {
          this.pauseTimer();
          this._elapsedTime = 0;
          this.updateDisplay();
        };
        _proto.updateDisplay = function updateDisplay() {
          // 格式化时间显示 mm:ss
          var minutes = Math.floor(this._elapsedTime / 60);
          var seconds = Math.floor(this._elapsedTime % 60);
          this.timeLabel.string = minutes.toString().padStart(2, '0') + ":" + seconds.toString().padStart(2, '0');
        };
        _proto.autoSaveTime = function autoSaveTime() {
          GameController.saveCurrentProgress({
            elapsedTime: this._elapsedTime
          });
        }

        // 外部接口
        ;

        _proto.loadSavedTime = function loadSavedTime(savedTime) {
          this._elapsedTime = savedTime;
          this.updateDisplay();
        };
        _createClass(TimerComponent, [{
          key: "currentTime",
          get: function get() {
            return this._elapsedTime;
          }
        }]);
        return TimerComponent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimerManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './StringUtil.ts', './Timer.ts'], function (exports) {
  var _inheritsLoose, cclegacy, game, Component, StringUtil, Timer;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      StringUtil = module.StringUtil;
    }, function (module) {
      Timer = module.Timer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "73600VLsIBLOKhOhd7td4P8", "TimerManager", undefined);

      /** 时间管理 */
      var TimerManager = exports('TimerManager', /*#__PURE__*/function (_Component) {
        _inheritsLoose(TimerManager, _Component);
        function TimerManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /** 倒计时数据 */
          _this.times = {};
          /** 服务器时间 */
          _this.date_s = new Date();
          /** 服务器初始时间 */
          _this.date_s_start = new Date();
          /** 服务器时间后修正时间 */
          _this.polymeric_s = 0;
          /** 客户端时间 */
          _this.date_c = new Date();
          return _this;
        }
        var _proto = TimerManager.prototype;
        /** 后台管理倒计时完成事件 */
        _proto.update = function update(dt) {
          for (var key in this.times) {
            var data = this.times[key];
            var timer = data.timer;
            if (timer.update(dt)) {
              if (data.object[data.field] > 0) {
                data.object[data.field]--;

                // 倒计时结束触发
                if (data.object[data.field] == 0) {
                  this.onTimerComplete(data);
                }
                // 触发每秒回调事件  
                else if (data.onSecond) {
                  data.onSecond.call(data.object);
                }
              }
            }
          }
        }

        /** 触发倒计时完成事件 */;
        _proto.onTimerComplete = function onTimerComplete(data) {
          if (data.onComplete) data.onComplete.call(data.object);
          if (data.event) this.node.dispatchEvent(data.event);
          delete this.times[data.id];
        }

        /**
         * 在指定对象上注册一个倒计时的回调管理器
         * @param object        注册定时器的对象
         * @param field         时间字段
         * @param onSecond      每秒事件
         * @param onComplete    倒计时完成事件
         * @returns 
         * @example
        export class Test extends Component {
            private timeId!: string;
            
            start() {
                // 在指定对象上注册一个倒计时的回调管理器
                this.timeId = oops.timer.register(this, "countDown", this.onSecond, this.onComplete);
            }
            
            private onSecond() {
                console.log("每秒触发一次");
            }
              private onComplete() {
                console.log("倒计时完成触发");
            }
        }
         */;
        _proto.register = function register(object, field, onSecond, onComplete) {
          var timer = new Timer();
          timer.step = 1;
          var data = {};
          data.id = StringUtil.guid();
          data.timer = timer;
          data.object = object; // 管理对象
          data.field = field; // 时间字段
          data.onSecond = onSecond; // 每秒事件
          data.onComplete = onComplete; // 倒计时完成事件
          this.times[data.id] = data;
          return data.id;
        }

        /** 
         * 在指定对象上注销一个倒计时的回调管理器 
         * @param id         时间对象唯一表示
         * @example
        export class Test extends Component {
            private timeId!: string;
              start() {
                this.timeId = oops.timer.register(this, "countDown", this.onSecond, this.onComplete);
            }
              onDestroy() {
                // 在指定对象上注销一个倒计时的回调管理器
                oops.timer.unRegister(this.timeId);
            }
        }
         */;
        _proto.unRegister = function unRegister(id) {
          if (this.times[id]) delete this.times[id];
        }

        /**
         * 服务器时间与本地时间同步
         * @param value   服务器时间刻度
         */;
        _proto.setServerTime = function setServerTime(value) {
          this.polymeric_s = this.getTime();
          this.date_s_start.setTime(value);
        }

        /** 获取写服务器同步的时间刻度 */;
        _proto.getServerTime = function getServerTime() {
          return this.date_s_start.getTime() + this.getTime() - this.polymeric_s;
        }

        /** 获取服务器时间对象 */;
        _proto.getServerDate = function getServerDate() {
          this.date_s.setTime(this.getServerTime());
          return this.date_s;
        }

        /** 获取本地时间刻度 */;
        _proto.getClientTime = function getClientTime() {
          return Date.now();
        }

        /** 获取本地时间对象 */;
        _proto.getClientDate = function getClientDate() {
          this.date_c.setTime(this.getClientTime());
          return this.date_c;
        }

        /** 获取游戏开始到现在逝去的时间 */;
        _proto.getTime = function getTime() {
          return game.totalTime;
        }

        /** 游戏最小化时记录时间数据 */;
        _proto.save = function save() {
          for (var key in this.times) {
            this.times[key].startTime = this.getTime();
          }
        }

        /** 游戏最大化时回复时间数据 */;
        _proto.load = function load() {
          for (var key in this.times) {
            var interval = Math.floor((this.getTime() - (this.times[key].startTime || this.getTime())) / 1000);
            var data = this.times[key];
            data.object[data.field] = data.object[data.field] - interval;
            if (data.object[data.field] <= 0) {
              data.object[data.field] = 0;
              this.onTimerComplete(data);
            } else {
              this.times[key].startTime = null;
            }
          }
        };
        return TimerManager;
      }(Component));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimeUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c2070jsq0FDcaTrFhyA8yzm", "TimeUtils", undefined);
      /** 时间工具 */
      var TimeUtil = exports('TimeUtil', /*#__PURE__*/function () {
        function TimeUtil() {}
        /**
         * 间隔天数
         * @param time1 开始时间
         * @param time2 结束时间
         * @returns 
         */
        TimeUtil.daysBetween = function daysBetween(time1, time2) {
          if (time2 == undefined) {
            time2 = +new Date();
          }
          var startDate = new Date(time1).toLocaleDateString();
          var endDate = new Date(time2).toLocaleDateString();
          var startTime = new Date(startDate).getTime();
          var endTime = new Date(endDate).getTime();
          return Math.abs(startTime - endTime) / (1000 * 60 * 60 * 24);
        }

        /** 间隔秒数，时间顺序无要求，最后会获取绝对值 */;
        TimeUtil.secsBetween = function secsBetween(time1, time2) {
          var dates = Math.abs(time2 - time1) / 1000;
          dates = Math.floor(dates) + 1;
          return dates;
        }

        /**
         * 代码休眠时间
         * @param ms 毫秒
         */;
        TimeUtil.sleep = /*#__PURE__*/
        function () {
          var _sleep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ms) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", new Promise(function (resolve) {
                    setTimeout(function () {
                      resolve();
                    }, ms);
                  }));
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function sleep(_x) {
            return _sleep.apply(this, arguments);
          }
          return sleep;
        }();
        return TimeUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TipsManager.ts", ['cc', './UIConfig.ts', './Oops.ts'], function (exports) {
  var cclegacy, tween, Vec3, UIID, oops;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      UIID = module.UIID;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9748eriEcJOp6OSdnZ/qhs5", "TipsManager", undefined);

      /** 提示窗口管理 */
      var TipsManager = /*#__PURE__*/function () {
        function TipsManager() {}
        var _proto = TipsManager.prototype;
        _proto.test = function test(callback) {
          var operate = {
            title: 'common_prompt_title_sys',
            content: "common_prompt_content",
            okWord: 'common_prompt_ok',
            cancelWord: 'common_prompt_cancal',
            okFunc: function okFunc() {
              console.log("okFunc");
            },
            cancelFunc: function cancelFunc() {
              console.log("cancelFunc");
            },
            needCancel: true
          };
          oops.gui.open(UIID.Confirm, operate, this.getPopCommonEffect());
        };
        _proto.alert = function alert(content, cb, title, okWord) {
          var operate = {
            title: title ? title : 'common_prompt_title_sys',
            content: content,
            okWord: okWord ? okWord : 'common_prompt_ok',
            okFunc: function okFunc() {
              cb && cb();
            },
            needCancel: false
          };
          oops.gui.open(UIID.Confirm, operate, tips.getPopCommonEffect());
        };
        _proto.confirm = function confirm(content, cb, okWord) {
          if (okWord === void 0) {
            okWord = "common_prompt_ok";
          }
          var operate = {
            title: 'common_prompt_title_sys',
            content: content,
            okWord: okWord,
            cancelWord: 'common_prompt_cancal',
            okFunc: function okFunc() {
              cb && cb();
            },
            cancelFunc: function cancelFunc() {},
            needCancel: true
          };
          oops.gui.open(UIID.Confirm, operate, tips.getPopCommonEffect());
        }

        /** 弹窗动画 */;
        _proto.getPopCommonEffect = function getPopCommonEffect(callbacks) {
          var newCallbacks = {
            // 节点添加动画
            onAdded: function onAdded(node, params) {
              node.setScale(0.1, 0.1, 0.1);
              tween(node).to(0.2, {
                scale: new Vec3(1, 1, 1)
              }).start();
            },
            // 节点删除动画
            onBeforeRemove: function onBeforeRemove(node, next) {
              tween(node).to(0.2, {
                scale: new Vec3(0.1, 0.1, 0.1)
              }).call(function (target, data) {
                next();
              }).start();
            }
          };
          if (callbacks) {
            if (callbacks && callbacks.onAdded) {
              var onAdded = callbacks.onAdded;
              // @ts-ignore
              callbacks.onAdded = function (node, params) {
                onAdded(node, params);

                // @ts-ignore
                newCallbacks.onAdded(node, params);
              };
            }
            if (callbacks && callbacks.onBeforeRemove) {
              var onBeforeRemove = callbacks.onBeforeRemove;
              callbacks.onBeforeRemove = function (node, params) {
                onBeforeRemove(node, params);

                // @ts-ignore
                newCallbacks.onBeforeRemove(node, params);
              };
            }
            return callbacks;
          }
          return newCallbacks;
        };
        return TipsManager;
      }();
      var tips = exports('tips', new TipsManager());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TwoStringKiteStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0a370c7SZJDG6Xwcalogx5m", "TwoStringKiteStrategy", undefined);
      //双线风筝
      var TwoStringKiteStrategy = exports('TwoStringKiteStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(TwoStringKiteStrategy, _BaseStrategy);
        function TwoStringKiteStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 8;
          return _this;
        }
        var _proto = TwoStringKiteStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkTwoStringKite(board, candidates);
          if (result) {
            return this.createTwoStringKiteSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkTwoStringKite = function checkTwoStringKite(board, candidates) {
          var _this2 = this;
          var _loop = function _loop(value) {
              // 2. 查找所有行和列中的强链（恰好两个候选数的单位）
              var rowStrongLinks = _this2.findStrongLinks(value, HighlightAreaType.ROW, board, candidates);
              var colStrongLinks = _this2.findStrongLinks(value, HighlightAreaType.COLUMN, board, candidates);

              // 3. 检查行强链和列强链的组合（共享宫格）
              for (var _iterator = _createForOfIteratorHelperLoose(rowStrongLinks), _step; !(_step = _iterator()).done;) {
                var rowLink = _step.value;
                var _loop2 = function _loop2() {
                    var colLink = _step2.value;
                    // 检查是否共享宫格
                    var connectingBlock = _this2.findConnectingBlock(rowLink.cells, colLink.cells);
                    if (connectingBlock.length === 2) {
                      // 获取风筝的端点（非共享端的单元格）
                      var kiteEnd1 = rowLink.cells.find(function (cell) {
                        return !connectingBlock.some(function (conn) {
                          return _this2.isSamePosition(conn, cell);
                        });
                      });
                      var kiteEnd2 = colLink.cells.find(function (cell) {
                        return !connectingBlock.some(function (conn) {
                          return _this2.isSamePosition(conn, cell);
                        });
                      });

                      // 检查端点是否在同一宫格（无效情况）
                      if (!kiteEnd1 || !kiteEnd2 || SolverUtils.getBlockIndex(kiteEnd1) === SolverUtils.getBlockIndex(kiteEnd2)) {
                        return 0; // continue
                      }

                      // 检查端点是否共同可见某些单元格
                      var affectedCells = _this2.getSharedVisibleCells(kiteEnd1, kiteEnd2, board).filter(function (pos) {
                        return candidates[pos.row][pos.col].has(value);
                      });
                      if (affectedCells.length > 0) {
                        return {
                          v: {
                            v: {
                              value: value,
                              strongLinks: [rowLink, colLink],
                              connectingBlock: connectingBlock,
                              affectedCells: affectedCells
                            }
                          }
                        };
                      }
                    }
                  },
                  _ret2;
                for (var _iterator2 = _createForOfIteratorHelperLoose(colStrongLinks), _step2; !(_step2 = _iterator2()).done;) {
                  _ret2 = _loop2();
                  if (_ret2 === 0) continue;
                  if (_ret2) return _ret2.v;
                }
              }
            },
            _ret;
          // 1. 遍历所有数字1-9
          for (var value = 1; value <= 9; value++) {
            _ret = _loop(value);
            if (_ret) return _ret.v;
          }
          return null;
        };
        _proto.findStrongLinks = function findStrongLinks(value, areaType, board, candidates) {
          var strongLinks = [];
          var areaCount = areaType === HighlightAreaType.ROW ? 9 : 9;
          for (var areaIndex = 0; areaIndex < areaCount; areaIndex++) {
            var cells = areaType === HighlightAreaType.ROW ? SolverUtils.getRowCells(areaIndex) : SolverUtils.getColumnCells(areaIndex);

            // 查找该行/列中指定数字的候选格
            var candidateCells = cells.filter(function (pos) {
              return board[pos.row][pos.col] === BLANK_CHAR && candidates[pos.row][pos.col].has(value);
            });

            // 如果恰好有两个候选格，则形成强链
            if (candidateCells.length === 2) {
              strongLinks.push({
                areaType: areaType,
                areaIndex: areaIndex,
                cells: [candidateCells[0], candidateCells[1]]
              });
            }
          }
          return strongLinks;
        };
        _proto.findConnectingBlock = function findConnectingBlock(rowCells, colCells) {
          var _this3 = this;
          var connectingBlock = [];

          // 检查行强链的第一个单元格与列强链的两个单元格是否同宫
          var _loop3 = function _loop3() {
            var rowCell = _step3.value;
            var _loop4 = function _loop4() {
              var colCell = _step4.value;
              if (SolverUtils.getBlockIndex(rowCell) === SolverUtils.getBlockIndex(colCell)) {
                // 确保不重复添加
                if (!connectingBlock.some(function (pos) {
                  return _this3.isSamePosition(pos, rowCell);
                })) {
                  connectingBlock.push(rowCell);
                }
                if (!connectingBlock.some(function (pos) {
                  return _this3.isSamePosition(pos, colCell);
                })) {
                  connectingBlock.push(colCell);
                }
              }
            };
            for (var _iterator4 = _createForOfIteratorHelperLoose(colCells), _step4; !(_step4 = _iterator4()).done;) {
              _loop4();
            }
          };
          for (var _iterator3 = _createForOfIteratorHelperLoose(rowCells), _step3; !(_step3 = _iterator3()).done;) {
            _loop3();
          }

          // 双线风筝需要恰好两个单元格共享宫格
          return connectingBlock.length === 2 ? connectingBlock : [];
        };
        _proto.getSharedVisibleCells = function getSharedVisibleCells(cell1, cell2, board) {
          var _this4 = this;
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return _this4.isSamePosition(pos1, pos2);
            }) && board[pos1.row][pos1.col] === BLANK_CHAR;
          });
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) visible.push({
              row: cell.row,
              col: col
            });
          }
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) visible.push({
              row: row,
              col: cell.col
            });
          }
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _proto.isSamePosition = function isSamePosition(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        };
        _proto.createTwoStringKiteSteps = function createTwoStringKiteSteps(board, candidates, info) {
          var steps = [];
          var value = info.value,
            strongLinks = info.strongLinks,
            connectingBlock = info.connectingBlock,
            affectedCells = info.affectedCells;

          // 步骤1：发现双线风筝模式
          steps.push(this.createDiscoveryStep(board, candidates, info));

          // 步骤2：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, info));

          // 步骤3：展示影响
          steps.push(this.createImpactDemonstrationStep(board, candidates, info));

          // 步骤4：执行移除
          steps.push(this.createRemovalExecutionStep(board, candidates, info));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref) {
          var _this5 = this;
          var value = _ref.value,
            strongLinks = _ref.strongLinks,
            connectingBlock = _ref.connectingBlock,
            affectedCells = _ref.affectedCells;
          var rowLink = strongLinks[0];
          var colLink = strongLinks[1];
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("TwoStringKiteStrategy.discoveryDes", {
              name: _this5.name,
              description: _this5.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: affectedCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(SolverUtils.getRowCells(rowLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), SolverUtils.getColumnCells(colLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: [].concat(connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, _ref2) {
          var _this6 = this;
          var value = _ref2.value,
            strongLinks = _ref2.strongLinks,
            connectingBlock = _ref2.connectingBlock,
            affectedCells = _ref2.affectedCells;
          var rowLink = strongLinks[0];
          var colLink = strongLinks[1];
          var kiteEnd1 = rowLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this6.isSamePosition(conn, cell);
            });
          });
          var kiteEnd2 = colLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this6.isSamePosition(conn, cell);
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("TwoStringKiteStrategy.ruleExplanationDes", {
              name: _this6.name,
              value: value,
              rowNum: "R" + (rowLink.areaIndex + 1),
              colNum: "C" + (colLink.areaIndex + 1),
              connectingCell1: "R" + (connectingBlock[0].row + 1) + "C" + (connectingBlock[0].col + 1),
              connectingCell2: "R" + (connectingBlock[1].row + 1) + "C" + (connectingBlock[1].col + 1),
              block: SolverUtils.getBlockIndex(connectingBlock[0]) + 1,
              end1: "R" + (kiteEnd1.row + 1) + "C" + (kiteEnd1.col + 1),
              end2: "R" + (kiteEnd2.row + 1) + "C" + (kiteEnd2.col + 1)
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: affectedCells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([
            // 高亮行强链所在行
            SolverUtils.getRowCells(rowLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮列强链所在列
            SolverUtils.getColumnCells(colLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮连接块
            connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮风筝端点
            [kiteEnd1, kiteEnd2].map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })]),
            highlightNotes: [].concat(connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), [{
              position: kiteEnd1,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            }, {
              position: kiteEnd2,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            }])
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, _ref3) {
          var _this7 = this;
          var value = _ref3.value,
            strongLinks = _ref3.strongLinks,
            connectingBlock = _ref3.connectingBlock,
            affectedCells = _ref3.affectedCells;
          var rowLink = strongLinks[0];
          var colLink = strongLinks[1];
          var kiteEnd1 = rowLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this7.isSamePosition(conn, cell);
            });
          });
          var kiteEnd2 = colLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this7.isSamePosition(conn, cell);
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("TwoStringKiteStrategy.impactDemonstrationDes", {
              name: _this7.name,
              value: value,
              rowNum: "R" + (rowLink.areaIndex + 1),
              colNum: "C" + (colLink.areaIndex + 1),
              connectingCell1: "R" + (connectingBlock[0].row + 1) + "C" + (connectingBlock[0].col + 1),
              connectingCell2: "R" + (connectingBlock[1].row + 1) + "C" + (connectingBlock[1].col + 1),
              block: SolverUtils.getBlockIndex(connectingBlock[0]) + 1,
              end1: "R" + (kiteEnd1.row + 1) + "C" + (kiteEnd1.col + 1),
              end2: "R" + (kiteEnd2.row + 1) + "C" + (kiteEnd2.col + 1)
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: connectingBlock[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([
            // 高亮行强链所在行
            SolverUtils.getRowCells(rowLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮列强链所在列
            SolverUtils.getColumnCells(colLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮连接块
            connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮风筝端点
            [kiteEnd1, kiteEnd2].map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮受影响单元格
            affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })]),
            highlightNotes: [].concat(connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), [{
              position: kiteEnd1,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            }, {
              position: kiteEnd2,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            }], affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, _ref4) {
          var _this8 = this;
          var value = _ref4.value,
            strongLinks = _ref4.strongLinks,
            connectingBlock = _ref4.connectingBlock,
            affectedCells = _ref4.affectedCells;
          // 实际从候选数中移除数字
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });
          var rowLink = strongLinks[0];
          var colLink = strongLinks[1];
          var kiteEnd1 = rowLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this8.isSamePosition(conn, cell);
            });
          });
          var kiteEnd2 = colLink.cells.find(function (cell) {
            return !connectingBlock.some(function (conn) {
              return _this8.isSamePosition(conn, cell);
            });
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("TwoStringKiteStrategy.removalExecutionDes", {
              name: _this8.name,
              value: value,
              affectedCellsLength: affectedCells.length,
              rowNum: "R" + (rowLink.areaIndex + 1),
              colNum: "C" + (colLink.areaIndex + 1),
              connectingCell1: "R" + (connectingBlock[0].row + 1) + "C" + (connectingBlock[0].col + 1),
              connectingCell2: "R" + (connectingBlock[1].row + 1) + "C" + (connectingBlock[1].col + 1),
              block: SolverUtils.getBlockIndex(connectingBlock[0]) + 1,
              end1: "R" + (kiteEnd1.row + 1) + "C" + (kiteEnd1.col + 1),
              end2: "R" + (kiteEnd2.row + 1) + "C" + (kiteEnd2.col + 1)
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: connectingBlock[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([
            // 高亮行强链所在行
            SolverUtils.getRowCells(rowLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮列强链所在列
            SolverUtils.getColumnCells(colLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮连接块
            connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮风筝端点
            [kiteEnd1, kiteEnd2].map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }),
            // 高亮受影响单元格
            affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })]),
            highlightNotes: [].concat(connectingBlock.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), [{
              position: kiteEnd1,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            }, {
              position: kiteEnd2,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: value
            }])
          };
        };
        _createClass(TwoStringKiteStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("TwoStringKiteStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("TwoStringKiteStrategy.description");
          }
        }]);
        return TwoStringKiteStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Oops.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, AudioClip, game, Button, oops;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      game = module.game;
      Button = module.Button;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "86cefAWukVE77lEwgfFdYeD", "UIButton", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /** 
       * 通用按钮
       * 1、防连点
       * 2、按钮点击触发音效
       */
      var UIButton = exports('default', (_dec = ccclass("UIButton"), _dec2 = menu('OopsFramework/Button/UIButton （通用按钮）'), _dec3 = property({
        tooltip: "每次触发间隔"
      }), _dec4 = property({
        tooltip: "是否只触发一次"
      }), _dec5 = property({
        tooltip: "触摸音效",
        type: AudioClip
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Button) {
        _inheritsLoose(UIButton, _Button);
        function UIButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Button.call.apply(_Button, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "interval", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "once", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "effect", _descriptor3, _assertThisInitialized(_this));
          // private effectIds: number[] = [];
          /** 触摸次数 */
          _this._touchCount = 0;
          /** 触摸结束时间 */
          _this._touchEndTime = 0;
          return _this;
        }
        var _proto = UIButton.prototype;
        /** 触摸结束 */
        _proto._onTouchEnded = function _onTouchEnded(event) {
          // 是否只触发一次
          if (this.once) {
            if (this._touchCount > 0) {
              event.propagationStopped = true;
              return;
            }
            this._touchCount++;
          }

          // 防连点500毫秒出发一次事件
          if (this._touchEndTime && game.totalTime - this._touchEndTime < this.interval) {
            event.propagationStopped = true;
          } else {
            this._touchEndTime = game.totalTime;
            _Button.prototype._onTouchEnded.call(this, event);

            // 短按触摸音效
            this.playEffect();
          }
        }

        /** 短按触摸音效 */;
        _proto.playEffect = /*#__PURE__*/
        function () {
          var _playEffect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (this.effect) {
                    oops.audio.playEffect(this.effect);
                    // const effectId = await oops.audio.playEffect(this.effect, resLoader.defaultBundleName, () => {
                    //     this.effectIds.remove(effectId);
                    // });
                    // if (effectId > 0) this.effectIds.push(effectId);
                  }

                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function playEffect() {
            return _playEffect.apply(this, arguments);
          }
          return playEffect;
        }() // onDestroy() {
        //     if (this.effect) {
        //         this.effectIds.forEach(effectId => {
        //             console.log(effectId);
        //             oops.audio.putEffect(effectId, this.effect);
        //         });
        //     }
        // }
        ;

        return UIButton;
      }(Button), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "interval", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 500;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "once", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "effect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIConfig.ts", ['cc', './LayerManager.ts'], function (exports) {
  var cclegacy, LayerType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LayerType = module.LayerType;
    }],
    execute: function () {
      var _UIConfigData;
      cclegacy._RF.push({}, "ffa5c27PYVCvoC7Y7YOyl/8", "UIConfig", undefined);

      /** 界面唯一标识（方便服务器通过编号数据触发界面打开） */
      var UIID = exports('UIID', /*#__PURE__*/function (UIID) {
        UIID[UIID["Loading"] = 1] = "Loading";
        UIID[UIID["Alert"] = 2] = "Alert";
        UIID[UIID["Confirm"] = 3] = "Confirm";
        UIID[UIID["Lobby"] = 4] = "Lobby";
        UIID[UIID["Game"] = 5] = "Game";
        UIID[UIID["LevelPopup"] = 6] = "LevelPopup";
        UIID[UIID["SuccessPopup"] = 7] = "SuccessPopup";
        UIID[UIID["FailPopup"] = 8] = "FailPopup";
        UIID[UIID["HistoryPopup"] = 9] = "HistoryPopup";
        UIID[UIID["SettingPopup"] = 10] = "SettingPopup";
        UIID[UIID["LanguagePopup"] = 11] = "LanguagePopup";
        UIID[UIID["ThemePopup"] = 12] = "ThemePopup";
        return UIID;
      }({}));

      /** 打开界面方式的配置数据 */
      var UIConfigData = exports('UIConfigData', (_UIConfigData = {}, _UIConfigData[UIID.Alert] = {
        layer: LayerType.Dialog,
        prefab: "prefabs/dialog/alert",
        mask: true
      }, _UIConfigData[UIID.Confirm] = {
        layer: LayerType.Dialog,
        prefab: "prefabs/dialog/confirm",
        mask: true
      }, _UIConfigData[UIID.Loading] = {
        layer: LayerType.UI,
        prefab: "prefabs/view/loading",
        bundle: "resources"
      }, _UIConfigData[UIID.Lobby] = {
        layer: LayerType.UI,
        prefab: "prefabs/view/lobby",
        bundle: "resources"
      }, _UIConfigData[UIID.Game] = {
        layer: LayerType.UI,
        prefab: "prefabs/view/game",
        bundle: "resources"
      }, _UIConfigData[UIID.LevelPopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/levelPopup",
        bundle: "resources"
      }, _UIConfigData[UIID.SuccessPopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/successPopup",
        bundle: "resources"
      }, _UIConfigData[UIID.FailPopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/failPopup",
        bundle: "resources"
      }, _UIConfigData[UIID.HistoryPopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/historyPopup",
        bundle: "resources"
      }, _UIConfigData[UIID.SettingPopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/settingPopup",
        bundle: "resources"
      }, _UIConfigData[UIID.LanguagePopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/languagePopup",
        bundle: "resources"
      }, _UIConfigData[UIID.ThemePopup] = {
        layer: LayerType.PopUp,
        prefab: "prefabs/popup/themePopup",
        bundle: "resources"
      }, _UIConfigData));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UndoRecord.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ab441mVHX1FFpOg17dAdLVP", "UndoRecord", undefined); // 操作记录结构
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UniqueRectangleType1Strategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8b7639c8I9Axp1MFwfMZSjH", "UniqueRectangleType1Strategy", undefined);
      var UniqueRectangleType1Strategy = exports('UniqueRectangleType1Strategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(UniqueRectangleType1Strategy, _BaseStrategy);
        function UniqueRectangleType1Strategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 17;
          return _this;
        }
        var _proto = UniqueRectangleType1Strategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.findUniqueRectangle(candidates);
          if (result) {
            return this.createSteps(board, candidates, result);
          }
          return null;
        };
        _proto.findUniqueRectangle = function findUniqueRectangle(candidates) {
          // 1. 首先查找所有强链（行或列方向，候选数为2且相同）
          var strongLinks = this.findStrongLinks(candidates);

          // 2. 检查每条强链是否能形成唯一矩形
          for (var _iterator = _createForOfIteratorHelperLoose(strongLinks), _step; !(_step = _iterator()).done;) {
            var link = _step.value;
            var result = this.checkRectangleFormation(link, candidates);
            if (result) return result;
          }
          return null;
        };
        _proto.findStrongLinks = function findStrongLinks(candidates) {
          var strongLinks = [];

          // 预先生成所有可能的值对组合 (共C(9,2)=36种)
          var allValuePairs = this.generateValuePairs();

          // 并行检查行和列
          for (var i = 0; i < 9; i++) {
            this.checkLineLoose(HighlightAreaType.ROW, i, candidates, allValuePairs, strongLinks);
            this.checkLineLoose(HighlightAreaType.COLUMN, i, candidates, allValuePairs, strongLinks);
          }
          return strongLinks;
        }

        // 生成1-9的所有可能值对 [1,2]...[8,9]
        ;

        _proto.generateValuePairs = function generateValuePairs() {
          var pairs = [];
          for (var i = 1; i <= 8; i++) {
            for (var j = i + 1; j <= 9; j++) {
              pairs.push([i, j]);
            }
          }
          return pairs;
        };
        _proto.checkLine = function checkLine(direction, index, candidates, allValuePairs, strongLinks, strictCheck) {
          if (strictCheck === void 0) {
            strictCheck = true;
          }
          // 使用位掩码记录单元格状态 (9位表示9个单元格)
          var valueMasks = new Array(10).fill(0); // 1-9

          // 第一步：收集位掩码
          for (var pos = 0; pos < 9; pos++) {
            var _ref = direction === HighlightAreaType.ROW ? [index, pos] : [pos, index],
              row = _ref[0],
              col = _ref[1];
            for (var _iterator2 = _createForOfIteratorHelperLoose(candidates[row][col]), _step2; !(_step2 = _iterator2()).done;) {
              var value = _step2.value;
              valueMasks[value] |= 1 << pos;
            }
          }

          // 第二步：快速筛选可能的值对
          for (var _iterator3 = _createForOfIteratorHelperLoose(allValuePairs), _step3; !(_step3 = _iterator3()).done;) {
            var _step3$value = _step3.value,
              v1 = _step3$value[0],
              v2 = _step3$value[1];
            var mask1 = valueMasks[v1];
            var mask2 = valueMasks[v2];

            // 快速排除条件（使用位运算）
            if (this.countBits(mask1) !== 2 ||
            // 条件1：值v1是否恰好出现在2个单元格
            this.countBits(mask2) !== 2 ||
            // 条件2：值v2是否恰好出现在2个单元格
            (mask1 & mask2) === 0) {
              // 条件3：v1和v2是否有共同单元格
              continue; // 跳过不满足条件的情况
            }

            // 精确验证
            var commonMask = mask1 & mask2;
            if (this.countBits(commonMask) === 2) {
              var positions = this.maskToPositions(commonMask, direction, index);

              // 最终验证单元格是否严格双值
              if (!strictCheck || this.areStrictBiValue(positions, candidates, v1, v2)) {
                strongLinks.push({
                  direction: direction,
                  index: index,
                  cells: positions,
                  values: [v1, v2]
                });
              }
            }
          }
        }

        /**
         * 宽松版强链检测 - 检查行/列中是否存在两个单元格具有相同的双候选数[x,y]
         * @param direction 行或列方向
         * @param index 行/列索引
         * @param candidates 候选数矩阵
         * @param allValuePairs 所有可能的候选数对（如[[1,2], [1,3], ...]）
         * @param strongLinks 存储结果的数组
         */;
        _proto.checkLineLoose = function checkLineLoose(direction, index, candidates, allValuePairs, strongLinks) {
          // 获取当前行/列的所有单元格
          var cells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(index) : SolverUtils.getColumnCells(index);

          // 检查每个候选数对 [x,y]
          for (var _iterator4 = _createForOfIteratorHelperLoose(allValuePairs), _step4; !(_step4 = _iterator4()).done;) {
            var _step4$value = _step4.value,
              x = _step4$value[0],
              y = _step4$value[1];
            // 收集候选数完全等于[x,y]的单元格
            var matchedCells = [];
            for (var _iterator5 = _createForOfIteratorHelperLoose(cells), _step5; !(_step5 = _iterator5()).done;) {
              var pos = _step5.value;
              var cellCandidates = candidates[pos.row][pos.col];

              // 检查是否为严格双值格且候选数等于[x,y]
              if (cellCandidates.size === 2 && cellCandidates.has(x) && cellCandidates.has(y)) {
                matchedCells.push(pos);
              }
            }

            // 如果找到恰好两个单元格，记录为强链
            if (matchedCells.length === 2) {
              strongLinks.push({
                direction: direction,
                index: index,
                cells: [matchedCells[0], matchedCells[1]],
                values: [x, y]
              });
            }
          }
        }

        // 计算位掩码中1的个数（汉明重量）
        ;

        _proto.countBits = function countBits(n) {
          n = n - (n >> 1 & 0x55555555);
          n = (n & 0x33333333) + (n >> 2 & 0x33333333);
          return (n + (n >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
        }

        // 将位掩码转换为位置数组
        ;

        _proto.maskToPositions = function maskToPositions(mask, direction, index) {
          var positions = [];
          for (var i = 0; i < 9; i++) {
            if (mask & 1 << i) {
              positions.push(direction === HighlightAreaType.ROW ? {
                row: index,
                col: i
              } : {
                row: i,
                col: index
              });
            }
          }
          return [positions[0], positions[1]];
        }

        // 验证两个单元格是否严格只包含指定值
        ;

        _proto.areStrictBiValue = function areStrictBiValue(cells, candidates, v1, v2) {
          return cells.every(function (cell) {
            var cands = candidates[cell.row][cell.col];
            return cands.size === 2 && cands.has(v1) && cands.has(v2);
          });
        };
        _proto.checkRectangleFormation = function checkRectangleFormation(strongLink, candidates) {
          var _strongLink$cells = strongLink.cells,
            cellA = _strongLink$cells[0],
            cellB = _strongLink$cells[1];
          var uniqueRectangleInfoAB = this.checkRectanglePath(strongLink.direction, strongLink.index, [cellA, cellB], strongLink.values, candidates);
          if (uniqueRectangleInfoAB) {
            return uniqueRectangleInfoAB;
          }
          var uniqueRectangleInfoBA = this.checkRectanglePath(strongLink.direction, strongLink.index, [cellB, cellA], strongLink.values, candidates);
          if (uniqueRectangleInfoBA) {
            return uniqueRectangleInfoBA;
          }
          return null;
        }

        /**
         * 检查单一路径的矩形形成条件
         * @param anchorCell 锚点单元格（'cellA'或'cellB'）
         */;
        _proto.checkRectanglePath = function checkRectanglePath(direction, index, cells, values, candidates) {
          var cellA = cells[0],
            cellB = cells[1];
          var value1 = values[0],
            value2 = values[1];
          // 计算矩形另外两个顶点的位置
          var perpendicular = direction === HighlightAreaType.ROW ? HighlightAreaType.COLUMN : HighlightAreaType.ROW;
          var otherIndex = perpendicular === HighlightAreaType.ROW ? cellB.row : cellB.col;
          var otherStrongLink = [];
          this.checkLineLoose(perpendicular, otherIndex, candidates, [values], otherStrongLink);
          if (otherStrongLink.length > 0) {
            var cell = otherStrongLink[0].cells.filter(function (cell) {
              return cellB.row != cell.row || cellB.col != cell.col;
            });
            var extraCellPos = direction === HighlightAreaType.ROW ? {
              row: cell[0].row,
              col: cellA.col
            } : {
              row: cellA.row,
              col: cell[0].col
            };
            var targetCell = candidates[extraCellPos.row][extraCellPos.col];
            if (targetCell.size === 3 && targetCell.has(value1) && targetCell.has(value2)) {
              // 构造矩形信息
              var rectangle = [cellA, cellB, cell[0], extraCellPos];
              return {
                value: [].concat(targetCell).filter(function (candidate) {
                  return candidate != value1 && candidate != value2;
                })[0],
                cellCandidates: values,
                rectangle: rectangle,
                removeCells: [extraCellPos],
                strongLink: {
                  direction: direction,
                  // 强链方向
                  index: index,
                  // 强链所在行/列索引
                  cells: cells // 强链的两个单元格
                }
              };
            }
          }

          return null;
        };
        _proto.createSteps = function createSteps(board, candidates, info) {
          var steps = [];

          // 步骤1：描述矩形模式
          steps.push(this.createDiscoveryStep(board, candidates, info));

          // 步骤2：发现矩形模式
          steps.push(this.createRectangleStep(board, candidates, info));

          // 步骤3：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, info));

          // 步骤4：执行移除
          steps.push(this.createRemovalStep(board, candidates, info));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this2 = this;
          var value = _ref2.value,
            cellCandidates = _ref2.cellCandidates,
            rectangle = _ref2.rectangle,
            removeCells = _ref2.removeCells,
            strongLink = _ref2.strongLink;
          var linkCells = strongLink.direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(strongLink.index) : SolverUtils.getColumnCells(strongLink.index);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType1Strategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: strongLink.cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }))
          };
        };
        _proto.createRectangleStep = function createRectangleStep(board, candidates, _ref3) {
          var value = _ref3.value,
            cellCandidates = _ref3.cellCandidates,
            rectangle = _ref3.rectangle,
            removeCells = _ref3.removeCells,
            strongLink = _ref3.strongLink;
          var twoValueCells = rectangle.filter(function (pos) {
            return removeCells.every(function (rm) {
              return rm.row !== pos.row || rm.col !== pos.col;
            });
          });
          var threeValueCells = removeCells;
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType1Strategy.rectangleDes", {
              twoValueCells: twoValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              threeValueCells: threeValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              cellCandidates: cellCandidates.map(function (value) {
                return "" + value;
              }).join(', ')
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: rectangle[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: [].concat(rectangle.flatMap(function (pos) {
              return cellCandidates.map(function (value) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                };
              });
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, _ref4) {
          var value = _ref4.value,
            cellCandidates = _ref4.cellCandidates,
            rectangle = _ref4.rectangle,
            removeCells = _ref4.removeCells,
            strongLink = _ref4.strongLink;
          var highlightNotes = [].concat(rectangle.flatMap(function (pos) {
            return cellCandidates.map(function (value) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            });
          }), removeCells.flatMap(function (pos) {
            return cellCandidates.map(function (value) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: value
              };
            });
          }));
          var twoValueCells = rectangle.filter(function (pos) {
            return removeCells.every(function (rm) {
              return rm.row !== pos.row || rm.col !== pos.col;
            });
          });
          var threeValueCells = removeCells;
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType1Strategy.type1Explanation", {
              twoValueCells: twoValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              threeValueCells: threeValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              cellCandidates: cellCandidates.map(function (value) {
                return "" + value;
              }).join(', '),
              value: value
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: rectangle[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _proto.createRemovalStep = function createRemovalStep(board, candidates, _ref5) {
          var value = _ref5.value,
            cellCandidates = _ref5.cellCandidates,
            rectangle = _ref5.rectangle,
            removeCells = _ref5.removeCells,
            strongLink = _ref5.strongLink;
          // 实际从候选数中移除数字
          removeCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](cellCandidates[0]);
            candidates[pos.row][pos.col]["delete"](cellCandidates[1]);
          });
          var twoValueCells = rectangle.filter(function (pos) {
            return removeCells.every(function (rm) {
              return rm.row !== pos.row || rm.col !== pos.col;
            });
          });
          var threeValueCells = removeCells;
          var highlights = [].concat(rectangle.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }), removeCells.map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
            };
          }));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType1Strategy.removalDes", {
              twoValueCells: twoValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              threeValueCells: threeValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              cellCandidates: cellCandidates.map(function (value) {
                return "" + value;
              }).join(', '),
              value: value
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: removeCells[0],
            value: value,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.deduplicateHighlights(highlights, "last"),
            highlightNotes: [].concat(rectangle.flatMap(function (pos) {
              return cellCandidates.map(function (value) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                };
              });
            }))
          };
        };
        _createClass(UniqueRectangleType1Strategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("UniqueRectangleType1Strategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("UniqueRectangleType1Strategy.description");
          }
        }]);
        return UniqueRectangleType1Strategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UniqueRectangleType2Strategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f467a3RpJ9HN63uSEnUSncw", "UniqueRectangleType2Strategy", undefined);
      var UniqueRectangleType2Strategy = exports('UniqueRectangleType2Strategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(UniqueRectangleType2Strategy, _BaseStrategy);
        function UniqueRectangleType2Strategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 18;
          return _this;
        }
        var _proto = UniqueRectangleType2Strategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.findUniqueRectangle(candidates);
          if (result) {
            return this.createSteps(board, candidates, result);
          }
          return null;
        };
        _proto.findUniqueRectangle = function findUniqueRectangle(candidates) {
          // 1. 首先查找所有强链（行或列方向，候选数为2且相同）
          var strongLinks = this.findStrongLinks(candidates);

          // 2. 检查每条强链是否能形成唯一矩形
          for (var _iterator = _createForOfIteratorHelperLoose(strongLinks), _step; !(_step = _iterator()).done;) {
            var link = _step.value;
            var result = this.checkRectangleFormation(link, candidates);
            if (result) return result;
          }
          return null;
        };
        _proto.findStrongLinks = function findStrongLinks(candidates) {
          var strongLinks = [];

          // 预先生成所有可能的值对组合 (共C(9,2)=36种)
          var allValuePairs = this.generateValuePairs();

          // 并行检查行和列
          for (var i = 0; i < 9; i++) {
            this.checkLineLoose(HighlightAreaType.ROW, i, candidates, allValuePairs, strongLinks);
            this.checkLineLoose(HighlightAreaType.COLUMN, i, candidates, allValuePairs, strongLinks);
          }
          return strongLinks;
        }

        // 生成1-9的所有可能值对 [1,2]...[8,9]
        ;

        _proto.generateValuePairs = function generateValuePairs() {
          var pairs = [];
          for (var i = 1; i <= 8; i++) {
            for (var j = i + 1; j <= 9; j++) {
              pairs.push([i, j]);
            }
          }
          return pairs;
        };
        _proto.checkLine = function checkLine(direction, index, candidates, allValuePairs, strongLinks, strictCheck) {
          if (strictCheck === void 0) {
            strictCheck = true;
          }
          // 使用位掩码记录单元格状态 (9位表示9个单元格)
          var valueMasks = new Array(10).fill(0); // 1-9

          // 第一步：收集位掩码
          for (var pos = 0; pos < 9; pos++) {
            var _ref = direction === HighlightAreaType.ROW ? [index, pos] : [pos, index],
              row = _ref[0],
              col = _ref[1];
            for (var _iterator2 = _createForOfIteratorHelperLoose(candidates[row][col]), _step2; !(_step2 = _iterator2()).done;) {
              var value = _step2.value;
              valueMasks[value] |= 1 << pos;
            }
          }

          // 第二步：快速筛选可能的值对
          for (var _iterator3 = _createForOfIteratorHelperLoose(allValuePairs), _step3; !(_step3 = _iterator3()).done;) {
            var _step3$value = _step3.value,
              v1 = _step3$value[0],
              v2 = _step3$value[1];
            var mask1 = valueMasks[v1];
            var mask2 = valueMasks[v2];

            // 快速排除条件（使用位运算）
            if (this.countBits(mask1) !== 2 ||
            // 条件1：值v1是否恰好出现在2个单元格
            this.countBits(mask2) !== 2 ||
            // 条件2：值v2是否恰好出现在2个单元格
            (mask1 & mask2) === 0) {
              // 条件3：v1和v2是否有共同单元格
              continue; // 跳过不满足条件的情况
            }

            // 精确验证
            var commonMask = mask1 & mask2;
            if (this.countBits(commonMask) === 2) {
              var positions = this.maskToPositions(commonMask, direction, index);

              // 最终验证单元格是否严格双值
              if (!strictCheck || this.areStrictBiValue(positions, candidates, v1, v2)) {
                strongLinks.push({
                  direction: direction,
                  index: index,
                  cells: positions,
                  values: [v1, v2]
                });
              }
            }
          }
        }

        /**
         * 宽松版强链检测 - 检查行/列中是否存在两个单元格具有相同的双候选数[x,y]
         * @param direction 行或列方向
         * @param index 行/列索引
         * @param candidates 候选数矩阵
         * @param allValuePairs 所有可能的候选数对（如[[1,2], [1,3], ...]）
         * @param strongLinks 存储结果的数组
         */;
        _proto.checkLineLoose = function checkLineLoose(direction, index, candidates, allValuePairs, strongLinks) {
          // 获取当前行/列的所有单元格
          var cells = direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(index) : SolverUtils.getColumnCells(index);

          // 检查每个候选数对 [x,y]
          for (var _iterator4 = _createForOfIteratorHelperLoose(allValuePairs), _step4; !(_step4 = _iterator4()).done;) {
            var _step4$value = _step4.value,
              x = _step4$value[0],
              y = _step4$value[1];
            // 收集候选数完全等于[x,y]的单元格
            var matchedCells = [];
            for (var _iterator5 = _createForOfIteratorHelperLoose(cells), _step5; !(_step5 = _iterator5()).done;) {
              var pos = _step5.value;
              var cellCandidates = candidates[pos.row][pos.col];

              // 检查是否为严格双值格且候选数等于[x,y]
              if (cellCandidates.size === 2 && cellCandidates.has(x) && cellCandidates.has(y)) {
                matchedCells.push(pos);
              }
            }

            // 如果找到恰好两个单元格，记录为强链
            if (matchedCells.length === 2) {
              strongLinks.push({
                direction: direction,
                index: index,
                cells: [matchedCells[0], matchedCells[1]],
                values: [x, y]
              });
            }
          }
        }

        // 计算位掩码中1的个数（汉明重量）
        ;

        _proto.countBits = function countBits(n) {
          n = n - (n >> 1 & 0x55555555);
          n = (n & 0x33333333) + (n >> 2 & 0x33333333);
          return (n + (n >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
        }

        // 将位掩码转换为位置数组
        ;

        _proto.maskToPositions = function maskToPositions(mask, direction, index) {
          var positions = [];
          for (var i = 0; i < 9; i++) {
            if (mask & 1 << i) {
              positions.push(direction === HighlightAreaType.ROW ? {
                row: index,
                col: i
              } : {
                row: i,
                col: index
              });
            }
          }
          return [positions[0], positions[1]];
        }

        // 验证两个单元格是否严格只包含指定值
        ;

        _proto.areStrictBiValue = function areStrictBiValue(cells, candidates, v1, v2) {
          return cells.every(function (cell) {
            var cands = candidates[cell.row][cell.col];
            return cands.size === 2 && cands.has(v1) && cands.has(v2);
          });
        };
        _proto.checkRectangleFormation = function checkRectangleFormation(strongLink, candidates) {
          var _strongLink$cells = strongLink.cells,
            cellA = _strongLink$cells[0],
            cellB = _strongLink$cells[1];
          var uniqueRectangleInfoAB = this.checkRectanglePath(strongLink.direction, strongLink.index, [cellA, cellB], strongLink.values, candidates);
          if (uniqueRectangleInfoAB) {
            return uniqueRectangleInfoAB;
          }
          var uniqueRectangleInfoBA = this.checkRectanglePath(strongLink.direction, strongLink.index, [cellB, cellA], strongLink.values, candidates);
          if (uniqueRectangleInfoBA) {
            return uniqueRectangleInfoBA;
          }
          return null;
        }

        /**
         * 检查单一路径的矩形形成条件
         * @param anchorCell 锚点单元格（'cellA'或'cellB'）
         */;
        _proto.checkRectanglePath = function checkRectanglePath(direction, index, cells, values, candidates) {
          var _this2 = this;
          var info = null;
          var cellA = cells[0],
            cellB = cells[1];
          var value1 = values[0],
            value2 = values[1];
          // 计算矩形另外两个顶点的位置
          var perpendicular = direction === HighlightAreaType.ROW ? HighlightAreaType.COLUMN : HighlightAreaType.ROW;
          var otherIndex = perpendicular === HighlightAreaType.ROW ? cellB.row : cellB.col;
          // 获取垂直方向上的所有三值格（包含value1和value2）
          var threeValueCells = SolverUtils.getAreaCells(perpendicular, otherIndex).filter(function (pos) {
            var cellCandidates = candidates[pos.row][pos.col];
            if (cellCandidates.size === 3 && cellCandidates.has(value1) && cellCandidates.has(value2)) {
              return pos;
            }
          });
          threeValueCells.forEach(function (cell) {
            var extraCellPos = direction === HighlightAreaType.ROW ? {
              row: cell.row,
              col: cellA.col
            } : {
              row: cellA.row,
              col: cell.col
            };
            var targetCell = candidates[extraCellPos.row][extraCellPos.col];
            if (_this2.areCandidatesEqual(cell, extraCellPos, candidates)) {
              // 构造矩形信息
              var rectangle = [cellA, cellB, cell, extraCellPos];
              //获取3值单元格共同可见的关联单元格
              var removeCells = SolverUtils.getIntersectionRelatedCells([cell, extraCellPos]);
              var value = [].concat(targetCell).filter(function (candidate) {
                return candidate != value1 && candidate != value2;
              })[0];
              if (_this2.hasCandidateInCells(removeCells, value, candidates)) {
                info = {
                  value: value,
                  cellCandidates: values,
                  rectangle: rectangle,
                  removeCells: removeCells,
                  strongLink: {
                    direction: direction,
                    // 强链方向
                    index: index,
                    // 强链所在行/列索引
                    cells: cells // 强链的两个单元格
                  }
                };
              }
            }
          });

          return info;
        };
        _proto.areCandidatesEqual = function areCandidatesEqual(cell1Pos, cell2Pos, candidates) {
          var cell1 = candidates[cell1Pos.row][cell1Pos.col];
          var cell2 = candidates[cell2Pos.row][cell2Pos.col];

          // 如果大小不同，直接返回false
          if (cell1.size !== cell2.size) return false;

          // 检查cell1的所有候选数是否都在cell2中
          for (var _iterator6 = _createForOfIteratorHelperLoose(cell1), _step6; !(_step6 = _iterator6()).done;) {
            var value = _step6.value;
            if (!cell2.has(value)) return false;
          }
          return true;
        }

        /**
         * 检查一组单元格中是否存在至少一个单元格包含指定候选数
         * @param cells 待检查的单元格数组
         * @param value 要检查的候选数（1-9）
         * @param candidates 当前候选数矩阵（9x9的Set数组）
         * @returns 是否至少有一个单元格包含该候选数
         */;
        _proto.hasCandidateInCells = function hasCandidateInCells(cells, value, candidates) {
          // 边界检查
          if (value < 1 || value > 9) {
            console.error("候选数必须是1-9的数字");
            return false;
          }

          // 遍历所有单元格
          for (var _iterator7 = _createForOfIteratorHelperLoose(cells), _step7; !(_step7 = _iterator7()).done;) {
            var cell = _step7.value;
            var row = cell.row,
              col = cell.col;
            // 检查候选数是否存在
            if (candidates[row][col].has(value)) {
              return true; // 找到即返回
            }
          }

          return false; // 全部检查完毕未找到
        };

        _proto.createSteps = function createSteps(board, candidates, info) {
          var steps = [];

          // 步骤1：描述矩形模式
          steps.push(this.createDiscoveryStep(board, candidates, info));

          // 步骤2：发现矩形模式
          steps.push(this.createRectangleStep(board, candidates, info));

          // 步骤3：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, info));

          // 步骤4：执行移除
          steps.push(this.createRemovalStep(board, candidates, info));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this3 = this;
          var value = _ref2.value,
            cellCandidates = _ref2.cellCandidates,
            rectangle = _ref2.rectangle,
            removeCells = _ref2.removeCells,
            strongLink = _ref2.strongLink;
          var linkCells = strongLink.direction === HighlightAreaType.ROW ? SolverUtils.getRowCells(strongLink.index) : SolverUtils.getColumnCells(strongLink.index);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType2Strategy.discoveryDes", {
              name: _this3.name,
              description: _this3.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: strongLink.cells[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }))
          };
        };
        _proto.createRectangleStep = function createRectangleStep(board, candidates, _ref3) {
          var value = _ref3.value,
            cellCandidates = _ref3.cellCandidates,
            rectangle = _ref3.rectangle,
            removeCells = _ref3.removeCells,
            strongLink = _ref3.strongLink;
          var twoValueCells = [];
          var threeValueCells = [];
          rectangle.forEach(function (pos) {
            if (candidates[pos.row][pos.col].size === 2) {
              twoValueCells.push(pos);
            } else if (candidates[pos.row][pos.col].size === 3) {
              threeValueCells.push(pos);
            }
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType2Strategy.rectangleDes", {
              twoValueCells: twoValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              threeValueCells: threeValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              cellCandidates: cellCandidates.map(function (value) {
                return "" + value;
              }).join(', ')
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: rectangle[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: [].concat(rectangle.flatMap(function (pos) {
              return cellCandidates.map(function (value) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: value
                };
              });
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, _ref4) {
          var value = _ref4.value,
            cellCandidates = _ref4.cellCandidates,
            rectangle = _ref4.rectangle,
            removeCells = _ref4.removeCells,
            strongLink = _ref4.strongLink;
          var highlightNotes = [].concat(rectangle.flatMap(function (pos) {
            return [].concat(candidates[pos.row][pos.col]).map(function (cellValue) {
              return {
                position: pos,
                backgroundColor: cellValue === value ? HighlightConfig.hintCell.background : HighlightConfig.defaultCell.background,
                textColor: cellValue === value ? HighlightConfig.hintCell.textColor : HighlightConfig.defaultCell.textColor,
                value: cellValue
              };
            });
          }), removeCells.filter(function (pos) {
            if (candidates[pos.row][pos.col].has(value)) {
              return pos;
            }
          }).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintRemoveCell.background,
              textColor: HighlightConfig.hintRemoveCell.textColor,
              value: value
            };
          }));
          var twoValueCells = [];
          var threeValueCells = [];
          rectangle.forEach(function (pos) {
            if (candidates[pos.row][pos.col].size === 2) {
              twoValueCells.push(pos);
            } else if (candidates[pos.row][pos.col].size === 3) {
              threeValueCells.push(pos);
            }
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType2Strategy.type1Explanation", {
              twoValueCells: twoValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              threeValueCells: threeValueCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(', '),
              cellCandidates: cellCandidates.map(function (value) {
                return "" + value;
              }).join(', '),
              value: value
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: rectangle[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), removeCells.flatMap(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _proto.createRemovalStep = function createRemovalStep(board, candidates, _ref5) {
          var _this4 = this;
          var value = _ref5.value,
            cellCandidates = _ref5.cellCandidates,
            rectangle = _ref5.rectangle,
            removeCells = _ref5.removeCells,
            strongLink = _ref5.strongLink;
          var removeCellLength = removeCells.filter(function (pos) {
            if (candidates[pos.row][pos.col].has(value)) {
              return pos;
            }
          }).length;

          // 实际从候选数中移除数字
          removeCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });
          var twoValueCells = rectangle.filter(function (pos) {
            return removeCells.every(function (rm) {
              return rm.row !== pos.row || rm.col !== pos.col;
            });
          });
          var highlightNotes = [].concat(rectangle.flatMap(function (pos) {
            return [].concat(candidates[pos.row][pos.col]).map(function (cellValue) {
              return {
                position: pos,
                backgroundColor: cellValue === value ? HighlightConfig.hintCell.background : HighlightConfig.defaultCell.background,
                textColor: cellValue === value ? HighlightConfig.hintCell.textColor : HighlightConfig.defaultCell.textColor,
                value: cellValue
              };
            });
          }));
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("UniqueRectangleType2Strategy.removalDes", {
              name: _this4.name,
              value: value,
              removeCellLength: removeCellLength
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: rectangle[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(rectangle.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), removeCells.flatMap(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })),
            highlightNotes: SolverUtils.deduplicateHighlightNotes(highlightNotes, "last")
          };
        };
        _createClass(UniqueRectangleType2Strategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("UniqueRectangleType2Strategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("UniqueRectangleType2Strategy.description");
          }
        }]);
        return UniqueRectangleType2Strategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Vec3Util.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MathUtil.ts'], function (exports) {
  var _createClass, cclegacy, Vec3, Mat4, MathUtil;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Mat4 = module.Mat4;
    }, function (module) {
      MathUtil = module.MathUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "38947ih8d5EQ7HG4buug+SR", "Vec3Util", undefined);

      /** 向量工具 */
      var Vec3Util = exports('Vec3Util', /*#__PURE__*/function () {
        function Vec3Util() {}
        /**
         * 随时间变化进度值
         * @param start  起始位置
         * @param end    结束位置
         * @param t      进度[0，1]
         */
        Vec3Util.progress = function progress(start, end, t) {
          var current = new Vec3();
          current.x = MathUtil.progress(start.x, end.x, t);
          current.y = MathUtil.progress(start.y, end.y, t);
          current.z = MathUtil.progress(start.z, end.z, t);
          return current;
        }

        /**
         * 求两个三维向量的和
         * @param pos1  向量1
         * @param pos2  向量2
         */;
        Vec3Util.add = function add(pos1, pos2) {
          var outPos = new Vec3();
          Vec3.add(outPos, pos1, pos2);
          return outPos;
        }

        /**
         * 求两个三维向量的差
         * @param pos1  向量1
         * @param pos2  向量2
         */;
        Vec3Util.sub = function sub(pos1, pos2) {
          var outPos = new Vec3();
          Vec3.subtract(outPos, pos1, pos2);
          return outPos;
        }

        /**
         * 三维向量乘以常量
         * @param pos     向量
         * @param scalar  常量
         */;
        Vec3Util.mul = function mul(pos, scalar) {
          var outPos = new Vec3();
          Vec3.multiplyScalar(outPos, pos, scalar);
          return outPos;
        }

        /**
         * 三维向量除常量
         * @param pos     向量
         * @param scalar  常量
         */;
        Vec3Util.div = function div(pos, scalar) {
          var outPos = new Vec3();
          outPos.x = pos.x / scalar;
          outPos.y = pos.y / scalar;
          outPos.z = pos.z / scalar;
          return outPos;
        }

        /**
         * 判断两个三维向量的值是否相等
         * @param pos1  向量1
         * @param pos2  向量2
         */;
        Vec3Util.equals = function equals(pos1, pos2) {
          return pos1.x == pos2.x && pos1.y == pos2.y && pos1.z == pos2.z;
        }

        /**
         * 三维向量的模
         * @param pos  向量
         */;
        Vec3Util.magnitude = function magnitude(pos) {
          return pos.length();
        }

        /**
         * 三维向量归一化
         * @param pos  向量
         */;
        Vec3Util.normalize = function normalize(pos) {
          var outPos = new Vec3(pos.x, pos.y, pos.z);
          return outPos.normalize();
        }

        /**
         * 获得位置1，到位置2的方向
         * @param pos1  向量1
         * @param pos2  向量2
         */;
        Vec3Util.direction = function direction(pos1, pos2) {
          var outPos = new Vec3();
          Vec3.subtract(outPos, pos2, pos1);
          return outPos.normalize();
        }

        /**
         * 获得两点间的距离
         * @param pos1  向量1
         * @param pos2  向量2
         */;
        Vec3Util.distance = function distance(pos1, pos2) {
          return Vec3.distance(pos1, pos2);
        }

        /**
         * 插值运算
         * @param posStart  开始俏步
         * @param posEnd    结束位置
         * @param t         时间
         */;
        Vec3Util.lerp = function lerp(posStart, posEnd, t) {
          return this.bezierOne(t, posStart, posEnd);
        }

        /**
         * 球面插值
         * @param from  起点
         * @param to    终点
         * @param t     时间
         */;
        Vec3Util.slerp = function slerp(from, to, t) {
          if (t <= 0) {
            return from;
          } else if (t >= 1) {
            return to;
          }
          var dir = this.rotateTo(from, to, Vec3.angle(from, to) / Math.PI * 180 * t);
          var lenght = to.length() * t + from.length() * (1 - t);
          return dir.normalize().multiplyScalar(lenght);
        }

        /**
         * 向量旋转一个角度
         * @param from  起点
         * @param to    终点
         * @param angle 角并
         */;
        Vec3Util.rotateTo = function rotateTo(from, to, angle) {
          //如果两个方向角度为0，则返回目标
          if (Vec3.angle(from, to) == 0) {
            return to;
          }
          var axis = new Vec3(); // 获得旋转轴
          Vec3.cross(axis, from, to);
          axis.normalize();
          var radian = angle * Math.PI / 180; // 获得弧度
          var rotateMatrix = new Mat4();
          rotateMatrix.rotate(radian, axis);
          return new Vec3(from.x * rotateMatrix.m00 + from.y * rotateMatrix.m04 + from.z * rotateMatrix.m08, from.x * rotateMatrix.m01 + from.y * rotateMatrix.m05 + from.z * rotateMatrix.m09, from.x * rotateMatrix.m02 + from.y * rotateMatrix.m06 + from.z * rotateMatrix.m10);
        }

        /**
         * 一次贝塞尔即为线性插值函数
         * @param t
         * @param posStart
         * @param posEnd
         * @returns
         */;
        Vec3Util.bezierOne = function bezierOne(t, posStart, posEnd) {
          if (t > 1) {
            t = 1;
          } else if (t < 0) {
            t = 0;
          }
          var pStart = posStart.clone();
          var pEnd = posEnd.clone();
          return pStart.multiplyScalar(1 - t).add(pEnd.multiplyScalar(t));
        }

        /**
         * 二次贝塞尔曲线
         * @param t
         * @param posStart
         * @param posCon
         * @param posEnd
         * @returns
         */;
        Vec3Util.bezierTwo = function bezierTwo(t, posStart, posCon, posEnd) {
          if (t > 1) {
            t = 1;
          } else if (t < 0) {
            t = 0;
          }
          var n = 1 - t;
          var tt = t * t;
          var pStart = posStart.clone();
          var pos = new Vec3();
          var pCon = posCon.clone();
          var pEnd = posEnd.clone();
          pos.add(pStart.multiplyScalar(n * n));
          pos.add(pCon.multiplyScalar(2 * n * t));
          pos.add(pEnd.multiplyScalar(tt));
          return pos;
        }

        /**
         * 三次贝塞尔
         * @param t
         * @param posStart
         * @param posCon1
         * @param posCon2
         * @param posEnd
         * @returns
         */;
        Vec3Util.bezierThree = function bezierThree(t, posStart, posCon1, posCon2, posEnd) {
          if (t > 1) {
            t = 1;
          } else if (t < 0) {
            t = 0;
          }
          var n = 1 - t;
          var nn = n * n;
          var nnn = nn * n;
          var tt = t * t;
          var ttt = tt * t;
          var pStart = posStart.clone();
          var pos = posStart.clone();
          var pCon1 = posCon1.clone();
          var pCon2 = posCon2.clone();
          var pEnd = posEnd.clone();
          pos.add(pStart.multiplyScalar(nnn));
          pos.add(pCon1.multiplyScalar(3 * nn * t));
          pos.add(pCon2.multiplyScalar(3 * n * tt));
          pos.add(pEnd.multiplyScalar(ttt));
          return pos;
        }

        /**
         * 点乘
         * @param dir1 方向量1
         * @param dir2 方向量2
         */;
        Vec3Util.dot = function dot(dir1, dir2) {
          var tempDir1 = dir1;
          var tempDir2 = dir2;
          return tempDir1.x * tempDir2.x + tempDir1.y * tempDir2.y + tempDir1.z * tempDir2.z;
        }

        /**
         * 叉乘
         * @param dir1 方向量1
         * @param dir2 方向量2
         */;
        Vec3Util.cross = function cross(dir1, dir2) {
          var i = new Vec3(1, 0, 0);
          var j = new Vec3(0, 1, 0);
          var k = new Vec3(0, 0, 1);
          var tempDir1 = new Vec3(dir1.x, dir1.y, dir1.z);
          var tempDir2 = new Vec3(dir2.x, dir2.y, dir2.z);
          var iv = i.multiplyScalar(tempDir1.y * tempDir2.z - tempDir2.y * tempDir1.z);
          var jv = j.multiplyScalar(tempDir2.x * tempDir1.z - tempDir1.x * tempDir2.z);
          var kv = k.multiplyScalar(tempDir1.x * tempDir2.y - tempDir2.x * tempDir1.y);
          return iv.add(jv).add(kv);
        }

        /**
         * 获得两个方向向量的角度
         * @param dir1 方向量1
         * @param dir2 方向量2
         */;
        Vec3Util.angle = function angle(dir1, dir2) {
          var dotValue = this.dot(dir1.clone().normalize(), dir2.clone().normalize());
          return Math.acos(dotValue) / Math.PI * 180 * Math.sign(dotValue);
        }

        /**
         * 获得方向a到方向b的角度（带有方向的角度）
         * @param a 角度a
         * @param b 角度b
         */;
        Vec3Util.dirAngle = function dirAngle(a, b) {
          var c = Vec3Util.cross(a, b);
          var angle = Vec3Util.angle(a, b);
          // a 到 b 的夹角
          var sign = Math.sign(Vec3Util.dot(c.normalize(), Vec3Util.cross(b.normalize(), a.normalize())));
          return angle * sign;
        };
        _createClass(Vec3Util, null, [{
          key: "x",
          get:
          /**
           * X轴
           */
          function get() {
            return new Vec3(1, 0, 0);
          }

          /**
           * Y轴
           */
        }, {
          key: "y",
          get: function get() {
            return new Vec3(0, 1, 0);
          }

          /**
           * Z轴
           */
        }, {
          key: "z",
          get: function get() {
            return new Vec3(0, 0, 1);
          }

          /**
           * 左向量
           */
        }, {
          key: "left",
          get: function get() {
            return new Vec3(-1, 0, 0);
          }

          /**
           * 右向量
           */
        }, {
          key: "right",
          get: function get() {
            return new Vec3(1, 0, 0);
          }

          /**
           * 上向量
           */
        }, {
          key: "up",
          get: function get() {
            return new Vec3(0, 1, 0);
          }

          /**
           * 下向量
           */
        }, {
          key: "down",
          get: function get() {
            return new Vec3(0, -1, 0);
          }

          /**
           * 前向量
           */
        }, {
          key: "forward",
          get: function get() {
            return new Vec3(0, 0, 1);
          }

          /**
           * 后向量
           */
        }, {
          key: "back",
          get: function get() {
            return new Vec3(0, 0, -1);
          }

          /**
           * 1向量
           */
        }, {
          key: "one",
          get: function get() {
            return new Vec3(1, 1, 1);
          }

          /**
           * 0向量
           */
        }, {
          key: "zero",
          get: function get() {
            return new Vec3(0, 0, 0);
          }
        }]);
        return Vec3Util;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewModel.ts", ['cc', './JsonOb.ts'], function (exports) {
  var cclegacy, director, JsonOb;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }, function (module) {
      JsonOb = module.JsonOb;
    }],
    execute: function () {
      cclegacy._RF.push({}, "54f75k4X+RP0qaXOzrfZysL", "ViewModel", undefined);
      var VM_EMIT_HEAD = 'VC:';

      /** 通过 .  路径设置值 */
      function setValueFromPath(obj, path, value, tag) {
        if (tag === void 0) {
          tag = '';
        }
        var props = path.split('.');
        for (var i = 0; i < props.length; i++) {
          var propName = props[i];
          if (propName in obj === false) {
            console.error('[' + propName + '] not find in ' + tag + '.' + path);
            break;
          }
          if (i == props.length - 1) {
            obj[propName] = value;
          } else {
            obj = obj[propName];
          }
        }
      }

      /** 通过 . 路径 获取值 */
      function getValueFromPath(obj, path, def, tag) {
        if (tag === void 0) {
          tag = '';
        }
        var props = path.split('.');
        for (var i = 0; i < props.length; i++) {
          var propName = props[i];
          if (propName in obj === false) {
            console.error('[' + propName + '] not find in ' + tag + '.' + path);
            return def;
          }
          obj = obj[propName];
        }
        if (obj === null || typeof obj === "undefined") obj = def; //如果g == null 则返回一个默认值
        return obj;
      }

      /**
       * ModelViewer 类
       */
      var ViewModel = /*#__PURE__*/function () {
        function ViewModel(data, tag) {
          this.$data = void 0;
          // 索引值用的标签
          this._tag = null;
          /** 激活状态, 将会通过 director.emit 发送值变动的信号, 适合需要屏蔽的情况 */
          this.active = true;
          /** 是否激活根路径回调通知, 不激活的情况下 只能监听末端路径值来判断是否变化 */
          this.emitToRootPath = false;
          new JsonOb(data, this._callback.bind(this));
          this.$data = data;
          this._tag = tag;
        }
        var _proto = ViewModel.prototype;
        // 回调函数 请注意 回调的 path 数组是 引用类型，禁止修改
        _proto._callback = function _callback(n, o, path) {
          if (this.active == true) {
            var name = VM_EMIT_HEAD + this._tag + '.' + path.join('.');
            director.emit(name, n, o, [this._tag].concat(path)); // 通知末端路径

            if (this.emitToRootPath) director.emit(VM_EMIT_HEAD + this._tag, n, o, path); // 通知主路径

            if (path.length >= 2) {
              for (var i = 0; i < path.length - 1; i++) {
                var e = path[i];
                //log('中端路径');
              }
            }
          }
        }

        // 通过路径设置数据的方法
        ;

        _proto.setValue = function setValue(path, value) {
          setValueFromPath(this.$data, path, value, this._tag);
        }

        // 获取路径的值
        ;

        _proto.getValue = function getValue(path, def) {
          return getValueFromPath(this.$data, path, def, this._tag);
        };
        return ViewModel;
      }();
      /**
       * VM 对象管理器(工厂)
       */
      var VMManager = /*#__PURE__*/function () {
        function VMManager() {
          this._mvs = new Map();
          this.setObjValue = setValueFromPath;
          this.getObjValue = getValueFromPath;
        }
        var _proto2 = VMManager.prototype;
        /**
         * 绑定一个数据，并且可以由VM所管理（绑定的数据只能是值类型）
         * @param data 需要绑定的数据
         * @param tag 对应该数据的标签(用于识别为哪个VM，不允许重复)
         * @param activeRootObject 激活主路径通知，可能会有性能影响，一般不使用
         */
        _proto2.add = function add(data, tag, activeRootObject) {
          if (tag === void 0) {
            tag = 'global';
          }
          if (activeRootObject === void 0) {
            activeRootObject = false;
          }
          var vm = new ViewModel(data, tag);
          var has = this._mvs.get(tag);
          if (tag.includes('.')) {
            console.error('cant write . in tag:', tag);
            return;
          }
          if (has) {
            console.error('already set VM tag:' + tag);
            return;
          }
          vm.emitToRootPath = activeRootObject;
          this._mvs.set(tag, vm);
        }

        /**
         * 移除并且销毁 VM 对象
         * @param tag 
         */;
        _proto2.remove = function remove(tag) {
          this._mvs["delete"](tag);
        }

        /**
         * 获取绑定的数据
         * @param tag 数据tag
         */;
        _proto2.get = function get(tag) {
          var res = this._mvs.get(tag);
          return res;
        }

        /**
         * 通过全局路径,而不是 VM 对象来 设置值
         * @param path - 全局取值路径
         * @param value - 需要增加的值
         */;
        _proto2.addValue = function addValue(path, value) {
          path = path.trim(); //防止空格,自动剔除
          var rs = path.split('.');
          if (rs.length < 2) {
            console.error('Cant find path:' + path);
          }
          var vm = this.get(rs[0]);
          if (!vm) {
            console.error('Cant Set VM:' + rs[0]);
            return;
          }
          var resPath = rs.slice(1).join('.');
          vm.setValue(resPath, vm.getValue(resPath) + value);
        }

        /**
         * 通过全局路径,而不是 VM 对象来 获取值
         * @param path - 全局取值路径
         * @param def - 如果取不到值的返回的默认值
         */;
        _proto2.getValue = function getValue(path, def) {
          path = path.trim(); // 防止空格,自动剔除
          var rs = path.split('.');
          if (rs.length < 2) {
            console.error('Get Value Cant find path:' + path);
            return;
          }
          var vm = this.get(rs[0]);
          if (!vm) {
            console.error('Cant Get VM:' + rs[0]);
            return;
          }
          return vm.getValue(rs.slice(1).join('.'), def);
        }

        /**
         * 通过全局路径,而不是 VM 对象来 设置值
         * @param path - 全局取值路径
         * @param value - 需要设置的值
         */;
        _proto2.setValue = function setValue(path, value) {
          path = path.trim(); // 防止空格,自动剔除
          var rs = path.split('.');
          if (rs.length < 2) {
            console.error('Set Value Cant find path:' + path);
            return;
          }
          var vm = this.get(rs[0]);
          if (!vm) {
            console.error('Cant Set VM:' + rs[0]);
            return;
          }
          vm.setValue(rs.slice(1).join('.'), value);
        };
        /** 等同于 director.on */
        _proto2.bindPath = function bindPath(path, callback, target, useCapture) {
          path = path.trim(); // 防止空格,自动剔除
          if (path == '') {
            console.error(target.node.name, '节点绑定的路径为空');
            return;
          }
          if (path.split('.')[0] === '*') {
            console.error(path, '路径不合法,可能错误覆盖了 VMParent 的onLoad 方法, 或者父节点并未挂载 VMParent 相关的组件脚本');
            return;
          }
          // @ts-ignore
          director.on(VM_EMIT_HEAD + path, callback, target, useCapture);
        }

        /** 等同于 director.off */;
        _proto2.unbindPath = function unbindPath(path, callback, target) {
          path = path.trim(); //防止空格,自动剔除
          if (path.split('.')[0] === '*') {
            console.error(path, '路径不合法,可能错误覆盖了 VMParent 的onLoad 方法, 或者父节点并未挂载 VMParent 相关的组件脚本');
            return;
          }
          // @ts-ignore
          director.off(VM_EMIT_HEAD + path, callback, target);
        }

        /** 冻结所有标签的 VM，视图将不会受到任何信息 */;
        _proto2.inactive = function inactive() {
          this._mvs.forEach(function (mv) {
            mv.active = false;
          });
        }

        /** 激活所有标签的 VM*/;
        _proto2.active = function active() {
          this._mvs.forEach(function (mv) {
            mv.active = false;
          });
        };
        return VMManager;
      }(); //   整数、小数、时间、缩写
      /**
       *  VM管理对象,使用文档: 
       *  https://github.com/wsssheep/cocos_creator_mvvm_tools/blob/master/docs/ViewModelScript.md
       */
      var VM = exports('VM', new VMManager());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResLoader.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, UITransform, v3, Size, Prefab, instantiate, Animation, AnimationClip, resLoader;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      v3 = module.v3;
      Size = module.Size;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Animation = module.Animation;
      AnimationClip = module.AnimationClip;
    }, function (module) {
      resLoader = module.resLoader;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f607cCjAEZHVKVZ/FyRs5bA", "ViewUtil", undefined);

      /** 显示对象工具 */
      var ViewUtil = exports('ViewUtil', /*#__PURE__*/function () {
        function ViewUtil() {}
        /**
         * 把Node当前的节点树结构根据Node命名转成一个js对象,重名的组件会覆盖，
         * Node的name不应该包含空格键，否则将跳过
         * @param parent 被遍历的Node组件
         * @param obj    绑定的js对象 (可选)
         */
        ViewUtil.nodeTreeInfoLite = function nodeTreeInfoLite(parent, obj) {
          var map = obj || new Map();
          var items = parent.children;
          for (var i = 0; i < items.length; i++) {
            var _node = items[i];
            if (_node.name.indexOf(" ") < 0) {
              map.set(_node.name, _node);
            }
            ViewUtil.nodeTreeInfoLite(_node, map);
          }
          return map;
        }

        /**
         * 正则搜索节点名字,符合条件的节点将会返回
         * @param reg     正则表达式
         * @param parent  要搜索的父节点
         * @param nodes   返回的数组（可选）
         */;
        ViewUtil.findNodes = function findNodes(reg, parent, nodes) {
          var ns = nodes || [];
          var items = parent.children;
          for (var i = 0; i < items.length; i++) {
            var _name = items[i].name;
            if (reg.test(_name)) {
              ns.push(items[i]);
            }
            ViewUtil.findNodes(reg, items[i], ns);
          }
          return ns;
        };
        /**
         * 节点之间坐标互转
         * @param a         A节点
         * @param b         B节点
         * @param aPos      A节点空间中的相对位置
         */
        ViewUtil.calculateASpaceToBSpacePos = function calculateASpaceToBSpacePos(a, b, aPos) {
          var world = a.getComponent(UITransform).convertToWorldSpaceAR(aPos);
          return b.getComponent(UITransform).convertToNodeSpaceAR(world);
        }

        /**
         * 屏幕转空间坐标
         * @param event 触摸事件
         * @param space 转到此节点的坐标空间
         */;
        ViewUtil.calculateScreenPosToSpacePos = function calculateScreenPosToSpacePos(event, space) {
          var uil = event.getUILocation();
          var worldPos = v3(uil.x, uil.y);
          return space.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
        }

        /**
         * 显示对象等比缩放
         * @param targetWidth       目标宽
         * @param targetHeight      目标高
         * @param defaultWidth      默认宽
         * @param defaultHeight     默认高
         */;
        ViewUtil.uniformScale = function uniformScale(targetWidth, targetHeight, defaultWidth, defaultHeight) {
          var widthRatio = defaultWidth / targetWidth;
          var heightRatio = defaultHeight / targetHeight;
          var ratio;
          widthRatio < heightRatio ? ratio = widthRatio : ratio = heightRatio;
          return new Size(Math.floor(targetWidth * ratio), Math.floor(targetHeight * ratio));
        }

        /**
         * 从资源缓存中找到预制资源名并创建一个显示对象（建议使用GameComponent里的同名方法，能自动管理内存施放）
         * @param path        资源路径
         * @param bundleName  资源包名
         */;
        ViewUtil.createPrefabNode = function createPrefabNode(path, bundleName) {
          if (bundleName === void 0) {
            bundleName = resLoader.defaultBundleName;
          }
          var p = resLoader.get(path, Prefab, bundleName);
          if (p) {
            return instantiate(p);
          }
          return null;
        }

        /**
         * 加载预制并创建预制节点（建议使用GameComponent里的同名方法，能自动管理内存施放）
         * @param path        资源路径
         * @param bundleName  资源包名
         */;
        ViewUtil.createPrefabNodeAsync = function createPrefabNodeAsync(path, bundleName) {
          if (bundleName === void 0) {
            bundleName = resLoader.defaultBundleName;
          }
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var p;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return resLoader.loadAsync(bundleName, path, Prefab);
                case 2:
                  p = _context.sent;
                  if (p) {
                    resolve(instantiate(p));
                  } else {
                    console.error("\u540D\u4E3A\u3010" + path + "\u3011\u7684\u8D44\u6E90\u52A0\u8F7D\u5931\u8D25");
                    resolve(null);
                  }
                case 4:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        }

        /**
         * 添加节点动画
         * @param path              资源路径
         * @param node              目标节点
         * @param onlyOne           是否唯一
         * @param isDefaultClip     是否播放默认动画剪辑
         */;
        ViewUtil.addNodeAnimation = function addNodeAnimation(path, node, onlyOne, isDefaultClip) {
          if (onlyOne === void 0) {
            onlyOne = true;
          }
          if (isDefaultClip === void 0) {
            isDefaultClip = false;
          }
          if (!node || !node.isValid) {
            return;
          }
          var anim = node.getComponent(Animation);
          if (anim == null) {
            anim = node.addComponent(Animation);
          }
          var clip = resLoader.get(path, AnimationClip);
          if (!clip) {
            return;
          }
          if (onlyOne && anim.getState(clip.name) && anim.getState(clip.name).isPlaying) {
            return;
          }
          if (isDefaultClip) {
            anim.defaultClip = clip;
            anim.play();
            return;
          }

          // 播放完成后恢复播放默认动画
          anim.once(Animation.EventType.FINISHED, function () {
            if (anim.defaultClip) {
              anim.play();
            }
          }, this);
          if (anim.getState(clip.name)) {
            anim.play(clip.name);
            return;
          }
          anim.createState(clip, clip.name);
          anim.play(clip.name);
        };
        return ViewUtil;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VirtualList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VirtualListItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Vec3, Size, ScrollView, UITransform, Vec2, instantiate, VirtualListItem;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Vec3 = module.Vec3;
      Size = module.Size;
      ScrollView = module.ScrollView;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      instantiate = module.instantiate;
    }, function (module) {
      VirtualListItem = module.VirtualListItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "314f05U4MhCKZ8smc0gE1Q8", "VirtualList", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var VirtualList = exports('VirtualList', (_dec = ccclass('VirtualList'), _dec2 = property({
        type: Prefab,
        tooltip: "列表项预制体"
      }), _dec3 = property({
        tooltip: "计算边界位置"
      }), _dec4 = property({
        tooltip: "显示数量"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_ScrollView) {
        _inheritsLoose(VirtualList, _ScrollView);
        function VirtualList() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _ScrollView.call.apply(_ScrollView, [this].concat(args)) || this;
          // ==================== 核心配置 ====================
          _initializerDefineProperty(_this, "itemPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "edgeThreshold", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "showNumber", _descriptor3, _assertThisInitialized(_this));
          // ==================== 私有属性 ====================
          _this._data = [];
          _this._showTotalSize = 0;
          _this._defaultContentPos = Vec3.ZERO;
          _this._scrollViewSize = new Size();
          _this._itemPool = [];
          _this._activeItems = [];
          return _this;
        }
        var _proto = VirtualList.prototype;
        // ==================== 生命周期 ====================
        _proto.onLoad = function onLoad() {
          var _ScrollView$prototype;
          (_ScrollView$prototype = _ScrollView.prototype.onLoad) == null || _ScrollView$prototype.call(this);
          this.node.on(ScrollView.EventType.SCROLLING, this._onScrolling, this);
        }

        // ==================== 公共API ====================
        /**
         * 初始化虚拟列表
         * @param data 数据数组
         * @param callback 列表项更新回调
         */;
        _proto.init = function init(data) {
          if (!this.itemPrefab) {
            console.error('VirtualList: itemPrefab is required');
            return;
          }
          this._data = data || [];
          this._initContent();
        }

        // ==================== 私有方法 ====================
        ;

        _proto._refreshItem = function _refreshItem(itemNode, dataItem, index) {
          var virtualListItem = itemNode.getComponent(VirtualListItem);
          if (virtualListItem) {
            virtualListItem.refreshItem(dataItem, index);
          }
        };
        _proto._getItemSize = function _getItemSize(itemNode) {
          var virtualListItem = itemNode.getComponent(VirtualListItem);
          if (virtualListItem) {
            return virtualListItem.getItemSize();
          }
          return new Size();
        };
        _proto._initContent = function _initContent() {
          if (!this.content) return;
          this.content.removeAllChildren();
          this._defaultContentPos = this.content.position.clone();
          var scrollViewTrans = this.getComponent(UITransform);
          this._scrollViewSize = new Size(scrollViewTrans == null ? void 0 : scrollViewTrans.width, scrollViewTrans == null ? void 0 : scrollViewTrans.height);
          this.showNumber = Math.min(this.showNumber, this._data.length);
          for (var index = 0; index < this.showNumber; index++) {
            var itemNode = this._getItemFromPool();
            this._refreshItem(itemNode, this._data[index], index);
            this.content.addChild(itemNode);
            var itemSize = this._getItemSize(itemNode);
            this._showTotalSize = this._showTotalSize + (this.vertical ? itemSize.height : itemSize.width);
            this._activeItems.push({
              node: itemNode,
              index: index
            });
          }
          var contentTrans = this.content.getComponent(UITransform);
          if (contentTrans) {
            if (this.vertical) {
              contentTrans.anchorPoint = new Vec2(0.5, 1);
            } else {
              contentTrans.anchorPoint = new Vec2(0, 0.5);
            }
          }
          this._refreshItemPosition();
        };
        _proto._pushItemToPool = function _pushItemToPool(itemNode) {
          var item = itemNode.getComponent(VirtualListItem);
          console.log((item == null ? void 0 : item.index) + "\u88AB\u56DE\u6536");
          itemNode.removeFromParent();
          return this._itemPool.push(itemNode);
        };
        _proto._getItemFromPool = function _getItemFromPool() {
          return this._itemPool.pop() || instantiate(this.itemPrefab);
        };
        _proto._addItem = function _addItem(index, isFront) {
          if (!this.content || index >= this._data.length || index < 0) return false;
          var itemNode = this._getItemFromPool();
          this._refreshItem(itemNode, this._data[index], index);
          this.content.addChild(itemNode);
          this._refreshItemPosition();
          if (isFront) {
            console.log("往最前面添加新的子项", index);
            this._activeItems.unshift({
              node: itemNode,
              index: index
            });
          } else {
            console.log("往最后面添加新的子项", index);
            this._activeItems.push({
              node: itemNode,
              index: index
            });
          }
          return true;
        };
        _proto._refreshItemPosition = function _refreshItemPosition() {
          var _this2 = this;
          if (!this.content) return;
          this._showTotalSize = 0;
          var finishPos = 0;
          this._activeItems.forEach(function (activeData, _) {
            var item = activeData.node.getComponent(VirtualListItem);
            var itemSize = item == null ? void 0 : item.getItemSize();
            _this2._showTotalSize = _this2._showTotalSize + (_this2.vertical ? itemSize.height : itemSize.width);
            if (itemSize) {
              if (_this2.vertical) {
                activeData.node.setPosition(0, 0 - itemSize.height / 2 - finishPos);
                finishPos = finishPos + itemSize.height;
              } else {
                activeData.node.setPosition(itemSize.width / 2 + finishPos, 0);
                finishPos = finishPos + itemSize.width;
              }
            }
          });
          var contentTrans = this.content.getComponent(UITransform);
          if (contentTrans) {
            if (this.vertical) {
              contentTrans.height = this._showTotalSize;
            } else {
              contentTrans.width = this._showTotalSize;
            }
          }
        };
        _proto._removeFrontOrBackItem = function _removeFrontOrBackItem(isFront) {
          if (!this.content) {
            return;
          }
          var index = 0;
          // 3. 检测每个子项
          if (!isFront) {
            index = this._activeItems.length - 1;
          }
          var node = this._activeItems[index].node;
          this._activeItems.splice(index, 1);
          this._pushItemToPool(node);
        };
        _proto._onScrolling = function _onScrolling() {
          if (!this.content || this._showTotalSize <= (this.vertical ? this._scrollViewSize.height : this._scrollViewSize.width)) {
            return;
          }
          var pos = this.content.position;
          // console.log("pos->", pos, this._defaultContentPos);
          var differential = new Vec2(pos.x - this._defaultContentPos.x, pos.y - this._defaultContentPos.y);
          var topSize = this.vertical ? differential.y : differential.x;
          var remainingSize = this._showTotalSize - (this.vertical ? this._scrollViewSize.height : this._scrollViewSize.width);
          console.log("pos->", pos, this._defaultContentPos, topSize);
          if (remainingSize - topSize <= this.edgeThreshold) {
            if (this._activeItems[this._activeItems.length - 1]) {
              var maxIndex = this._activeItems[this._activeItems.length - 1].index + 1;
              if (maxIndex < this._data.length) {
                console.log("刷新底部子项");
                this._removeFrontOrBackItem(true);
                this._addItem(maxIndex, false);
                var node = this._activeItems[this._activeItems.length - 1].node;
                var item = node.getComponent(VirtualListItem);
                var itemSize = item == null ? void 0 : item.getItemSize();
                if (itemSize) {
                  if (this.vertical) {
                    this.content.position = new Vec3(this.content.position.x, this.content.position.y - itemSize.height, this.content.position.z);
                  } else {
                    this.content.position = new Vec3(this.content.position.x + itemSize.width, this.content.position.y, this.content.position.z);
                  }
                }
              }
            }
          } else if (topSize < this.edgeThreshold) {
            if (this._activeItems[0]) {
              var minIndex = this._activeItems[0].index - 1;
              if (minIndex >= 0) {
                console.log("刷新顶部子项", minIndex);
                this._removeFrontOrBackItem(false);
                this._addItem(minIndex, true);
                var _node = this._activeItems[0].node;
                var _item = _node.getComponent(VirtualListItem);
                var _itemSize = _item == null ? void 0 : _item.getItemSize();
                if (_itemSize) {
                  if (this.vertical) {
                    this.content.position = new Vec3(this.content.position.x, this.content.position.y + _itemSize.height, this.content.position.z);
                  } else {
                    this.content.position = new Vec3(this.content.position.x + _itemSize.width, this.content.position.y, this.content.position.z);
                  }
                }
              }
            }
          }
        };
        return VirtualList;
      }(ScrollView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "edgeThreshold", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 50;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "showNumber", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VirtualListItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, size, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      size = module.size;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "95bedlPiPpAK75tlSoT9UC8", "VirtualListItem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var VirtualListItem = exports('VirtualListItem', (_dec = ccclass('VirtualListItem'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VirtualListItem, _Component);
        function VirtualListItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "index", _descriptor, _assertThisInitialized(_this));
          _this.data = void 0;
          return _this;
        }
        var _proto = VirtualListItem.prototype;
        _proto.refreshItem = function refreshItem(data, index) {
          this.index = index;
          this.data = data;
        };
        _proto.getItemSize = function getItemSize() {
          return size(100, 100);
        };
        return VirtualListItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "index", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ViewModel.ts', './VMEnv.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, log, Component, VM, VMEnv;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      VM = module.VM;
    }, function (module) {
      VMEnv = module.VMEnv;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2f6f36IvUdPO7xynnVTPgzb", "VMBase", undefined);
      var ccclass = _decorator.ccclass,
        help = _decorator.help;

      /**
       * watchPath 的基础，只提供绑定功能 和 对应的数据更新函数
       */
      var VMBase = exports('VMBase', (_dec = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037631&doc_id=2873565'), ccclass(_class = _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VMBase, _Component);
        function VMBase() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**VM管理 */
          _this.VM = VM;
          /** watch 单路径  */
          _this.watchPath = '';
          /** 是否启用模板多路径模式 */
          _this.templateMode = false;
          /** watch 多路径 */
          _this.watchPathArr = [];
          /** 储存模板多路径的值 */
          _this.templateValueArr = [];
          return _this;
        }
        var _proto = VMBase.prototype;
        /**
         * 如果需要重写onLoad 方法，请根据顺序调用 super.onLoad()，执行默认方法
         */
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          if (VMEnv.editor) return;

          // 提前拆分、并且解析路径
          var paths = this.watchPath.split('.');
          for (var i = 1; i < paths.length; i++) {
            var p = paths[i];
            // 如果发现了路径使用了 * ，则自动去自己的父节点查找自己所在 index 值
            if (p == '*') {
              var index = this.node.parent.children.findIndex(function (n) {
                return n === _this2.node;
              });
              if (index <= 0) index = 0;
              paths[i] = index.toString();
              break;
            }
          }

          // 替换掉原路径
          this.watchPath = paths.join('.');

          // 提前进行路径数组 的 解析
          var pathArr = this.watchPathArr;
          if (pathArr.length >= 1) {
            for (var _i = 0; _i < pathArr.length; _i++) {
              var path = pathArr[_i];
              var _paths = path.split('.');
              for (var _i2 = 1; _i2 < _paths.length; _i2++) {
                var _p = _paths[_i2];
                if (_p == '*') {
                  var _index = this.node.parent.children.findIndex(function (n) {
                    return n === _this2.node;
                  });
                  if (_index <= 0) _index = 0;
                  _paths[_i2] = _index.toString();
                  break;
                }
              }
              this.watchPathArr[_i] = _paths.join('.');
            }
          }
          if (this.watchPath == '' && this.watchPathArr.join('') == '') {
            log('可能未设置路径的节点:', this.node.parent.name + '.' + this.node.name);
          }
        };
        _proto.onEnable = function onEnable() {
          if (VMEnv.editor) return;
          if (this.templateMode) {
            this.setMultPathEvent(true);
          } else if (this.watchPath != '') {
            this.VM.bindPath(this.watchPath, this.onValueChanged, this);
          }
          this.onValueInit(); // 激活时,调用值初始化
        };

        _proto.onDisable = function onDisable() {
          if (VMEnv.editor) return;
          if (this.templateMode) {
            this.setMultPathEvent(false);
          } else if (this.watchPath != '') {
            this.VM.unbindPath(this.watchPath, this.onValueChanged, this);
          }
        }

        // 多路径监听方式
        ;

        _proto.setMultPathEvent = function setMultPathEvent(enabled) {
          if (enabled === void 0) {
            enabled = true;
          }
          if (VMEnv.editor) return;
          var arr = this.watchPathArr;
          for (var i = 0; i < arr.length; i++) {
            var path = arr[i];
            if (enabled) {
              this.VM.bindPath(path, this.onValueChanged, this);
            } else {
              this.VM.unbindPath(path, this.onValueChanged, this);
            }
          }
        };
        _proto.onValueInit = function onValueInit() {
          // 虚方法
        }

        /**
         * 值变化事件
         * @param n       新值
         * @param o       旧值
         * @param pathArr 对象路径数组
         */;
        _proto.onValueChanged = function onValueChanged(n, o, pathArr) {};
        return VMBase;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMCompsEdit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMEnv.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, Enum, Node, log, Component, VMEnv;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Enum = module.Enum;
      Node = module.Node;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      VMEnv = module.VMEnv;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "2359eFXKF5HFYS74K7Y17/U", "VMCompsEdit", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        menu = _decorator.menu,
        help = _decorator.help;
      var ACTION_MODE = /*#__PURE__*/function (ACTION_MODE) {
        ACTION_MODE[ACTION_MODE["SEARCH_COMPONENT"] = 0] = "SEARCH_COMPONENT";
        ACTION_MODE[ACTION_MODE["ENABLE_COMPONENT"] = 1] = "ENABLE_COMPONENT";
        ACTION_MODE[ACTION_MODE["REPLACE_WATCH_PATH"] = 2] = "REPLACE_WATCH_PATH";
        ACTION_MODE[ACTION_MODE["DELETE_COMPONENT"] = 3] = "DELETE_COMPONENT";
        return ACTION_MODE;
      }(ACTION_MODE || {});
      /**
       * 用于搜索的MV 组件列表，挂载在父节点后，
       * 会遍历搜索下面的所有MV组件, 并且显示其观察值的路径
       */
      var MVCompsEdit = exports('default', (_dec = menu('OopsFramework/Mvvm/Edit-Comps （快速组件操作）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037632&doc_id=2873565'), _dec3 = property({
        type: [CCString]
      }), _dec4 = property({
        type: Enum(ACTION_MODE)
      }), _dec5 = property({
        tooltip: '勾选后,会自动查找 find list 中填写的组件',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.SEARCH_COMPONENT;
        }
      }), _dec6 = property({
        tooltip: '勾选后,会批量激活 find list 中填写的组件',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.ENABLE_COMPONENT;
        }
      }), _dec7 = property({
        tooltip: '勾选后,会批量关闭 find list 中填写的组件',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.ENABLE_COMPONENT;
        }
      }), _dec8 = property({
        tooltip: '允许删除节点的组件,确定需要移除请勾选,防止误操作',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.DELETE_COMPONENT;
        }
      }), _dec9 = property({
        tooltip: '勾选后,会批量删除 find list 中填写的组件',
        displayName: '[ X DELETE X ]',
        visible: function visible() {
          // @ts-ignore
          return this.allowDelete && this.actionType === ACTION_MODE.DELETE_COMPONENT;
        }
      }), _dec10 = property({
        tooltip: '勾选后,会批量替换掉指定的路径',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.REPLACE_WATCH_PATH;
        }
      }), _dec11 = property({
        tooltip: '匹配的路径,匹配规则: 搜索开头为 game的路径',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.REPLACE_WATCH_PATH;
        }
      }), _dec12 = property({
        tooltip: '替换的路径,将匹配到的路径替换',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.REPLACE_WATCH_PATH;
        }
      }), _dec13 = property({
        tooltip: '是否搜集绑定VM组件的节点?',
        visible: function visible() {
          // @ts-ignore
          return this.actionType === ACTION_MODE.SEARCH_COMPONENT;
        }
      }), _dec14 = property({
        type: [Node],
        readonly: true,
        tooltip: '收集到绑定了VM组件相关的节点，可以自己跳转过去',
        visible: function visible() {
          // @ts-ignore
          return this.canCollectNodes && this.actionType === ACTION_MODE.SEARCH_COMPONENT;
        }
      }), ccclass(_class = executeInEditMode(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MVCompsEdit, _Component);
        function MVCompsEdit() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "findList", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "actionType", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "allowDelete", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "targetPath", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "replacePath", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "canCollectNodes", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "collectNodes", _descriptor7, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MVCompsEdit.prototype;
        _proto.onLoad = function onLoad() {
          if (VMEnv.editor) return;
          var path = this.getNodePath(this.node);
          console.error('you forget delete MVEditFinder,[path]', path);
        };
        _proto.setComponents = function setComponents(state) {
          var _this2 = this;
          var array = this.findList;
          var title = '搜索到当前节点下面的组件';
          switch (state) {
            case 0:
              title = '搜索到当前节点下面的组件';
              break;
            case 1:
              title = '激活以下节点的组件';
              break;
            case 2:
              title = '关闭以下节点的组件';
              break;
            case 3:
              title = '删除以下节点的组件';
              break;
            case 4:
              title = '替换以下节点的路径';
              break;
          }
          log(title);
          log('______________________');
          array.forEach(function (name) {
            _this2.searchComponent(name, state);
          });
          log('______________________');
        }

        /**
         * 
         * @param className 
         * @param state 0-查找节点组件 1-激活节点组件 2-关闭节点组件 3-移除节点组件
         */;
        _proto.searchComponent = function searchComponent(className, state) {
          var _this3 = this;
          if (state === void 0) {
            state = 0;
          }
          /**收集节点清空 */
          this.collectNodes = [];
          var comps = this.node.getComponentsInChildren(className);
          if (comps == null || comps.length < 1) return;
          log('[' + className + ']:');
          comps.forEach(function (v) {
            var ext = '';
            if (state <= 3) {
              //区分模板模式路径
              if (v.templateMode === true) {
                ext = v.watchPathArr ? ':[Path:' + v.watchPathArr.join('|') + ']' : '';
              } else {
                ext = v.watchPath ? ':[Path:' + v.watchPath + ']' : '';
              }
            }
            log(_this3.getNodePath(v.node) + ext);
            switch (state) {
              case 0:
                //寻找组件
                if (_this3.canCollectNodes) {
                  if (_this3.collectNodes.indexOf(v.node) === -1) {
                    _this3.collectNodes.push(v.node);
                  }
                }
                break;
              case 1:
                // 激活组件
                v.enabled = true;
                break;
              case 2:
                // 关闭组件
                v.enabled = false;
                break;
              case 3:
                // 删除组件
                v.node.removeComponent(v);
                break;
              case 4:
                // 替换指定路径
                var targetPath = _this3.targetPath;
                var replacePath = _this3.replacePath;
                if (v.templateMode === true) {
                  for (var i = 0; i < v.watchPathArr.length; i++) {
                    var path = v.watchPathArr[i];
                    v.watchPathArr[i] = _this3.replaceNodePath(path, targetPath, replacePath);
                  }
                } else {
                  v.watchPath = _this3.replaceNodePath(v.watchPath, targetPath, replacePath);
                }
            }
          });
        };
        _proto.replaceNodePath = function replaceNodePath(path, search, replace) {
          var pathArr = path.split('.');
          var searchArr = search.split('.');
          var replaceArr = replace.split('.');
          var match = true;
          for (var i = 0; i < searchArr.length; i++) {
            //未匹配上
            if (pathArr[i] !== searchArr[i]) {
              match = false;
              break;
            }
          }

          //匹配成功准备替换路径
          if (match === true) {
            for (var _i = 0; _i < replaceArr.length; _i++) {
              pathArr[_i] = replaceArr[_i];
            }
            log(' 路径更新:', path, '>>>', pathArr.join('.'));
          }
          return pathArr.join('.');
        };
        _proto.getNodePath = function getNodePath(node) {
          var parent = node;
          var array = [];
          while (parent) {
            var p = parent.getParent();
            if (p) {
              array.push(parent.name);
              parent = p;
            } else {
              break;
            }
          }
          return array.reverse().join('/');
        };
        _createClass(MVCompsEdit, [{
          key: "findTrigger",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.setComponents(0);
          }
        }, {
          key: "enableTrigger",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.setComponents(1);
          }
        }, {
          key: "disableTrigger",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.setComponents(2);
          }
        }, {
          key: "deleteTrigger",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.setComponents(3);
          }
        }, {
          key: "replaceTrigger",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.setComponents(4);
          }
        }]);
        return MVCompsEdit;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "findList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ["VMBase", "VMParent"];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "actionType", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ACTION_MODE.SEARCH_COMPONENT;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "findTrigger", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "findTrigger"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "enableTrigger", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "enableTrigger"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disableTrigger", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "disableTrigger"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "allowDelete", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "deleteTrigger", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteTrigger"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "replaceTrigger", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "replaceTrigger"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "targetPath", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'game';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "replacePath", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '*';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "canCollectNodes", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "collectNodes", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMCustom.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMBase.ts', './VMEnv.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, VMBase, VMEnv;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
    }, function (module) {
      VMBase = module.VMBase;
    }, function (module) {
      VMEnv = module.VMEnv;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "ce662fwsSVPLKpmHx+KocFu", "VMCustom", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 自动检查识别的数组,你可以准备自己的组件放上去自动识别 */
      var COMP_ARRAY_CHECK = [['BhvFrameIndex', 'index', false], ['BhvGroupToggle', 'index', false], ['BhvRollNumber', 'targetValue', false],
      // 组件名、默认属性、controller值
      ['cc.Label', 'string', false], ['cc.RichText', 'string', false], ['cc.EditBox', 'string', true], ['cc.Slider', 'progress', true], ['cc.ProgressBar', 'progress', false], ['cc.Toggle', 'isChecked', true]];

      /**
       * [VM-Custom]
       * 自定义数值监听, 可以快速对该节点上任意一个组件上的属性进行双向绑定
       */
      var VMCustom = exports('VMCustom', (_dec = menu('OopsFramework/Mvvm/VM-Custom （自定义）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037634&doc_id=2873565'), _dec3 = property({
        tooltip: '激活controller,以开启双向绑定，否则只能接收消息'
      }), _dec4 = property({
        tooltip: "监视对象路径"
      }), _dec5 = property({
        tooltip: '绑定组件的名字'
      }), _dec6 = property({
        tooltip: '组件上需要监听的属性'
      }), _dec7 = property({
        tooltip: '刷新间隔频率(只影响脏检查的频率)',
        step: 0.01,
        range: [0, 1],
        visible: function visible() {
          // @ts-ignore
          return this.controller === true;
        }
      }), ccclass(_class = executeInEditMode(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_VMBase) {
        _inheritsLoose(VMCustom, _VMBase);
        function VMCustom() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMBase.call.apply(_VMBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "controller", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchPath", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "componentName", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "componentProperty", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "refreshRate", _descriptor5, _assertThisInitialized(_this));
          /** 计时器 */
          _this._timer = 0;
          /** 监听的组件对象 */
          _this._watchComponent = null;
          /** 是否能监听组件的数据 */
          _this._canWatchComponent = false;
          /** 检查的值 */
          _this._oldValue = null;
          return _this;
        }
        var _proto = VMCustom.prototype;
        _proto.onLoad = function onLoad() {
          _VMBase.prototype.onLoad.call(this);

          // 只在运行时检查组件是否缺失可用
          this.checkEditorComponent(); //编辑器检查

          if (VMEnv.editor) return;
          this._watchComponent = this.node.getComponent(this.componentName);
          this.checkComponentState();
        };
        _proto.onRestore = function onRestore() {
          this.checkEditorComponent();
        };
        _proto.start = function start() {
          //从 watch 的路径中获取一个初始值
          this.onValueInit();
        }

        // 挂在对应节点后，自动获取组件属性和名字
        ;

        _proto.checkEditorComponent = function checkEditorComponent() {
          if (VMEnv.editor) return;
          var checkArray = COMP_ARRAY_CHECK;
          for (var i = 0; i < checkArray.length; i++) {
            var params = checkArray[i];
            var comp = this.node.getComponent(params[0]);
            if (comp) {
              if (this.componentName == '') this.componentName = params[0];
              if (this.componentProperty == '') this.componentProperty = params[1];
              if (params[2] !== null) this.controller = params[2];
              break;
            }
          }
        };
        _proto.checkComponentState = function checkComponentState() {
          this._canWatchComponent = false;
          if (!this._watchComponent) {
            console.error('未设置需要监听的组件');
            return;
          }
          if (!this.componentProperty) {
            console.error('未设置需要监听的组件 的属性');
            return;
          }
          if (this.componentProperty in this._watchComponent === false) {
            console.error('需要监听的组件的属性不存在');
            return;
          }
          this._canWatchComponent = true;
        };
        _proto.getComponentValue = function getComponentValue() {
          return this._watchComponent[this.componentProperty];
        };
        _proto.setComponentValue = function setComponentValue(value) {
          // 如果遇到 Toggle 组件就调用上面的方法解决
          if (this.componentName == "cc.Toggle") {
            this.node.getComponent(Toggle).isChecked = value;
          } else {
            this._watchComponent[this.componentProperty] = value;
          }
        }

        /** 初始化获取数据 */;
        _proto.onValueInit = function onValueInit() {
          if (VMEnv.editor) return;

          //更新信息
          this.setComponentValue(this.VM.getValue(this.watchPath));
        }

        /** [可重写]组件的值发生变化后，触发更新此值 */;
        _proto.onValueController = function onValueController(newValue, oldValue) {
          this.VM.setValue(this.watchPath, newValue);
        }

        /** [可重写]初始化改变数据 */;
        _proto.onValueChanged = function onValueChanged(n, o, pathArr) {
          this.setComponentValue(n);
        };
        _proto.update = function update(dt) {
          // 脏检查（组件是否存在，是否被激活）
          if (VMEnv.editor) return;

          //if (this.templateMode == true) return; //todo 模板模式下不能计算  
          if (!this.controller) return;
          if (!this._canWatchComponent || this._watchComponent['enabled'] === false) return;

          //刷新频率检查
          this._timer += dt;
          if (this._timer < this.refreshRate) return;
          this._timer = 0;
          var oldValue = this._oldValue;
          var newValue = this.getComponentValue();
          if (this._oldValue === newValue) return;
          this._oldValue = this.getComponentValue();
          this.onValueController(newValue, oldValue);
        };
        return VMCustom;
      }(VMBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "controller", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "watchPath", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "componentName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "componentProperty", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "refreshRate", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      })), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMEnv.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env'], function (exports) {
  var _createClass, cclegacy, EDITOR;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EDITOR = module.EDITOR;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fdf72Q91PdCXpPQ+62s1ufi", "VMEnv", undefined);

      /** VM组件环境验证 */
      var VMEnv = exports('VMEnv', /*#__PURE__*/function () {
        function VMEnv() {}
        _createClass(VMEnv, null, [{
          key: "editor",
          get: /** 编辑状态 */
          function get() {
            // @ts-ignore
            return EDITOR;
          }
        }]);
        return VMEnv;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, Enum, EventHandler, VMBase;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Enum = module.Enum;
      EventHandler = module.EventHandler;
    }, function (module) {
      VMBase = module.VMBase;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "a9ce7kf8XZJeLPlT2iWn2zD", "VMEvent", undefined);

      // +普通 label 更新数据的情况,label.string = xxx;
      // +frameIndex 插件，通过number 数值设置 BhvFrameIndex 来切换当前贴图
      // +spriteFrame 直接替换贴图的情况 , 
      //  读取本地路径 data.spriteFrame = $res:/pic/com1
      //  读取网页路径 data.spriteFrame = $url:http:xxxxxxxxxx.png
      // +特殊条件控制 

      // 比较条件:,如果传入值 > /< />= /<= /== 某值时，执行的action类型

      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        menu = _decorator.menu,
        help = _decorator.help;
      var FILTER_MODE = /*#__PURE__*/function (FILTER_MODE) {
        FILTER_MODE[FILTER_MODE["none"] = 0] = "none";
        FILTER_MODE[FILTER_MODE["=="] = 1] = "==";
        FILTER_MODE[FILTER_MODE["!="] = 2] = "!=";
        FILTER_MODE[FILTER_MODE[">"] = 3] = ">";
        FILTER_MODE[FILTER_MODE[">="] = 4] = ">=";
        FILTER_MODE[FILTER_MODE["<"] = 5] = "<";
        FILTER_MODE[FILTER_MODE["<="] = 6] = "<=";
        return FILTER_MODE;
      }(FILTER_MODE || {}); // 正常计算，比较>=
      /**
       *  [VM-Event]
       * 提供  ViewModel 的相关基础功能,
       * 如果值发生变化将会调用对应的函数方法
       */
      var VMEvent = exports('default', (_dec = menu('OopsFramework/Mvvm/VM-EventCall （调用函数）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037640&doc_id=2873565'), _dec3 = property({
        tooltip: '使用模板模式，可以使用多路径监听'
      }), _dec4 = property({
        tooltip: '监听获取值的路径',
        visible: function visible() {
          // @ts-ignore
          return this.templateMode === false;
        }
      }), _dec5 = property({
        tooltip: '触发一次后会自动关闭该事件'
      }), _dec6 = property({
        tooltip: '监听获取值的多条路径,这些值的改变都会通过这个函数回调,请使用 pathArr 区分获取的值 ',
        type: [CCString],
        visible: function visible() {
          // @ts-ignore
          return this.templateMode === true;
        }
      }), _dec7 = property({
        tooltip: '过滤模式，会根据条件过滤掉时间的触发',
        type: Enum(FILTER_MODE)
      }), _dec8 = property({
        visible: function visible() {
          // @ts-ignore
          return this.filterMode !== FILTER_MODE.none;
        }
      }), _dec9 = property([EventHandler]), ccclass(_class = executeInEditMode(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_VMBase) {
        _inheritsLoose(VMEvent, _VMBase);
        function VMEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMBase.call.apply(_VMBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "templateMode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchPath", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "triggerOnce", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchPathArr", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "filterMode", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "compareValue", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "changeEvents", _descriptor7, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = VMEvent.prototype;
        _proto.onValueInit = function onValueInit() {};
        _proto.onValueChanged = function onValueChanged(newVar, oldVar, pathArr) {
          var res = this.conditionCheck(newVar, this.compareValue);
          if (!res) return;
          if (Array.isArray(this.changeEvents)) {
            this.changeEvents.forEach(function (v) {
              v.emit([newVar, oldVar, pathArr]);
            });
          }

          // 激活一次后，自动关闭组件
          if (this.triggerOnce === true) {
            this.enabled = false;
          }
        }

        /** 条件检查 */;
        _proto.conditionCheck = function conditionCheck(a, b) {
          var cod = FILTER_MODE;
          switch (this.filterMode) {
            case cod.none:
              return true;
            case cod["=="]:
              if (a == b) return true;
              break;
            case cod["!="]:
              if (a != b) return true;
              break;
            case cod["<"]:
              if (a < b) return true;
              break;
            case cod[">"]:
              if (a > b) return true;
              break;
            case cod[">="]:
              if (a >= b) return true;
              break;
            case cod["<"]:
              if (a < b) return true;
              break;
            case cod["<="]:
              if (a <= b) return true;
              break;
          }
          return false;
        };
        return VMEvent;
      }(VMBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "templateMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "watchPath", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "triggerOnce", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "watchPathArr", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "filterMode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return FILTER_MODE.none;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "compareValue", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "changeEvents", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './StringFormat.ts', './VMBase.ts', './VMEnv.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, error, StringFormatFunction, VMBase, VMEnv;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      error = module.error;
    }, function (module) {
      StringFormatFunction = module.StringFormatFunction;
    }, function (module) {
      VMBase = module.VMBase;
    }, function (module) {
      VMEnv = module.VMEnv;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "545c05XsG9GDJispEGWKvYv", "VMLabel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu,
        executeInEditMode = _decorator.executeInEditMode,
        help = _decorator.help;
      var LABEL_TYPE = {
        CC_LABEL: 'cc.Label',
        CC_RICH_TEXT: 'cc.RichText',
        CC_EDIT_BOX: 'cc.EditBox'
      };

      /**
       *  [VM-Label]
       *  专门处理 Label 相关 的组件，如 ccLabel,ccRichText,ccEditBox
       *  可以使用模板化的方式将数据写入,可以处理字符串格式等
       *  todo 加入stringFormat 可以解析转换常见的字符串格式
       */
      var VMLabel = exports('default', (_dec = menu('OopsFramework/Mvvm/VM-Label （标签）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037641&doc_id=2873565'), _dec3 = property({
        tooltip: '是否启用模板代码,只能在运行时之前设置,\n将会动态解析模板语法 {{0}},并且自动设置监听的路径'
      }), _dec4 = property({
        visible: function visible() {
          // @ts-ignore
          return this.templateMode === false;
        }
      }), _dec5 = property({
        readonly: true
      }), _dec6 = property({
        type: [CCString],
        visible: function visible() {
          // @ts-ignore
          return this.templateMode === true;
        }
      }), ccclass(_class = executeInEditMode(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_VMBase) {
        _inheritsLoose(VMLabel, _VMBase);
        function VMLabel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMBase.call.apply(_VMBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "templateMode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchPath", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labelType", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchPathArr", _descriptor4, _assertThisInitialized(_this));
          /** 按照路径参数顺序保存的 值的数组（固定）*/
          _this.templateValueArr = [];
          /** 保存着字符模板格式的数组 (只会影响显示参数) */
          _this.templateFormatArr = [];
          /** 源字符串 */
          _this.originText = null;
          return _this;
        }
        var _proto = VMLabel.prototype;
        _proto.onRestore = function onRestore() {
          this.checkLabel();
        };
        _proto.onLoad = function onLoad() {
          _VMBase.prototype.onLoad.call(this);
          this.checkLabel();
          if (VMEnv.editor) return;
          if (this.templateMode) {
            this.originText = this.getLabelValue();
            this.parseTemplate();
          }
        };
        _proto.start = function start() {
          if (VMEnv.editor) return;
          this.onValueInit();
        }

        /** 解析模板 获取初始格式化字符串格式的信息 */;
        _proto.parseTemplate = function parseTemplate() {
          var regexAll = /\{\{(.+?)\}\}/g; // 匹配： 所有的{{value}}
          var regex = /\{\{(.+?)\}\}/; // 匹配： {{value}} 中的 value
          var res = this.originText.match(regexAll); // 匹配结果数组
          if (res == null) return;
          for (var i = 0; i < res.length; i++) {
            var e = res[i];
            var arr = e.match(regex);
            var matchName = arr[1];
            // let paramIndex = parseInt(matchName) || 0;
            var matchInfo = matchName.split(':')[1] || '';
            this.templateFormatArr[i] = matchInfo;
          }
        }

        /** 获取解析字符串模板后得到的值 */;
        _proto.getReplaceText = function getReplaceText() {
          if (!this.originText) return "";
          var regexAll = /\{\{(.+?)\}\}/g; // 匹配： 所有的{{value}}
          var regex = /\{\{(.+?)\}\}/; // 匹配： {{value}} 中的 value
          var res = this.originText.match(regexAll); // 匹配结果数组 [{{value}}，{{value}}，{{value}}]
          if (res == null) return ''; // 未匹配到文本
          var str = this.originText; // 原始字符串模板 "name:{{0}} 或 name:{{0:fix2}}"

          for (var i = 0; i < res.length; i++) {
            var e = res[i];
            var getValue = void 0;
            var arr = e.match(regex); // 匹配到的数组 [{{value}}, value]
            var indexNum = parseInt(arr[1] || '0') || 0; // 取出数组的 value 元素 转换成整数
            var format = this.templateFormatArr[i]; // 格式化字符 的 配置参数
            getValue = this.templateValueArr[indexNum];
            str = str.replace(e, this.getValueFromFormat(getValue, format)); //从路径缓存值获取数据
          }

          return str;
        }

        /** 格式化字符串 */;
        _proto.getValueFromFormat = function getValueFromFormat(value, format) {
          return StringFormatFunction.deal(value, format);
        }

        /** 初始化获取数据 */;
        _proto.onValueInit = function onValueInit() {
          //更新信息
          if (this.templateMode === false) {
            this.setLabelValue(this.VM.getValue(this.watchPath)); //
          } else {
            var max = this.watchPathArr.length;
            for (var i = 0; i < max; i++) {
              this.templateValueArr[i] = this.VM.getValue(this.watchPathArr[i], '?');
            }
            this.setLabelValue(this.getReplaceText()); // 重新解析
          }
        }

        /** 监听数据发生了变动的情况 */;
        _proto.onValueChanged = function onValueChanged(n, o, pathArr) {
          if (this.templateMode === false) {
            this.setLabelValue(n);
          } else {
            var path = pathArr.join('.');
            // 寻找缓存位置
            var index = this.watchPathArr.findIndex(function (v) {
              return v === path;
            });
            if (index >= 0) {
              //如果是所属的路径，就可以替换文本了
              this.templateValueArr[index] = n; // 缓存值
              this.setLabelValue(this.getReplaceText()); // 重新解析文本
            }
          }
        };

        _proto.setLabelValue = function setLabelValue(value) {
          var component = this.getComponent(this.labelType);
          component.string = value + '';
        };
        _proto.getLabelValue = function getLabelValue() {
          var component = this.getComponent(this.labelType);
          return component.string;
        };
        _proto.checkLabel = function checkLabel() {
          var checkArray = ['cc.Label', 'cc.RichText', 'cc.EditBox'];
          for (var i = 0; i < checkArray.length; i++) {
            var e = checkArray[i];
            var comp = this.node.getComponent(e);
            if (comp) {
              this.labelType = e;
              return true;
            }
          }
          error('没有挂载任何label组件');
          return false;
        };
        return VMLabel;
      }(VMBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "templateMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "watchPath", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelType", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return LABEL_TYPE.CC_LABEL;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "watchPathArr", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMModify.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, VMBase;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
    }, function (module) {
      VMBase = module.VMBase;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "7d2a4voaOJJGJZRWFPG6Bk7", "VMModify", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 限制值边界范围的模式 */
      var CLAMP_MODE = /*#__PURE__*/function (CLAMP_MODE) {
        CLAMP_MODE[CLAMP_MODE["MIN"] = 0] = "MIN";
        CLAMP_MODE[CLAMP_MODE["MAX"] = 1] = "MAX";
        CLAMP_MODE[CLAMP_MODE["MIN_MAX"] = 2] = "MIN_MAX";
        return CLAMP_MODE;
      }(CLAMP_MODE || {});
      /**
       * [VM-Modify]
       * 动态快速的修改模型的数值,使用按钮 绑定该组件上的函数，即可动态调用
       * 修改 Model 的值
       */
      var VMModify = exports('default', (_dec = menu('OopsFramework/Mvvm/VM-Modify （修改数据）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037642&doc_id=2873565'), _dec3 = property({
        tooltip: "监视对象路径"
      }), _dec4 = property({
        tooltip: "是不启用取值范围限制"
      }), _dec5 = property({
        type: Enum(CLAMP_MODE),
        visible: function visible() {
          // @ts-ignore
          return this.valueClamp === true;
        }
      }), _dec6 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueClamp === true && this.valueClampMode !== CLAMP_MODE.MAX;
        }
      }), _dec7 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueClamp === true && this.valueClampMode !== CLAMP_MODE.MIN;
        }
      }), ccclass(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_VMBase) {
        _inheritsLoose(VMModify, _VMBase);
        function VMModify() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMBase.call.apply(_VMBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "watchPath", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueClamp", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueClampMode", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueMin", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueMax", _descriptor5, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = VMModify.prototype;
        // 限制最终结果的取值范围
        _proto.clampValue = function clampValue(res) {
          var min = this.valueMin;
          var max = this.valueMax;
          if (this.valueClamp == false) return res;
          switch (this.valueClampMode) {
            case CLAMP_MODE.MIN_MAX:
              if (res > max) res = max;
              if (res < min) res = min;
              break;
            case CLAMP_MODE.MIN:
              if (res < min) res = min;
              break;
            case CLAMP_MODE.MAX:
              if (res > max) res = max;
              break;
          }
          return res;
        }

        /** 加整数 */;
        _proto.vAddInt = function vAddInt(e, data) {
          this.vAdd(e, data, true);
        }

        /** 减整数 */;
        _proto.vSubInt = function vSubInt(e, data) {
          this.vSub(e, data, true);
        }

        /** 乘整数 */;
        _proto.vMulInt = function vMulInt(e, data) {
          this.vMul(e, data, true);
        }

        /** 除整数 */;
        _proto.vDivInt = function vDivInt(e, data) {
          this.vDiv(e, data, true);
        }

        /** 加 */;
        _proto.vAdd = function vAdd(e, data, _int) {
          if (_int === void 0) {
            _int = false;
          }
          var a = parseFloat(data);
          var res = this.VM.getValue(this.watchPath, 0) + a;
          if (_int) {
            res = Math.round(res);
          }
          this.VM.setValue(this.watchPath, this.clampValue(res));
        }

        /** 减 */;
        _proto.vSub = function vSub(e, data, _int2) {
          if (_int2 === void 0) {
            _int2 = false;
          }
          var a = parseFloat(data);
          var res = this.VM.getValue(this.watchPath, 0) - a;
          if (_int2) {
            res = Math.round(res);
          }
          this.VM.setValue(this.watchPath, this.clampValue(res));
        }

        /** 乘 */;
        _proto.vMul = function vMul(e, data, _int3) {
          if (_int3 === void 0) {
            _int3 = false;
          }
          var a = parseFloat(data);
          var res = this.VM.getValue(this.watchPath, 0) * a;
          if (_int3) {
            res = Math.round(res);
          }
          this.VM.setValue(this.watchPath, this.clampValue(res));
        }

        /** 除 */;
        _proto.vDiv = function vDiv(e, data, _int4) {
          if (_int4 === void 0) {
            _int4 = false;
          }
          var a = parseFloat(data);
          var res = this.VM.getValue(this.watchPath, 0) / a;
          if (_int4) {
            res = Math.round(res);
          }
          this.VM.setValue(this.watchPath, this.clampValue(res));
        }

        /** 字符串赋值 */;
        _proto.vString = function vString(e, data) {
          var a = data;
          this.VM.setValue(this.watchPath, a);
        }

        /** 整数赋值 */;
        _proto.vNumberInt = function vNumberInt(e, data) {
          this.vNumber(e, data, true);
        }

        /** 数字赋值 */;
        _proto.vNumber = function vNumber(e, data, _int5) {
          if (_int5 === void 0) {
            _int5 = false;
          }
          var a = parseFloat(data);
          if (_int5) {
            a = Math.round(a);
          }
          this.VM.setValue(this.watchPath, this.clampValue(a));
        };
        return VMModify;
      }(VMBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "watchPath", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "valueClamp", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "valueClampMode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return CLAMP_MODE.MIN_MAX;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "valueMin", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "valueMax", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMParent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameComponent.ts', './ViewModel.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, GameComponent, VM;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GameComponent = module.GameComponent;
    }, function (module) {
      VM = module.VM;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "15ccciO+ZRH476sPKD/LvB7", "VMParent", undefined);
      var ccclass = _decorator.ccclass,
        help = _decorator.help,
        executionOrder = _decorator.executionOrder;

      /**
       * 提供VM环境，控制旗下所有VM节点
       * 一般用于 非全局的 VM绑定,VM 环境与 组件紧密相连
       * （Prefab 模式绑定）
       * VMParent 必须必其他组件优先执行
       * v0.1 修复bug ，现在可以支持 Parent 嵌套 （但是注意性能问题，不要频繁嵌套）
       */
      var VMParent = exports('default', (_dec = executionOrder(-1), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037729&doc_id=2873565'), ccclass(_class = _dec(_class = _dec2(_class = /*#__PURE__*/function (_GameComponent) {
        _inheritsLoose(VMParent, _GameComponent);
        function VMParent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameComponent.call.apply(_GameComponent, [this].concat(args)) || this;
          /** 绑定的标签，可以通过这个tag 获取 当前的 vm 实例 */
          _this.tag = '_temp';
          /** 需要绑定的私有数据 */
          _this.data = {};
          /**VM 管理 */
          _this.VM = VM;
          return _this;
        }
        var _proto = VMParent.prototype;
        /**
         * [注意]不能直接覆盖此方法，如果需要覆盖。
         * 只能在该方法内部调用父类的实现 
         *   ```ts
         *       onLoad(){
         *           super.onLoad();
         *       }
         *   ``` 
         * 
         */
        _proto.onLoad = function onLoad() {
          if (this.data == null) return;
          this.tag = '_temp' + '<' + this.node.uuid.replace('.', '') + '>';
          VM.add(this.data, this.tag);
          // log(VM['_mvs'],this.tag)
          //搜寻所有节点：找到 watch path
          var comps = this.getVMComponents();
          // console.group();
          for (var i = 0; i < comps.length; i++) {
            var comp = comps[i];
            this.replaceVMPath(comp, this.tag);
          }
          // console.groupEnd()

          this.onBind();
        }

        /**在 onLoad 完成 和 start() 之前调用，你可以在这里进行初始化数据等操作 */;
        _proto.onBind = function onBind() {}

        /**在 onDestroy() 后调用,此时仍然可以获取绑定的 data 数据*/;
        _proto.onUnBind = function onUnBind() {};
        _proto.replaceVMPath = function replaceVMPath(comp, tag) {
          // @ts-ignore
          var path = comp['watchPath'];
          // @ts-ignore
          if (comp['templateMode'] == true) {
            // @ts-ignore
            var pathArr = comp['watchPathArr'];
            if (pathArr) {
              for (var i = 0; i < pathArr.length; i++) {
                var _path = pathArr[i];
                pathArr[i] = _path.replace('*', tag);
              }
            }
          } else {
            // VMLabel
            // 遇到特殊 path 就优先替换路径
            if (path.split('.')[0] === '*') {
              // @ts-ignore
              comp['watchPath'] = path.replace('*', tag);
            }
          }
        }

        /** 未优化的遍历节点，获取VM 组件 */;
        _proto.getVMComponents = function getVMComponents() {
          var _this2 = this;
          var comps = this.node.getComponentsInChildren('VMBase');
          var parents = this.node.getComponentsInChildren('VMParent').filter(function (v) {
            return v.uuid !== _this2.uuid;
          }); // 过滤掉自己

          //过滤掉不能赋值的parent
          var filters = [];
          parents.forEach(function (node) {
            filters = filters.concat(node.getComponentsInChildren('VMBase'));
          });
          comps = comps.filter(function (v) {
            return filters.indexOf(v) < 0;
          });
          return comps;
        }

        /**
         * [注意]不能覆盖此方法，如果需要覆盖。
         * 需要在该方法内部调用父类的实现，再定义自己的方法
         * ```ts
         *   onDestroy(){
         *       super.onDestroy();
         *   }
         * ```
         */;
        _proto.onDestroy = function onDestroy() {
          this.onUnBind();

          // 解除全部引用
          VM.remove(this.tag);
          this.data = null;
          _GameComponent.prototype.onDestroy.call(this);
        };
        return VMParent;
      }(GameComponent)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMProgress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './StringFormat.ts', './VMCustom.ts', './VMEnv.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, StringFormatFunction, VMCustom, VMEnv;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
    }, function (module) {
      StringFormatFunction = module.StringFormatFunction;
    }, function (module) {
      VMCustom = module.VMCustom;
    }, function (module) {
      VMEnv = module.VMEnv;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "2a50eqI7JZNV5Sh0y/Qd9C6", "VMProgress", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu,
        help = _decorator.help;
      var VMProgress = exports('default', (_dec = menu('OopsFramework/Mvvm/VM-Progress （进度条）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037843&doc_id=2873565'), _dec3 = property({
        visible: false,
        override: true
      }), _dec4 = property({
        type: [CCString],
        tooltip: '第一个值是min 值，第二个值 是 max 值，会计算出两者的比例'
      }), _dec5 = property({
        visible: function visible() {
          // @ts-ignore
          return this.componentProperty === 'string';
        },
        tooltip: '字符串格式化，和 VMLabel 的字段一样，需要填入对应的格式化字符串'
      }), ccclass(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_VMCustom) {
        _inheritsLoose(VMProgress, _VMCustom);
        function VMProgress() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMCustom.call.apply(_VMCustom, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "watchPath", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchPathArr", _descriptor2, _assertThisInitialized(_this));
          _this.templateMode = true;
          _initializerDefineProperty(_this, "stringFormat", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = VMProgress.prototype;
        _proto.onLoad = function onLoad() {
          if (this.watchPathArr.length < 2 || this.watchPathArr[0] == '[min]' || this.watchPathArr[1] == '[max]') {
            console.error('VMProgress must have two values!');
          }
          _VMCustom.prototype.onLoad.call(this);
        };
        _proto.start = function start() {
          if (VMEnv.editor) return;
          this.onValueInit();
        };
        _proto.onValueInit = function onValueInit() {
          var max = this.watchPathArr.length;
          for (var i = 0; i < max; i++) {
            this.templateValueArr[i] = this.VM.getValue(this.watchPathArr[i]);
          }
          var value = this.templateValueArr[0] / this.templateValueArr[1];
          this.setComponentValue(value);
        };
        _proto.setComponentValue = function setComponentValue(value) {
          if (this.stringFormat !== '') {
            var res = StringFormatFunction.deal(value, this.stringFormat);
            _VMCustom.prototype.setComponentValue.call(this, res);
          } else {
            _VMCustom.prototype.setComponentValue.call(this, value);
          }
        };
        _proto.onValueController = function onValueController(n, o) {
          var value = Math.round(n * this.templateValueArr[1]);
          if (Number.isNaN(value)) value = 0;
          this.VM.setValue(this.watchPathArr[0], value);
        }

        /** 初始化改变数据 */;
        _proto.onValueChanged = function onValueChanged(n, o, pathArr) {
          if (this.templateMode === false) return;
          var path = pathArr.join('.');
          // 寻找缓存位置
          var index = this.watchPathArr.findIndex(function (v) {
            return v === path;
          });
          if (index >= 0) {
            // 如果是所属的路径，就可以替换文本了
            this.templateValueArr[index] = n; //缓存值
          }

          var value = this.templateValueArr[0] / this.templateValueArr[1];
          if (value > 1) value = 1;
          if (value < 0 || Number.isNaN(value)) value = 0;
          this.setComponentValue(value);
        };
        return VMProgress;
      }(VMCustom), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "watchPath", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "watchPathArr", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['[min]', '[max]'];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "stringFormat", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VMState.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VMBase.ts', './ViewModel.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, CCInteger, Node, Button, Sprite, UIRenderer, color, UIOpacity, VMBase, VM;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      CCInteger = module.CCInteger;
      Node = module.Node;
      Button = module.Button;
      Sprite = module.Sprite;
      UIRenderer = module.UIRenderer;
      color = module.color;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      VMBase = module.VMBase;
    }, function (module) {
      VM = module.VM;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
      cclegacy._RF.push({}, "47052uw/Y5O1LXaLObj4ARx", "VMState", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu,
        help = _decorator.help;

      /** 比较条件 */
      var CONDITION = /*#__PURE__*/function (CONDITION) {
        CONDITION[CONDITION["=="] = 0] = "==";
        CONDITION[CONDITION["!="] = 1] = "!=";
        CONDITION[CONDITION[">"] = 2] = ">";
        CONDITION[CONDITION[">="] = 3] = ">=";
        CONDITION[CONDITION["<"] = 4] = "<";
        CONDITION[CONDITION["<="] = 5] = "<=";
        CONDITION[CONDITION["range"] = 6] = "range";
        return CONDITION;
      }(CONDITION || {});
      var ACTION = /*#__PURE__*/function (ACTION) {
        ACTION[ACTION["NODE_ACTIVE"] = 0] = "NODE_ACTIVE";
        ACTION[ACTION["NODE_VISIBLE"] = 1] = "NODE_VISIBLE";
        ACTION[ACTION["NODE_OPACITY"] = 2] = "NODE_OPACITY";
        ACTION[ACTION["NODE_COLOR"] = 3] = "NODE_COLOR";
        ACTION[ACTION["COMPONENT_CUSTOM"] = 4] = "COMPONENT_CUSTOM";
        ACTION[ACTION["SPRITE_GRAYSCALE"] = 5] = "SPRITE_GRAYSCALE";
        ACTION[ACTION["BUTTON_INTERACTABLE"] = 6] = "BUTTON_INTERACTABLE";
        return ACTION;
      }(ACTION || {}); // 满足条件的节点cc.BUTTON组件,
      var CHILD_MODE_TYPE = /*#__PURE__*/function (CHILD_MODE_TYPE) {
        CHILD_MODE_TYPE[CHILD_MODE_TYPE["NODE_INDEX"] = 0] = "NODE_INDEX";
        CHILD_MODE_TYPE[CHILD_MODE_TYPE["NODE_NAME"] = 1] = "NODE_NAME";
        return CHILD_MODE_TYPE;
      }(CHILD_MODE_TYPE || {});
      /**
       * [VM-State]
       * 监听数值状态,根据数值条件设置节点是否激活
       */
      var VMState = exports('default', (_dec = menu('OopsFramework/Mvvm/VM-State （状态控制）'), _dec2 = help('https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037846&doc_id=2873565'), _dec3 = property({
        tooltip: '遍历子节点,根据子节点的名字或名字转换为值，判断值满足条件 来激活'
      }), _dec4 = property({
        type: Enum(CONDITION)
      }), _dec5 = property({
        type: Enum(CHILD_MODE_TYPE),
        tooltip: '遍历子节点,根据子节点的名字转换为值，判断值满足条件 来激活',
        visible: function visible() {
          // @ts-ignore
          return this.foreachChildMode === true;
        }
      }), _dec6 = property({
        displayName: 'Value: a',
        visible: function visible() {
          // @ts-ignore
          return this.foreachChildMode === false;
        }
      }), _dec7 = property({
        displayName: 'Value: b',
        visible: function visible() {
          // @ts-ignore
          return this.foreachChildMode === false && this.condition === CONDITION.range;
        }
      }), _dec8 = property({
        type: Enum(ACTION),
        tooltip: '一旦满足条件就对节点执行操作'
      }), _dec9 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueAction === ACTION.NODE_OPACITY;
        },
        range: [0, 255],
        type: CCInteger,
        displayName: 'Action Opacity'
      }), _dec10 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueAction === ACTION.NODE_COLOR;
        },
        displayName: 'Action Color'
      }), _dec11 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueAction === ACTION.COMPONENT_CUSTOM;
        },
        displayName: 'Component Name'
      }), _dec12 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueAction === ACTION.COMPONENT_CUSTOM;
        },
        displayName: 'Component Property'
      }), _dec13 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueAction === ACTION.COMPONENT_CUSTOM;
        },
        displayName: 'Default Value'
      }), _dec14 = property({
        visible: function visible() {
          // @ts-ignore
          return this.valueAction === ACTION.COMPONENT_CUSTOM;
        },
        displayName: 'Action Value'
      }), _dec15 = property({
        type: [Node],
        tooltip: '需要执行条件的节点，如果不填写则默认会执行本节点以及本节点的所有子节点 的状态'
      }), ccclass(_class = _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_VMBase) {
        _inheritsLoose(VMState, _VMBase);
        function VMState() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _VMBase.call.apply(_VMBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "watchPath", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "foreachChildMode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "condition", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "foreachChildType", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueA", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueB", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueAction", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueActionOpacity", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueActionColor", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueComponentName", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueComponentProperty", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueComponentDefaultValue", _descriptor12, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "valueComponentActionValue", _descriptor13, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "watchNodes", _descriptor14, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = VMState.prototype;
        _proto.onLoad = function onLoad() {
          _VMBase.prototype.onLoad.call(this);
          // 如果数组里没有监听值，那么默认把所有子节点给监听了
          if (this.watchNodes.length == 0) {
            if (this.valueAction !== ACTION.NODE_ACTIVE && this.foreachChildMode === false) {
              this.watchNodes.push(this.node);
            }
            this.watchNodes = this.watchNodes.concat(this.node.children);
          }
        };
        _proto.start = function start() {
          if (this.enabled) {
            this.onValueInit();
          }
        }

        // 当值初始化时
        ;

        _proto.onValueInit = function onValueInit() {
          var value = VM.getValue(this.watchPath);
          this.checkNodeFromValue(value);
        }

        // 当值被改变时
        ;

        _proto.onValueChanged = function onValueChanged(newVar, oldVar, pathArr) {
          this.checkNodeFromValue(newVar);
        }

        // 检查节点值更新
        ;

        _proto.checkNodeFromValue = function checkNodeFromValue(value) {
          var _this2 = this;
          if (this.foreachChildMode) {
            this.watchNodes.forEach(function (node, index) {
              var v = _this2.foreachChildType === CHILD_MODE_TYPE.NODE_INDEX ? index : node.name;
              var check = _this2.conditionCheck(value, v);
              // log('遍历模式', value, node.name, check);
              _this2.setNodeState(node, check);
            });
          } else {
            var check = this.conditionCheck(value, this.valueA, this.valueB);
            this.setNodesStates(check);
          }
        }

        // 更新 多个节点 的 状态
        ;

        _proto.setNodesStates = function setNodesStates(checkState) {
          var _this3 = this;
          var nodes = this.watchNodes;
          var check = checkState;
          nodes.forEach(function (node) {
            _this3.setNodeState(node, check);
          });
        }

        /** 更新单个节点的状态 */;
        _proto.setNodeState = function setNodeState(node, checkState) {
          var n = this.valueAction;
          var check = checkState;
          switch (n) {
            case ACTION.NODE_ACTIVE:
              node.active = check ? true : false;
              break;
            case ACTION.NODE_VISIBLE:
              {
                var opacity = node.getComponent(UIOpacity);
                if (opacity == null) opacity = node.addComponent(UIOpacity);
                if (opacity) {
                  opacity.opacity = check ? 255 : 0;
                }
                break;
              }
            case ACTION.NODE_OPACITY:
              {
                var _opacity = node.getComponent(UIOpacity);
                if (_opacity == null) _opacity = node.addComponent(UIOpacity);
                if (_opacity) {
                  _opacity.opacity = check ? this.valueActionOpacity : 255;
                }
                break;
              }
            case ACTION.NODE_COLOR:
              {
                var uir = node.getComponent(UIRenderer);
                if (uir) {
                  uir.color = check ? this.valueActionColor : color(255, 255, 255);
                }
                break;
              }
            case ACTION.COMPONENT_CUSTOM:
              var comp = node.getComponent(this.valueComponentName);
              if (comp == null) return;
              if (this.valueComponentProperty in comp) {
                comp[this.valueComponentProperty] = check ? this.valueComponentActionValue : this.valueComponentDefaultValue;
              }
              break;
            case ACTION.SPRITE_GRAYSCALE:
              {
                var sprite = node.getComponent(Sprite);
                if (sprite) {
                  sprite.grayscale = check;
                }
                break;
              }
            case ACTION.BUTTON_INTERACTABLE:
              {
                var _sprite = node.getComponent(Button);
                if (_sprite) {
                  _sprite.interactable = check;
                }
                break;
              }
          }
        }

        /** 条件检查 */;
        _proto.conditionCheck = function conditionCheck(v, a, b) {
          var cod = CONDITION;
          switch (this.condition) {
            case cod["=="]:
              if (v == a) return true;
              break;
            case cod["!="]:
              if (v != a) return true;
              break;
            case cod["<"]:
              if (v < a) return true;
              break;
            case cod[">"]:
              if (v > a) return true;
              break;
            case cod[">="]:
              if (v >= a) return true;
              break;
            case cod["<"]:
              if (v < a) return true;
              break;
            case cod["<="]:
              if (v <= a) return true;
              break;
            case cod["range"]:
              if (v >= a && v <= b) return true;
              break;
          }
          return false;
        };
        return VMState;
      }(VMBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "watchPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "foreachChildMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "condition", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return CONDITION["=="];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "foreachChildType", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return CHILD_MODE_TYPE.NODE_INDEX;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "valueA", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "valueB", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "valueAction", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ACTION.NODE_ACTIVE;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "valueActionOpacity", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "valueActionColor", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return color(155, 155, 155);
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "valueComponentName", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "valueComponentProperty", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "valueComponentDefaultValue", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "valueComponentActionValue", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "watchNodes", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebSock.ts", ['cc', './Logger.ts'], function (exports) {
  var cclegacy, Logger;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Logger = module.Logger;
    }],
    execute: function () {
      cclegacy._RF.push({}, "70df2VbIU9B66Fr+op8FKJp", "WebSock", undefined);
      /**
       * WebSocket 封装
       * 1. 连接/断开相关接口
       * 2. 网络异常回调
       * 3. 数据发送与接收
       */
      var WebSock = exports('WebSock', /*#__PURE__*/function () {
        function WebSock() {
          this._ws = null;
          // websocket对象
          /** 网络连接成功事件 */
          this.onConnected = null;
          /** 接受到网络数据事件 */
          this.onMessage = null;
          /** 网络错误事件 */
          this.onError = null;
          /** 网络断开事件 */
          this.onClosed = null;
        }
        var _proto = WebSock.prototype;
        /** 请求连接 */
        _proto.connect = function connect(options) {
          var _this = this;
          if (this._ws) {
            if (this._ws.readyState === WebSocket.CONNECTING) {
              Logger.logNet("websocket connecting, wait for a moment...");
              return false;
            }
          }
          var url = null;
          if (options.url) {
            url = options.url;
          } else {
            var ip = options.ip;
            var port = options.port;
            var protocol = options.protocol;
            url = protocol + "://" + ip + ":" + port;
          }
          this._ws = new WebSocket(url);
          this._ws.binaryType = options.binaryType ? options.binaryType : "arraybuffer";
          this._ws.onmessage = function (event) {
            var onMessage = _this.onMessage;
            onMessage(event.data);
          };
          this._ws.onopen = this.onConnected;
          this._ws.onerror = this.onError;
          this._ws.onclose = this.onClosed;
          return true;
        }

        /**
         * 发送数据 
         * @param buffer 网络数据
         */;
        _proto.send = function send(buffer) {
          if (this._ws && this._ws.readyState == WebSocket.OPEN) {
            this._ws.send(buffer);
            return 1;
          }
          return -1;
        }

        /**
         * 网络断开
         * @param code      关闭码
         * @param reason    关闭原因
         */;
        _proto.close = function close(code, reason) {
          if (this._ws) {
            this._ws.close(code, reason);
          }
        };
        return WebSock;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, HighlightAreaType, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
      HighlightAreaType = module.HighlightAreaType;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "71310JfUpxJUov7g6HFCktC", "WWingStrategy", undefined);
      var WWingStrategy = exports('WWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(WWingStrategy, _BaseStrategy);
        function WWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 12;
          return _this;
        }
        var _proto = WWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkWWing(board, candidates);
          if (result) {
            return this.createWWingSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkWWing = function checkWWing(board, candidates) {
          var _this2 = this;
          // 1. 找出所有双值格
          var biValueCells = [];
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR && candidates[row][col].size === 2) {
                biValueCells.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          var _loop = function _loop() {
              var _step$value = _step.value,
                cellA = _step$value[0],
                cellB = _step$value[1];
              // 检查是否共享相同的候选数对
              var candA = [].concat(candidates[cellA.row][cellA.col]).sort(function (a, b) {
                return a - b;
              });
              var candB = [].concat(candidates[cellB.row][cellB.col]).sort(function (a, b) {
                return a - b;
              });
              if (candA.join(',') !== candB.join(',')) return 0; // continue
              // 检查两格是否互不可见（不在同一行/列/宫）
              if (_this2.areCellsVisible(cellA, cellB)) return 0; // continue

              // 检查强链连接（针对候选数Y）
              var X = candA[0],
                Y = candA[1];

              // 关键修正：检查两种可能的强链情况
              var results = [{
                strongDigit: X,
                removeDigit: Y
              }, {
                strongDigit: Y,
                removeDigit: X
              }].map(function (_ref) {
                var strongDigit = _ref.strongDigit,
                  removeDigit = _ref.removeDigit;
                var strongLink = _this2.findStrongLink(cellA, cellB, strongDigit, board, candidates);
                if (!strongLink) return null;
                var affectedCells = _this2.getSharedVisibleCells(cellA, cellB, board).filter(function (pos) {
                  return candidates[pos.row][pos.col].has(removeDigit);
                });
                return affectedCells.length > 0 ? {
                  cellA: cellA,
                  cellB: cellB,
                  strongLink: strongLink,
                  valueToRemove: removeDigit,
                  affectedCells: affectedCells
                } : null;
              }).filter(Boolean);
              if (results.length > 0) return {
                v: results[0]
              };
            },
            _ret;
          for (var _iterator = _createForOfIteratorHelperLoose(SolverUtils.getCombinations(biValueCells, 2)), _step; !(_step = _iterator()).done;) {
            _ret = _loop();
            if (_ret === 0) continue;
            if (_ret) return _ret.v;
          }
          return null;
        };
        _proto.findStrongLink = function findStrongLink(cellA, cellB, digit, board, candidates) {
          var _this3 = this;
          // 1. 获取cellA和cellB的所有关联格（不包括自己）
          var aLinkedCells = this.getLinkedCells(cellA).filter(function (pos) {
            return !_this3.isSamePosition(pos, cellA);
          });
          var bLinkedCells = this.getLinkedCells(cellB).filter(function (pos) {
            return !_this3.isSamePosition(pos, cellB);
          });

          // 2. 获取这些关联格所在的行/列/宫（不包括直接包含A或B的单位）
          var potentialUnits = [].concat(this.getCellsUnits(aLinkedCells), this.getCellsUnits(bLinkedCells)).filter(function (unit) {
            return !_this3.unitContainsCell(unit, cellA) && !_this3.unitContainsCell(unit, cellB);
          }).filter(function (unit, index, self) {
            return index === self.findIndex(function (u) {
              return u.areaType === unit.areaType && u.areaIndex === unit.areaIndex;
            });
          });
          for (var _iterator2 = _createForOfIteratorHelperLoose(potentialUnits), _step2; !(_step2 = _iterator2()).done;) {
            var unit = _step2.value;
            // 获取该单位所有包含digit的单元格
            var digitCells = unit.cells.filter(function (pos) {
              return candidates[pos.row][pos.col].has(digit);
            });

            // 检查强链条件
            if (digitCells.length >= 2) {
              // 这些digit单元格必须全部来自cellA或cellB的关联格
              var allFromABLinks = digitCells.every(function (pos) {
                return _this3.areCellsVisible(pos, cellA) || _this3.areCellsVisible(pos, cellB);
              });

              // 必须至少有一个来自A的关联格，一个来自B的关联格
              var hasALink = digitCells.some(function (pos) {
                return _this3.areCellsVisible(pos, cellA);
              });
              var hasBLink = digitCells.some(function (pos) {
                return _this3.areCellsVisible(pos, cellB);
              });
              if (allFromABLinks && hasALink && hasBLink) {
                return {
                  areaType: unit.areaType,
                  areaIndex: unit.areaIndex,
                  digit: digit
                };
              }
            }
          }
          return null;
        }

        // 获取单元格的所有关联格（同一行/列/宫的单元格）
        ;

        _proto.getLinkedCells = function getLinkedCells(cell) {
          var rowCells = SolverUtils.getRowCells(cell.row);
          var colCells = SolverUtils.getColumnCells(cell.col);
          var boxCells = this.getBoxCells(SolverUtils.getBoxIndex(cell.row, cell.col));
          return [].concat(rowCells, colCells, boxCells).filter(function (pos, index, self) {
            return index === self.findIndex(function (p) {
              return p.row === pos.row && p.col === pos.col;
            });
          });
        }

        // 获取多个单元格所在的所有单位（行/列/宫）
        ;

        _proto.getCellsUnits = function getCellsUnits(cells) {
          var units = new Map();
          for (var _iterator3 = _createForOfIteratorHelperLoose(cells), _step3; !(_step3 = _iterator3()).done;) {
            var cell = _step3.value;
            var rowUnit = {
              areaType: HighlightAreaType.ROW,
              areaIndex: cell.row,
              cells: SolverUtils.getRowCells(cell.row)
            };
            units.set(HighlightAreaType.ROW + "_" + cell.row, rowUnit);
            var colUnit = {
              areaType: HighlightAreaType.COLUMN,
              areaIndex: cell.col,
              cells: SolverUtils.getColumnCells(cell.col)
            };
            units.set(HighlightAreaType.COLUMN + "_" + cell.col, colUnit);
            var boxIndex = SolverUtils.getBoxIndex(cell.row, cell.col);
            var boxUnit = {
              areaType: HighlightAreaType.BOX,
              areaIndex: boxIndex,
              cells: this.getBoxCells(boxIndex)
            };
            units.set(HighlightAreaType.BOX + "_" + boxIndex, boxUnit);
          }
          return Array.from(units.values());
        }

        // 检查单位是否包含指定单元格
        ;

        _proto.unitContainsCell = function unitContainsCell(unit, cell) {
          return unit.cells.some(function (pos) {
            return pos.row === cell.row && pos.col === cell.col;
          });
        };
        _proto.createWWingSteps = function createWWingSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createColorMappingStep(board, candidates, info), this.createMarkRemovalStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this4 = this;
          var cellA = _ref2.cellA,
            cellB = _ref2.cellB,
            strongLink = _ref2.strongLink,
            valueToRemove = _ref2.valueToRemove;
          var candA = [].concat(candidates[cellA.row][cellA.col]);
          var candB = [].concat(candidates[cellB.row][cellB.col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WWingStrategy.discoveryDes", {
              name: _this4.name,
              description: _this4.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: cellA,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: cellA,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candA
            }, {
              position: cellB,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candB
            }].concat(this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(candA.map(function (val) {
              return {
                position: cellA,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }), candB.map(function (val) {
              return {
                position: cellB,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }))
          };
        };
        _proto.getStrongLinkHighlight = function getStrongLinkHighlight(strongLink, board, candidates) {
          return [].concat(this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              candidates: [].concat(candidates[pos.row][pos.col])
            };
          }));
        };
        _proto.createColorMappingStep = function createColorMappingStep(board, candidates, _ref3) {
          var _this5 = this;
          var cellA = _ref3.cellA,
            cellB = _ref3.cellB,
            strongLink = _ref3.strongLink,
            valueToRemove = _ref3.valueToRemove,
            affectedCells = _ref3.affectedCells;
          var candA = [].concat(candidates[cellA.row][cellA.col]);
          var candB = [].concat(candidates[cellB.row][cellB.col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WWingStrategy.colorMappingDes", {
              name: _this5.name,
              cellARow: cellA.row + 1,
              cellACol: cellA.col + 1,
              candAStr: candA.join(','),
              cellBRow: cellB.row + 1,
              cellBCol: cellB.col + 1,
              candBStr: candB.join(','),
              digit: strongLink.digit
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: cellA,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: cellA,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candA
            }, {
              position: cellB,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candB
            }].concat(this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(candA.map(function (val) {
              return {
                position: cellA,
                backgroundColor: val === valueToRemove ? HighlightConfig.targetCell.background : HighlightConfig.hintCell.background,
                textColor: val === valueToRemove ? HighlightConfig.targetCell.textColor : HighlightConfig.hintCell.textColor,
                value: val
              };
            }), candB.map(function (val) {
              return {
                position: cellB,
                backgroundColor: val === valueToRemove ? HighlightConfig.targetCell.background : HighlightConfig.hintCell.background,
                textColor: val === valueToRemove ? HighlightConfig.targetCell.textColor : HighlightConfig.hintCell.textColor,
                value: val
              };
            }), this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: strongLink.digit
              };
            }))
          };
        };
        _proto.createMarkRemovalStep = function createMarkRemovalStep(board, candidates, _ref4) {
          var _this6 = this;
          var cellA = _ref4.cellA,
            cellB = _ref4.cellB,
            strongLink = _ref4.strongLink,
            valueToRemove = _ref4.valueToRemove,
            affectedCells = _ref4.affectedCells;
          var candA = [].concat(candidates[cellA.row][cellA.col]);
          var candB = [].concat(candidates[cellB.row][cellB.col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WWingStrategy.markRemovalDes", {
              name: _this6.name,
              cellARow: cellA.row + 1,
              cellACol: cellA.col + 1,
              cellBRow: cellB.row + 1,
              cellBCol: cellB.col + 1,
              digit: strongLink.digit,
              valueToRemove: valueToRemove,
              areaName: _this6.getAreaName(strongLink.areaType)
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: cellA,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: cellA,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candA
            }, {
              position: cellB,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candB
            }].concat(this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(candA.map(function (val) {
              return {
                position: cellA,
                backgroundColor: val === valueToRemove ? HighlightConfig.targetCell.background : HighlightConfig.hintCell.background,
                textColor: val === valueToRemove ? HighlightConfig.targetCell.textColor : HighlightConfig.hintCell.textColor,
                value: val
              };
            }), candB.map(function (val) {
              return {
                position: cellB,
                backgroundColor: val === valueToRemove ? HighlightConfig.targetCell.background : HighlightConfig.hintCell.background,
                textColor: val === valueToRemove ? HighlightConfig.targetCell.textColor : HighlightConfig.hintCell.textColor,
                value: val
              };
            }), this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: strongLink.digit
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: valueToRemove
              };
            }))
          };
        };
        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref5) {
          var _this7 = this;
          var cellA = _ref5.cellA,
            cellB = _ref5.cellB,
            strongLink = _ref5.strongLink,
            valueToRemove = _ref5.valueToRemove,
            affectedCells = _ref5.affectedCells;
          // 实际移除操作
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](valueToRemove);
          });
          var candA = [].concat(candidates[cellA.row][cellA.col]);
          var candB = [].concat(candidates[cellB.row][cellB.col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WWingStrategy.removalDes", {
              name: _this7.name,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: cellA,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: cellA,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candA
            }, {
              position: cellB,
              backgroundColor: HighlightConfig.defaultCell.background,
              textColor: HighlightConfig.defaultCell.textColor,
              candidates: candB
            }].concat(this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.defaultCell.background,
                textColor: HighlightConfig.defaultCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(candA.map(function (val) {
              return {
                position: cellA,
                backgroundColor: val === valueToRemove ? HighlightConfig.targetCell.background : HighlightConfig.hintCell.background,
                textColor: val === valueToRemove ? HighlightConfig.targetCell.textColor : HighlightConfig.hintCell.textColor,
                value: val
              };
            }), candB.map(function (val) {
              return {
                position: cellB,
                backgroundColor: val === valueToRemove ? HighlightConfig.targetCell.background : HighlightConfig.hintCell.background,
                textColor: val === valueToRemove ? HighlightConfig.targetCell.textColor : HighlightConfig.hintCell.textColor,
                value: val
              };
            }), this.getAreaCells(strongLink.areaType, strongLink.areaIndex).map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: strongLink.digit
              };
            }))
          };
        }

        // 以下方法与Y-Wing实现中的相同，可以提取到基类中
        ;

        _proto.getSharedVisibleCells = function getSharedVisibleCells(cell1, cell2, board) {
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) visible.push({
              row: cell.row,
              col: col
            });
          }
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) visible.push({
              row: row,
              col: cell.col
            });
          }
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        };
        _proto.getBoxCells = function getBoxCells(box) {
          var startRow = Math.floor(box / 3) * 3;
          var startCol = box % 3 * 3;
          var positions = [];
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              positions.push({
                row: startRow + r,
                col: startCol + c
              });
            }
          }
          return positions;
        };
        _proto.isSamePosition = function isSamePosition(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        }

        /**
         * 检查两个单元格是否互相可见（在同一行/列/宫）
         */;
        _proto.areCellsVisible = function areCellsVisible(a, b) {
          return a.row === b.row || a.col === b.col || SolverUtils.getBoxIndex(a.row, a.col) === SolverUtils.getBoxIndex(b.row, b.col);
        };
        _proto.getAreaName = function getAreaName(areaType) {
          var _HighlightAreaType$RO;
          return (_HighlightAreaType$RO = {}, _HighlightAreaType$RO[HighlightAreaType.ROW] = oops.language.getLangByID("strategy.row"), _HighlightAreaType$RO[HighlightAreaType.COLUMN] = oops.language.getLangByID("strategy.col"), _HighlightAreaType$RO[HighlightAreaType.BOX] = oops.language.getLangByID("strategy.box"), _HighlightAreaType$RO)[areaType];
        };
        _createClass(WWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("WWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("WWingStrategy.description");
          }
        }]);
        return WWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WXYZWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d988dTJ4SdMnYLrOp/V21mu", "WXYZWingStrategy", undefined);
      var WXYZWingStrategy = exports('WXYZWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(WXYZWingStrategy, _BaseStrategy);
        function WXYZWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 15;
          // 难度高于XY-Wing
          _this.usedColors = new Set();
          // 记录已使用的背景色
          _this.chainHighlightNotes = [];
          return _this;
        }
        var _proto = WXYZWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkWXYZWing(board, candidates);
          if (result) {
            return this.createWXYZWingSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkWXYZWing = function checkWXYZWing(board, candidates) {
          // 1. 分别收集双值格和四值格
          var biCells = []; // 双值格
          var quadCells = []; // 四值格

          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] !== BLANK_CHAR) continue;
              var count = candidates[row][col].size;
              if (count === 2) {
                biCells.push({
                  row: row,
                  col: col
                });
              } else if (count === 4) {
                quadCells.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          // 2. 组合检查：每个四值格 + 任意三个双值格
          for (var _i = 0, _quadCells = quadCells; _i < _quadCells.length; _i++) {
            var pivot = _quadCells[_i];
            // 需要至少3个双值格才能形成WXYZ-Wing
            if (biCells.length < 3) continue;
            for (var _iterator = _createForOfIteratorHelperLoose(SolverUtils.getCombinations(biCells, 3)), _step; !(_step = _iterator()).done;) {
              var _step$value = _step.value,
                wz = _step$value[0],
                xz = _step$value[1],
                yz = _step$value[2];
              // 检查所有可能的三双值格组合
              var wings = [wz, xz, yz];
              var result = this.validateWXYZWingStructure(pivot, wings, board, candidates);
              if (result) return result;
            }
          }
          return null;
        };
        _proto.validateWXYZWingStructure = function validateWXYZWingStructure(pivot, wings, board, candidates) {
          var _this2 = this;
          // 1. 获取候选数集合
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wingCandidates = wings.map(function (wing) {
            return [].concat(candidates[wing.row][wing.col]);
          });

          // 2. 基础校验
          if (pivotCands.length !== 4) return null; // 枢纽必须四值
          if (wingCandidates.some(function (c) {
            return c.length !== 2;
          })) return null; // 翼必须双值

          // 3. 找出共同数字Z（必须存在于所有翼格）
          var commonZ = pivotCands.find(function (z) {
            return wingCandidates.every(function (wc) {
              return wc.includes(z);
            });
          });
          if (!commonZ) return null;

          // 4. 提取各翼格独有数字（必须得到三个不同的数字W/X/Y）
          var uniqueValues = wingCandidates.map(function (wc) {
            return wc.find(function (c) {
              return c !== commonZ;
            });
          });

          // 4.1 检查是否都找到了独有数字
          if (uniqueValues.some(function (v) {
            return v === undefined;
          })) return null;

          // 4.2 检查三个独有数字是否互不相同
          var _ref = uniqueValues,
            w = _ref[0],
            x = _ref[1],
            y = _ref[2];
          if (new Set([w, x, y]).size !== 3) return null;

          // 5. 验证枢纽格候选数必须正好是W/X/Y/Z
          var requiredValues = new Set([w, x, y, commonZ]);
          if (pivotCands.length !== 4 || !pivotCands.every(function (c) {
            return requiredValues.has(c);
          })) {
            return null;
          }

          // 6. 检查可见性（枢纽必须与所有翼格在同一单元）
          if (!wings.every(function (wing) {
            return _this2.areInSameUnit(pivot, wing);
          })) {
            return null;
          }

          // 7. 计算共同影响格
          var affectedCells = this.getQuadSharedVisibleCells([pivot].concat(wings), board).filter(function (pos) {
            return !_this2.isSameCell(pos, pivot) && !wings.some(function (wing) {
              return _this2.isSameCell(pos, wing);
            }) && candidates[pos.row][pos.col].has(commonZ);
          });
          return affectedCells.length > 0 ? {
            pivot: pivot,
            wings: wings,
            valueToRemove: commonZ,
            affectedCells: affectedCells
          } : null;
        }

        // 四格共同可见格计算（关键修改）
        ;

        _proto.getQuadSharedVisibleCells = function getQuadSharedVisibleCells(cells, board) {
          var _this3 = this;
          // 获取所有单元格的可见格交集
          var sharedVisible = cells.map(function (cell) {
            return _this3.getVisibleCells(cell, board);
          }).reduce(function (a, b) {
            return a.filter(function (posA) {
              return b.some(function (posB) {
                return _this3.isSameCell(posA, posB);
              });
            });
          });

          // 去重处理
          var uniquePositions = new Set();
          return sharedVisible.filter(function (pos) {
            var key = pos.row + "," + pos.col;
            if (uniquePositions.has(key)) return false;
            uniquePositions.add(key);
            return true;
          });
        }

        // 辅助方法（复用XY-Wing中的实现）------------------------------------
        ;

        _proto.areInSameUnit = function areInSameUnit(cell1, cell2) {
          return cell1.row === cell2.row || cell1.col === cell2.col || Math.floor(cell1.row / 3) === Math.floor(cell2.row / 3) && Math.floor(cell1.col / 3) === Math.floor(cell2.col / 3);
        };
        _proto.isSameCell = function isSameCell(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) visible.push({
              row: cell.row,
              col: col
            });
          }
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) visible.push({
              row: row,
              col: cell.col
            });
          }
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        }

        // 步骤生成逻辑（类似XY-Wing但调整提示）-----------------------------
        ;

        _proto.createWXYZWingSteps = function createWXYZWingSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createWingVisualizationStep(board, candidates, info), this.createEliminationStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this4 = this;
          var pivot = _ref2.pivot,
            wings = _ref2.wings,
            valueToRemove = _ref2.valueToRemove,
            affectedCells = _ref2.affectedCells;
          // 获取各单元格候选数用于显示
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wings[0].row][wings[0].col]);
          var wing2Cands = [].concat(candidates[wings[1].row][wings[1].col]);
          var wing3Cands = [].concat(candidates[wings[2].row][wings[2].col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WXYZWingStrategy.discoveryDes", {
              name: _this4.name,
              description: _this4.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [
            // 枢纽格高亮
            {
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: pivotCands
            },
            // 三个翼格高亮（使用不同颜色区分）
            {
              position: wings[0],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing1Cands
            }, {
              position: wings[1],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing2Cands
            }, {
              position: wings[2],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing3Cands
            }],
            highlightNotes: [].concat(this.getCandidateHighlights(pivot, candidates), this.getCandidateHighlights(wings[0], candidates), this.getCandidateHighlights(wings[1], candidates), this.getCandidateHighlights(wings[2], candidates))
          };
        };
        _proto.getCandidateHighlights = function getCandidateHighlights(pos, candidates) {
          return [].concat(candidates[pos.row][pos.col]).map(function (val) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: val
            };
          });
        };
        _proto.createWingVisualizationStep = function createWingVisualizationStep(board, candidates, _ref3) {
          var _this5 = this;
          var pivot = _ref3.pivot,
            wings = _ref3.wings,
            valueToRemove = _ref3.valueToRemove;
          this.resetColorHistory();

          // 获取所有单元格的候选数
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wings[0].row][wings[0].col]);
          var wing2Cands = [].concat(candidates[wings[1].row][wings[1].col]);
          var wing3Cands = [].concat(candidates[wings[2].row][wings[2].col]);

          // 确定数字关系 (W/X/Y/Z)
          var z = valueToRemove;

          // 生成候选数高亮标记
          this.chainHighlightNotes = this.getWXYZWingHighlightNotes(pivot, wings, candidates, z);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WXYZWingStrategy.wingVisualizationDes", {
              name: _this5.name,
              pivot: "R" + (pivot.row + 1) + "C" + (pivot.col + 1),
              pivotCands: pivotCands.join(","),
              wing1: "R" + (wings[0].row + 1) + "C" + (wings[0].col + 1),
              wing1Cands: wing1Cands.join(","),
              wing2: "R" + (wings[1].row + 1) + "C" + (wings[1].col + 1),
              wing2Cands: wing2Cands.join(","),
              wing3: "R" + (wings[2].row + 1) + "C" + (wings[2].col + 1),
              wing3Cands: wing3Cands.join(","),
              zValue: z
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [
            // 枢纽格
            {
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: pivotCands
            },
            // 翼格1 (WZ)
            {
              position: wings[0],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing1Cands
            },
            // 翼格2 (XZ)
            {
              position: wings[1],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing2Cands
            },
            // 翼格3 (YZ)
            {
              position: wings[2],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing3Cands
            }],
            highlightNotes: [].concat(this.chainHighlightNotes, wings.map(function (wing) {
              return {
                position: wing,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: valueToRemove
              };
            }))
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, _ref4) {
          var _this6 = this;
          var pivot = _ref4.pivot,
            wings = _ref4.wings,
            valueToRemove = _ref4.valueToRemove,
            affectedCells = _ref4.affectedCells;
          // 获取所有单元格的候选数
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wings[0].row][wings[0].col]);
          var wing2Cands = [].concat(candidates[wings[1].row][wings[1].col]);
          var wing3Cands = [].concat(candidates[wings[2].row][wings[2].col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WXYZWingStrategy.eliminationDes", {
              name: _this6.name,
              affectedCellsLength: affectedCells.length,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [
            // 枢纽格
            {
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: pivotCands
            },
            // 翼格1 (WZ)
            {
              position: wings[0],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing1Cands
            },
            // 翼格2 (XZ)
            {
              position: wings[1],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing2Cands
            },
            // 翼格3 (YZ)
            {
              position: wings[2],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing3Cands
            }].concat(affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(this.chainHighlightNotes, affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: valueToRemove
              };
            }))
          };
        };
        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref5) {
          var _this7 = this;
          var pivot = _ref5.pivot,
            wings = _ref5.wings,
            valueToRemove = _ref5.valueToRemove,
            affectedCells = _ref5.affectedCells;
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](valueToRemove);
          });
          // 获取所有单元格的候选数
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wings[0].row][wings[0].col]);
          var wing2Cands = [].concat(candidates[wings[1].row][wings[1].col]);
          var wing3Cands = [].concat(candidates[wings[2].row][wings[2].col]);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("WXYZWingStrategy.removalDes", {
              name: _this7.name,
              affectedCellsLength: affectedCells.length,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [
            // 枢纽格
            {
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: pivotCands
            },
            // 翼格1 (WZ)
            {
              position: wings[0],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing1Cands
            },
            // 翼格2 (XZ)
            {
              position: wings[1],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing2Cands
            },
            // 翼格3 (YZ)
            {
              position: wings[2],
              backgroundColor: HighlightConfig.wingCell.background,
              textColor: HighlightConfig.wingCell.textColor,
              candidates: wing3Cands
            }].concat(affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(this.chainHighlightNotes)
          };
        };
        _proto.getWXYZWingHighlightNotes = function getWXYZWingHighlightNotes(pivot, wings, candidates, zValue) {
          var _this8 = this;
          var highlightNotes = [];
          var colorMap = new Map();

          // 为每个数字分配颜色
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          pivotCands.forEach(function (val) {
            if (!colorMap.has(val)) {
              colorMap.set(val, _this8.getHighlightNoteColor());
            }
          });

          // 添加枢纽格高亮
          this.addCellHighlightNotes(highlightNotes, pivot, pivotCands, colorMap);

          // 添加翼格高亮
          wings.forEach(function (wing) {
            _this8.addCellHighlightNotes(highlightNotes, wing, [].concat(candidates[wing.row][wing.col]), colorMap);
          });
          return highlightNotes;
        }

        /**
         * 添加单元格的高亮注释
         */;
        _proto.addCellHighlightNotes = function addCellHighlightNotes(highlightNotes, position, cellCandidates, colorMap) {
          cellCandidates.forEach(function (val) {
            var colors = colorMap.get(val);
            if (colors) {
              highlightNotes.push({
                position: position,
                backgroundColor: colors[0],
                textColor: colors[1],
                value: val
              });
            }
          });
        }

        /**
         * 将HEX颜色转换为RGB对象
         */;
        _proto.hexToRgb = function hexToRgb(hex) {
          var r = parseInt(hex.substring(1, 3), 16);
          var g = parseInt(hex.substring(3, 5), 16);
          var b = parseInt(hex.substring(5, 7), 16);
          return {
            r: r,
            g: g,
            b: b
          };
        }

        /**
         * 计算两种颜色的对比度比率
         */;
        _proto.calculateContrastRatio = function calculateContrastRatio(bgBrightness, textBrightness) {
          var L1 = Math.max(bgBrightness, textBrightness) / 255;
          var L2 = Math.min(bgBrightness, textBrightness) / 255;
          return (L1 + 0.05) / (L2 + 0.05);
        }

        /**
         * 优化的HSL转HEX方法
         */;
        _proto.hslToHex = function hslToHex(h, s, l) {
          l /= 100;
          s /= 100;
          var c = (1 - Math.abs(2 * l - 1)) * s;
          var x = c * (1 - Math.abs(h / 60 % 2 - 1));
          var m = l - c / 2;
          var r = 0,
            g = 0,
            b = 0;
          if (h >= 0 && h < 60) {
            r = c;
            g = x;
            b = 0;
          } else if (h >= 60 && h < 120) {
            r = x;
            g = c;
            b = 0;
          } else if (h >= 120 && h < 180) {
            r = 0;
            g = c;
            b = x;
          } else if (h >= 180 && h < 240) {
            r = 0;
            g = x;
            b = c;
          } else if (h >= 240 && h < 300) {
            r = x;
            g = 0;
            b = c;
          } else {
            r = c;
            g = 0;
            b = x;
          }
          r = Math.round((r + m) * 255);
          g = Math.round((g + m) * 255);
          b = Math.round((b + m) * 255);
          return "#" + r.toString(16).padStart(2, '0') + g.toString(16).padStart(2, '0') + b.toString(16).padStart(2, '0');
        };
        _proto.getHighlightNoteColor = function getHighlightNoteColor() {
          var MAX_ATTEMPTS = 10; // 最大尝试次数，避免无限循环
          var attempts = 0;
          while (attempts < MAX_ATTEMPTS) {
            // 生成候选颜色
            var _this$generateColorPa = this.generateColorPair(),
              bgColor = _this$generateColorPa[0],
              textColor = _this$generateColorPa[1];

            // 检查颜色是否已使用
            if (!this.usedColors.has(bgColor)) {
              this.usedColors.add(bgColor);
              return [bgColor, textColor];
            }
            attempts++;
          }

          // 如果尝试多次仍无法生成新颜色，返回默认高对比度组合
          return ['#FF0000', '#FFFFFF'];
        }

        /**
        * 生成单个高对比度颜色对
        */;
        _proto.generateColorPair = function generateColorPair() {
          // 使用黄金角近似算法生成分布均匀的色相
          var goldenAngle = 137.508;
          var hue = this.usedColors.size * goldenAngle % 360;

          // 保持高饱和度和中等亮度
          var saturation = 70 + Math.floor(Math.random() * 30);
          var lightness = 60 + Math.floor(Math.random() * 30);
          var bgColor = this.hslToHex(hue, saturation, lightness);

          // 计算亮度并确定文字颜色
          var brightness = this.calculateBrightness(bgColor);
          var textColor = brightness < 150 ? '#FFFFFF' : '#000000';

          // 确保满足WCAG AA对比度标准
          if (this.calculateContrastRatio(brightness, textColor === '#FFFFFF' ? 255 : 0) < 4.5) {
            return brightness < 150 ? [bgColor, '#FFFFFF'] : [bgColor, '#000000'];
          }
          return [bgColor, textColor];
        }

        /**
         * 计算颜色的感知亮度
         */;
        _proto.calculateBrightness = function calculateBrightness(hexColor) {
          var rgb = this.hexToRgb(hexColor);
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        }

        /**
         * 重置已使用颜色记录
         */;
        _proto.resetColorHistory = function resetColorHistory() {
          this.usedColors.clear();
        };
        _createClass(WXYZWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("WXYZWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("WXYZWingStrategy.description");
          }
        }]);
        return WXYZWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, HighlightAreaType, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      HighlightAreaType = module.HighlightAreaType;
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1c929KSTtFBL5NBK3lfUVng", "XWingStrategy", undefined);
      var XWingStrategy = exports('XWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(XWingStrategy, _BaseStrategy);
        function XWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 10;
          return _this;
        }
        var _proto = XWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkXWing(board, candidates);
          if (result) {
            return this.createXWingSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkXWing = function checkXWing(board, candidates) {
          // 检查行方向的X-Wing
          for (var val = 1; val <= 9; val++) {
            var rowMap = new Map();

            // 记录每行中该数字出现的位置
            for (var row = 0; row < 9; row++) {
              var cols = [];
              for (var col = 0; col < 9; col++) {
                if (candidates[row][col].has(val)) {
                  cols.push(col);
                }
              }
              if (cols.length === 2) {
                var key = cols.sort().join(',');
                rowMap.set(key, (rowMap.get(key) || []).concat(row));
              }
            }

            // 检查是否有两行在相同列出现
            var _loop = function _loop() {
                var _step$value = _step.value,
                  cols = _step$value[0],
                  rows = _step$value[1];
                if (rows.length === 2) {
                  var colIndices = cols.split(',').map(Number);
                  var affectedCells = [];

                  // 检查这两列的其他行
                  for (var _iterator2 = _createForOfIteratorHelperLoose(colIndices), _step2; !(_step2 = _iterator2()).done;) {
                    var _col = _step2.value;
                    for (var _row = 0; _row < 9; _row++) {
                      if (!rows.includes(_row) && candidates[_row][_col].has(val)) {
                        affectedCells.push({
                          row: _row,
                          col: _col
                        });
                      }
                    }
                  }
                  if (affectedCells.length > 0) {
                    var basePositions = rows.flatMap(function (row) {
                      return colIndices.map(function (col) {
                        return {
                          row: row,
                          col: col
                        };
                      });
                    });
                    return {
                      v: {
                        value: val,
                        basePositions: basePositions,
                        affectedCells: affectedCells,
                        direction: HighlightAreaType.ROW,
                        lines: [rows[0], rows[1]]
                      }
                    };
                  }
                }
              },
              _ret;
            for (var _iterator = _createForOfIteratorHelperLoose(rowMap.entries()), _step; !(_step = _iterator()).done;) {
              _ret = _loop();
              if (_ret) return _ret.v;
            }
          }

          // 检查列方向的X-Wing（逻辑对称）
          for (var _val = 1; _val <= 9; _val++) {
            var colMap = new Map();
            for (var _col2 = 0; _col2 < 9; _col2++) {
              var rows = [];
              for (var _row2 = 0; _row2 < 9; _row2++) {
                if (candidates[_row2][_col2].has(_val)) {
                  rows.push(_row2);
                }
              }
              if (rows.length === 2) {
                var _key2 = rows.sort().join(',');
                colMap.set(_key2, (colMap.get(_key2) || []).concat(_col2));
              }
            }
            var _loop2 = function _loop2() {
                var _step3$value = _step3.value,
                  rows = _step3$value[0],
                  cols = _step3$value[1];
                if (cols.length === 2) {
                  var rowIndices = rows.split(',').map(Number);
                  var affectedCells = [];
                  for (var _iterator4 = _createForOfIteratorHelperLoose(rowIndices), _step4; !(_step4 = _iterator4()).done;) {
                    var _row3 = _step4.value;
                    for (var _col3 = 0; _col3 < 9; _col3++) {
                      if (!cols.includes(_col3) && candidates[_row3][_col3].has(_val)) {
                        affectedCells.push({
                          row: _row3,
                          col: _col3
                        });
                      }
                    }
                  }
                  if (affectedCells.length > 0) {
                    var basePositions = cols.flatMap(function (col) {
                      return rowIndices.map(function (row) {
                        return {
                          row: row,
                          col: col
                        };
                      });
                    });
                    return {
                      v: {
                        value: _val,
                        basePositions: basePositions,
                        affectedCells: affectedCells,
                        direction: HighlightAreaType.COLUMN,
                        lines: [cols[0], cols[1]]
                      }
                    };
                  }
                }
              },
              _ret2;
            for (var _iterator3 = _createForOfIteratorHelperLoose(colMap.entries()), _step3; !(_step3 = _iterator3()).done;) {
              _ret2 = _loop2();
              if (_ret2) return _ret2.v;
            }
          }
          return null;
        };
        _proto.createXWingSteps = function createXWingSteps(board, candidates, info) {
          var steps = [];
          var value = info.value,
            basePositions = info.basePositions,
            affectedCells = info.affectedCells,
            direction = info.direction;

          // 步骤1：发现X-Wing模式
          steps.push(this.createDiscoveryStep(board, candidates, value, basePositions, affectedCells, direction));
          // 步骤2：解释规则
          steps.push(this.createRuleExplanationStep(board, candidates, value, basePositions, affectedCells, direction));

          // 步骤3：展示影响
          steps.push(this.createImpactDemonstrationStep(board, candidates, value, basePositions, affectedCells, direction));

          // 步骤4：执行移除
          steps.push(this.createRemovalExecutionStep(board, candidates, value, basePositions, affectedCells, direction));
          return steps;
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, value, basePositions, affectedCells, direction) {
          var _this2 = this;
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var lineType = direction != HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("XWingStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: basePositions[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat((direction === HighlightAreaType.ROW ? basePositions.map(function (pos) {
              return SolverUtils.getRowCells(pos.row);
            }) : basePositions.map(function (pos) {
              return SolverUtils.getColumnCells(pos.col);
            })).flat().map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }))
          };
        };
        _proto.createRuleExplanationStep = function createRuleExplanationStep(board, candidates, value, basePositions, affectedCells, direction) {
          var _this3 = this;
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var lineType = direction != HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("XWingStrategy.ruleExplanationDes", {
              name: _this3.name,
              value: value,
              directionName: directionName,
              lineType: lineType
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: basePositions[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([
            // 高亮相关行/列
            (direction === HighlightAreaType.ROW ? basePositions.map(function (pos) {
              return SolverUtils.getRowCells(pos.row);
            }) : basePositions.map(function (pos) {
              return SolverUtils.getColumnCells(pos.col);
            })).flat().map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), basePositions.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })]),
            highlightNotes: [].concat(basePositions.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createImpactDemonstrationStep = function createImpactDemonstrationStep(board, candidates, value, basePositions, affectedCells, direction) {
          var _this4 = this;
          // 获取将发生删除的行(行或列)
          var removalLines = direction === HighlightAreaType.ROW ? [].concat(new Set(basePositions.map(function (pos) {
            return pos.col;
          }))) // 基于行的X-Wing的列
          : [].concat(new Set(basePositions.map(function (pos) {
            return pos.row;
          }))); // 基于列的X-Wing的行

          var removalLineCells = removalLines.flatMap(function (line) {
            return direction === HighlightAreaType.ROW ? SolverUtils.getColumnCells(line) : SolverUtils.getRowCells(line);
          });
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var lineType = direction != HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("XWingStrategy.impactDemonstrationDes", {
              name: _this4.name,
              value: value,
              directionName: directionName,
              lineType: lineType
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: basePositions[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([
            // 高亮相关行/列
            (direction === HighlightAreaType.ROW ? basePositions.map(function (pos) {
              return SolverUtils.getRowCells(pos.row);
            }) : basePositions.map(function (pos) {
              return SolverUtils.getColumnCells(pos.col);
            })).flat().map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), removalLineCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), basePositions.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })]),
            highlightNotes: [].concat(basePositions.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }), affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.createRemovalExecutionStep = function createRemovalExecutionStep(board, candidates, value, basePositions, affectedCells, direction) {
          var _this5 = this;
          // 实际从候选数中移除数字
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](value);
          });

          // 获取将发生删除的行(行或列)
          var removalLines = direction === HighlightAreaType.ROW ? [].concat(new Set(basePositions.map(function (pos) {
            return pos.col;
          }))) // 基于行的X-Wing的列
          : [].concat(new Set(basePositions.map(function (pos) {
            return pos.row;
          }))); // 基于列的X-Wing的行

          var removalLineCells = removalLines.flatMap(function (line) {
            return direction === HighlightAreaType.ROW ? SolverUtils.getColumnCells(line) : SolverUtils.getRowCells(line);
          });
          var generateDescription = function generateDescription() {
            var directionName = direction === HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            var lineType = direction != HighlightAreaType.ROW ? oops.language.getLangByID("strategy.row") : oops.language.getLangByID("strategy.col");
            return oops.language.getLangByID("XWingStrategy.removalExecutionDes", {
              name: _this5.name,
              value: value,
              directionName: directionName
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: basePositions[0],
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([
            // 高亮相关行/列
            (direction === HighlightAreaType.ROW ? basePositions.map(function (pos) {
              return SolverUtils.getRowCells(pos.row);
            }) : basePositions.map(function (pos) {
              return SolverUtils.getColumnCells(pos.col);
            })).flat().map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), removalLineCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            }), basePositions.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: board[pos.row][pos.col] === BLANK_CHAR ? [].concat(candidates[pos.row][pos.col]) : undefined
              };
            })]),
            highlightNotes: [].concat(basePositions.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: value
              };
            }))
          };
        };
        _proto.getAreaCells = function getAreaCells(areaType, areaIndex) {
          if (areaType === HighlightAreaType.ROW) {
            return Array.from({
              length: 9
            }, function (_, col) {
              return {
                row: areaIndex,
                col: col
              };
            });
          } else if (areaType === HighlightAreaType.COLUMN) {
            return Array.from({
              length: 9
            }, function (_, row) {
              return {
                row: row,
                col: areaIndex
              };
            });
          } else {
            var boxRow = Math.floor(areaIndex / 3) * 3;
            var boxCol = areaIndex % 3 * 3;
            var cells = [];
            for (var r = 0; r < 3; r++) {
              for (var c = 0; c < 3; c++) {
                cells.push({
                  row: boxRow + r,
                  col: boxCol + c
                });
              }
            }
            return cells;
          }
        };
        _createClass(XWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("XWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("XWingStrategy.description");
          }
        }]);
        return XWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XXHash32.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9d2f3/ui3tBeb4/3AAwV4sr", "XXHash32", undefined);
      var encoder = new TextEncoder();
      var bufferLength = 16384;
      var buffer = new ArrayBuffer(bufferLength);
      var uint8View = new Uint8Array(buffer);
      var dataView = new DataView(buffer);
      var rotl32 = function rotl32(x, r) {
        return x << r | x >>> 32 - r;
      };
      var XXHash32 = exports('XXHash32', function XXHash32(str, seed) {
        if (seed === void 0) {
          seed = 0;
        }
        var strLen = Math.imul(str.length, 3); // maximum 3 bytes per character
        if (strLen > bufferLength) {
          bufferLength = (strLen - 1 | 4095) + 1 | 0;
          buffer = new ArrayBuffer(bufferLength);
          uint8View = new Uint8Array(buffer);
          dataView = new DataView(buffer);
        }
        seed |= 0;
        var len = encoder.encodeInto(str, uint8View).written | 0;
        var i = 0;
        var h = (seed + len | 0) + 0x165667B1 | 0;
        if (len < 16) {
          for (; (i + 3 | 0) < len; i = i + 4 | 0) h = Math.imul(rotl32(h + Math.imul(dataView.getUint32(i, true), 0xC2B2AE3D) | 0, 17), 0x27D4EB2F);
        } else {
          var v0 = seed + 0x24234428 | 0;
          var v1 = seed + 0x85EBCA77 | 0;
          var v2 = seed;
          var v3 = seed - 0x9E3779B1 | 0;
          for (; (i + 15 | 0) < len; i = i + 16 | 0) {
            v0 = Math.imul(rotl32(v0 + Math.imul(dataView.getUint32(i + 0 | 0, true), 0x85EBCA77) | 0, 13), 0x9E3779B1);
            v1 = Math.imul(rotl32(v1 + Math.imul(dataView.getUint32(i + 4 | 0, true), 0x85EBCA77) | 0, 13), 0x9E3779B1);
            v2 = Math.imul(rotl32(v2 + Math.imul(dataView.getUint32(i + 8 | 0, true), 0x85EBCA77) | 0, 13), 0x9E3779B1);
            v3 = Math.imul(rotl32(v3 + Math.imul(dataView.getUint32(i + 12 | 0, true), 0x85EBCA77) | 0, 13), 0x9E3779B1);
          }
          h = (((rotl32(v0, 1) + rotl32(v1, 7) | 0) + rotl32(v2, 12) | 0) + rotl32(v3, 18) | 0) + len | 0;
          for (; (i + 3 | 0) < len; i = i + 4 | 0) h = Math.imul(rotl32(h + Math.imul(dataView.getUint32(i, true), 0xC2B2AE3D) | 0, 17), 0x27D4EB2F);
        }
        for (; i < len; i = i + 1 | 0) h = Math.imul(rotl32(h + Math.imul(dataView.getUint8(i), 0x165667B1) | 0, 11), 0x9E3779B1);
        h = Math.imul(h ^ h >>> 15, 0x85EBCA77);
        h = Math.imul(h ^ h >>> 13, 0xC2B2AE3D);
        return (h ^ h >>> 16) >>> 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XYChainStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "45f94e80LpM2KocA3/BsIZV", "XYChainStrategy", undefined);
      var XYChainStrategy = exports('XYChainStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(XYChainStrategy, _BaseStrategy);
        function XYChainStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 19;
          _this.usedColors = new Set();
          // 记录已使用的背景色
          _this.chainHighlightNotes = [];
          return _this;
        }
        var _proto = XYChainStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkXYChain(board, candidates);
          if (result) {
            return this.createXYChainSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkXYChain = function checkXYChain(board, candidates) {
          // 1. 找出所有双值单元格
          var biValueCells = [];
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR && candidates[row][col].size === 2) {
                biValueCells.push({
                  row: row,
                  col: col
                });
              }
            }
          }

          // 2. 尝试构建XY链
          for (var _i = 0, _biValueCells = biValueCells; _i < _biValueCells.length; _i++) {
            var startCell = _biValueCells[_i];
            var startCandidates = [].concat(candidates[startCell.row][startCell.col]);

            // 尝试从每个候选数开始构建链
            for (var _iterator = _createForOfIteratorHelperLoose(startCandidates), _step; !(_step = _iterator()).done;) {
              var startCandidate = _step.value;
              var result = this.buildChain(board, candidates, startCell, startCandidate, new Set([this.getCellKey(startCell)]),
              // 已访问集合
              [startCell],
              // 当前链
              startCandidate);
              if (result) return result;
            }
          }
          return null;
        }

        /**
         * 回溯核心算法
         */;
        _proto.buildChain = function buildChain(board, candidates, currentCell, currentCandidate, visited, currentChain, startCandidate) {
          // 1. 获取当前单元格的另一个候选数（即要传递的值）
          var nextCandidate = this.getOtherCandidate(candidates[currentCell.row][currentCell.col], currentCandidate);
          if (!nextCandidate) return null; // 回溯点1：无法继续传递

          // 2. 找出所有可连接的二值单元格
          var connectingCells = this.getConnectingCells(board, candidates, currentCell, nextCandidate);

          // 3. 尝试每个可能的连接单元格
          for (var _iterator2 = _createForOfIteratorHelperLoose(connectingCells), _step2; !(_step2 = _iterator2()).done;) {
            var nextCell = _step2.value;
            var cellKey = this.getCellKey(nextCell);

            // 4. 回溯点2：跳过已访问单元格（避免循环）
            if (visited.has(cellKey)) continue;

            // 5. 做出选择
            visited.add(cellKey);
            currentChain.push(nextCell);

            // 6. 检查是否形成有效XY链（长度≥3且首尾匹配）
            var validate = this.validateXYChain(currentChain, board, candidates, startCandidate);
            if (validate.isValid) {
              return {
                chain: [].concat(currentChain),
                valueToRemove: validate.targetValue,
                affectedCells: validate.affectedCells
              };
            }

            // 7. 递归探索下一层
            var result = this.buildChain(board, candidates, nextCell, nextCandidate, new Set(visited), [].concat(currentChain), startCandidate);
            if (result) return result;

            // 8. 撤销选择（真正的回溯步骤）
            visited["delete"](cellKey);
            currentChain.pop();
          }
          return null; // 回溯点3：当前路径无解
        }

        // 辅助方法 ---------------------------------------------------
        ;

        _proto.validateXYChain = function validateXYChain(chain, board, candidates, startCandidate) {
          // 初始返回值
          var defaultReturn = {
            isValid: false,
            targetValue: 0,
            affectedCells: []
          };

          // 基础校验
          if (chain.length < 3) return defaultReturn;
          var _ref = [chain[0], chain[chain.length - 1]],
            first = _ref[0],
            last = _ref[1];

          // 1. 获取起始单元格的两个候选数
          var firstCandidates = [].concat(candidates[first.row][first.col]);
          if (firstCandidates.length !== 2) return defaultReturn;

          // 2. 确定起始链接候选数（与第二个单元格共有的候选数）

          // 2. 确定起始链接候选数（另一个候选数）
          var firstLink = firstCandidates.find(function (c) {
            return c !== startCandidate;
          });
          if (firstLink === undefined) return defaultReturn;

          // 4. 验证整个链的候选数交替传递
          var expectedLink = firstLink;
          for (var i = 1; i < chain.length; i++) {
            var current = chain[i];
            var currentCandidates = [].concat(candidates[current.row][current.col]);

            // 每个中间单元格必须是双值单元格
            if (currentCandidates.length !== 2) return defaultReturn;

            // 必须包含预期的链接候选数
            if (!currentCandidates.includes(expectedLink)) return defaultReturn;

            // 更新下一个预期的链接候选数（交替）
            var link = currentCandidates.find(function (c) {
              return c !== expectedLink;
            });
            if (link === undefined) return defaultReturn;
            expectedLink = link;
            if (expectedLink === undefined || !expectedLink) return defaultReturn;
          }

          // 5. 验证尾部单元格包含目标候选数
          if (expectedLink != startCandidate) return defaultReturn;

          // 6. 计算受影响单元格
          var affectedCells = this.getAffectedCells(first, last, startCandidate, board, candidates);
          return {
            isValid: affectedCells.length > 0,
            targetValue: startCandidate,
            affectedCells: affectedCells
          };
        }

        /**
         * 获取两个单元格之间的链接候选数（共有的候选数）
         */;
        _proto.getLinkCandidate = function getLinkCandidate(cell1, cell2, candidates) {
          var cands1 = candidates[cell1.row][cell1.col];
          var cands2 = candidates[cell2.row][cell2.col];
          return [].concat(cands1).find(function (c) {
            return cands2.has(c);
          });
        };
        _proto.getCellKey = function getCellKey(pos) {
          return pos.row + "," + pos.col;
        };
        _proto.getOtherCandidate = function getOtherCandidate(cellCandidates, current) {
          for (var _iterator3 = _createForOfIteratorHelperLoose(cellCandidates), _step3; !(_step3 = _iterator3()).done;) {
            var cand = _step3.value;
            if (cand !== current) return cand;
          }
          return null;
        };
        _proto.getConnectingCells = function getConnectingCells(board, candidates, cell, targetCandidate) {
          return this.getVisibleCells(cell, board).filter(function (pos) {
            var cands = candidates[pos.row][pos.col];
            return board[pos.row][pos.col] === BLANK_CHAR && cands.size === 2 && cands.has(targetCandidate);
          });
        };
        _proto.getAffectedCells = function getAffectedCells(firstCell, lastCell, targetCandidate, board, candidates) {
          // 获取去重后的共同可见单元格
          var sharedCells = this.getSharedVisibleCells(firstCell, lastCell, board);

          // 使用Set进行去重
          var uniquePositions = new Set(sharedCells.map(function (pos) {
            return pos.row + "," + pos.col;
          }));

          // 过滤并返回包含目标候选数的唯一单元格
          return Array.from(uniquePositions).map(function (str) {
            var _str$split$map = str.split(',').map(Number),
              row = _str$split$map[0],
              col = _str$split$map[1];
            return {
              row: row,
              col: col
            };
          }).filter(function (pos) {
            return candidates[pos.row][pos.col].has(targetCandidate);
          });
        };
        _proto.getSharedVisibleCells = function getSharedVisibleCells(cell1, cell2, board) {
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];

          // 1. 添加同行单元格
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) {
              visible.push({
                row: cell.row,
                col: col
              });
            }
          }

          // 2. 添加同列单元格
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) {
              visible.push({
                row: row,
                col: cell.col
              });
            }
          }

          // 3. 添加同宫单元格
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        };
        _proto.createXYChainSteps = function createXYChainSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createChainVisualizationStep(board, candidates, info), this.createEliminationStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this2 = this;
          var chain = _ref2.chain,
            valueToRemove = _ref2.valueToRemove,
            affectedCells = _ref2.affectedCells;
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYChainStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(chain.flatMap(function (pos) {
              return [].concat(candidates[pos.row][pos.col]).map(function (val) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: val
                };
              });
            }))
          };
        };
        _proto.createChainVisualizationStep = function createChainVisualizationStep(board, candidates, _ref3) {
          var _this3 = this;
          var chain = _ref3.chain,
            valueToRemove = _ref3.valueToRemove,
            affectedCells = _ref3.affectedCells;
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          this.resetColorHistory();
          this.chainHighlightNotes = this.getChainHighlightNotes(chain, valueToRemove, candidates);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYChainStrategy.chainVisualizationDes", {
              name: _this3.name,
              linkStart: "R" + (firstCell.row + 1) + "C" + (firstCell.col + 1),
              linkStartCandidates: "" + [].concat(candidates[firstCell.row][firstCell.col]).join(", "),
              linkEnd: "R" + (lastCell.row + 1) + "C" + (lastCell.col + 1),
              linkEndCandidates: "" + [].concat(candidates[lastCell.row][lastCell.col]).join(", "),
              linkPath: "" + chain.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(" → ")
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: firstCell,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[firstCell.row][firstCell.col])
            }, {
              position: lastCell,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[lastCell.row][lastCell.col])
            }]]),
            highlightNotes: this.chainHighlightNotes
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, _ref4) {
          var _this4 = this;
          var chain = _ref4.chain,
            valueToRemove = _ref4.valueToRemove,
            affectedCells = _ref4.affectedCells;
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          var firstLink = this.getOtherCandidate(candidates[firstCell.row][firstCell.col], valueToRemove);
          var lastLink = this.getOtherCandidate(candidates[lastCell.row][lastCell.col], valueToRemove);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYChainStrategy.chainVisualizationDes", {
              name: _this4.name,
              valueToRemove: valueToRemove,
              firstLink: String(firstLink),
              linkStart: "R" + (firstCell.row + 1) + "C" + (firstCell.col + 1),
              linkEnd: "R" + (lastCell.row + 1) + "C" + (lastCell.col + 1),
              affectedCells: "" + affectedCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(", "),
              linkEndCandidates: "" + [].concat(candidates[lastCell.row][lastCell.col]).join(", "),
              linkPath: "" + chain.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(" → ")
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: firstCell,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[firstCell.row][firstCell.col])
            }, {
              position: lastCell,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[lastCell.row][lastCell.col])
            }], affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })]),
            highlightNotes: [].concat(this.chainHighlightNotes, affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: valueToRemove
              };
            }))
          };
        };
        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref5) {
          var _this5 = this;
          var chain = _ref5.chain,
            valueToRemove = _ref5.valueToRemove,
            affectedCells = _ref5.affectedCells;
          // 实际移除操作
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](valueToRemove);
          });
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYChainStrategy.removalDes", {
              name: _this5.name,
              valueToRemove: valueToRemove,
              affectedCellsLength: affectedCells.length
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: firstCell,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[firstCell.row][firstCell.col])
            }, {
              position: lastCell,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[lastCell.row][lastCell.col])
            }], affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })]),
            highlightNotes: this.chainHighlightNotes
          };
        };
        _proto.getChainHighlightNotes = function getChainHighlightNotes(chain, startCandidate, candidates) {
          var highlightNoteCell = [];
          var _ref6 = [chain[0], chain[chain.length - 1]],
            first = _ref6[0],
            last = _ref6[1];
          highlightNoteCell.push({
            position: first,
            backgroundColor: HighlightConfig.hintCell.background,
            textColor: HighlightConfig.hintCell.textColor,
            value: startCandidate
          });
          // 1. 获取起始单元格的两个候选数
          var firstCandidates = [].concat(candidates[first.row][first.col]);
          var firstLink = firstCandidates.find(function (c) {
            return c !== startCandidate;
          });

          // 4. 验证整个链的候选数交替传递
          var expectedLink = firstLink;
          for (var i = 0; i < chain.length - 1; i++) {
            var next = chain[i + 1];
            var nextCandidates = [].concat(candidates[next.row][next.col]);
            // 更新下一个预期的链接候选数（交替）
            if (expectedLink) {
              var _this$getHighlightNot = this.getHighlightNoteColor(),
                backgroundColor = _this$getHighlightNot[0],
                textColor = _this$getHighlightNot[1];
              highlightNoteCell.push({
                position: chain[i],
                backgroundColor: backgroundColor,
                textColor: textColor,
                value: expectedLink
              });
              highlightNoteCell.push({
                position: next,
                backgroundColor: backgroundColor,
                textColor: textColor,
                value: expectedLink
              });
            }
            var link = nextCandidates.find(function (c) {
              return c !== expectedLink;
            });
            if (link) {
              expectedLink = link;
            }
          }
          if (expectedLink) {
            highlightNoteCell.push({
              position: last,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: expectedLink
            });
          }
          return highlightNoteCell;
        }

        /**
         * 将HEX颜色转换为RGB对象
         */;
        _proto.hexToRgb = function hexToRgb(hex) {
          var r = parseInt(hex.substring(1, 3), 16);
          var g = parseInt(hex.substring(3, 5), 16);
          var b = parseInt(hex.substring(5, 7), 16);
          return {
            r: r,
            g: g,
            b: b
          };
        }

        /**
         * 计算两种颜色的对比度比率
         */;
        _proto.calculateContrastRatio = function calculateContrastRatio(bgBrightness, textBrightness) {
          var L1 = Math.max(bgBrightness, textBrightness) / 255;
          var L2 = Math.min(bgBrightness, textBrightness) / 255;
          return (L1 + 0.05) / (L2 + 0.05);
        }

        /**
         * 优化的HSL转HEX方法
         */;
        _proto.hslToHex = function hslToHex(h, s, l) {
          l /= 100;
          s /= 100;
          var c = (1 - Math.abs(2 * l - 1)) * s;
          var x = c * (1 - Math.abs(h / 60 % 2 - 1));
          var m = l - c / 2;
          var r = 0,
            g = 0,
            b = 0;
          if (h >= 0 && h < 60) {
            r = c;
            g = x;
            b = 0;
          } else if (h >= 60 && h < 120) {
            r = x;
            g = c;
            b = 0;
          } else if (h >= 120 && h < 180) {
            r = 0;
            g = c;
            b = x;
          } else if (h >= 180 && h < 240) {
            r = 0;
            g = x;
            b = c;
          } else if (h >= 240 && h < 300) {
            r = x;
            g = 0;
            b = c;
          } else {
            r = c;
            g = 0;
            b = x;
          }
          r = Math.round((r + m) * 255);
          g = Math.round((g + m) * 255);
          b = Math.round((b + m) * 255);
          return "#" + r.toString(16).padStart(2, '0') + g.toString(16).padStart(2, '0') + b.toString(16).padStart(2, '0');
        };
        _proto.getHighlightNoteColor = function getHighlightNoteColor() {
          var MAX_ATTEMPTS = 10; // 最大尝试次数，避免无限循环
          var attempts = 0;
          while (attempts < MAX_ATTEMPTS) {
            // 生成候选颜色
            var _this$generateColorPa = this.generateColorPair(),
              bgColor = _this$generateColorPa[0],
              textColor = _this$generateColorPa[1];

            // 检查颜色是否已使用
            if (!this.usedColors.has(bgColor)) {
              this.usedColors.add(bgColor);
              return [bgColor, textColor];
            }
            attempts++;
          }

          // 如果尝试多次仍无法生成新颜色，返回默认高对比度组合
          return ['#FF0000', '#FFFFFF'];
        }

        /**
         * 生成单个高对比度颜色对
         */;
        _proto.generateColorPair = function generateColorPair() {
          // 使用黄金角近似算法生成分布均匀的色相
          var goldenAngle = 137.508;
          var hue = this.usedColors.size * goldenAngle % 360;

          // 保持高饱和度和中等亮度
          var saturation = 70 + Math.floor(Math.random() * 30);
          var lightness = 60 + Math.floor(Math.random() * 30);
          var bgColor = this.hslToHex(hue, saturation, lightness);

          // 计算亮度并确定文字颜色
          var brightness = this.calculateBrightness(bgColor);
          var textColor = brightness < 150 ? '#FFFFFF' : '#000000';

          // 确保满足WCAG AA对比度标准
          if (this.calculateContrastRatio(brightness, textColor === '#FFFFFF' ? 255 : 0) < 4.5) {
            return brightness < 150 ? [bgColor, '#FFFFFF'] : [bgColor, '#000000'];
          }
          return [bgColor, textColor];
        }

        /**
         * 计算颜色的感知亮度
         */;
        _proto.calculateBrightness = function calculateBrightness(hexColor) {
          var rgb = this.hexToRgb(hexColor);
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        }

        /**
         * 重置已使用颜色记录
         */;
        _proto.resetColorHistory = function resetColorHistory() {
          this.usedColors.clear();
        };
        _createClass(XYChainStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("XYChainStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("XYChainStrategy.description");
          }
        }]);
        return XYChainStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XYWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b3f2btUQVVNyI6wNYqpwyqT", "XYWingStrategy", undefined);
      var XYWingStrategy = exports('XYWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(XYWingStrategy, _BaseStrategy);
        function XYWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 13;
          _this.usedColors = new Set();
          // 记录已使用的背景色
          _this.chainHighlightNotes = [];
          return _this;
        }
        var _proto = XYWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkXYWing(board, candidates);
          if (result) {
            return this.createXYWingSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkXYWing = function checkXYWing(board, candidates) {
          // 1. 找出所有双值单元格
          var biValueCells = [];
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR && candidates[row][col].size === 2) {
                biValueCells.push({
                  row: row,
                  col: col
                });
              }
            }
          }

          // 2. 尝试构建XY链
          for (var _i = 0, _biValueCells = biValueCells; _i < _biValueCells.length; _i++) {
            var startCell = _biValueCells[_i];
            var startCandidates = [].concat(candidates[startCell.row][startCell.col]);

            // 尝试从每个候选数开始构建链
            for (var _iterator = _createForOfIteratorHelperLoose(startCandidates), _step; !(_step = _iterator()).done;) {
              var startCandidate = _step.value;
              var result = this.buildChain(board, candidates, startCell, startCandidate, new Set([this.getCellKey(startCell)]),
              // 已访问集合
              [startCell],
              // 当前链
              startCandidate);
              if (result) return result;
            }
          }
          return null;
        }

        /**
         * 回溯核心算法
         */;
        _proto.buildChain = function buildChain(board, candidates, currentCell, currentCandidate, visited, currentChain, startCandidate) {
          // 1. 获取当前单元格的另一个候选数（即要传递的值）
          var nextCandidate = this.getOtherCandidate(candidates[currentCell.row][currentCell.col], currentCandidate);
          if (!nextCandidate) return null; // 回溯点1：无法继续传递

          // 2. 找出所有可连接的二值单元格
          var connectingCells = this.getConnectingCells(board, candidates, currentCell, nextCandidate);

          // 3. 尝试每个可能的连接单元格
          for (var _iterator2 = _createForOfIteratorHelperLoose(connectingCells), _step2; !(_step2 = _iterator2()).done;) {
            var nextCell = _step2.value;
            var cellKey = this.getCellKey(nextCell);

            // 4. 回溯点2：跳过已访问单元格（避免循环）
            if (visited.has(cellKey)) continue;

            // 5. 做出选择
            visited.add(cellKey);
            currentChain.push(nextCell);

            // 6. 检查是否形成有效XY-Wing（长度为3且首尾匹配）
            var validate = this.validateXYWing(currentChain, board, candidates, startCandidate);
            if (validate.isValid) {
              return {
                chain: [].concat(currentChain),
                valueToRemove: validate.targetValue,
                affectedCells: validate.affectedCells
              };
            }

            // 7. 递归探索下一层
            var result = this.buildChain(board, candidates, nextCell, nextCandidate, new Set(visited), [].concat(currentChain), startCandidate);
            if (result) return result;

            // 8. 撤销选择（真正的回溯步骤）
            visited["delete"](cellKey);
            currentChain.pop();
          }
          return null; // 回溯点3：当前路径无解
        }

        // 辅助方法 ---------------------------------------------------
        ;

        _proto.validateXYWing = function validateXYWing(chain, board, candidates, startCandidate) {
          // 初始返回值
          var defaultReturn = {
            isValid: false,
            targetValue: 0,
            affectedCells: []
          };

          // 基础校验
          if (chain.length != 3) return defaultReturn;
          var _ref = [chain[0], chain[chain.length - 1]],
            first = _ref[0],
            last = _ref[1];

          // 1. 获取起始单元格的两个候选数
          var firstCandidates = [].concat(candidates[first.row][first.col]);
          if (firstCandidates.length !== 2) return defaultReturn;

          // 2. 确定起始链接候选数（与第二个单元格共有的候选数）

          // 2. 确定起始链接候选数（另一个候选数）
          var firstLink = firstCandidates.find(function (c) {
            return c !== startCandidate;
          });
          if (firstLink === undefined) return defaultReturn;

          // 4. 验证整个链的候选数交替传递
          var expectedLink = firstLink;
          for (var i = 1; i < chain.length; i++) {
            var current = chain[i];
            var currentCandidates = [].concat(candidates[current.row][current.col]);

            // 每个中间单元格必须是双值单元格
            if (currentCandidates.length !== 2) return defaultReturn;

            // 必须包含预期的链接候选数
            if (!currentCandidates.includes(expectedLink)) return defaultReturn;

            // 更新下一个预期的链接候选数（交替）
            var link = currentCandidates.find(function (c) {
              return c !== expectedLink;
            });
            if (link === undefined) return defaultReturn;
            expectedLink = link;
            if (expectedLink === undefined || !expectedLink) return defaultReturn;
          }

          // 5. 验证尾部单元格包含目标候选数
          if (expectedLink != startCandidate) return defaultReturn;

          // 6. 计算受影响单元格
          var affectedCells = this.getAffectedCells(first, last, startCandidate, board, candidates);
          return {
            isValid: affectedCells.length > 0,
            targetValue: startCandidate,
            affectedCells: affectedCells
          };
        }

        /**
         * 获取两个单元格之间的链接候选数（共有的候选数）
         */;
        _proto.getLinkCandidate = function getLinkCandidate(cell1, cell2, candidates) {
          var cands1 = candidates[cell1.row][cell1.col];
          var cands2 = candidates[cell2.row][cell2.col];
          return [].concat(cands1).find(function (c) {
            return cands2.has(c);
          });
        };
        _proto.getCellKey = function getCellKey(pos) {
          return pos.row + "," + pos.col;
        };
        _proto.getOtherCandidate = function getOtherCandidate(cellCandidates, current) {
          for (var _iterator3 = _createForOfIteratorHelperLoose(cellCandidates), _step3; !(_step3 = _iterator3()).done;) {
            var cand = _step3.value;
            if (cand !== current) return cand;
          }
          return null;
        };
        _proto.getConnectingCells = function getConnectingCells(board, candidates, cell, targetCandidate) {
          return this.getVisibleCells(cell, board).filter(function (pos) {
            var cands = candidates[pos.row][pos.col];
            return board[pos.row][pos.col] === BLANK_CHAR && cands.size === 2 && cands.has(targetCandidate);
          });
        };
        _proto.getAffectedCells = function getAffectedCells(firstCell, lastCell, targetCandidate, board, candidates) {
          // 获取去重后的共同可见单元格
          var sharedCells = this.getSharedVisibleCells(firstCell, lastCell, board);

          // 使用Set进行去重
          var uniquePositions = new Set(sharedCells.map(function (pos) {
            return pos.row + "," + pos.col;
          }));

          // 过滤并返回包含目标候选数的唯一单元格
          return Array.from(uniquePositions).map(function (str) {
            var _str$split$map = str.split(',').map(Number),
              row = _str$split$map[0],
              col = _str$split$map[1];
            return {
              row: row,
              col: col
            };
          }).filter(function (pos) {
            return candidates[pos.row][pos.col].has(targetCandidate);
          });
        };
        _proto.getSharedVisibleCells = function getSharedVisibleCells(cell1, cell2, board) {
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];

          // 1. 添加同行单元格
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) {
              visible.push({
                row: cell.row,
                col: col
              });
            }
          }

          // 2. 添加同列单元格
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) {
              visible.push({
                row: row,
                col: cell.col
              });
            }
          }

          // 3. 添加同宫单元格
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        };
        _proto.createXYWingSteps = function createXYWingSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createChainVisualizationStep(board, candidates, info), this.createEliminationStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this2 = this;
          var chain = _ref2.chain,
            valueToRemove = _ref2.valueToRemove,
            affectedCells = _ref2.affectedCells;
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYWingStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [].concat(chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(chain.flatMap(function (pos) {
              return [].concat(candidates[pos.row][pos.col]).map(function (val) {
                return {
                  position: pos,
                  backgroundColor: HighlightConfig.hintCell.background,
                  textColor: HighlightConfig.hintCell.textColor,
                  value: val
                };
              });
            }))
          };
        };
        _proto.createChainVisualizationStep = function createChainVisualizationStep(board, candidates, _ref3) {
          var _this3 = this;
          var chain = _ref3.chain,
            valueToRemove = _ref3.valueToRemove,
            affectedCells = _ref3.affectedCells;
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          this.resetColorHistory();
          this.chainHighlightNotes = this.getChainHighlightNotes(chain, valueToRemove, candidates);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYWingStrategy.chainVisualizationDes", {
              name: _this3.name,
              linkStart: "R" + (firstCell.row + 1) + "C" + (firstCell.col + 1),
              linkStartCandidates: "" + [].concat(candidates[firstCell.row][firstCell.col]).join(", "),
              linkEnd: "R" + (lastCell.row + 1) + "C" + (lastCell.col + 1),
              linkEndCandidates: "" + [].concat(candidates[lastCell.row][lastCell.col]).join(", "),
              linkPath: "" + chain.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(" → ")
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: firstCell,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[firstCell.row][firstCell.col])
            }, {
              position: lastCell,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[lastCell.row][lastCell.col])
            }]]),
            highlightNotes: this.chainHighlightNotes
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, _ref4) {
          var _this4 = this;
          var chain = _ref4.chain,
            valueToRemove = _ref4.valueToRemove,
            affectedCells = _ref4.affectedCells;
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          var firstLink = this.getOtherCandidate(candidates[firstCell.row][firstCell.col], valueToRemove);
          var lastLink = this.getOtherCandidate(candidates[lastCell.row][lastCell.col], valueToRemove);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYWingStrategy.eliminationDes", {
              name: _this4.name,
              valueToRemove: valueToRemove,
              firstLink: String(firstLink),
              linkStart: "R" + (firstCell.row + 1) + "C" + (firstCell.col + 1),
              linkStartCandidates: "" + [].concat(candidates[firstCell.row][firstCell.col]).join(", "),
              linkEnd: "R" + (lastCell.row + 1) + "C" + (lastCell.col + 1),
              affectedCells: "" + affectedCells.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(", "),
              linkEndCandidates: "" + [].concat(candidates[lastCell.row][lastCell.col]).join(", "),
              linkPath: "" + chain.map(function (pos) {
                return "R" + (pos.row + 1) + "C" + (pos.col + 1);
              }).join(" → ")
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: firstCell,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[firstCell.row][firstCell.col])
            }, {
              position: lastCell,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[lastCell.row][lastCell.col])
            }], affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })]),
            highlightNotes: [].concat(this.chainHighlightNotes, affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: valueToRemove
              };
            }))
          };
        };
        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref5) {
          var _this5 = this;
          var chain = _ref5.chain,
            valueToRemove = _ref5.valueToRemove,
            affectedCells = _ref5.affectedCells;
          // 实际移除操作
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](valueToRemove);
          });
          var firstCell = chain[0];
          var lastCell = chain[chain.length - 1];
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYWingStrategy.removalDes", {
              name: _this5.name,
              valueToRemove: valueToRemove,
              affectedCellsLength: affectedCells.length
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: firstCell,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([chain.map(function (pos, index) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: firstCell,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[firstCell.row][firstCell.col])
            }, {
              position: lastCell,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[lastCell.row][lastCell.col])
            }], affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })]),
            highlightNotes: this.chainHighlightNotes
          };
        };
        _proto.getChainHighlightNotes = function getChainHighlightNotes(chain, startCandidate, candidates) {
          var highlightNoteCell = [];
          var _ref6 = [chain[0], chain[chain.length - 1]],
            first = _ref6[0],
            last = _ref6[1];
          highlightNoteCell.push({
            position: first,
            backgroundColor: HighlightConfig.hintCell.background,
            textColor: HighlightConfig.hintCell.textColor,
            value: startCandidate
          });
          // 1. 获取起始单元格的两个候选数
          var firstCandidates = [].concat(candidates[first.row][first.col]);
          var firstLink = firstCandidates.find(function (c) {
            return c !== startCandidate;
          });

          // 4. 验证整个链的候选数交替传递
          var expectedLink = firstLink;
          for (var i = 0; i < chain.length - 1; i++) {
            var next = chain[i + 1];
            var nextCandidates = [].concat(candidates[next.row][next.col]);
            // 更新下一个预期的链接候选数（交替）
            if (expectedLink) {
              var _this$getHighlightNot = this.getHighlightNoteColor(),
                backgroundColor = _this$getHighlightNot[0],
                textColor = _this$getHighlightNot[1];
              highlightNoteCell.push({
                position: chain[i],
                backgroundColor: backgroundColor,
                textColor: textColor,
                value: expectedLink
              });
              highlightNoteCell.push({
                position: next,
                backgroundColor: backgroundColor,
                textColor: textColor,
                value: expectedLink
              });
            }
            var link = nextCandidates.find(function (c) {
              return c !== expectedLink;
            });
            if (link) {
              expectedLink = link;
            }
          }
          if (expectedLink) {
            highlightNoteCell.push({
              position: last,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: expectedLink
            });
          }
          return highlightNoteCell;
        }

        /**
         * 将HEX颜色转换为RGB对象
         */;
        _proto.hexToRgb = function hexToRgb(hex) {
          var r = parseInt(hex.substring(1, 3), 16);
          var g = parseInt(hex.substring(3, 5), 16);
          var b = parseInt(hex.substring(5, 7), 16);
          return {
            r: r,
            g: g,
            b: b
          };
        }

        /**
         * 计算两种颜色的对比度比率
         */;
        _proto.calculateContrastRatio = function calculateContrastRatio(bgBrightness, textBrightness) {
          var L1 = Math.max(bgBrightness, textBrightness) / 255;
          var L2 = Math.min(bgBrightness, textBrightness) / 255;
          return (L1 + 0.05) / (L2 + 0.05);
        }

        /**
         * 优化的HSL转HEX方法
         */;
        _proto.hslToHex = function hslToHex(h, s, l) {
          l /= 100;
          s /= 100;
          var c = (1 - Math.abs(2 * l - 1)) * s;
          var x = c * (1 - Math.abs(h / 60 % 2 - 1));
          var m = l - c / 2;
          var r = 0,
            g = 0,
            b = 0;
          if (h >= 0 && h < 60) {
            r = c;
            g = x;
            b = 0;
          } else if (h >= 60 && h < 120) {
            r = x;
            g = c;
            b = 0;
          } else if (h >= 120 && h < 180) {
            r = 0;
            g = c;
            b = x;
          } else if (h >= 180 && h < 240) {
            r = 0;
            g = x;
            b = c;
          } else if (h >= 240 && h < 300) {
            r = x;
            g = 0;
            b = c;
          } else {
            r = c;
            g = 0;
            b = x;
          }
          r = Math.round((r + m) * 255);
          g = Math.round((g + m) * 255);
          b = Math.round((b + m) * 255);
          return "#" + r.toString(16).padStart(2, '0') + g.toString(16).padStart(2, '0') + b.toString(16).padStart(2, '0');
        };
        _proto.getHighlightNoteColor = function getHighlightNoteColor() {
          var MAX_ATTEMPTS = 10; // 最大尝试次数，避免无限循环
          var attempts = 0;
          while (attempts < MAX_ATTEMPTS) {
            // 生成候选颜色
            var _this$generateColorPa = this.generateColorPair(),
              bgColor = _this$generateColorPa[0],
              textColor = _this$generateColorPa[1];

            // 检查颜色是否已使用
            if (!this.usedColors.has(bgColor)) {
              this.usedColors.add(bgColor);
              return [bgColor, textColor];
            }
            attempts++;
          }

          // 如果尝试多次仍无法生成新颜色，返回默认高对比度组合
          return ['#FF0000', '#FFFFFF'];
        }

        /**
         * 生成单个高对比度颜色对
         */;
        _proto.generateColorPair = function generateColorPair() {
          // 使用黄金角近似算法生成分布均匀的色相
          var goldenAngle = 137.508;
          var hue = this.usedColors.size * goldenAngle % 360;

          // 保持高饱和度和中等亮度
          var saturation = 70 + Math.floor(Math.random() * 30);
          var lightness = 60 + Math.floor(Math.random() * 30);
          var bgColor = this.hslToHex(hue, saturation, lightness);

          // 计算亮度并确定文字颜色
          var brightness = this.calculateBrightness(bgColor);
          var textColor = brightness < 150 ? '#FFFFFF' : '#000000';

          // 确保满足WCAG AA对比度标准
          if (this.calculateContrastRatio(brightness, textColor === '#FFFFFF' ? 255 : 0) < 4.5) {
            return brightness < 150 ? [bgColor, '#FFFFFF'] : [bgColor, '#000000'];
          }
          return [bgColor, textColor];
        }

        /**
         * 计算颜色的感知亮度
         */;
        _proto.calculateBrightness = function calculateBrightness(hexColor) {
          var rgb = this.hexToRgb(hexColor);
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        }

        /**
         * 重置已使用颜色记录
         */;
        _proto.resetColorHistory = function resetColorHistory() {
          this.usedColors.clear();
        };
        _createClass(XYWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("XYWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("XYWingStrategy.description");
          }
        }]);
        return XYWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XYZWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "09320zMtJtB/55qd/K0OEV6", "XYZWingStrategy", undefined);
      var XYZWingStrategy = exports('XYZWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(XYZWingStrategy, _BaseStrategy);
        function XYZWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 14;
          // 难度高于XY-Wing
          _this.usedColors = new Set();
          // 记录已使用的背景色
          _this.chainHighlightNotes = [];
          return _this;
        }
        var _proto = XYZWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkXYZWing(board, candidates);
          if (result) {
            return this.createXYZWingSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkXYZWing = function checkXYZWing(board, candidates) {
          var biCells = []; // 双值格
          var triCells = []; // 三值单元格
          // 1. 找出所有双值和三值单元格
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] !== BLANK_CHAR) continue;
              var count = candidates[row][col].size;
              if (count === 2) {
                biCells.push({
                  row: row,
                  col: col
                });
              } else if (count === 3) {
                triCells.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          // 2. 组合检查：每个三值格 + 任意2个双值格
          for (var _i = 0, _triCells = triCells; _i < _triCells.length; _i++) {
            var pivot = _triCells[_i];
            // 需要至少2个双值格才能形成XYZ-Wing
            if (biCells.length < 2) continue;
            for (var _iterator = _createForOfIteratorHelperLoose(SolverUtils.getCombinations(biCells, 2)), _step; !(_step = _iterator()).done;) {
              var _step$value = _step.value,
                xz = _step$value[0],
                yz = _step$value[1];
              var cells = [pivot, xz, yz];
              var result = this.validateXYZWingStructure(cells, board, candidates);
              if (result) return result;
            }
          }
          return null;
        };
        _proto.validateXYZWingStructure = function validateXYZWingStructure(cells, board, candidates) {
          var _this2 = this;
          // 1. 检查单元格组合：1个三值格 + 2个双值格
          var counts = cells.map(function (pos) {
            return candidates[pos.row][pos.col].size;
          });
          var pivotIndex = counts.indexOf(3);
          if (pivotIndex === -1 || counts.filter(function (c) {
            return c === 2;
          }).length !== 2) {
            return null;
          }
          var pivot = cells[pivotIndex];
          var wings = cells.filter(function (_, idx) {
            return idx !== pivotIndex;
          });

          // 2. 检查候选数关系：枢纽格XYZ，翼1 XZ，翼2 YZ
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wings[0].row][wings[0].col]);
          var wing2Cands = [].concat(candidates[wings[1].row][wings[1].col]);

          // 找出共同数字Z
          var commonZ = pivotCands.find(function (c) {
            return wing1Cands.includes(c) && wing2Cands.includes(c);
          });
          if (!commonZ) return null;

          // 检查是否为XYZ-Wing结构
          var x = wing1Cands.find(function (c) {
            return c !== commonZ;
          });
          var y = wing2Cands.find(function (c) {
            return c !== commonZ;
          });
          if (!x || !y || !pivotCands.includes(x) || !pivotCands.includes(y) || x === y) {
            return null;
          }

          // 3. 检查可见性：枢纽格必须与两翼在同一单元（行/列/宫）
          var isWing1Visible = this.areInSameUnit(pivot, wings[0]);
          var isWing2Visible = this.areInSameUnit(pivot, wings[1]);
          if (!isWing1Visible || !isWing2Visible) {
            return null;
          }

          // 4. 检查两翼的共同影响格
          var affectedCells = this.getSharedVisibleCells(pivot, wings[0], wings[1], board).filter(function (pos) {
            return !_this2.isSameCell(pos, pivot) && !_this2.isSameCell(pos, wings[0]) && !_this2.isSameCell(pos, wings[1]) && candidates[pos.row][pos.col].has(commonZ);
          });
          if (affectedCells.length === 0) {
            return null;
          }
          return {
            pivot: pivot,
            wing1: wings[0],
            wing2: wings[1],
            valueToRemove: commonZ,
            affectedCells: affectedCells
          };
        }

        // 辅助方法（复用XY-Wing中的实现）------------------------------------
        ;

        _proto.areInSameUnit = function areInSameUnit(cell1, cell2) {
          return cell1.row === cell2.row || cell1.col === cell2.col || Math.floor(cell1.row / 3) === Math.floor(cell2.row / 3) && Math.floor(cell1.col / 3) === Math.floor(cell2.col / 3);
        };
        _proto.isSameCell = function isSameCell(pos1, pos2) {
          return pos1.row === pos2.row && pos1.col === pos2.col;
        };
        _proto.getSharedVisibleCells = function getSharedVisibleCells(cell1, cell2, cell3, board) {
          var _this3 = this;
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          var visible3 = this.getVisibleCells(cell3, board);

          // 使用Set进行去重
          var uniquePositions = new Set();
          visible1.forEach(function (pos1) {
            if (visible2.some(function (pos2) {
              return _this3.isSameCell(pos1, pos2);
            }) && visible3.some(function (pos3) {
              return _this3.isSameCell(pos1, pos3);
            })) {
              uniquePositions.add(pos1.row + "," + pos1.col);
            }
          });

          // 转换回Position数组
          return Array.from(uniquePositions).map(function (str) {
            var _str$split$map = str.split(',').map(Number),
              row = _str$split$map[0],
              col = _str$split$map[1];
            return {
              row: row,
              col: col
            };
          });
        };
        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) visible.push({
              row: cell.row,
              col: col
            });
          }
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) visible.push({
              row: row,
              col: cell.col
            });
          }
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        }

        // 步骤生成逻辑（类似XY-Wing但调整提示）-----------------------------
        ;

        _proto.createXYZWingSteps = function createXYZWingSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createWingVisualizationStep(board, candidates, info), this.createEliminationStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        };
        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref) {
          var _this4 = this;
          var pivot = _ref.pivot,
            wing1 = _ref.wing1,
            wing2 = _ref.wing2,
            valueToRemove = _ref.valueToRemove,
            affectedCells = _ref.affectedCells;
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYZWingStrategy.discoveryDes", {
              name: _this4.name,
              description: _this4.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[pivot.row][pivot.col])
            }, {
              position: wing1,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[wing1.row][wing1.col])
            }, {
              position: wing2,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[wing2.row][wing2.col])
            }],
            highlightNotes: [].concat(this.getCandidateHighlights(pivot, candidates), this.getCandidateHighlights(wing1, candidates), this.getCandidateHighlights(wing2, candidates))
          };
        };
        _proto.getCandidateHighlights = function getCandidateHighlights(pos, candidates) {
          return [].concat(candidates[pos.row][pos.col]).map(function (val) {
            return {
              position: pos,
              backgroundColor: HighlightConfig.hintCell.background,
              textColor: HighlightConfig.hintCell.textColor,
              value: val
            };
          });
        };
        _proto.createWingVisualizationStep = function createWingVisualizationStep(board, candidates, info) {
          var _this5 = this;
          this.resetColorHistory();
          var pivot = info.pivot,
            wing1 = info.wing1,
            wing2 = info.wing2,
            valueToRemove = info.valueToRemove;
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wing1.row][wing1.col]);
          var wing2Cands = [].concat(candidates[wing2.row][wing2.col]);
          this.chainHighlightNotes = this.getXYZWingHighlightNotes(pivot, wing1, wing2, candidates, valueToRemove);
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYZWingStrategy.wingVisualizationDes", {
              name: _this5.name,
              pivot: "R" + (pivot.row + 1) + "C" + (pivot.col + 1),
              pivotCands: "" + pivotCands.join(","),
              wing1: "R" + (wing1.row + 1) + "C" + (wing1.col + 1),
              wing1Cands: "" + wing1Cands.join(","),
              wing2: "R" + (wing2.row + 1) + "C" + (wing2.col + 1),
              wing2Cands: "" + wing2Cands.join(",")
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: pivotCands
            }, {
              position: wing1,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: wing1Cands
            }, {
              position: wing2,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: wing2Cands
            }],
            highlightNotes: this.chainHighlightNotes
          };
        };
        _proto.createEliminationStep = function createEliminationStep(board, candidates, _ref2) {
          var _this6 = this;
          var pivot = _ref2.pivot,
            wing1 = _ref2.wing1,
            wing2 = _ref2.wing2,
            valueToRemove = _ref2.valueToRemove,
            affectedCells = _ref2.affectedCells;
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYZWingStrategy.eliminationDes", {
              name: _this6.name,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[pivot.row][pivot.col])
            }, {
              position: wing1,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[wing1.row][wing1.col])
            }, {
              position: wing2,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[wing2.row][wing2.col])
            }].concat(affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(this.chainHighlightNotes, affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: valueToRemove
              };
            }))
          };
        };
        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref3) {
          var _this7 = this;
          var pivot = _ref3.pivot,
            wing1 = _ref3.wing1,
            wing2 = _ref3.wing2,
            valueToRemove = _ref3.valueToRemove,
            affectedCells = _ref3.affectedCells;
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](valueToRemove);
          });
          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("XYZWingStrategy.removalDes", {
              name: _this7.name,
              affectedCellsLength: affectedCells.length,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: [{
              position: pivot,
              backgroundColor: HighlightConfig.targetCell.background,
              textColor: HighlightConfig.targetCell.textColor,
              candidates: [].concat(candidates[pivot.row][pivot.col])
            }, {
              position: wing1,
              backgroundColor: HighlightConfig.xyChainStartCell.background,
              textColor: HighlightConfig.xyChainStartCell.textColor,
              candidates: [].concat(candidates[wing1.row][wing1.col])
            }, {
              position: wing2,
              backgroundColor: HighlightConfig.xyChainEndCell.background,
              textColor: HighlightConfig.xyChainEndCell.textColor,
              candidates: [].concat(candidates[wing2.row][wing2.col])
            }].concat(affectedCells.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.sameRelatedAreaCell.background,
                textColor: HighlightConfig.sameRelatedAreaCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            })),
            highlightNotes: [].concat(this.chainHighlightNotes)
          };
        };
        _proto.getXYZWingHighlightNotes = function getXYZWingHighlightNotes(pivot, wing1, wing2, candidates, valueToRemove) {
          var highlightNotes = [];

          // 获取各单元格候选数
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wing1.row][wing1.col]);
          var wing2Cands = [].concat(candidates[wing2.row][wing2.col]);

          // 确定共享数字和独有数字
          var z = valueToRemove;
          var x = wing1Cands.find(function (c) {
            return c !== z;
          });
          var y = wing2Cands.find(function (c) {
            return c !== z;
          });

          // 为每个候选数创建颜色映射
          var colorMap = this.createCandidateColorMap([x, y, z].filter(Boolean));

          // 添加枢纽格高亮
          this.addCellHighlightNotes(highlightNotes, pivot, pivotCands, colorMap);

          // 添加翼1高亮
          this.addCellHighlightNotes(highlightNotes, wing1, wing1Cands, colorMap);

          // 添加翼2高亮
          this.addCellHighlightNotes(highlightNotes, wing2, wing2Cands, colorMap);
          return highlightNotes;
        }

        /**
         * 创建候选数到颜色的映射表
         */;
        _proto.createCandidateColorMap = function createCandidateColorMap(values) {
          var _this8 = this;
          var colorMap = new Map();
          values.forEach(function (val) {
            if (!colorMap.has(val)) {
              colorMap.set(val, _this8.getHighlightNoteColor());
            }
          });
          return colorMap;
        }

        /**
         * 添加单元格的高亮注释
         */;
        _proto.addCellHighlightNotes = function addCellHighlightNotes(highlightNotes, position, cellCandidates, colorMap) {
          cellCandidates.forEach(function (val) {
            var colors = colorMap.get(val);
            if (colors) {
              highlightNotes.push({
                position: position,
                backgroundColor: colors[0],
                textColor: colors[1],
                value: val
              });
            }
          });
        }

        /**
         * 将HEX颜色转换为RGB对象
         */;
        _proto.hexToRgb = function hexToRgb(hex) {
          var r = parseInt(hex.substring(1, 3), 16);
          var g = parseInt(hex.substring(3, 5), 16);
          var b = parseInt(hex.substring(5, 7), 16);
          return {
            r: r,
            g: g,
            b: b
          };
        }

        /**
         * 计算两种颜色的对比度比率
         */;
        _proto.calculateContrastRatio = function calculateContrastRatio(bgBrightness, textBrightness) {
          var L1 = Math.max(bgBrightness, textBrightness) / 255;
          var L2 = Math.min(bgBrightness, textBrightness) / 255;
          return (L1 + 0.05) / (L2 + 0.05);
        }

        /**
         * 优化的HSL转HEX方法
         */;
        _proto.hslToHex = function hslToHex(h, s, l) {
          l /= 100;
          s /= 100;
          var c = (1 - Math.abs(2 * l - 1)) * s;
          var x = c * (1 - Math.abs(h / 60 % 2 - 1));
          var m = l - c / 2;
          var r = 0,
            g = 0,
            b = 0;
          if (h >= 0 && h < 60) {
            r = c;
            g = x;
            b = 0;
          } else if (h >= 60 && h < 120) {
            r = x;
            g = c;
            b = 0;
          } else if (h >= 120 && h < 180) {
            r = 0;
            g = c;
            b = x;
          } else if (h >= 180 && h < 240) {
            r = 0;
            g = x;
            b = c;
          } else if (h >= 240 && h < 300) {
            r = x;
            g = 0;
            b = c;
          } else {
            r = c;
            g = 0;
            b = x;
          }
          r = Math.round((r + m) * 255);
          g = Math.round((g + m) * 255);
          b = Math.round((b + m) * 255);
          return "#" + r.toString(16).padStart(2, '0') + g.toString(16).padStart(2, '0') + b.toString(16).padStart(2, '0');
        };
        _proto.getHighlightNoteColor = function getHighlightNoteColor() {
          var MAX_ATTEMPTS = 10; // 最大尝试次数，避免无限循环
          var attempts = 0;
          while (attempts < MAX_ATTEMPTS) {
            // 生成候选颜色
            var _this$generateColorPa = this.generateColorPair(),
              bgColor = _this$generateColorPa[0],
              textColor = _this$generateColorPa[1];

            // 检查颜色是否已使用
            if (!this.usedColors.has(bgColor)) {
              this.usedColors.add(bgColor);
              return [bgColor, textColor];
            }
            attempts++;
          }

          // 如果尝试多次仍无法生成新颜色，返回默认高对比度组合
          return ['#FF0000', '#FFFFFF'];
        }

        /**
        * 生成单个高对比度颜色对
        */;
        _proto.generateColorPair = function generateColorPair() {
          // 使用黄金角近似算法生成分布均匀的色相
          var goldenAngle = 137.508;
          var hue = this.usedColors.size * goldenAngle % 360;

          // 保持高饱和度和中等亮度
          var saturation = 70 + Math.floor(Math.random() * 30);
          var lightness = 60 + Math.floor(Math.random() * 30);
          var bgColor = this.hslToHex(hue, saturation, lightness);

          // 计算亮度并确定文字颜色
          var brightness = this.calculateBrightness(bgColor);
          var textColor = brightness < 150 ? '#FFFFFF' : '#000000';

          // 确保满足WCAG AA对比度标准
          if (this.calculateContrastRatio(brightness, textColor === '#FFFFFF' ? 255 : 0) < 4.5) {
            return brightness < 150 ? [bgColor, '#FFFFFF'] : [bgColor, '#000000'];
          }
          return [bgColor, textColor];
        }

        /**
         * 计算颜色的感知亮度
         */;
        _proto.calculateBrightness = function calculateBrightness(hexColor) {
          var rgb = this.hexToRgb(hexColor);
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        }

        /**
         * 重置已使用颜色记录
         */;
        _proto.resetColorHistory = function resetColorHistory() {
          this.usedColors.clear();
        };
        _createClass(XYZWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("XYZWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("XYZWingStrategy.description");
          }
        }]);
        return XYZWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/YWingStrategy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HintConfig.ts', './SolveTypes.ts', './BaseStrategy.ts', './SolverUtils.ts', './Oops.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, HighlightConfig, BLANK_CHAR, BaseStrategy, SolverUtils, oops;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HighlightConfig = module.HighlightConfig;
    }, function (module) {
      BLANK_CHAR = module.BLANK_CHAR;
    }, function (module) {
      BaseStrategy = module.BaseStrategy;
    }, function (module) {
      SolverUtils = module.SolverUtils;
    }, function (module) {
      oops = module.oops;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b62b3Uf9NM/Kzg+hfQ/BNV", "YWingStrategy", undefined);
      var YWingStrategy = exports('YWingStrategy', /*#__PURE__*/function (_BaseStrategy) {
        _inheritsLoose(YWingStrategy, _BaseStrategy);
        function YWingStrategy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseStrategy.call.apply(_BaseStrategy, [this].concat(args)) || this;
          _this.difficulty = 11;
          return _this;
        }
        var _proto = YWingStrategy.prototype;
        _proto.execute = function execute(board, candidates) {
          var result = this.checkYWing(board, candidates);
          if (result) {
            return this.createYWingSteps(board, candidates, result);
          }
          return null;
        };
        _proto.checkYWing = function checkYWing(board, candidates) {
          // 1. 找出所有二值单元格
          var biValueCells = [];
          for (var row = 0; row < 9; row++) {
            for (var col = 0; col < 9; col++) {
              if (board[row][col] === BLANK_CHAR && candidates[row][col].size === 2) {
                biValueCells.push({
                  row: row,
                  col: col
                });
              }
            }
          }
          console.log("biValueCells->", SolverUtils.getCombinations(biValueCells, 3));
          // 遍历二值单元格的三元组合
          for (var _iterator = _createForOfIteratorHelperLoose(SolverUtils.getCombinations(biValueCells, 3)), _step; !(_step = _iterator()).done;) {
            var _step$value = _step.value,
              cell1 = _step$value[0],
              cell2 = _step$value[1],
              cell3 = _step$value[2];
            // 获取排序后的候选数（确保AB/AC/BC角色判断准确）
            var result = this.detectYWingStructure(cell1, cell2, cell3, board, candidates);
            if (result) return result;
          }
          return null;
        };
        _proto.detectYWingStructure = function detectYWingStructure(cell1, cell2, cell3, board, candidates) {
          var cells = [cell1, cell2, cell3];
          var _ref = [[].concat(candidates[cell1.row][cell1.col]).sort(function (a, b) {
              return a - b;
            }), [].concat(candidates[cell2.row][cell2.col]).sort(function (a, b) {
              return a - b;
            }), [].concat(candidates[cell3.row][cell3.col]).sort(function (a, b) {
              return a - b;
            })],
            candA = _ref[0],
            candB = _ref[1],
            candC = _ref[2];
          if (cell1.row === 0 && cell1.col === 1 && cell2.row === 1 && cell2.col === 2 && cell3.row === 8 && cell3.col === 1) {
            console.log("1");
          }
          // 检查是否形成AB-AC-BC结构（关键修复点）
          var allValues = [].concat(new Set([].concat(candA, candB, candC)));
          if (allValues.length !== 3) return null;

          // 计算每个数字出现次数（关键修复：防止三个单元格有相同候选数）
          var valCounts = new Map();
          for (var _i = 0, _arr = [].concat(candA, candB, candC); _i < _arr.length; _i++) {
            var val = _arr[_i];
            valCounts.set(val, (valCounts.get(val) || 0) + 1);
          }
          if (![].concat(valCounts.values()).every(function (count) {
            return count === 2;
          })) return null;

          // 直接确定枢纽单元格（关键改进）
          var pivotIndex = [candA, candB, candC].findIndex(function (cand) {
            // 枢纽必须包含两个数字
            if (cand.length !== 2) return false;

            // 找出另外两个单元格的候选数
            var otherCands = [candA, candB, candC].filter(function (_, i) {
              return i !== [candA, candB, candC].indexOf(cand);
            });

            // 检查是否每个其他单元格都包含枢纽的一个数字
            return otherCands.every(function (other) {
              return other.some(function (val) {
                return cand.includes(val);
              });
            });
          });
          if (pivotIndex === -1) return null;
          var pivot = cells[pivotIndex];
          var wings = cells.filter(function (_, i) {
            return i !== pivotIndex;
          });

          // 验证位置关系
          if (!this.validateYWingPosition(pivot, wings)) return null;

          // 确定要消除的数字C（完全匹配图片说明）
          var pivotValues = candidates[pivot.row][pivot.col];
          var wing1 = wings[0],
            wing2 = wings[1];
          var wing1Values = candidates[wing1.row][wing1.col];
          var wing2Values = candidates[wing2.row][wing2.col];
          var C = allValues.find(function (v) {
            return !pivotValues.has(v) && wing1Values.has(v) && wing2Values.has(v);
          });

          // 获取受影响单元格
          var affectedCells = this.getSharedVisibleCells(wing1, wing2, board).filter(function (pos) {
            return candidates[pos.row][pos.col].has(C);
          });
          return affectedCells.length > 0 ? {
            pivot: pivot,
            wings: wings,
            valueToRemove: C,
            affectedCells: affectedCells
          } : null;
        }

        /**
         * 验证Y-Wing位置关系（完全匹配图片说明）
         */;
        _proto.validateYWingPosition = function validateYWingPosition(pivot, wings) {
          var wing1 = wings[0],
            wing2 = wings[1];

          // 枢纽必须与两翼都相连（行/列/宫）
          var isConnected = function isConnected(a, b) {
            return a.row === b.row || a.col === b.col || SolverUtils.getBoxIndex(a.row, a.col) === SolverUtils.getBoxIndex(b.row, b.col);
          };

          // 两翼之间不能相连（图片中的关键条件）
          return isConnected(pivot, wing1) && isConnected(pivot, wing2) && !isConnected(wing1, wing2);
        }

        /**
         * 获取两翼共同可见的单元格（匹配图片中的消除区域）
         */;
        _proto.getSharedVisibleCells = function getSharedVisibleCells(wing1, wing2, board) {
          var visible1 = this.getVisibleCells(wing1, board);
          var visible2 = this.getVisibleCells(wing2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        };
        _proto.createYWingSteps = function createYWingSteps(board, candidates, info) {
          return [this.createDiscoveryStep(board, candidates, info), this.createColorMappingStep(board, candidates, info), this.createMarkRemovalStep(board, candidates, info), this.executeRemovalStep(board, candidates, info)];
        }

        // 步骤1：发现阶段（展示所有关联区域）
        ;

        _proto.createDiscoveryStep = function createDiscoveryStep(board, candidates, _ref2) {
          var _this2 = this;
          var pivot = _ref2.pivot,
            wings = _ref2.wings,
            valueToRemove = _ref2.valueToRemove;
          var wing1 = wings[0],
            wing2 = wings[1];
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wing1.row][wing1.col]);
          var wing2Cands = [].concat(candidates[wing2.row][wing2.col]);

          // 获取所有关联区域（对应图片中的线条区域）
          var pivotArea = this.getVisibleCells(pivot, board); // 红色关联区
          var wing1Area = this.getVisibleCells(wing1, board); // 蓝色关联区
          var wing2Area = this.getVisibleCells(wing2, board); // 绿色关联区

          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("YWingStrategy.discoveryDes", {
              name: _this2.name,
              description: _this2.description
            });
          };
          return {
            technique: this.name,
            stepId: 1,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([pivotArea.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing2Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: pivot,
              backgroundColor: HighlightConfig.y_wingABCell.background,
              textColor: HighlightConfig.y_wingABCell.textColor,
              candidates: pivotCands
            }],
            // 蓝色翼区域（对应图片右下角Z）
            [{
              position: wing1,
              backgroundColor: HighlightConfig.y_wingACCell.background,
              textColor: HighlightConfig.y_wingACCell.textColor,
              candidates: wing1Cands
            }],
            // 另一个翼区域（根据图片扩展为双翼）
            [{
              position: wing2,
              backgroundColor: HighlightConfig.y_wingBCCell.background,
              textColor: HighlightConfig.y_wingBCCell.textColor,
              candidates: wing2Cands
            }]]),
            highlightNotes: [].concat(pivotCands.map(function (val) {
              return {
                position: pivot,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }), wing1Cands.map(function (val) {
              return {
                position: wings[0],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }), wing2Cands.map(function (val) {
              return {
                position: wings[1],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }))
          };
        }

        // 步骤2：着色映射（展示交叉区域）
        ;

        _proto.createColorMappingStep = function createColorMappingStep(board, candidates, _ref3) {
          var _this3 = this;
          var pivot = _ref3.pivot,
            wings = _ref3.wings,
            valueToRemove = _ref3.valueToRemove,
            affectedCells = _ref3.affectedCells;
          var wing1 = wings[0],
            wing2 = wings[1];
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wing1.row][wing1.col]);
          var wing2Cands = [].concat(candidates[wing2.row][wing2.col]);

          // 获取所有交叉区域
          var pivotWing1Intersect = this.getIntersectionCells(pivot, wing1, board);
          var pivotWing2Intersect = this.getIntersectionCells(pivot, wing2, board);
          var wing1Wing2Intersect = this.getIntersectionCells(wing1, wing2, board);
          var allIntersect = this.getTripleIntersection(pivot, wing1, wing2, board);
          var pivotArea = this.getVisibleCells(pivot, board); // 红色关联区
          var wing1Area = this.getVisibleCells(wing1, board); // 蓝色关联区
          var wing2Area = this.getVisibleCells(wing2, board); // 绿色关联区

          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("YWingStrategy.colorMappingDes", {
              name: _this3.name,
              pivotRow: pivot.row + 1,
              pivotCol: pivot.col + 1,
              pivotCandsStr: pivotCands.join(','),
              wings0Row: wings[0].row + 1,
              wings0Col: wings[0].col + 1,
              wing1CandsStr: wing1Cands.join(','),
              wings1Row: wings[1].row + 1,
              wings1Col: wings[1].col + 1,
              wing2CandsStr: wing2Cands.join(',')
            });
          };
          return {
            technique: this.name,
            stepId: 2,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([pivotArea.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingABCell.background,
                textColor: HighlightConfig.y_wingABCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingACCell.background,
                textColor: HighlightConfig.y_wingACCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing2Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingBCCell.background,
                textColor: HighlightConfig.y_wingBCCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), pivotWing1Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingAB_X_ACCell.background,
                textColor: HighlightConfig.y_wingAB_X_ACCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), pivotWing2Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingAB_X_BCCell.background,
                textColor: HighlightConfig.y_wingAB_X_BCCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Wing2Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingBC_X_ACCell.background,
                textColor: HighlightConfig.y_wingBC_X_ACCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: pivot,
              backgroundColor: HighlightConfig.y_wingABCell.background,
              textColor: HighlightConfig.y_wingABCell.textColor,
              candidates: pivotCands
            }],
            // 蓝色翼区域（对应图片右下角Z）
            [{
              position: wing1,
              backgroundColor: HighlightConfig.y_wingACCell.background,
              textColor: HighlightConfig.y_wingACCell.textColor,
              candidates: wing1Cands
            }],
            // 另一个翼区域（根据图片扩展为双翼）
            [{
              position: wing2,
              backgroundColor: HighlightConfig.y_wingBCCell.background,
              textColor: HighlightConfig.y_wingBCCell.textColor,
              candidates: wing2Cands
            }]]),
            highlightNotes: [].concat(pivotCands.map(function (val) {
              return {
                position: pivot,
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }), wing1Cands.map(function (val) {
              return {
                position: wings[0],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }), wing2Cands.map(function (val) {
              return {
                position: wings[1],
                backgroundColor: HighlightConfig.hintCell.background,
                textColor: HighlightConfig.hintCell.textColor,
                value: val
              };
            }))
          };
        }

        // 步骤3：标记待移除数字
        ;

        _proto.createMarkRemovalStep = function createMarkRemovalStep(board, candidates, _ref4) {
          var _this4 = this;
          var pivot = _ref4.pivot,
            wings = _ref4.wings,
            valueToRemove = _ref4.valueToRemove,
            affectedCells = _ref4.affectedCells;
          var wing1 = wings[0],
            wing2 = wings[1];
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wing1.row][wing1.col]);
          var wing2Cands = [].concat(candidates[wing2.row][wing2.col]);

          // 获取所有交叉区域
          var pivotWing1Intersect = this.getIntersectionCells(pivot, wing1, board);
          var pivotWing2Intersect = this.getIntersectionCells(pivot, wing2, board);
          var wing1Wing2Intersect = this.getIntersectionCells(wing1, wing2, board);
          var allIntersect = this.getTripleIntersection(pivot, wing1, wing2, board);
          var pivotArea = this.getVisibleCells(pivot, board); // 红色关联区
          var wing1Area = this.getVisibleCells(wing1, board); // 蓝色关联区
          var wing2Area = this.getVisibleCells(wing2, board); // 绿色关联区

          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("YWingStrategy.markRemovalDes", {
              name: _this4.name,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 3,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([pivotArea.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing2Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), pivotWing1Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), pivotWing2Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Wing2Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingBC_X_ACCell.background,
                textColor: HighlightConfig.y_wingBC_X_ACCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: pivot,
              backgroundColor: HighlightConfig.y_wingABCell.background,
              textColor: HighlightConfig.y_wingABCell.textColor,
              candidates: pivotCands
            }],
            // 蓝色翼区域（对应图片右下角Z）
            [{
              position: wing1,
              backgroundColor: HighlightConfig.y_wingACCell.background,
              textColor: HighlightConfig.y_wingACCell.textColor,
              candidates: wing1Cands
            }],
            // 另一个翼区域（根据图片扩展为双翼）
            [{
              position: wing2,
              backgroundColor: HighlightConfig.y_wingBCCell.background,
              textColor: HighlightConfig.y_wingBCCell.textColor,
              candidates: wing2Cands
            }]]),
            highlightNotes: [].concat(wing1Cands.filter(function (val) {
              return val === valueToRemove;
            }) // 只保留要消除的数字
            .map(function (val) {
              return {
                position: wings[0],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                value: val
              };
            }), wing2Cands.filter(function (val) {
              return val === valueToRemove;
            }) // 只保留要消除的数字
            .map(function (val) {
              return {
                position: wings[1],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                value: val
              };
            }), affectedCells.map(function (val) {
              return {
                position: val,
                backgroundColor: HighlightConfig.hintRemoveCell.background,
                textColor: HighlightConfig.hintRemoveCell.textColor,
                value: valueToRemove
              };
            }))
          };
        }

        // 步骤4：执行移除
        ;

        _proto.executeRemovalStep = function executeRemovalStep(board, candidates, _ref5) {
          var _this5 = this;
          var pivot = _ref5.pivot,
            wings = _ref5.wings,
            valueToRemove = _ref5.valueToRemove,
            affectedCells = _ref5.affectedCells;
          // 实际移除操作
          affectedCells.forEach(function (pos) {
            candidates[pos.row][pos.col]["delete"](valueToRemove);
          });
          var wing1 = wings[0],
            wing2 = wings[1];
          var pivotCands = [].concat(candidates[pivot.row][pivot.col]);
          var wing1Cands = [].concat(candidates[wing1.row][wing1.col]);
          var wing2Cands = [].concat(candidates[wing2.row][wing2.col]);

          // 获取所有交叉区域
          var pivotWing1Intersect = this.getIntersectionCells(pivot, wing1, board);
          var pivotWing2Intersect = this.getIntersectionCells(pivot, wing2, board);
          var wing1Wing2Intersect = this.getIntersectionCells(wing1, wing2, board);
          var allIntersect = this.getTripleIntersection(pivot, wing1, wing2, board);
          var pivotArea = this.getVisibleCells(pivot, board); // 红色关联区
          var wing1Area = this.getVisibleCells(wing1, board); // 蓝色关联区
          var wing2Area = this.getVisibleCells(wing2, board); // 绿色关联区

          var generateDescription = function generateDescription() {
            return oops.language.getLangByID("YWingStrategy.removalDes", {
              name: _this5.name,
              valueToRemove: valueToRemove
            });
          };
          return {
            technique: this.name,
            stepId: 4,
            position: pivot,
            value: 0,
            get description() {
              return generateDescription();
            },
            highlights: SolverUtils.createDeduplicatedHighlights([pivotArea.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing2Area.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), pivotWing1Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), pivotWing2Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.relatedArea.background,
                textColor: HighlightConfig.relatedArea.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), wing1Wing2Intersect.map(function (pos) {
              return {
                position: pos,
                backgroundColor: HighlightConfig.y_wingBC_X_ACCell.background,
                textColor: HighlightConfig.y_wingBC_X_ACCell.textColor,
                candidates: [].concat(candidates[pos.row][pos.col])
              };
            }), [{
              position: pivot,
              backgroundColor: HighlightConfig.y_wingABCell.background,
              textColor: HighlightConfig.y_wingABCell.textColor,
              candidates: pivotCands
            }],
            // 蓝色翼区域（对应图片右下角Z）
            [{
              position: wing1,
              backgroundColor: HighlightConfig.y_wingACCell.background,
              textColor: HighlightConfig.y_wingACCell.textColor,
              candidates: wing1Cands
            }],
            // 另一个翼区域（根据图片扩展为双翼）
            [{
              position: wing2,
              backgroundColor: HighlightConfig.y_wingBCCell.background,
              textColor: HighlightConfig.y_wingBCCell.textColor,
              candidates: wing2Cands
            }]]),
            highlightNotes: [].concat(wing1Cands.filter(function (val) {
              return val === valueToRemove;
            }) // 只保留要消除的数字
            .map(function (val) {
              return {
                position: wings[0],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                value: val
              };
            }), wing2Cands.filter(function (val) {
              return val === valueToRemove;
            }) // 只保留要消除的数字
            .map(function (val) {
              return {
                position: wings[1],
                backgroundColor: HighlightConfig.targetCell.background,
                textColor: HighlightConfig.targetCell.textColor,
                value: val
              };
            }))
          };
        }

        // 在YWingStrategy类中添加以下方法
        ;

        _proto.getIntersectionCells = function getIntersectionCells(cell1, cell2, board) {
          // 获取两个单元格的共同可见区域（对应图片中的交叉线条区域）
          var visible1 = this.getVisibleCells(cell1, board);
          var visible2 = this.getVisibleCells(cell2, board);
          return visible1.filter(function (pos1) {
            return visible2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        }

        // 同时需要确保存在getVisibleCells方法（图片中的线条区域计算）
        ;

        _proto.getVisibleCells = function getVisibleCells(cell, board) {
          var visible = [];

          // 1. 添加同行单元格（对应图片中的水平线条）
          for (var col = 0; col < 9; col++) {
            if (col !== cell.col) {
              visible.push({
                row: cell.row,
                col: col
              });
            }
          }

          // 2. 添加同列单元格（对应图片中的垂直线条）
          for (var row = 0; row < 9; row++) {
            if (row !== cell.row) {
              visible.push({
                row: row,
                col: cell.col
              });
            }
          }

          // 3. 添加同宫单元格（对应图片中的3x3粗线框）
          var boxStartRow = Math.floor(cell.row / 3) * 3;
          var boxStartCol = Math.floor(cell.col / 3) * 3;
          for (var r = 0; r < 3; r++) {
            for (var c = 0; c < 3; c++) {
              var _row = boxStartRow + r;
              var _col = boxStartCol + c;
              if (_row !== cell.row || _col !== cell.col) {
                visible.push({
                  row: _row,
                  col: _col
                });
              }
            }
          }
          return visible;
        }

        // 三色交叉区域计算（扩展图片中的双色交叉逻辑）
        ;

        _proto.getTripleIntersection = function getTripleIntersection(pivot, wing1, wing2, board) {
          var pivotWing1 = this.getIntersectionCells(pivot, wing1, board);
          var pivotWing2 = this.getIntersectionCells(pivot, wing2, board);
          return pivotWing1.filter(function (pos1) {
            return pivotWing2.some(function (pos2) {
              return pos1.row === pos2.row && pos1.col === pos2.col;
            });
          });
        };
        _createClass(YWingStrategy, [{
          key: "name",
          get: function get() {
            return oops.language.getLangByID("YWingStrategy.name");
          }
        }, {
          key: "description",
          get: function get() {
            return oops.language.getLangByID("YWingStrategy.description");
          }
        }]);
        return YWingStrategy;
      }(BaseStrategy));
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});